
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010904  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012e0  08010a94  08010a94  00020a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d74  08011d74  000301a8  2**0
                  CONTENTS
  4 .ARM          00000008  08011d74  08011d74  00021d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d7c  08011d7c  000301a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d7c  08011d7c  00021d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d80  08011d80  00021d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  08011d84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301a8  2**0
                  CONTENTS
 10 .bss          000052f4  200001a8  200001a8  000301a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000549c  2000549c  000301a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e4d6  00000000  00000000  0003021b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003fb9  00000000  00000000  0004e6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bb8  00000000  00000000  000526b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015cd  00000000  00000000  00054268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000254fd  00000000  00000000  00055835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020adb  00000000  00000000  0007ad32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e9831  00000000  00000000  0009b80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008010  00000000  00000000  00185040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0018d050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a8 	.word	0x200001a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010a7c 	.word	0x08010a7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ac 	.word	0x200001ac
 80001cc:	08010a7c 	.word	0x08010a7c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b970 	b.w	8000ef4 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	460d      	mov	r5, r1
 8000c34:	4604      	mov	r4, r0
 8000c36:	460f      	mov	r7, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14a      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4694      	mov	ip, r2
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0xe2>
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	b143      	cbz	r3, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	f1c3 0220 	rsb	r2, r3, #32
 8000c50:	409f      	lsls	r7, r3
 8000c52:	fa20 f202 	lsr.w	r2, r0, r2
 8000c56:	4317      	orrs	r7, r2
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5e:	fa1f f58c 	uxth.w	r5, ip
 8000c62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c66:	0c22      	lsrs	r2, r4, #16
 8000c68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c70:	fb01 f005 	mul.w	r0, r1, r5
 8000c74:	4290      	cmp	r0, r2
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x62>
 8000c78:	eb1c 0202 	adds.w	r2, ip, r2
 8000c7c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c80:	f080 811c 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000c84:	4290      	cmp	r0, r2
 8000c86:	f240 8119 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000c8a:	3902      	subs	r1, #2
 8000c8c:	4462      	add	r2, ip
 8000c8e:	1a12      	subs	r2, r2, r0
 8000c90:	b2a4      	uxth	r4, r4
 8000c92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x90>
 8000ca6:	eb1c 0404 	adds.w	r4, ip, r4
 8000caa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cae:	f080 8107 	bcs.w	8000ec0 <__udivmoddi4+0x294>
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	f240 8104 	bls.w	8000ec0 <__udivmoddi4+0x294>
 8000cb8:	4464      	add	r4, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11e      	cbz	r6, 8000cce <__udivmoddi4+0xa2>
 8000cc6:	40dc      	lsrs	r4, r3
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e9c6 4300 	strd	r4, r3, [r6]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0xbc>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80ed 	beq.w	8000eb6 <__udivmoddi4+0x28a>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce8:	fab3 f183 	clz	r1, r3
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d149      	bne.n	8000d84 <__udivmoddi4+0x158>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d302      	bcc.n	8000cfa <__udivmoddi4+0xce>
 8000cf4:	4282      	cmp	r2, r0
 8000cf6:	f200 80f8 	bhi.w	8000eea <__udivmoddi4+0x2be>
 8000cfa:	1a84      	subs	r4, r0, r2
 8000cfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000d00:	2001      	movs	r0, #1
 8000d02:	4617      	mov	r7, r2
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d0e2      	beq.n	8000cce <__udivmoddi4+0xa2>
 8000d08:	e9c6 4700 	strd	r4, r7, [r6]
 8000d0c:	e7df      	b.n	8000cce <__udivmoddi4+0xa2>
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xe6>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f382 	clz	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1c:	1a8a      	subs	r2, r1, r2
 8000d1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	2101      	movs	r1, #1
 8000d28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d30:	0c22      	lsrs	r2, r4, #16
 8000d32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d36:	fb0e f005 	mul.w	r0, lr, r5
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	f200 80cb 	bhi.w	8000ee4 <__udivmoddi4+0x2b8>
 8000d4e:	4645      	mov	r5, r8
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d58:	fb07 2210 	mls	r2, r7, r0, r2
 8000d5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d60:	fb0e fe00 	mul.w	lr, lr, r0
 8000d64:	45a6      	cmp	lr, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x14e>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d70:	d202      	bcs.n	8000d78 <__udivmoddi4+0x14c>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f200 80bb 	bhi.w	8000eee <__udivmoddi4+0x2c2>
 8000d78:	4610      	mov	r0, r2
 8000d7a:	eba4 040e 	sub.w	r4, r4, lr
 8000d7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d82:	e79f      	b.n	8000cc4 <__udivmoddi4+0x98>
 8000d84:	f1c1 0720 	rsb	r7, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d92:	fa05 f401 	lsl.w	r4, r5, r1
 8000d96:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9a:	40fd      	lsrs	r5, r7
 8000d9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dcc:	f080 8088 	bcs.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd0:	42a5      	cmp	r5, r4
 8000dd2:	f240 8085 	bls.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dda:	4464      	add	r4, ip
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	b29d      	uxth	r5, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dfc:	d26c      	bcs.n	8000ed8 <__udivmoddi4+0x2ac>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	d96a      	bls.n	8000ed8 <__udivmoddi4+0x2ac>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	4464      	add	r4, ip
 8000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	46c8      	mov	r8, r9
 8000e16:	46ae      	mov	lr, r5
 8000e18:	d356      	bcc.n	8000ec8 <__udivmoddi4+0x29c>
 8000e1a:	d053      	beq.n	8000ec4 <__udivmoddi4+0x298>
 8000e1c:	b156      	cbz	r6, 8000e34 <__udivmoddi4+0x208>
 8000e1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e22:	eb64 040e 	sbc.w	r4, r4, lr
 8000e26:	fa04 f707 	lsl.w	r7, r4, r7
 8000e2a:	40ca      	lsrs	r2, r1
 8000e2c:	40cc      	lsrs	r4, r1
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	e9c6 7400 	strd	r7, r4, [r6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	f1c3 0120 	rsb	r1, r3, #32
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	fa20 f201 	lsr.w	r2, r0, r1
 8000e48:	fa25 f101 	lsr.w	r1, r5, r1
 8000e4c:	409d      	lsls	r5, r3
 8000e4e:	432a      	orrs	r2, r5
 8000e50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e54:	fa1f fe8c 	uxth.w	lr, ip
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e60:	0c11      	lsrs	r1, r2, #16
 8000e62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e66:	fb00 f50e 	mul.w	r5, r0, lr
 8000e6a:	428d      	cmp	r5, r1
 8000e6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x258>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7a:	d22f      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d92d      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	1b49      	subs	r1, r1, r5
 8000e86:	b292      	uxth	r2, r2
 8000e88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	fb05 f10e 	mul.w	r1, r5, lr
 8000e98:	4291      	cmp	r1, r2
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x282>
 8000e9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea4:	d216      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d914      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000eaa:	3d02      	subs	r5, #2
 8000eac:	4462      	add	r2, ip
 8000eae:	1a52      	subs	r2, r2, r1
 8000eb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb4:	e738      	b.n	8000d28 <__udivmoddi4+0xfc>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e708      	b.n	8000cce <__udivmoddi4+0xa2>
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	e6e6      	b.n	8000c8e <__udivmoddi4+0x62>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	e6fb      	b.n	8000cbc <__udivmoddi4+0x90>
 8000ec4:	4548      	cmp	r0, r9
 8000ec6:	d2a9      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ecc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	e7a3      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	e7ea      	b.n	8000eae <__udivmoddi4+0x282>
 8000ed8:	462b      	mov	r3, r5
 8000eda:	e794      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000edc:	4640      	mov	r0, r8
 8000ede:	e7d1      	b.n	8000e84 <__udivmoddi4+0x258>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	e77b      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee4:	3d02      	subs	r5, #2
 8000ee6:	4462      	add	r2, ip
 8000ee8:	e732      	b.n	8000d50 <__udivmoddi4+0x124>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e70a      	b.n	8000d04 <__udivmoddi4+0xd8>
 8000eee:	4464      	add	r4, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e742      	b.n	8000d7a <__udivmoddi4+0x14e>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <_ICM20948_SelectUserBank>:
#define ICM20948_ENABLE_SENSORS 0x3F
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af04      	add	r7, sp, #16
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	460b      	mov	r3, r1
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	011b      	lsls	r3, r3, #4
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8000f14:	7afb      	ldrb	r3, [r7, #11]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <_ICM20948_SelectUserBank+0x26>
 8000f1a:	2368      	movs	r3, #104	; 0x68
 8000f1c:	e000      	b.n	8000f20 <_ICM20948_SelectUserBank+0x28>
 8000f1e:	2369      	movs	r3, #105	; 0x69
 8000f20:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 8000f22:	7dbb      	ldrb	r3, [r7, #22]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	b299      	uxth	r1, r3
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	f107 0315 	add.w	r3, r7, #21
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	227f      	movs	r2, #127	; 0x7f
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f007 faf5 	bl	800852c <HAL_I2C_Mem_Write>
 8000f42:	4603      	mov	r3, r0
 8000f44:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af04      	add	r7, sp, #16
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	4608      	mov	r0, r1
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4603      	mov	r3, r0
 8000f60:	70fb      	strb	r3, [r7, #3]
 8000f62:	460b      	mov	r3, r1
 8000f64:	70bb      	strb	r3, [r7, #2]
 8000f66:	4613      	mov	r3, r2
 8000f68:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <_ICM20948_WriteByte+0x28>
 8000f74:	2368      	movs	r3, #104	; 0x68
 8000f76:	e000      	b.n	8000f7a <_ICM20948_WriteByte+0x2a>
 8000f78:	2369      	movs	r3, #105	; 0x69
 8000f7a:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	b299      	uxth	r1, r3
 8000f84:	78bb      	ldrb	r3, [r7, #2]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	230a      	movs	r3, #10
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	1c7b      	adds	r3, r7, #1
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f007 fac8 	bl	800852c <HAL_I2C_Mem_Write>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <ICM20948_init>:
	}

	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity) {
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	70fb      	strb	r3, [r7, #3]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff97 	bl	8000ef8 <_ICM20948_SelectUserBank>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 8000fce:	78f9      	ldrb	r1, [r7, #3]
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	2206      	movs	r2, #6
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ffbb 	bl	8000f50 <_ICM20948_WriteByte>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 8000fde:	20c8      	movs	r0, #200	; 0xc8
 8000fe0:	f006 f8aa 	bl	8007138 <HAL_Delay>

	status = _ICM20948_WriteByte(
 8000fe4:	78f9      	ldrb	r1, [r7, #3]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	2206      	movs	r2, #6
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffb0 	bl	8000f50 <_ICM20948_WriteByte>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); */ // For some reason this needs to be tested

	// disable accelerometer
	status = _ICM20948_WriteByte(
 8000ff4:	78f9      	ldrb	r1, [r7, #3]
 8000ff6:	2338      	movs	r3, #56	; 0x38
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffa8 	bl	8000f50 <_ICM20948_WriteByte>
 8001000:	4603      	mov	r3, r0
 8001002:	73fb      	strb	r3, [r7, #15]
				hi2c,
				selectI2cAddress,
				ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
				0x38);

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	2202      	movs	r2, #2
 8001008:	4619      	mov	r1, r3
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff74 	bl	8000ef8 <_ICM20948_SelectUserBank>
 8001010:	4603      	mov	r3, r0
 8001012:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			3 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << BIT_1|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8001014:	78bb      	ldrb	r3, [r7, #2]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	b25b      	sxtb	r3, r3
 800101a:	f043 0319 	orr.w	r3, r3, #25
 800101e:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8001020:	b2db      	uxtb	r3, r3
 8001022:	78f9      	ldrb	r1, [r7, #3]
 8001024:	2201      	movs	r2, #1
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ff92 	bl	8000f50 <_ICM20948_WriteByte>
 800102c:	4603      	mov	r3, r0
 800102e:	73fb      	strb	r3, [r7, #15]
//			hi2c,
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
//			0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 8001030:	78f9      	ldrb	r1, [r7, #3]
 8001032:	2304      	movs	r3, #4
 8001034:	2200      	movs	r2, #0
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ff8a 	bl	8000f50 <_ICM20948_WriteByte>
 800103c:	4603      	mov	r3, r0
 800103e:	73fb      	strb	r3, [r7, #15]
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
//			0x04); // Don't understand how this works


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8001040:	78fb      	ldrb	r3, [r7, #3]
 8001042:	2200      	movs	r2, #0
 8001044:	4619      	mov	r1, r3
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ff56 	bl	8000ef8 <_ICM20948_SelectUserBank>
 800104c:	4603      	mov	r3, r0
 800104e:	73fb      	strb	r3, [r7, #15]
//
	status = _ICM20948_WriteByte(
 8001050:	78f9      	ldrb	r1, [r7, #3]
 8001052:	2302      	movs	r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff7a 	bl	8000f50 <_ICM20948_WriteByte>
 800105c:	4603      	mov	r3, r0
 800105e:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

//	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106e:	f005 fff1 	bl	8007054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001072:	f000 f973 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001076:	f000 fd51 	bl	8001b1c <MX_GPIO_Init>
  MX_TIM8_Init();
 800107a:	f000 fc7b 	bl	8001974 <MX_TIM8_Init>
  MX_TIM6_Init();
 800107e:	f000 fc43 	bl	8001908 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001082:	f000 fb3b 	bl	80016fc <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001086:	f000 fd1f 	bl	8001ac8 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800108a:	f000 fa97 	bl	80015bc <MX_TIM1_Init>
  MX_TIM3_Init();
 800108e:	f000 fb89 	bl	80017a4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001092:	f000 fa65 	bl	8001560 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001096:	f000 f9bf 	bl	8001418 <MX_ADC1_Init>
  MX_TIM4_Init();
 800109a:	f000 fbd7 	bl	800184c <MX_TIM4_Init>
  MX_ADC2_Init();
 800109e:	f000 fa0d 	bl	80014bc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80010a2:	f005 fb73 	bl	800678c <OLED_Init>
  ICM20948_init(&hi2c1,0,GYRO_FULL_SCALE_2000DPS);
 80010a6:	2203      	movs	r2, #3
 80010a8:	2100      	movs	r1, #0
 80010aa:	4870      	ldr	r0, [pc, #448]	; (800126c <main+0x204>)
 80010ac:	f7ff ff7d 	bl	8000faa <ICM20948_init>

  // initialise command queue
  curCmd.index = 100;
 80010b0:	4b6f      	ldr	r3, [pc, #444]	; (8001270 <main+0x208>)
 80010b2:	2264      	movs	r2, #100	; 0x64
 80010b4:	701a      	strb	r2, [r3, #0]
  curCmd.val = 0;
 80010b6:	4b6e      	ldr	r3, [pc, #440]	; (8001270 <main+0x208>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	805a      	strh	r2, [r3, #2]

  cQueue.head = 0;
 80010bc:	4b6d      	ldr	r3, [pc, #436]	; (8001274 <main+0x20c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
  cQueue.tail = 0;
 80010c2:	4b6c      	ldr	r3, [pc, #432]	; (8001274 <main+0x20c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	705a      	strb	r2, [r3, #1]
  cQueue.size = CMD_BUFFER_SIZE;
 80010c8:	4b6b      	ldr	r3, [pc, #428]	; (8001278 <main+0x210>)
 80010ca:	781a      	ldrb	r2, [r3, #0]
 80010cc:	4b69      	ldr	r3, [pc, #420]	; (8001274 <main+0x20c>)
 80010ce:	709a      	strb	r2, [r3, #2]
  for (int i = 0; i < CMD_BUFFER_SIZE;i++) {
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	e00c      	b.n	80010f0 <main+0x88>
	  Command cmd;
	  cmd.index = 100;
 80010d6:	2364      	movs	r3, #100	; 0x64
 80010d8:	703b      	strb	r3, [r7, #0]
	  cmd.val = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	807b      	strh	r3, [r7, #2]
	  cQueue.buffer[i] = cmd;
 80010de:	4a65      	ldr	r2, [pc, #404]	; (8001274 <main+0x20c>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < CMD_BUFFER_SIZE;i++) {
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3301      	adds	r3, #1
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	4b61      	ldr	r3, [pc, #388]	; (8001278 <main+0x210>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4293      	cmp	r3, r2
 80010fa:	dbec      	blt.n	80010d6 <main+0x6e>
  }

  PIDConfigInit(&pidTSlow, 2.5, 0.0,0.8);
 80010fc:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 800127c <main+0x214>
 8001100:	eddf 0a5f 	vldr	s1, [pc, #380]	; 8001280 <main+0x218>
 8001104:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8001108:	485e      	ldr	r0, [pc, #376]	; (8001284 <main+0x21c>)
 800110a:	f001 fa6b 	bl	80025e4 <PIDConfigInit>
  PIDConfigInit(&pidSlow, 2.5, 0.0,0);
 800110e:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 8001280 <main+0x218>
 8001112:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8001280 <main+0x218>
 8001116:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 800111a:	485b      	ldr	r0, [pc, #364]	; (8001288 <main+0x220>)
 800111c:	f001 fa62 	bl	80025e4 <PIDConfigInit>
  PIDConfigInit(&pidFast, 1.5, 0.0,0);
 8001120:	ed9f 1a57 	vldr	s2, [pc, #348]	; 8001280 <main+0x218>
 8001124:	eddf 0a56 	vldr	s1, [pc, #344]	; 8001280 <main+0x218>
 8001128:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800112c:	4857      	ldr	r0, [pc, #348]	; (800128c <main+0x224>)
 800112e:	f001 fa59 	bl	80025e4 <PIDConfigInit>
//  PIDConfigInit(&pidFast, 0.75, 0.0,0);

  	HAL_UART_Receive_IT(&huart3, aRxBuffer,RX_BUFFER_SIZE);
 8001132:	4b57      	ldr	r3, [pc, #348]	; (8001290 <main+0x228>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b29b      	uxth	r3, r3
 8001138:	461a      	mov	r2, r3
 800113a:	4956      	ldr	r1, [pc, #344]	; (8001294 <main+0x22c>)
 800113c:	4856      	ldr	r0, [pc, #344]	; (8001298 <main+0x230>)
 800113e:	f00a fb50 	bl	800b7e2 <HAL_UART_Receive_IT>

	// servo motor turn
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001142:	210c      	movs	r1, #12
 8001144:	4855      	ldr	r0, [pc, #340]	; (800129c <main+0x234>)
 8001146:	f008 fd95 	bl	8009c74 <HAL_TIM_PWM_Start>
	// motor backwheel move
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800114a:	2100      	movs	r1, #0
 800114c:	4854      	ldr	r0, [pc, #336]	; (80012a0 <main+0x238>)
 800114e:	f008 fd91 	bl	8009c74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001152:	2104      	movs	r1, #4
 8001154:	4852      	ldr	r0, [pc, #328]	; (80012a0 <main+0x238>)
 8001156:	f008 fd8d 	bl	8009c74 <HAL_TIM_PWM_Start>
	// encoder monitor speed and distance
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800115a:	213c      	movs	r1, #60	; 0x3c
 800115c:	4851      	ldr	r0, [pc, #324]	; (80012a4 <main+0x23c>)
 800115e:	f009 f91d 	bl	800a39c <HAL_TIM_Encoder_Start>
//	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);

	//adjust steering
	__RESET_SERVO_TURN(&htim1);
 8001162:	4b4e      	ldr	r3, [pc, #312]	; (800129c <main+0x234>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	224a      	movs	r2, #74	; 0x4a
 8001168:	641a      	str	r2, [r3, #64]	; 0x40
 800116a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800116e:	f005 ffe3 	bl	8007138 <HAL_Delay>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001172:	f00b fb03 	bl	800c77c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of oledTask */
  oledTaskHandle = osThreadNew(runOledTask, NULL, &oledTask_attributes);
 8001176:	4a4c      	ldr	r2, [pc, #304]	; (80012a8 <main+0x240>)
 8001178:	2100      	movs	r1, #0
 800117a:	484c      	ldr	r0, [pc, #304]	; (80012ac <main+0x244>)
 800117c:	f00b fb48 	bl	800c810 <osThreadNew>
 8001180:	4603      	mov	r3, r0
 8001182:	4a4b      	ldr	r2, [pc, #300]	; (80012b0 <main+0x248>)
 8001184:	6013      	str	r3, [r2, #0]

  /* creation of commandTask */
  commandTaskHandle = osThreadNew(runCmdTask, NULL, &commandTask_attributes);
 8001186:	4a4b      	ldr	r2, [pc, #300]	; (80012b4 <main+0x24c>)
 8001188:	2100      	movs	r1, #0
 800118a:	484b      	ldr	r0, [pc, #300]	; (80012b8 <main+0x250>)
 800118c:	f00b fb40 	bl	800c810 <osThreadNew>
 8001190:	4603      	mov	r3, r0
 8001192:	4a4a      	ldr	r2, [pc, #296]	; (80012bc <main+0x254>)
 8001194:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(runADCTask, NULL, &ADCTask_attributes);
 8001196:	4a4a      	ldr	r2, [pc, #296]	; (80012c0 <main+0x258>)
 8001198:	2100      	movs	r1, #0
 800119a:	484a      	ldr	r0, [pc, #296]	; (80012c4 <main+0x25c>)
 800119c:	f00b fb38 	bl	800c810 <osThreadNew>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a49      	ldr	r2, [pc, #292]	; (80012c8 <main+0x260>)
 80011a4:	6013      	str	r3, [r2, #0]

  /* creation of moveDistTask */
  moveDistTaskHandle = osThreadNew(runMoveDistTask, NULL, &moveDistTask_attributes);
 80011a6:	4a49      	ldr	r2, [pc, #292]	; (80012cc <main+0x264>)
 80011a8:	2100      	movs	r1, #0
 80011aa:	4849      	ldr	r0, [pc, #292]	; (80012d0 <main+0x268>)
 80011ac:	f00b fb30 	bl	800c810 <osThreadNew>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a48      	ldr	r2, [pc, #288]	; (80012d4 <main+0x26c>)
 80011b4:	6013      	str	r3, [r2, #0]

  /* creation of fastestPathTask */
  fastestPathTaskHandle = osThreadNew(runFastestPathTask, NULL, &fastestPathTask_attributes);
 80011b6:	4a48      	ldr	r2, [pc, #288]	; (80012d8 <main+0x270>)
 80011b8:	2100      	movs	r1, #0
 80011ba:	4848      	ldr	r0, [pc, #288]	; (80012dc <main+0x274>)
 80011bc:	f00b fb28 	bl	800c810 <osThreadNew>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a47      	ldr	r2, [pc, #284]	; (80012e0 <main+0x278>)
 80011c4:	6013      	str	r3, [r2, #0]

  /* creation of buzzerTask */
  buzzerTaskHandle = osThreadNew(runBuzzerTask, NULL, &buzzerTask_attributes);
 80011c6:	4a47      	ldr	r2, [pc, #284]	; (80012e4 <main+0x27c>)
 80011c8:	2100      	movs	r1, #0
 80011ca:	4847      	ldr	r0, [pc, #284]	; (80012e8 <main+0x280>)
 80011cc:	f00b fb20 	bl	800c810 <osThreadNew>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4a46      	ldr	r2, [pc, #280]	; (80012ec <main+0x284>)
 80011d4:	6013      	str	r3, [r2, #0]

  /* creation of FLTask */
  FLTaskHandle = osThreadNew(runFLTask, NULL, &FLTask_attributes);
 80011d6:	4a46      	ldr	r2, [pc, #280]	; (80012f0 <main+0x288>)
 80011d8:	2100      	movs	r1, #0
 80011da:	4846      	ldr	r0, [pc, #280]	; (80012f4 <main+0x28c>)
 80011dc:	f00b fb18 	bl	800c810 <osThreadNew>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a45      	ldr	r2, [pc, #276]	; (80012f8 <main+0x290>)
 80011e4:	6013      	str	r3, [r2, #0]

  /* creation of FRTask */
  FRTaskHandle = osThreadNew(runFRTask, NULL, &FRTask_attributes);
 80011e6:	4a45      	ldr	r2, [pc, #276]	; (80012fc <main+0x294>)
 80011e8:	2100      	movs	r1, #0
 80011ea:	4845      	ldr	r0, [pc, #276]	; (8001300 <main+0x298>)
 80011ec:	f00b fb10 	bl	800c810 <osThreadNew>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a44      	ldr	r2, [pc, #272]	; (8001304 <main+0x29c>)
 80011f4:	6013      	str	r3, [r2, #0]

  /* creation of BLTask */
  BLTaskHandle = osThreadNew(runBLTask, NULL, &BLTask_attributes);
 80011f6:	4a44      	ldr	r2, [pc, #272]	; (8001308 <main+0x2a0>)
 80011f8:	2100      	movs	r1, #0
 80011fa:	4844      	ldr	r0, [pc, #272]	; (800130c <main+0x2a4>)
 80011fc:	f00b fb08 	bl	800c810 <osThreadNew>
 8001200:	4603      	mov	r3, r0
 8001202:	4a43      	ldr	r2, [pc, #268]	; (8001310 <main+0x2a8>)
 8001204:	6013      	str	r3, [r2, #0]

  /* creation of BRTask */
  BRTaskHandle = osThreadNew(runBRTask, NULL, &BRTask_attributes);
 8001206:	4a43      	ldr	r2, [pc, #268]	; (8001314 <main+0x2ac>)
 8001208:	2100      	movs	r1, #0
 800120a:	4843      	ldr	r0, [pc, #268]	; (8001318 <main+0x2b0>)
 800120c:	f00b fb00 	bl	800c810 <osThreadNew>
 8001210:	4603      	mov	r3, r0
 8001212:	4a42      	ldr	r2, [pc, #264]	; (800131c <main+0x2b4>)
 8001214:	6013      	str	r3, [r2, #0]

  /* creation of fastestPathV2 */
  fastestPathV2Handle = osThreadNew(runFastestPathTask_V2, NULL, &fastestPathV2_attributes);
 8001216:	4a42      	ldr	r2, [pc, #264]	; (8001320 <main+0x2b8>)
 8001218:	2100      	movs	r1, #0
 800121a:	4842      	ldr	r0, [pc, #264]	; (8001324 <main+0x2bc>)
 800121c:	f00b faf8 	bl	800c810 <osThreadNew>
 8001220:	4603      	mov	r3, r0
 8001222:	4a41      	ldr	r2, [pc, #260]	; (8001328 <main+0x2c0>)
 8001224:	6013      	str	r3, [r2, #0]

  /* creation of batteryTask */
  batteryTaskHandle = osThreadNew(runBatteryTask, NULL, &batteryTask_attributes);
 8001226:	4a41      	ldr	r2, [pc, #260]	; (800132c <main+0x2c4>)
 8001228:	2100      	movs	r1, #0
 800122a:	4841      	ldr	r0, [pc, #260]	; (8001330 <main+0x2c8>)
 800122c:	f00b faf0 	bl	800c810 <osThreadNew>
 8001230:	4603      	mov	r3, r0
 8001232:	4a40      	ldr	r2, [pc, #256]	; (8001334 <main+0x2cc>)
 8001234:	6013      	str	r3, [r2, #0]

  /* creation of moveDistObsTask */
  moveDistObsTaskHandle = osThreadNew(runMoveDistObsTask, NULL, &moveDistObsTask_attributes);
 8001236:	4a40      	ldr	r2, [pc, #256]	; (8001338 <main+0x2d0>)
 8001238:	2100      	movs	r1, #0
 800123a:	4840      	ldr	r0, [pc, #256]	; (800133c <main+0x2d4>)
 800123c:	f00b fae8 	bl	800c810 <osThreadNew>
 8001240:	4603      	mov	r3, r0
 8001242:	4a3f      	ldr	r2, [pc, #252]	; (8001340 <main+0x2d8>)
 8001244:	6013      	str	r3, [r2, #0]

  SensorTaskHandle = osThreadNew(sensorTask, NULL, &SensorTask_attributes);
 8001246:	4a3f      	ldr	r2, [pc, #252]	; (8001344 <main+0x2dc>)
 8001248:	2100      	movs	r1, #0
 800124a:	483f      	ldr	r0, [pc, #252]	; (8001348 <main+0x2e0>)
 800124c:	f00b fae0 	bl	800c810 <osThreadNew>
 8001250:	4603      	mov	r3, r0
 8001252:	4a3e      	ldr	r2, [pc, #248]	; (800134c <main+0x2e4>)
 8001254:	6013      	str	r3, [r2, #0]

  IRTaskHandle = osThreadNew(StartIRTask, NULL, &IRTask_attributes);
 8001256:	4a3e      	ldr	r2, [pc, #248]	; (8001350 <main+0x2e8>)
 8001258:	2100      	movs	r1, #0
 800125a:	483e      	ldr	r0, [pc, #248]	; (8001354 <main+0x2ec>)
 800125c:	f00b fad8 	bl	800c810 <osThreadNew>
 8001260:	4603      	mov	r3, r0
 8001262:	4a3d      	ldr	r2, [pc, #244]	; (8001358 <main+0x2f0>)
 8001264:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001266:	f00b faad 	bl	800c7c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800126a:	e7fe      	b.n	800126a <main+0x202>
 800126c:	20000254 	.word	0x20000254
 8001270:	20000518 	.word	0x20000518
 8001274:	200004e4 	.word	0x200004e4
 8001278:	20000001 	.word	0x20000001
 800127c:	3f4ccccd 	.word	0x3f4ccccd
 8001280:	00000000 	.word	0x00000000
 8001284:	20000574 	.word	0x20000574
 8001288:	20000560 	.word	0x20000560
 800128c:	20000588 	.word	0x20000588
 8001290:	20000000 	.word	0x20000000
 8001294:	200004d8 	.word	0x200004d8
 8001298:	20000458 	.word	0x20000458
 800129c:	200002a8 	.word	0x200002a8
 80012a0:	20000410 	.word	0x20000410
 80012a4:	200002f0 	.word	0x200002f0
 80012a8:	08010bb8 	.word	0x08010bb8
 80012ac:	08003df1 	.word	0x08003df1
 80012b0:	2000049c 	.word	0x2000049c
 80012b4:	08010bdc 	.word	0x08010bdc
 80012b8:	08003ea1 	.word	0x08003ea1
 80012bc:	200004a0 	.word	0x200004a0
 80012c0:	08010c00 	.word	0x08010c00
 80012c4:	080043e5 	.word	0x080043e5
 80012c8:	200004a4 	.word	0x200004a4
 80012cc:	08010c24 	.word	0x08010c24
 80012d0:	080044c5 	.word	0x080044c5
 80012d4:	200004a8 	.word	0x200004a8
 80012d8:	08010c48 	.word	0x08010c48
 80012dc:	08004739 	.word	0x08004739
 80012e0:	200004ac 	.word	0x200004ac
 80012e4:	08010c6c 	.word	0x08010c6c
 80012e8:	08004c89 	.word	0x08004c89
 80012ec:	200004b0 	.word	0x200004b0
 80012f0:	08010c90 	.word	0x08010c90
 80012f4:	08004d85 	.word	0x08004d85
 80012f8:	200004b4 	.word	0x200004b4
 80012fc:	08010cb4 	.word	0x08010cb4
 8001300:	080051b9 	.word	0x080051b9
 8001304:	200004b8 	.word	0x200004b8
 8001308:	08010cd8 	.word	0x08010cd8
 800130c:	080055f1 	.word	0x080055f1
 8001310:	200004bc 	.word	0x200004bc
 8001314:	08010cfc 	.word	0x08010cfc
 8001318:	08005a29 	.word	0x08005a29
 800131c:	200004c0 	.word	0x200004c0
 8001320:	08010d20 	.word	0x08010d20
 8001324:	08005e61 	.word	0x08005e61
 8001328:	200004c4 	.word	0x200004c4
 800132c:	08010d44 	.word	0x08010d44
 8001330:	080062c9 	.word	0x080062c9
 8001334:	200004c8 	.word	0x200004c8
 8001338:	08010d68 	.word	0x08010d68
 800133c:	08006345 	.word	0x08006345
 8001340:	200004cc 	.word	0x200004cc
 8001344:	08010d8c 	.word	0x08010d8c
 8001348:	080061c1 	.word	0x080061c1
 800134c:	200004d0 	.word	0x200004d0
 8001350:	08010db0 	.word	0x08010db0
 8001354:	08002505 	.word	0x08002505
 8001358:	200004d4 	.word	0x200004d4

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b094      	sub	sp, #80	; 0x50
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	2230      	movs	r2, #48	; 0x30
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f00e f8b2 	bl	800f4d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <SystemClock_Config+0xb4>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a21      	ldr	r2, [pc, #132]	; (8001410 <SystemClock_Config+0xb4>)
 800138a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <SystemClock_Config+0xb4>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <SystemClock_Config+0xb8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <SystemClock_Config+0xb8>)
 80013a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <SystemClock_Config+0xb8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b8:	2302      	movs	r3, #2
 80013ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013bc:	2301      	movs	r3, #1
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c0:	2310      	movs	r3, #16
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c8:	f107 0320 	add.w	r3, r7, #32
 80013cc:	4618      	mov	r0, r3
 80013ce:	f007 ff51 	bl	8009274 <HAL_RCC_OscConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80013d8:	f005 f82c 	bl	8006434 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013dc:	230f      	movs	r3, #15
 80013de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f008 f9b4 	bl	8009764 <HAL_RCC_ClockConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001402:	f005 f817 	bl	8006434 <Error_Handler>
  }
}
 8001406:	bf00      	nop
 8001408:	3750      	adds	r7, #80	; 0x50
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	40007000 	.word	0x40007000

08001418 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800141e:	463b      	mov	r3, r7
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <MX_ADC1_Init+0x98>)
 800142c:	4a21      	ldr	r2, [pc, #132]	; (80014b4 <MX_ADC1_Init+0x9c>)
 800142e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <MX_ADC1_Init+0x98>)
 8001432:	2200      	movs	r2, #0
 8001434:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001436:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <MX_ADC1_Init+0x98>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <MX_ADC1_Init+0x98>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MX_ADC1_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <MX_ADC1_Init+0x98>)
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <MX_ADC1_Init+0x98>)
 8001452:	2200      	movs	r2, #0
 8001454:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001456:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <MX_ADC1_Init+0x98>)
 8001458:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <MX_ADC1_Init+0xa0>)
 800145a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <MX_ADC1_Init+0x98>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <MX_ADC1_Init+0x98>)
 8001464:	2201      	movs	r2, #1
 8001466:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_ADC1_Init+0x98>)
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MX_ADC1_Init+0x98>)
 8001472:	2201      	movs	r2, #1
 8001474:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001476:	480e      	ldr	r0, [pc, #56]	; (80014b0 <MX_ADC1_Init+0x98>)
 8001478:	f005 fe82 	bl	8007180 <HAL_ADC_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001482:	f004 ffd7 	bl	8006434 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001486:	230b      	movs	r3, #11
 8001488:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800148a:	2301      	movs	r3, #1
 800148c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <MX_ADC1_Init+0x98>)
 8001498:	f006 f982 	bl	80077a0 <HAL_ADC_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80014a2:	f004 ffc7 	bl	8006434 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200001c4 	.word	0x200001c4
 80014b4:	40012000 	.word	0x40012000
 80014b8:	0f000001 	.word	0x0f000001

080014bc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014c2:	463b      	mov	r3, r7
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80014ce:	4b21      	ldr	r3, [pc, #132]	; (8001554 <MX_ADC2_Init+0x98>)
 80014d0:	4a21      	ldr	r2, [pc, #132]	; (8001558 <MX_ADC2_Init+0x9c>)
 80014d2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014d4:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <MX_ADC2_Init+0x98>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80014da:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <MX_ADC2_Init+0x98>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <MX_ADC2_Init+0x98>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80014e6:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <MX_ADC2_Init+0x98>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <MX_ADC2_Init+0x98>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <MX_ADC2_Init+0x98>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <MX_ADC2_Init+0x98>)
 80014fc:	4a17      	ldr	r2, [pc, #92]	; (800155c <MX_ADC2_Init+0xa0>)
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <MX_ADC2_Init+0x98>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <MX_ADC2_Init+0x98>)
 8001508:	2201      	movs	r2, #1
 800150a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_ADC2_Init+0x98>)
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <MX_ADC2_Init+0x98>)
 8001516:	2201      	movs	r2, #1
 8001518:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800151a:	480e      	ldr	r0, [pc, #56]	; (8001554 <MX_ADC2_Init+0x98>)
 800151c:	f005 fe30 	bl	8007180 <HAL_ADC_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001526:	f004 ff85 	bl	8006434 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800152a:	230e      	movs	r3, #14
 800152c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800152e:	2301      	movs	r3, #1
 8001530:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001536:	463b      	mov	r3, r7
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <MX_ADC2_Init+0x98>)
 800153c:	f006 f930 	bl	80077a0 <HAL_ADC_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001546:	f004 ff75 	bl	8006434 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000020c 	.word	0x2000020c
 8001558:	40012100 	.word	0x40012100
 800155c:	0f000001 	.word	0x0f000001

08001560 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <MX_I2C1_Init+0x50>)
 8001566:	4a13      	ldr	r2, [pc, #76]	; (80015b4 <MX_I2C1_Init+0x54>)
 8001568:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_I2C1_Init+0x50>)
 800156c:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <MX_I2C1_Init+0x58>)
 800156e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <MX_I2C1_Init+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_I2C1_Init+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_I2C1_Init+0x50>)
 800157e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001582:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <MX_I2C1_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_I2C1_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <MX_I2C1_Init+0x50>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_I2C1_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <MX_I2C1_Init+0x50>)
 800159e:	f006 fe81 	bl	80082a4 <HAL_I2C_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a8:	f004 ff44 	bl	8006434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000254 	.word	0x20000254
 80015b4:	40005400 	.word	0x40005400
 80015b8:	000186a0 	.word	0x000186a0

080015bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b096      	sub	sp, #88	; 0x58
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]
 80015ea:	615a      	str	r2, [r3, #20]
 80015ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2220      	movs	r2, #32
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f00d ff6d 	bl	800f4d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015fa:	4b3e      	ldr	r3, [pc, #248]	; (80016f4 <MX_TIM1_Init+0x138>)
 80015fc:	4a3e      	ldr	r2, [pc, #248]	; (80016f8 <MX_TIM1_Init+0x13c>)
 80015fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320;
 8001600:	4b3c      	ldr	r3, [pc, #240]	; (80016f4 <MX_TIM1_Init+0x138>)
 8001602:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001606:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001608:	4b3a      	ldr	r3, [pc, #232]	; (80016f4 <MX_TIM1_Init+0x138>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800160e:	4b39      	ldr	r3, [pc, #228]	; (80016f4 <MX_TIM1_Init+0x138>)
 8001610:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001614:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001616:	4b37      	ldr	r3, [pc, #220]	; (80016f4 <MX_TIM1_Init+0x138>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800161c:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <MX_TIM1_Init+0x138>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001622:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <MX_TIM1_Init+0x138>)
 8001624:	2280      	movs	r2, #128	; 0x80
 8001626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001628:	4832      	ldr	r0, [pc, #200]	; (80016f4 <MX_TIM1_Init+0x138>)
 800162a:	f008 fa7b 	bl	8009b24 <HAL_TIM_Base_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001634:	f004 fefe 	bl	8006434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800163e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001642:	4619      	mov	r1, r3
 8001644:	482b      	ldr	r0, [pc, #172]	; (80016f4 <MX_TIM1_Init+0x138>)
 8001646:	f009 f99d 	bl	800a984 <HAL_TIM_ConfigClockSource>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001650:	f004 fef0 	bl	8006434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001654:	4827      	ldr	r0, [pc, #156]	; (80016f4 <MX_TIM1_Init+0x138>)
 8001656:	f008 fab4 	bl	8009bc2 <HAL_TIM_PWM_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001660:	f004 fee8 	bl	8006434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800166c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001670:	4619      	mov	r1, r3
 8001672:	4820      	ldr	r0, [pc, #128]	; (80016f4 <MX_TIM1_Init+0x138>)
 8001674:	f009 fef4 	bl	800b460 <HAL_TIMEx_MasterConfigSynchronization>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800167e:	f004 fed9 	bl	8006434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001682:	2360      	movs	r3, #96	; 0x60
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168a:	2300      	movs	r3, #0
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800169a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169e:	220c      	movs	r2, #12
 80016a0:	4619      	mov	r1, r3
 80016a2:	4814      	ldr	r0, [pc, #80]	; (80016f4 <MX_TIM1_Init+0x138>)
 80016a4:	f009 f8ac 	bl	800a800 <HAL_TIM_PWM_ConfigChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80016ae:	f004 fec1 	bl	8006434 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4807      	ldr	r0, [pc, #28]	; (80016f4 <MX_TIM1_Init+0x138>)
 80016d6:	f009 ff3f 	bl	800b558 <HAL_TIMEx_ConfigBreakDeadTime>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80016e0:	f004 fea8 	bl	8006434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016e4:	4803      	ldr	r0, [pc, #12]	; (80016f4 <MX_TIM1_Init+0x138>)
 80016e6:	f005 fb63 	bl	8006db0 <HAL_TIM_MspPostInit>

}
 80016ea:	bf00      	nop
 80016ec:	3758      	adds	r7, #88	; 0x58
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200002a8 	.word	0x200002a8
 80016f8:	40010000 	.word	0x40010000

080016fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	2224      	movs	r2, #36	; 0x24
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f00d fee2 	bl	800f4d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <MX_TIM2_Init+0xa4>)
 800171a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <MX_TIM2_Init+0xa4>)
 8001722:	2200      	movs	r2, #0
 8001724:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001726:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <MX_TIM2_Init+0xa4>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <MX_TIM2_Init+0xa4>)
 800172e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001732:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_TIM2_Init+0xa4>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <MX_TIM2_Init+0xa4>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001740:	2303      	movs	r3, #3
 8001742:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001748:	2301      	movs	r3, #1
 800174a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001750:	230a      	movs	r3, #10
 8001752:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001758:	2301      	movs	r3, #1
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001760:	230a      	movs	r3, #10
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	4619      	mov	r1, r3
 800176a:	480d      	ldr	r0, [pc, #52]	; (80017a0 <MX_TIM2_Init+0xa4>)
 800176c:	f008 fd70 	bl	800a250 <HAL_TIM_Encoder_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001776:	f004 fe5d 	bl	8006434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <MX_TIM2_Init+0xa4>)
 8001788:	f009 fe6a 	bl	800b460 <HAL_TIMEx_MasterConfigSynchronization>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001792:	f004 fe4f 	bl	8006434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	3730      	adds	r7, #48	; 0x30
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200002f0 	.word	0x200002f0

080017a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	; 0x30
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	2224      	movs	r2, #36	; 0x24
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f00d fe8e 	bl	800f4d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017c0:	4b20      	ldr	r3, [pc, #128]	; (8001844 <MX_TIM3_Init+0xa0>)
 80017c2:	4a21      	ldr	r2, [pc, #132]	; (8001848 <MX_TIM3_Init+0xa4>)
 80017c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017c6:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <MX_TIM3_Init+0xa0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <MX_TIM3_Init+0xa0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <MX_TIM3_Init+0xa0>)
 80017d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <MX_TIM3_Init+0xa0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <MX_TIM3_Init+0xa0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017e6:	2303      	movs	r3, #3
 80017e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017ee:	2301      	movs	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80017f6:	230a      	movs	r3, #10
 80017f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017fe:	2301      	movs	r3, #1
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001806:	230a      	movs	r3, #10
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	4619      	mov	r1, r3
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <MX_TIM3_Init+0xa0>)
 8001812:	f008 fd1d 	bl	800a250 <HAL_TIM_Encoder_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800181c:	f004 fe0a 	bl	8006434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_TIM3_Init+0xa0>)
 800182e:	f009 fe17 	bl	800b460 <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001838:	f004 fdfc 	bl	8006434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	3730      	adds	r7, #48	; 0x30
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000338 	.word	0x20000338
 8001848:	40000400 	.word	0x40000400

0800184c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001852:	f107 0310 	add.w	r3, r7, #16
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800185c:	463b      	mov	r3, r7
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001868:	4b25      	ldr	r3, [pc, #148]	; (8001900 <MX_TIM4_Init+0xb4>)
 800186a:	4a26      	ldr	r2, [pc, #152]	; (8001904 <MX_TIM4_Init+0xb8>)
 800186c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <MX_TIM4_Init+0xb4>)
 8001870:	220f      	movs	r2, #15
 8001872:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001874:	4b22      	ldr	r3, [pc, #136]	; (8001900 <MX_TIM4_Init+0xb4>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800187a:	4b21      	ldr	r3, [pc, #132]	; (8001900 <MX_TIM4_Init+0xb4>)
 800187c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001880:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001882:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <MX_TIM4_Init+0xb4>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001888:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <MX_TIM4_Init+0xb4>)
 800188a:	2200      	movs	r2, #0
 800188c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800188e:	481c      	ldr	r0, [pc, #112]	; (8001900 <MX_TIM4_Init+0xb4>)
 8001890:	f008 fab8 	bl	8009e04 <HAL_TIM_IC_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800189a:	f004 fdcb 	bl	8006434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018a6:	f107 0310 	add.w	r3, r7, #16
 80018aa:	4619      	mov	r1, r3
 80018ac:	4814      	ldr	r0, [pc, #80]	; (8001900 <MX_TIM4_Init+0xb4>)
 80018ae:	f009 fdd7 	bl	800b460 <HAL_TIMEx_MasterConfigSynchronization>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80018b8:	f004 fdbc 	bl	8006434 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018bc:	2300      	movs	r3, #0
 80018be:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018c0:	2301      	movs	r3, #1
 80018c2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80018cc:	463b      	mov	r3, r7
 80018ce:	2204      	movs	r2, #4
 80018d0:	4619      	mov	r1, r3
 80018d2:	480b      	ldr	r0, [pc, #44]	; (8001900 <MX_TIM4_Init+0xb4>)
 80018d4:	f008 fef8 	bl	800a6c8 <HAL_TIM_IC_ConfigChannel>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80018de:	f004 fda9 	bl	8006434 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80018e2:	463b      	mov	r3, r7
 80018e4:	2200      	movs	r2, #0
 80018e6:	4619      	mov	r1, r3
 80018e8:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_TIM4_Init+0xb4>)
 80018ea:	f008 feed 	bl	800a6c8 <HAL_TIM_IC_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM4_Init+0xac>
  		Error_Handler();
 80018f4:	f004 fd9e 	bl	8006434 <Error_Handler>
  	}
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000380 	.word	0x20000380
 8001904:	40000800 	.word	0x40000800

08001908 <MX_TIM6_Init>:

static void MX_TIM6_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190e:	463b      	mov	r3, r7
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <MX_TIM6_Init+0x64>)
 8001918:	4a15      	ldr	r2, [pc, #84]	; (8001970 <MX_TIM6_Init+0x68>)
 800191a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <MX_TIM6_Init+0x64>)
 800191e:	2200      	movs	r2, #0
 8001920:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <MX_TIM6_Init+0x64>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <MX_TIM6_Init+0x64>)
 800192a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800192e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <MX_TIM6_Init+0x64>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001936:	480d      	ldr	r0, [pc, #52]	; (800196c <MX_TIM6_Init+0x64>)
 8001938:	f008 f8f4 	bl	8009b24 <HAL_TIM_Base_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001942:	f004 fd77 	bl	8006434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800194e:	463b      	mov	r3, r7
 8001950:	4619      	mov	r1, r3
 8001952:	4806      	ldr	r0, [pc, #24]	; (800196c <MX_TIM6_Init+0x64>)
 8001954:	f009 fd84 	bl	800b460 <HAL_TIMEx_MasterConfigSynchronization>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800195e:	f004 fd69 	bl	8006434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200003c8 	.word	0x200003c8
 8001970:	40001000 	.word	0x40001000

08001974 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b096      	sub	sp, #88	; 0x58
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001988:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]
 80019a2:	615a      	str	r2, [r3, #20]
 80019a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2220      	movs	r2, #32
 80019aa:	2100      	movs	r1, #0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f00d fd91 	bl	800f4d4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019b2:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <MX_TIM8_Init+0x14c>)
 80019b4:	4a43      	ldr	r2, [pc, #268]	; (8001ac4 <MX_TIM8_Init+0x150>)
 80019b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80019b8:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <MX_TIM8_Init+0x14c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019be:	4b40      	ldr	r3, [pc, #256]	; (8001ac0 <MX_TIM8_Init+0x14c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80019c4:	4b3e      	ldr	r3, [pc, #248]	; (8001ac0 <MX_TIM8_Init+0x14c>)
 80019c6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80019ca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019cc:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <MX_TIM8_Init+0x14c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019d2:	4b3b      	ldr	r3, [pc, #236]	; (8001ac0 <MX_TIM8_Init+0x14c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d8:	4b39      	ldr	r3, [pc, #228]	; (8001ac0 <MX_TIM8_Init+0x14c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80019de:	4838      	ldr	r0, [pc, #224]	; (8001ac0 <MX_TIM8_Init+0x14c>)
 80019e0:	f008 f8a0 	bl	8009b24 <HAL_TIM_Base_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80019ea:	f004 fd23 	bl	8006434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80019f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019f8:	4619      	mov	r1, r3
 80019fa:	4831      	ldr	r0, [pc, #196]	; (8001ac0 <MX_TIM8_Init+0x14c>)
 80019fc:	f008 ffc2 	bl	800a984 <HAL_TIM_ConfigClockSource>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001a06:	f004 fd15 	bl	8006434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a0a:	482d      	ldr	r0, [pc, #180]	; (8001ac0 <MX_TIM8_Init+0x14c>)
 8001a0c:	f008 f8d9 	bl	8009bc2 <HAL_TIM_PWM_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001a16:	f004 fd0d 	bl	8006434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a26:	4619      	mov	r1, r3
 8001a28:	4825      	ldr	r0, [pc, #148]	; (8001ac0 <MX_TIM8_Init+0x14c>)
 8001a2a:	f009 fd19 	bl	800b460 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001a34:	f004 fcfe 	bl	8006434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a38:	2360      	movs	r3, #96	; 0x60
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a44:	2300      	movs	r3, #0
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a58:	2200      	movs	r2, #0
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4818      	ldr	r0, [pc, #96]	; (8001ac0 <MX_TIM8_Init+0x14c>)
 8001a5e:	f008 fecf 	bl	800a800 <HAL_TIM_PWM_ConfigChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001a68:	f004 fce4 	bl	8006434 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a70:	2204      	movs	r2, #4
 8001a72:	4619      	mov	r1, r3
 8001a74:	4812      	ldr	r0, [pc, #72]	; (8001ac0 <MX_TIM8_Init+0x14c>)
 8001a76:	f008 fec3 	bl	800a800 <HAL_TIM_PWM_ConfigChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001a80:	f004 fcd8 	bl	8006434 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <MX_TIM8_Init+0x14c>)
 8001aa8:	f009 fd56 	bl	800b558 <HAL_TIMEx_ConfigBreakDeadTime>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001ab2:	f004 fcbf 	bl	8006434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	3758      	adds	r7, #88	; 0x58
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000410 	.word	0x20000410
 8001ac4:	40010400 	.word	0x40010400

08001ac8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <MX_USART3_UART_Init+0x50>)
 8001ad0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001aec:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001aee:	220c      	movs	r2, #12
 8001af0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001afe:	4805      	ldr	r0, [pc, #20]	; (8001b14 <MX_USART3_UART_Init+0x4c>)
 8001b00:	f009 fd90 	bl	800b624 <HAL_UART_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b0a:	f004 fc93 	bl	8006434 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000458 	.word	0x20000458
 8001b18:	40004800 	.word	0x40004800

08001b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08c      	sub	sp, #48	; 0x30
 8001b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	4b5b      	ldr	r3, [pc, #364]	; (8001ca4 <MX_GPIO_Init+0x188>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a5a      	ldr	r2, [pc, #360]	; (8001ca4 <MX_GPIO_Init+0x188>)
 8001b3c:	f043 0310 	orr.w	r3, r3, #16
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b58      	ldr	r3, [pc, #352]	; (8001ca4 <MX_GPIO_Init+0x188>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	4b54      	ldr	r3, [pc, #336]	; (8001ca4 <MX_GPIO_Init+0x188>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a53      	ldr	r2, [pc, #332]	; (8001ca4 <MX_GPIO_Init+0x188>)
 8001b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b51      	ldr	r3, [pc, #324]	; (8001ca4 <MX_GPIO_Init+0x188>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b4d      	ldr	r3, [pc, #308]	; (8001ca4 <MX_GPIO_Init+0x188>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a4c      	ldr	r2, [pc, #304]	; (8001ca4 <MX_GPIO_Init+0x188>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b4a      	ldr	r3, [pc, #296]	; (8001ca4 <MX_GPIO_Init+0x188>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b46      	ldr	r3, [pc, #280]	; (8001ca4 <MX_GPIO_Init+0x188>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a45      	ldr	r2, [pc, #276]	; (8001ca4 <MX_GPIO_Init+0x188>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b43      	ldr	r3, [pc, #268]	; (8001ca4 <MX_GPIO_Init+0x188>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <MX_GPIO_Init+0x188>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a3e      	ldr	r2, [pc, #248]	; (8001ca4 <MX_GPIO_Init+0x188>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b3c      	ldr	r3, [pc, #240]	; (8001ca4 <MX_GPIO_Init+0x188>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	4b38      	ldr	r3, [pc, #224]	; (8001ca4 <MX_GPIO_Init+0x188>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a37      	ldr	r2, [pc, #220]	; (8001ca4 <MX_GPIO_Init+0x188>)
 8001bc8:	f043 0308 	orr.w	r3, r3, #8
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b35      	ldr	r3, [pc, #212]	; (8001ca4 <MX_GPIO_Init+0x188>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001be0:	4831      	ldr	r0, [pc, #196]	; (8001ca8 <MX_GPIO_Init+0x18c>)
 8001be2:	f006 fb45 	bl	8008270 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	213c      	movs	r1, #60	; 0x3c
 8001bea:	4830      	ldr	r0, [pc, #192]	; (8001cac <MX_GPIO_Init+0x190>)
 8001bec:	f006 fb40 	bl	8008270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin|TRI_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001bf6:	482e      	ldr	r0, [pc, #184]	; (8001cb0 <MX_GPIO_Init+0x194>)
 8001bf8:	f006 fb3a 	bl	8008270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c02:	482c      	ldr	r0, [pc, #176]	; (8001cb4 <MX_GPIO_Init+0x198>)
 8001c04:	f006 fb34 	bl	8008270 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001c08:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001c0c:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4821      	ldr	r0, [pc, #132]	; (8001ca8 <MX_GPIO_Init+0x18c>)
 8001c22:	f006 f989 	bl	8007f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001c26:	233c      	movs	r3, #60	; 0x3c
 8001c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c32:	2302      	movs	r3, #2
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	481b      	ldr	r0, [pc, #108]	; (8001cac <MX_GPIO_Init+0x190>)
 8001c3e:	f006 f97b 	bl	8007f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin TRI_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|TRI_Pin;
 8001c42:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4815      	ldr	r0, [pc, #84]	; (8001cb0 <MX_GPIO_Init+0x194>)
 8001c5c:	f006 f96c 	bl	8007f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = USER_PB_Pin;
 8001c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c66:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	480f      	ldr	r0, [pc, #60]	; (8001cb4 <MX_GPIO_Init+0x198>)
 8001c78:	f006 f95e 	bl	8007f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigger_Pin */
  	GPIO_InitStruct.Pin = Trigger_Pin;
 8001c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c80:	61fb      	str	r3, [r7, #28]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	623b      	str	r3, [r7, #32]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  	HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	4619      	mov	r1, r3
 8001c94:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <MX_GPIO_Init+0x198>)
 8001c96:	f006 f94f 	bl	8007f38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
//  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 8001c9a:	bf00      	nop
 8001c9c:	3730      	adds	r7, #48	; 0x30
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	40020c00 	.word	0x40020c00

08001cb8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// HAL_UART_RxCpltCallback evoked when buffer is full
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	// prevent unused argument(s) compilation warning
	UNUSED(huart);
	int val;

	val = (aRxBuffer[2] - 48) * 10 + (aRxBuffer[3] - 48);
 8001cc0:	4b8f      	ldr	r3, [pc, #572]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001cc2:	789b      	ldrb	r3, [r3, #2]
 8001cc4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b8b      	ldr	r3, [pc, #556]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001cd4:	78db      	ldrb	r3, [r3, #3]
 8001cd6:	3b30      	subs	r3, #48	; 0x30
 8001cd8:	4413      	add	r3, r2
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
	if (aRxBuffer[1] >= '0' && aRxBuffer[1] <= '9') val += (aRxBuffer[1] - 48) * 100;
 8001cdc:	4b88      	ldr	r3, [pc, #544]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001cde:	785b      	ldrb	r3, [r3, #1]
 8001ce0:	2b2f      	cmp	r3, #47	; 0x2f
 8001ce2:	d90c      	bls.n	8001cfe <HAL_UART_RxCpltCallback+0x46>
 8001ce4:	4b86      	ldr	r3, [pc, #536]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001ce6:	785b      	ldrb	r3, [r3, #1]
 8001ce8:	2b39      	cmp	r3, #57	; 0x39
 8001cea:	d808      	bhi.n	8001cfe <HAL_UART_RxCpltCallback+0x46>
 8001cec:	4b84      	ldr	r3, [pc, #528]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	3b30      	subs	r3, #48	; 0x30
 8001cf2:	2264      	movs	r2, #100	; 0x64
 8001cf4:	fb02 f303 	mul.w	r3, r2, r3
 8001cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cfa:	4413      	add	r3, r2
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24

	manualMode = 0;
 8001cfe:	4b81      	ldr	r3, [pc, #516]	; (8001f04 <HAL_UART_RxCpltCallback+0x24c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]

	if (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T') { // only STOP can preempt any greedy task
 8001d04:	4b7e      	ldr	r3, [pc, #504]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b53      	cmp	r3, #83	; 0x53
 8001d0a:	d159      	bne.n	8001dc0 <HAL_UART_RxCpltCallback+0x108>
 8001d0c:	4b7c      	ldr	r3, [pc, #496]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001d0e:	785b      	ldrb	r3, [r3, #1]
 8001d10:	2b54      	cmp	r3, #84	; 0x54
 8001d12:	d155      	bne.n	8001dc0 <HAL_UART_RxCpltCallback+0x108>
//		__ADD_COMMAND(cQueue, 0, 0); // stop
		__ON_TASK_END(&htim8, prevTask, curTask);
 8001d14:	4b7c      	ldr	r3, [pc, #496]	; (8001f08 <HAL_UART_RxCpltCallback+0x250>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	635a      	str	r2, [r3, #52]	; 0x34
 8001d1c:	4b7a      	ldr	r3, [pc, #488]	; (8001f08 <HAL_UART_RxCpltCallback+0x250>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2200      	movs	r2, #0
 8001d22:	639a      	str	r2, [r3, #56]	; 0x38
 8001d24:	4b79      	ldr	r3, [pc, #484]	; (8001f0c <HAL_UART_RxCpltCallback+0x254>)
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	4b79      	ldr	r3, [pc, #484]	; (8001f10 <HAL_UART_RxCpltCallback+0x258>)
 8001d2a:	701a      	strb	r2, [r3, #0]
 8001d2c:	4b77      	ldr	r3, [pc, #476]	; (8001f0c <HAL_UART_RxCpltCallback+0x254>)
 8001d2e:	220b      	movs	r2, #11
 8001d30:	701a      	strb	r2, [r3, #0]
		  angleNow = 0; gyroZ = 0; // reset angle for PID
 8001d32:	4b78      	ldr	r3, [pc, #480]	; (8001f14 <HAL_UART_RxCpltCallback+0x25c>)
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	4b77      	ldr	r3, [pc, #476]	; (8001f18 <HAL_UART_RxCpltCallback+0x260>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	801a      	strh	r2, [r3, #0]
		PIDConfigReset(&pidTSlow);
 8001d40:	4876      	ldr	r0, [pc, #472]	; (8001f1c <HAL_UART_RxCpltCallback+0x264>)
 8001d42:	f000 fc70 	bl	8002626 <PIDConfigReset>
		PIDConfigReset(&pidSlow);
 8001d46:	4876      	ldr	r0, [pc, #472]	; (8001f20 <HAL_UART_RxCpltCallback+0x268>)
 8001d48:	f000 fc6d 	bl	8002626 <PIDConfigReset>
		PIDConfigReset(&pidFast);
 8001d4c:	4875      	ldr	r0, [pc, #468]	; (8001f24 <HAL_UART_RxCpltCallback+0x26c>)
 8001d4e:	f000 fc6a 	bl	8002626 <PIDConfigReset>
		curDistTick = 0;
 8001d52:	4b75      	ldr	r3, [pc, #468]	; (8001f28 <HAL_UART_RxCpltCallback+0x270>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	801a      	strh	r2, [r3, #0]
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8001d58:	4b74      	ldr	r3, [pc, #464]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001d5a:	781a      	ldrb	r2, [r3, #0]
 8001d5c:	4b73      	ldr	r3, [pc, #460]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001d5e:	785b      	ldrb	r3, [r3, #1]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d112      	bne.n	8001d8a <HAL_UART_RxCpltCallback+0xd2>
			__CLEAR_CURCMD(curCmd);
 8001d64:	4b72      	ldr	r3, [pc, #456]	; (8001f30 <HAL_UART_RxCpltCallback+0x278>)
 8001d66:	2264      	movs	r2, #100	; 0x64
 8001d68:	701a      	strb	r2, [r3, #0]
 8001d6a:	4b71      	ldr	r3, [pc, #452]	; (8001f30 <HAL_UART_RxCpltCallback+0x278>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 8001d70:	4a70      	ldr	r2, [pc, #448]	; (8001f34 <HAL_UART_RxCpltCallback+0x27c>)
 8001d72:	210f      	movs	r1, #15
 8001d74:	4870      	ldr	r0, [pc, #448]	; (8001f38 <HAL_UART_RxCpltCallback+0x280>)
 8001d76:	f00d fb59 	bl	800f42c <sniprintf>
 8001d7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d7e:	2206      	movs	r2, #6
 8001d80:	496e      	ldr	r1, [pc, #440]	; (8001f3c <HAL_UART_RxCpltCallback+0x284>)
 8001d82:	486f      	ldr	r0, [pc, #444]	; (8001f40 <HAL_UART_RxCpltCallback+0x288>)
 8001d84:	f009 fc9b 	bl	800b6be <HAL_UART_Transmit>
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8001d88:	e307      	b.n	800239a <HAL_UART_RxCpltCallback+0x6e2>
		}
		else {
			__READ_COMMAND(cQueue, curCmd, rxMsg);
 8001d8a:	4b68      	ldr	r3, [pc, #416]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001d8c:	785b      	ldrb	r3, [r3, #1]
 8001d8e:	4a68      	ldr	r2, [pc, #416]	; (8001f30 <HAL_UART_RxCpltCallback+0x278>)
 8001d90:	4966      	ldr	r1, [pc, #408]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b64      	ldr	r3, [pc, #400]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001d9c:	785b      	ldrb	r3, [r3, #1]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	4a62      	ldr	r2, [pc, #392]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001da2:	7892      	ldrb	r2, [r2, #2]
 8001da4:	fb93 f1f2 	sdiv	r1, r3, r2
 8001da8:	fb01 f202 	mul.w	r2, r1, r2
 8001dac:	1a9b      	subs	r3, r3, r2
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4b5e      	ldr	r3, [pc, #376]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001db2:	705a      	strb	r2, [r3, #1]
 8001db4:	4a63      	ldr	r2, [pc, #396]	; (8001f44 <HAL_UART_RxCpltCallback+0x28c>)
 8001db6:	210f      	movs	r1, #15
 8001db8:	485f      	ldr	r0, [pc, #380]	; (8001f38 <HAL_UART_RxCpltCallback+0x280>)
 8001dba:	f00d fb37 	bl	800f42c <sniprintf>
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8001dbe:	e2ec      	b.n	800239a <HAL_UART_RxCpltCallback+0x6e2>
		}
	}
	else if (aRxBuffer[0] == 'F' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S')) { //FW or FS
 8001dc0:	4b4f      	ldr	r3, [pc, #316]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b46      	cmp	r3, #70	; 0x46
 8001dc6:	d13d      	bne.n	8001e44 <HAL_UART_RxCpltCallback+0x18c>
 8001dc8:	4b4d      	ldr	r3, [pc, #308]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001dca:	785b      	ldrb	r3, [r3, #1]
 8001dcc:	2b57      	cmp	r3, #87	; 0x57
 8001dce:	d003      	beq.n	8001dd8 <HAL_UART_RxCpltCallback+0x120>
 8001dd0:	4b4b      	ldr	r3, [pc, #300]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001dd2:	785b      	ldrb	r3, [r3, #1]
 8001dd4:	2b53      	cmp	r3, #83	; 0x53
 8001dd6:	d135      	bne.n	8001e44 <HAL_UART_RxCpltCallback+0x18c>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001dd8:	4b49      	ldr	r3, [pc, #292]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001dda:	789b      	ldrb	r3, [r3, #2]
 8001ddc:	2b2d      	cmp	r3, #45	; 0x2d
 8001dde:	d105      	bne.n	8001dec <HAL_UART_RxCpltCallback+0x134>
 8001de0:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001de2:	78db      	ldrb	r3, [r3, #3]
 8001de4:	2b2d      	cmp	r3, #45	; 0x2d
 8001de6:	d101      	bne.n	8001dec <HAL_UART_RxCpltCallback+0x134>
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <HAL_UART_RxCpltCallback+0x136>
 8001dec:	2300      	movs	r3, #0
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b44      	ldr	r3, [pc, #272]	; (8001f04 <HAL_UART_RxCpltCallback+0x24c>)
 8001df2:	701a      	strb	r2, [r3, #0]
		moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001df4:	4b42      	ldr	r3, [pc, #264]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001df6:	785b      	ldrb	r3, [r3, #1]
 8001df8:	2b53      	cmp	r3, #83	; 0x53
 8001dfa:	bf14      	ite	ne
 8001dfc:	2301      	movne	r3, #1
 8001dfe:	2300      	moveq	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	4b50      	ldr	r3, [pc, #320]	; (8001f48 <HAL_UART_RxCpltCallback+0x290>)
 8001e06:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 1, val);
 8001e08:	4b48      	ldr	r3, [pc, #288]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4a47      	ldr	r2, [pc, #284]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	2201      	movs	r2, #1
 8001e14:	711a      	strb	r2, [r3, #4]
 8001e16:	4b45      	ldr	r3, [pc, #276]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1c:	b291      	uxth	r1, r2
 8001e1e:	4a43      	ldr	r2, [pc, #268]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	460a      	mov	r2, r1
 8001e26:	80da      	strh	r2, [r3, #6]
 8001e28:	4b40      	ldr	r3, [pc, #256]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	4a3f      	ldr	r2, [pc, #252]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001e30:	7892      	ldrb	r2, [r2, #2]
 8001e32:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e36:	fb01 f202 	mul.w	r2, r1, r2
 8001e3a:	1a9b      	subs	r3, r3, r2
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b3b      	ldr	r3, [pc, #236]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	e2aa      	b.n	800239a <HAL_UART_RxCpltCallback+0x6e2>
	}
	else if (aRxBuffer[0] == 'B' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S')) { //BW or BS
 8001e44:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b42      	cmp	r3, #66	; 0x42
 8001e4a:	d13d      	bne.n	8001ec8 <HAL_UART_RxCpltCallback+0x210>
 8001e4c:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001e4e:	785b      	ldrb	r3, [r3, #1]
 8001e50:	2b57      	cmp	r3, #87	; 0x57
 8001e52:	d003      	beq.n	8001e5c <HAL_UART_RxCpltCallback+0x1a4>
 8001e54:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001e56:	785b      	ldrb	r3, [r3, #1]
 8001e58:	2b53      	cmp	r3, #83	; 0x53
 8001e5a:	d135      	bne.n	8001ec8 <HAL_UART_RxCpltCallback+0x210>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001e5c:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001e5e:	789b      	ldrb	r3, [r3, #2]
 8001e60:	2b2d      	cmp	r3, #45	; 0x2d
 8001e62:	d105      	bne.n	8001e70 <HAL_UART_RxCpltCallback+0x1b8>
 8001e64:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001e66:	78db      	ldrb	r3, [r3, #3]
 8001e68:	2b2d      	cmp	r3, #45	; 0x2d
 8001e6a:	d101      	bne.n	8001e70 <HAL_UART_RxCpltCallback+0x1b8>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <HAL_UART_RxCpltCallback+0x1ba>
 8001e70:	2300      	movs	r3, #0
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_UART_RxCpltCallback+0x24c>)
 8001e76:	701a      	strb	r2, [r3, #0]
		moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001e7a:	785b      	ldrb	r3, [r3, #1]
 8001e7c:	2b53      	cmp	r3, #83	; 0x53
 8001e7e:	bf14      	ite	ne
 8001e80:	2301      	movne	r3, #1
 8001e82:	2300      	moveq	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b2f      	ldr	r3, [pc, #188]	; (8001f48 <HAL_UART_RxCpltCallback+0x290>)
 8001e8a:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 2, val);
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4a26      	ldr	r2, [pc, #152]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	2202      	movs	r2, #2
 8001e98:	711a      	strb	r2, [r3, #4]
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea0:	b291      	uxth	r1, r2
 8001ea2:	4a22      	ldr	r2, [pc, #136]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	460a      	mov	r2, r1
 8001eaa:	80da      	strh	r2, [r3, #6]
 8001eac:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001eb4:	7892      	ldrb	r2, [r2, #2]
 8001eb6:	fb93 f1f2 	sdiv	r1, r3, r2
 8001eba:	fb01 f202 	mul.w	r2, r1, r2
 8001ebe:	1a9b      	subs	r3, r3, r2
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <HAL_UART_RxCpltCallback+0x274>)
 8001ec4:	701a      	strb	r2, [r3, #0]
 8001ec6:	e268      	b.n	800239a <HAL_UART_RxCpltCallback+0x6e2>
	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'L') { // FL
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b46      	cmp	r3, #70	; 0x46
 8001ece:	d15c      	bne.n	8001f8a <HAL_UART_RxCpltCallback+0x2d2>
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001ed2:	785b      	ldrb	r3, [r3, #1]
 8001ed4:	2b4c      	cmp	r3, #76	; 0x4c
 8001ed6:	d158      	bne.n	8001f8a <HAL_UART_RxCpltCallback+0x2d2>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001eda:	789b      	ldrb	r3, [r3, #2]
 8001edc:	2b2d      	cmp	r3, #45	; 0x2d
 8001ede:	d105      	bne.n	8001eec <HAL_UART_RxCpltCallback+0x234>
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_UART_RxCpltCallback+0x248>)
 8001ee2:	78db      	ldrb	r3, [r3, #3]
 8001ee4:	2b2d      	cmp	r3, #45	; 0x2d
 8001ee6:	d101      	bne.n	8001eec <HAL_UART_RxCpltCallback+0x234>
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <HAL_UART_RxCpltCallback+0x236>
 8001eec:	2300      	movs	r3, #0
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <HAL_UART_RxCpltCallback+0x24c>)
 8001ef2:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 3 + (manualMode ? 0 : 4), val);
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <HAL_UART_RxCpltCallback+0x24c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d027      	beq.n	8001f4c <HAL_UART_RxCpltCallback+0x294>
 8001efc:	2103      	movs	r1, #3
 8001efe:	e026      	b.n	8001f4e <HAL_UART_RxCpltCallback+0x296>
 8001f00:	200004d8 	.word	0x200004d8
 8001f04:	2000053c 	.word	0x2000053c
 8001f08:	20000410 	.word	0x20000410
 8001f0c:	20000134 	.word	0x20000134
 8001f10:	20000135 	.word	0x20000135
 8001f14:	20000544 	.word	0x20000544
 8001f18:	2000054a 	.word	0x2000054a
 8001f1c:	20000574 	.word	0x20000574
 8001f20:	20000560 	.word	0x20000560
 8001f24:	20000588 	.word	0x20000588
 8001f28:	20000558 	.word	0x20000558
 8001f2c:	200004e4 	.word	0x200004e4
 8001f30:	20000518 	.word	0x20000518
 8001f34:	08010b40 	.word	0x08010b40
 8001f38:	2000051c 	.word	0x2000051c
 8001f3c:	08010b48 	.word	0x08010b48
 8001f40:	20000458 	.word	0x20000458
 8001f44:	08010b50 	.word	0x08010b50
 8001f48:	20000136 	.word	0x20000136
 8001f4c:	2107      	movs	r1, #7
 8001f4e:	4b8d      	ldr	r3, [pc, #564]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	4a8c      	ldr	r2, [pc, #560]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	460a      	mov	r2, r1
 8001f5a:	711a      	strb	r2, [r3, #4]
 8001f5c:	4b89      	ldr	r3, [pc, #548]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f62:	b291      	uxth	r1, r2
 8001f64:	4a87      	ldr	r2, [pc, #540]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	460a      	mov	r2, r1
 8001f6c:	80da      	strh	r2, [r3, #6]
 8001f6e:	4b85      	ldr	r3, [pc, #532]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	3301      	adds	r3, #1
 8001f74:	4a83      	ldr	r2, [pc, #524]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8001f76:	7892      	ldrb	r2, [r2, #2]
 8001f78:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f7c:	fb01 f202 	mul.w	r2, r1, r2
 8001f80:	1a9b      	subs	r3, r3, r2
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	4b7f      	ldr	r3, [pc, #508]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	e207      	b.n	800239a <HAL_UART_RxCpltCallback+0x6e2>
	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R') { // FR
 8001f8a:	4b7f      	ldr	r3, [pc, #508]	; (8002188 <HAL_UART_RxCpltCallback+0x4d0>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b46      	cmp	r3, #70	; 0x46
 8001f90:	d136      	bne.n	8002000 <HAL_UART_RxCpltCallback+0x348>
 8001f92:	4b7d      	ldr	r3, [pc, #500]	; (8002188 <HAL_UART_RxCpltCallback+0x4d0>)
 8001f94:	785b      	ldrb	r3, [r3, #1]
 8001f96:	2b52      	cmp	r3, #82	; 0x52
 8001f98:	d132      	bne.n	8002000 <HAL_UART_RxCpltCallback+0x348>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001f9a:	4b7b      	ldr	r3, [pc, #492]	; (8002188 <HAL_UART_RxCpltCallback+0x4d0>)
 8001f9c:	789b      	ldrb	r3, [r3, #2]
 8001f9e:	2b2d      	cmp	r3, #45	; 0x2d
 8001fa0:	d105      	bne.n	8001fae <HAL_UART_RxCpltCallback+0x2f6>
 8001fa2:	4b79      	ldr	r3, [pc, #484]	; (8002188 <HAL_UART_RxCpltCallback+0x4d0>)
 8001fa4:	78db      	ldrb	r3, [r3, #3]
 8001fa6:	2b2d      	cmp	r3, #45	; 0x2d
 8001fa8:	d101      	bne.n	8001fae <HAL_UART_RxCpltCallback+0x2f6>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_UART_RxCpltCallback+0x2f8>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b76      	ldr	r3, [pc, #472]	; (800218c <HAL_UART_RxCpltCallback+0x4d4>)
 8001fb4:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 4 + (manualMode ? 0 : 4), val);
 8001fb6:	4b75      	ldr	r3, [pc, #468]	; (800218c <HAL_UART_RxCpltCallback+0x4d4>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_UART_RxCpltCallback+0x30a>
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	e000      	b.n	8001fc4 <HAL_UART_RxCpltCallback+0x30c>
 8001fc2:	2108      	movs	r1, #8
 8001fc4:	4b6f      	ldr	r3, [pc, #444]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4a6e      	ldr	r2, [pc, #440]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	460a      	mov	r2, r1
 8001fd0:	711a      	strb	r2, [r3, #4]
 8001fd2:	4b6c      	ldr	r3, [pc, #432]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd8:	b291      	uxth	r1, r2
 8001fda:	4a6a      	ldr	r2, [pc, #424]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	80da      	strh	r2, [r3, #6]
 8001fe4:	4b67      	ldr	r3, [pc, #412]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	4a66      	ldr	r2, [pc, #408]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8001fec:	7892      	ldrb	r2, [r2, #2]
 8001fee:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ff2:	fb01 f202 	mul.w	r2, r1, r2
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4b62      	ldr	r3, [pc, #392]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	e1cc      	b.n	800239a <HAL_UART_RxCpltCallback+0x6e2>
	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'L') { // BL
 8002000:	4b61      	ldr	r3, [pc, #388]	; (8002188 <HAL_UART_RxCpltCallback+0x4d0>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b42      	cmp	r3, #66	; 0x42
 8002006:	d136      	bne.n	8002076 <HAL_UART_RxCpltCallback+0x3be>
 8002008:	4b5f      	ldr	r3, [pc, #380]	; (8002188 <HAL_UART_RxCpltCallback+0x4d0>)
 800200a:	785b      	ldrb	r3, [r3, #1]
 800200c:	2b4c      	cmp	r3, #76	; 0x4c
 800200e:	d132      	bne.n	8002076 <HAL_UART_RxCpltCallback+0x3be>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8002010:	4b5d      	ldr	r3, [pc, #372]	; (8002188 <HAL_UART_RxCpltCallback+0x4d0>)
 8002012:	789b      	ldrb	r3, [r3, #2]
 8002014:	2b2d      	cmp	r3, #45	; 0x2d
 8002016:	d105      	bne.n	8002024 <HAL_UART_RxCpltCallback+0x36c>
 8002018:	4b5b      	ldr	r3, [pc, #364]	; (8002188 <HAL_UART_RxCpltCallback+0x4d0>)
 800201a:	78db      	ldrb	r3, [r3, #3]
 800201c:	2b2d      	cmp	r3, #45	; 0x2d
 800201e:	d101      	bne.n	8002024 <HAL_UART_RxCpltCallback+0x36c>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_UART_RxCpltCallback+0x36e>
 8002024:	2300      	movs	r3, #0
 8002026:	b2da      	uxtb	r2, r3
 8002028:	4b58      	ldr	r3, [pc, #352]	; (800218c <HAL_UART_RxCpltCallback+0x4d4>)
 800202a:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 5 + (manualMode ? 0 : 4), val);
 800202c:	4b57      	ldr	r3, [pc, #348]	; (800218c <HAL_UART_RxCpltCallback+0x4d4>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_UART_RxCpltCallback+0x380>
 8002034:	2105      	movs	r1, #5
 8002036:	e000      	b.n	800203a <HAL_UART_RxCpltCallback+0x382>
 8002038:	2109      	movs	r1, #9
 800203a:	4b52      	ldr	r3, [pc, #328]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	4a51      	ldr	r2, [pc, #324]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	460a      	mov	r2, r1
 8002046:	711a      	strb	r2, [r3, #4]
 8002048:	4b4e      	ldr	r3, [pc, #312]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204e:	b291      	uxth	r1, r2
 8002050:	4a4c      	ldr	r2, [pc, #304]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	460a      	mov	r2, r1
 8002058:	80da      	strh	r2, [r3, #6]
 800205a:	4b4a      	ldr	r3, [pc, #296]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	3301      	adds	r3, #1
 8002060:	4a48      	ldr	r2, [pc, #288]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8002062:	7892      	ldrb	r2, [r2, #2]
 8002064:	fb93 f1f2 	sdiv	r1, r3, r2
 8002068:	fb01 f202 	mul.w	r2, r1, r2
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b44      	ldr	r3, [pc, #272]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	e191      	b.n	800239a <HAL_UART_RxCpltCallback+0x6e2>
	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'R') { // BR
 8002076:	4b44      	ldr	r3, [pc, #272]	; (8002188 <HAL_UART_RxCpltCallback+0x4d0>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b42      	cmp	r3, #66	; 0x42
 800207c:	d136      	bne.n	80020ec <HAL_UART_RxCpltCallback+0x434>
 800207e:	4b42      	ldr	r3, [pc, #264]	; (8002188 <HAL_UART_RxCpltCallback+0x4d0>)
 8002080:	785b      	ldrb	r3, [r3, #1]
 8002082:	2b52      	cmp	r3, #82	; 0x52
 8002084:	d132      	bne.n	80020ec <HAL_UART_RxCpltCallback+0x434>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8002086:	4b40      	ldr	r3, [pc, #256]	; (8002188 <HAL_UART_RxCpltCallback+0x4d0>)
 8002088:	789b      	ldrb	r3, [r3, #2]
 800208a:	2b2d      	cmp	r3, #45	; 0x2d
 800208c:	d105      	bne.n	800209a <HAL_UART_RxCpltCallback+0x3e2>
 800208e:	4b3e      	ldr	r3, [pc, #248]	; (8002188 <HAL_UART_RxCpltCallback+0x4d0>)
 8002090:	78db      	ldrb	r3, [r3, #3]
 8002092:	2b2d      	cmp	r3, #45	; 0x2d
 8002094:	d101      	bne.n	800209a <HAL_UART_RxCpltCallback+0x3e2>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_UART_RxCpltCallback+0x3e4>
 800209a:	2300      	movs	r3, #0
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4b3b      	ldr	r3, [pc, #236]	; (800218c <HAL_UART_RxCpltCallback+0x4d4>)
 80020a0:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 6 + (manualMode ? 0 : 4), val);
 80020a2:	4b3a      	ldr	r3, [pc, #232]	; (800218c <HAL_UART_RxCpltCallback+0x4d4>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_UART_RxCpltCallback+0x3f6>
 80020aa:	2106      	movs	r1, #6
 80020ac:	e000      	b.n	80020b0 <HAL_UART_RxCpltCallback+0x3f8>
 80020ae:	210a      	movs	r1, #10
 80020b0:	4b34      	ldr	r3, [pc, #208]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4a33      	ldr	r2, [pc, #204]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	460a      	mov	r2, r1
 80020bc:	711a      	strb	r2, [r3, #4]
 80020be:	4b31      	ldr	r3, [pc, #196]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c4:	b291      	uxth	r1, r2
 80020c6:	4a2f      	ldr	r2, [pc, #188]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	460a      	mov	r2, r1
 80020ce:	80da      	strh	r2, [r3, #6]
 80020d0:	4b2c      	ldr	r3, [pc, #176]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	3301      	adds	r3, #1
 80020d6:	4a2b      	ldr	r2, [pc, #172]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 80020d8:	7892      	ldrb	r2, [r2, #2]
 80020da:	fb93 f1f2 	sdiv	r1, r3, r2
 80020de:	fb01 f202 	mul.w	r2, r1, r2
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e156      	b.n	800239a <HAL_UART_RxCpltCallback+0x6e2>
	}
	else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'L') __ADD_COMMAND(cQueue, 11, val); // TL turn left max
 80020ec:	4b26      	ldr	r3, [pc, #152]	; (8002188 <HAL_UART_RxCpltCallback+0x4d0>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b54      	cmp	r3, #84	; 0x54
 80020f2:	d121      	bne.n	8002138 <HAL_UART_RxCpltCallback+0x480>
 80020f4:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_UART_RxCpltCallback+0x4d0>)
 80020f6:	785b      	ldrb	r3, [r3, #1]
 80020f8:	2b4c      	cmp	r3, #76	; 0x4c
 80020fa:	d11d      	bne.n	8002138 <HAL_UART_RxCpltCallback+0x480>
 80020fc:	4b21      	ldr	r3, [pc, #132]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4a20      	ldr	r2, [pc, #128]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	220b      	movs	r2, #11
 8002108:	711a      	strb	r2, [r3, #4]
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002110:	b291      	uxth	r1, r2
 8002112:	4a1c      	ldr	r2, [pc, #112]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	460a      	mov	r2, r1
 800211a:	80da      	strh	r2, [r3, #6]
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	3301      	adds	r3, #1
 8002122:	4a18      	ldr	r2, [pc, #96]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8002124:	7892      	ldrb	r2, [r2, #2]
 8002126:	fb93 f1f2 	sdiv	r1, r3, r2
 800212a:	fb01 f202 	mul.w	r2, r1, r2
 800212e:	1a9b      	subs	r3, r3, r2
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4b14      	ldr	r3, [pc, #80]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e130      	b.n	800239a <HAL_UART_RxCpltCallback+0x6e2>
	else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'R') __ADD_COMMAND(cQueue, 12, val); // TR turn right max
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <HAL_UART_RxCpltCallback+0x4d0>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b54      	cmp	r3, #84	; 0x54
 800213e:	d127      	bne.n	8002190 <HAL_UART_RxCpltCallback+0x4d8>
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_UART_RxCpltCallback+0x4d0>)
 8002142:	785b      	ldrb	r3, [r3, #1]
 8002144:	2b52      	cmp	r3, #82	; 0x52
 8002146:	d123      	bne.n	8002190 <HAL_UART_RxCpltCallback+0x4d8>
 8002148:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	4a0d      	ldr	r2, [pc, #52]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	220c      	movs	r2, #12
 8002154:	711a      	strb	r2, [r3, #4]
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215c:	b291      	uxth	r1, r2
 800215e:	4a09      	ldr	r2, [pc, #36]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	460a      	mov	r2, r1
 8002166:	80da      	strh	r2, [r3, #6]
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	3301      	adds	r3, #1
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8002170:	7892      	ldrb	r2, [r2, #2]
 8002172:	fb93 f1f2 	sdiv	r1, r3, r2
 8002176:	fb01 f202 	mul.w	r2, r1, r2
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4b01      	ldr	r3, [pc, #4]	; (8002184 <HAL_UART_RxCpltCallback+0x4cc>)
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	e10a      	b.n	800239a <HAL_UART_RxCpltCallback+0x6e2>
 8002184:	200004e4 	.word	0x200004e4
 8002188:	200004d8 	.word	0x200004d8
 800218c:	2000053c 	.word	0x2000053c
	else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'R') __ADD_COMMAND(cQueue, 13, val); // test IR sensor
 8002190:	4b6f      	ldr	r3, [pc, #444]	; (8002350 <HAL_UART_RxCpltCallback+0x698>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b49      	cmp	r3, #73	; 0x49
 8002196:	d121      	bne.n	80021dc <HAL_UART_RxCpltCallback+0x524>
 8002198:	4b6d      	ldr	r3, [pc, #436]	; (8002350 <HAL_UART_RxCpltCallback+0x698>)
 800219a:	785b      	ldrb	r3, [r3, #1]
 800219c:	2b52      	cmp	r3, #82	; 0x52
 800219e:	d11d      	bne.n	80021dc <HAL_UART_RxCpltCallback+0x524>
 80021a0:	4b6c      	ldr	r3, [pc, #432]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4a6b      	ldr	r2, [pc, #428]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	220d      	movs	r2, #13
 80021ac:	711a      	strb	r2, [r3, #4]
 80021ae:	4b69      	ldr	r3, [pc, #420]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b4:	b291      	uxth	r1, r2
 80021b6:	4a67      	ldr	r2, [pc, #412]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	460a      	mov	r2, r1
 80021be:	80da      	strh	r2, [r3, #6]
 80021c0:	4b64      	ldr	r3, [pc, #400]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	3301      	adds	r3, #1
 80021c6:	4a63      	ldr	r2, [pc, #396]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80021c8:	7892      	ldrb	r2, [r2, #2]
 80021ca:	fb93 f1f2 	sdiv	r1, r3, r2
 80021ce:	fb01 f202 	mul.w	r2, r1, r2
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b5f      	ldr	r3, [pc, #380]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80021d8:	701a      	strb	r2, [r3, #0]
 80021da:	e0de      	b.n	800239a <HAL_UART_RxCpltCallback+0x6e2>
	else if (aRxBuffer[0] == 'D' && aRxBuffer[1] == 'T') __ADD_COMMAND(cQueue, 14, val); // DT move until specified distance from obstacle
 80021dc:	4b5c      	ldr	r3, [pc, #368]	; (8002350 <HAL_UART_RxCpltCallback+0x698>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b44      	cmp	r3, #68	; 0x44
 80021e2:	d121      	bne.n	8002228 <HAL_UART_RxCpltCallback+0x570>
 80021e4:	4b5a      	ldr	r3, [pc, #360]	; (8002350 <HAL_UART_RxCpltCallback+0x698>)
 80021e6:	785b      	ldrb	r3, [r3, #1]
 80021e8:	2b54      	cmp	r3, #84	; 0x54
 80021ea:	d11d      	bne.n	8002228 <HAL_UART_RxCpltCallback+0x570>
 80021ec:	4b59      	ldr	r3, [pc, #356]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4a58      	ldr	r2, [pc, #352]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	220e      	movs	r2, #14
 80021f8:	711a      	strb	r2, [r3, #4]
 80021fa:	4b56      	ldr	r3, [pc, #344]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002200:	b291      	uxth	r1, r2
 8002202:	4a54      	ldr	r2, [pc, #336]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	460a      	mov	r2, r1
 800220a:	80da      	strh	r2, [r3, #6]
 800220c:	4b51      	ldr	r3, [pc, #324]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	4a50      	ldr	r2, [pc, #320]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 8002214:	7892      	ldrb	r2, [r2, #2]
 8002216:	fb93 f1f2 	sdiv	r1, r3, r2
 800221a:	fb01 f202 	mul.w	r2, r1, r2
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4b4c      	ldr	r3, [pc, #304]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e0b8      	b.n	800239a <HAL_UART_RxCpltCallback+0x6e2>
	else if (aRxBuffer[0] == 'Z' && aRxBuffer[1] == 'Z') __ADD_COMMAND(cQueue, 15, val); // ZZ buzzer
 8002228:	4b49      	ldr	r3, [pc, #292]	; (8002350 <HAL_UART_RxCpltCallback+0x698>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b5a      	cmp	r3, #90	; 0x5a
 800222e:	d121      	bne.n	8002274 <HAL_UART_RxCpltCallback+0x5bc>
 8002230:	4b47      	ldr	r3, [pc, #284]	; (8002350 <HAL_UART_RxCpltCallback+0x698>)
 8002232:	785b      	ldrb	r3, [r3, #1]
 8002234:	2b5a      	cmp	r3, #90	; 0x5a
 8002236:	d11d      	bne.n	8002274 <HAL_UART_RxCpltCallback+0x5bc>
 8002238:	4b46      	ldr	r3, [pc, #280]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4a45      	ldr	r2, [pc, #276]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	220f      	movs	r2, #15
 8002244:	711a      	strb	r2, [r3, #4]
 8002246:	4b43      	ldr	r3, [pc, #268]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224c:	b291      	uxth	r1, r2
 800224e:	4a41      	ldr	r2, [pc, #260]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	460a      	mov	r2, r1
 8002256:	80da      	strh	r2, [r3, #6]
 8002258:	4b3e      	ldr	r3, [pc, #248]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	3301      	adds	r3, #1
 800225e:	4a3d      	ldr	r2, [pc, #244]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 8002260:	7892      	ldrb	r2, [r2, #2]
 8002262:	fb93 f1f2 	sdiv	r1, r3, r2
 8002266:	fb01 f202 	mul.w	r2, r1, r2
 800226a:	1a9b      	subs	r3, r3, r2
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b39      	ldr	r3, [pc, #228]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	e092      	b.n	800239a <HAL_UART_RxCpltCallback+0x6e2>
	else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'X') __ADD_COMMAND(cQueue, 16, val); // WN fastest path
 8002274:	4b36      	ldr	r3, [pc, #216]	; (8002350 <HAL_UART_RxCpltCallback+0x698>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b57      	cmp	r3, #87	; 0x57
 800227a:	d121      	bne.n	80022c0 <HAL_UART_RxCpltCallback+0x608>
 800227c:	4b34      	ldr	r3, [pc, #208]	; (8002350 <HAL_UART_RxCpltCallback+0x698>)
 800227e:	785b      	ldrb	r3, [r3, #1]
 8002280:	2b58      	cmp	r3, #88	; 0x58
 8002282:	d11d      	bne.n	80022c0 <HAL_UART_RxCpltCallback+0x608>
 8002284:	4b33      	ldr	r3, [pc, #204]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4a32      	ldr	r2, [pc, #200]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	2210      	movs	r2, #16
 8002290:	711a      	strb	r2, [r3, #4]
 8002292:	4b30      	ldr	r3, [pc, #192]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002298:	b291      	uxth	r1, r2
 800229a:	4a2e      	ldr	r2, [pc, #184]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	460a      	mov	r2, r1
 80022a2:	80da      	strh	r2, [r3, #6]
 80022a4:	4b2b      	ldr	r3, [pc, #172]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	3301      	adds	r3, #1
 80022aa:	4a2a      	ldr	r2, [pc, #168]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80022ac:	7892      	ldrb	r2, [r2, #2]
 80022ae:	fb93 f1f2 	sdiv	r1, r3, r2
 80022b2:	fb01 f202 	mul.w	r2, r1, r2
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4b26      	ldr	r3, [pc, #152]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e06c      	b.n	800239a <HAL_UART_RxCpltCallback+0x6e2>
	else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'N') __ADD_COMMAND(cQueue, 17, val); // WN fastest path v2
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HAL_UART_RxCpltCallback+0x698>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b57      	cmp	r3, #87	; 0x57
 80022c6:	d121      	bne.n	800230c <HAL_UART_RxCpltCallback+0x654>
 80022c8:	4b21      	ldr	r3, [pc, #132]	; (8002350 <HAL_UART_RxCpltCallback+0x698>)
 80022ca:	785b      	ldrb	r3, [r3, #1]
 80022cc:	2b4e      	cmp	r3, #78	; 0x4e
 80022ce:	d11d      	bne.n	800230c <HAL_UART_RxCpltCallback+0x654>
 80022d0:	4b20      	ldr	r3, [pc, #128]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4a1f      	ldr	r2, [pc, #124]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	2211      	movs	r2, #17
 80022dc:	711a      	strb	r2, [r3, #4]
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e4:	b291      	uxth	r1, r2
 80022e6:	4a1b      	ldr	r2, [pc, #108]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	460a      	mov	r2, r1
 80022ee:	80da      	strh	r2, [r3, #6]
 80022f0:	4b18      	ldr	r3, [pc, #96]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	3301      	adds	r3, #1
 80022f6:	4a17      	ldr	r2, [pc, #92]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 80022f8:	7892      	ldrb	r2, [r2, #2]
 80022fa:	fb93 f1f2 	sdiv	r1, r3, r2
 80022fe:	fb01 f202 	mul.w	r2, r1, r2
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b13      	ldr	r3, [pc, #76]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 8002308:	701a      	strb	r2, [r3, #0]
 800230a:	e046      	b.n	800239a <HAL_UART_RxCpltCallback+0x6e2>
	else if (aRxBuffer[0] == 'A') __ADD_COMMAND(cQueue, 88, val); // anti-clockwise rotation with variable
 800230c:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_UART_RxCpltCallback+0x698>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b41      	cmp	r3, #65	; 0x41
 8002312:	d121      	bne.n	8002358 <HAL_UART_RxCpltCallback+0x6a0>
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4a0e      	ldr	r2, [pc, #56]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	2258      	movs	r2, #88	; 0x58
 8002320:	711a      	strb	r2, [r3, #4]
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002328:	b291      	uxth	r1, r2
 800232a:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	460a      	mov	r2, r1
 8002332:	80da      	strh	r2, [r3, #6]
 8002334:	4b07      	ldr	r3, [pc, #28]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	4a06      	ldr	r2, [pc, #24]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 800233c:	7892      	ldrb	r2, [r2, #2]
 800233e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002342:	fb01 f202 	mul.w	r2, r1, r2
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4b02      	ldr	r3, [pc, #8]	; (8002354 <HAL_UART_RxCpltCallback+0x69c>)
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	e024      	b.n	800239a <HAL_UART_RxCpltCallback+0x6e2>
 8002350:	200004d8 	.word	0x200004d8
 8002354:	200004e4 	.word	0x200004e4
	else if (aRxBuffer[0] == 'C') __ADD_COMMAND(cQueue, 89, val); // clockwise rotation with variable
 8002358:	4b45      	ldr	r3, [pc, #276]	; (8002470 <HAL_UART_RxCpltCallback+0x7b8>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b43      	cmp	r3, #67	; 0x43
 800235e:	d11c      	bne.n	800239a <HAL_UART_RxCpltCallback+0x6e2>
 8002360:	4b44      	ldr	r3, [pc, #272]	; (8002474 <HAL_UART_RxCpltCallback+0x7bc>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	4a43      	ldr	r2, [pc, #268]	; (8002474 <HAL_UART_RxCpltCallback+0x7bc>)
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	2259      	movs	r2, #89	; 0x59
 800236c:	711a      	strb	r2, [r3, #4]
 800236e:	4b41      	ldr	r3, [pc, #260]	; (8002474 <HAL_UART_RxCpltCallback+0x7bc>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002374:	b291      	uxth	r1, r2
 8002376:	4a3f      	ldr	r2, [pc, #252]	; (8002474 <HAL_UART_RxCpltCallback+0x7bc>)
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	460a      	mov	r2, r1
 800237e:	80da      	strh	r2, [r3, #6]
 8002380:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <HAL_UART_RxCpltCallback+0x7bc>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	4a3b      	ldr	r2, [pc, #236]	; (8002474 <HAL_UART_RxCpltCallback+0x7bc>)
 8002388:	7892      	ldrb	r2, [r2, #2]
 800238a:	fb93 f1f2 	sdiv	r1, r3, r2
 800238e:	fb01 f202 	mul.w	r2, r1, r2
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b37      	ldr	r3, [pc, #220]	; (8002474 <HAL_UART_RxCpltCallback+0x7bc>)
 8002398:	701a      	strb	r2, [r3, #0]

	if (!__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 800239a:	4b36      	ldr	r3, [pc, #216]	; (8002474 <HAL_UART_RxCpltCallback+0x7bc>)
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	4b35      	ldr	r3, [pc, #212]	; (8002474 <HAL_UART_RxCpltCallback+0x7bc>)
 80023a0:	785b      	ldrb	r3, [r3, #1]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d019      	beq.n	80023da <HAL_UART_RxCpltCallback+0x722>
		__READ_COMMAND(cQueue, curCmd, rxMsg);
 80023a6:	4b33      	ldr	r3, [pc, #204]	; (8002474 <HAL_UART_RxCpltCallback+0x7bc>)
 80023a8:	785b      	ldrb	r3, [r3, #1]
 80023aa:	4a33      	ldr	r2, [pc, #204]	; (8002478 <HAL_UART_RxCpltCallback+0x7c0>)
 80023ac:	4931      	ldr	r1, [pc, #196]	; (8002474 <HAL_UART_RxCpltCallback+0x7bc>)
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <HAL_UART_RxCpltCallback+0x7bc>)
 80023b8:	785b      	ldrb	r3, [r3, #1]
 80023ba:	3301      	adds	r3, #1
 80023bc:	4a2d      	ldr	r2, [pc, #180]	; (8002474 <HAL_UART_RxCpltCallback+0x7bc>)
 80023be:	7892      	ldrb	r2, [r2, #2]
 80023c0:	fb93 f1f2 	sdiv	r1, r3, r2
 80023c4:	fb01 f202 	mul.w	r2, r1, r2
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b29      	ldr	r3, [pc, #164]	; (8002474 <HAL_UART_RxCpltCallback+0x7bc>)
 80023ce:	705a      	strb	r2, [r3, #1]
 80023d0:	4a2a      	ldr	r2, [pc, #168]	; (800247c <HAL_UART_RxCpltCallback+0x7c4>)
 80023d2:	210f      	movs	r1, #15
 80023d4:	482a      	ldr	r0, [pc, #168]	; (8002480 <HAL_UART_RxCpltCallback+0x7c8>)
 80023d6:	f00d f829 	bl	800f42c <sniprintf>
	}

	// clear aRx buffer
	  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <HAL_UART_RxCpltCallback+0x7cc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
	  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 80023e0:	4b29      	ldr	r3, [pc, #164]	; (8002488 <HAL_UART_RxCpltCallback+0x7d0>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	4921      	ldr	r1, [pc, #132]	; (8002470 <HAL_UART_RxCpltCallback+0x7b8>)
 80023ea:	4826      	ldr	r0, [pc, #152]	; (8002484 <HAL_UART_RxCpltCallback+0x7cc>)
 80023ec:	f009 f9f9 	bl	800b7e2 <HAL_UART_Receive_IT>
	    char c1 = aRxBuffer[0];
 80023f0:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <HAL_UART_RxCpltCallback+0x7b8>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		char c2 = aRxBuffer[1];
 80023f8:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <HAL_UART_RxCpltCallback+0x7b8>)
 80023fa:	785b      	ldrb	r3, [r3, #1]
 80023fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		char d[4];

		//d[0] = '0';
		//d[1] = '0';
		//d[2] = '3';
		if(aRxBuffer[2] == '-' && aRxBuffer[3] == '1')
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <HAL_UART_RxCpltCallback+0x7b8>)
 8002402:	789b      	ldrb	r3, [r3, #2]
 8002404:	2b2d      	cmp	r3, #45	; 0x2d
 8002406:	d108      	bne.n	800241a <HAL_UART_RxCpltCallback+0x762>
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_UART_RxCpltCallback+0x7b8>)
 800240a:	78db      	ldrb	r3, [r3, #3]
 800240c:	2b31      	cmp	r3, #49	; 0x31
 800240e:	d104      	bne.n	800241a <HAL_UART_RxCpltCallback+0x762>
			data = -1;
 8002410:	4b1e      	ldr	r3, [pc, #120]	; (800248c <HAL_UART_RxCpltCallback+0x7d4>)
 8002412:	f04f 32ff 	mov.w	r2, #4294967295
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e00d      	b.n	8002436 <HAL_UART_RxCpltCallback+0x77e>
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <HAL_UART_RxCpltCallback+0x7b8>)
 800241c:	885b      	ldrh	r3, [r3, #2]
		else {
			memcpy(d, (void*) &aRxBuffer[2], 2);
 800241e:	83bb      	strh	r3, [r7, #28]
			d[2] = '\0';
 8002420:	2300      	movs	r3, #0
 8002422:	77bb      	strb	r3, [r7, #30]

			data = (uint32_t) atoi(d);
 8002424:	f107 031c 	add.w	r3, r7, #28
 8002428:	4618      	mov	r0, r3
 800242a:	f00c ff6f 	bl	800f30c <atoi>
 800242e:	4603      	mov	r3, r0
 8002430:	461a      	mov	r2, r3
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <HAL_UART_RxCpltCallback+0x7d4>)
 8002434:	601a      	str	r2, [r3, #0]

		//if (c1 == 'n') {
		//	newCmdReceived = 1;

		//}
		moveCmd = c1;
 8002436:	4a16      	ldr	r2, [pc, #88]	; (8002490 <HAL_UART_RxCpltCallback+0x7d8>)
 8002438:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800243c:	7013      	strb	r3, [r2, #0]
		directionCmd = c2;
 800243e:	4a15      	ldr	r2, [pc, #84]	; (8002494 <HAL_UART_RxCpltCallback+0x7dc>)
 8002440:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002444:	7013      	strb	r3, [r2, #0]
		// steeringCmd = c3;
		uint8_t message1[20];

		sprintf(message1, "cmd:%c,%d", directionCmd, data);
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <HAL_UART_RxCpltCallback+0x7dc>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_UART_RxCpltCallback+0x7d4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f107 0008 	add.w	r0, r7, #8
 8002454:	4910      	ldr	r1, [pc, #64]	; (8002498 <HAL_UART_RxCpltCallback+0x7e0>)
 8002456:	f00d f81d 	bl	800f494 <siprintf>
		OLED_ShowString(10, 10, message1);
 800245a:	f107 0308 	add.w	r3, r7, #8
 800245e:	461a      	mov	r2, r3
 8002460:	210a      	movs	r1, #10
 8002462:	200a      	movs	r0, #10
 8002464:	f004 f960 	bl	8006728 <OLED_ShowString>
}
 8002468:	bf00      	nop
 800246a:	3728      	adds	r7, #40	; 0x28
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	200004d8 	.word	0x200004d8
 8002474:	200004e4 	.word	0x200004e4
 8002478:	20000518 	.word	0x20000518
 800247c:	08010b50 	.word	0x08010b50
 8002480:	2000051c 	.word	0x2000051c
 8002484:	20000458 	.word	0x20000458
 8002488:	20000000 	.word	0x20000000
 800248c:	200005e4 	.word	0x200005e4
 8002490:	200005e9 	.word	0x200005e9
 8002494:	200005e8 	.word	0x200005e8
 8002498:	08010b58 	.word	0x08010b58

0800249c <IR_Left_Read>:
//		__READ_COMMAND(cQueue, curCmd, rxMsg);
	}

}
// ir sensor
void IR_Left_Read() {
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80024a0:	4809      	ldr	r0, [pc, #36]	; (80024c8 <IR_Left_Read+0x2c>)
 80024a2:	f004 feb1 	bl	8007208 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 80024a6:	210a      	movs	r1, #10
 80024a8:	4807      	ldr	r0, [pc, #28]	; (80024c8 <IR_Left_Read+0x2c>)
 80024aa:	f004 ffb2 	bl	8007412 <HAL_ADC_PollForConversion>
	iDistanceL = HAL_ADC_GetValue(&hadc1);
 80024ae:	4806      	ldr	r0, [pc, #24]	; (80024c8 <IR_Left_Read+0x2c>)
 80024b0:	f005 f94a 	bl	8007748 <HAL_ADC_GetValue>
 80024b4:	4603      	mov	r3, r0
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <IR_Left_Read+0x30>)
 80024ba:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <IR_Left_Read+0x2c>)
 80024be:	f004 ff75 	bl	80073ac <HAL_ADC_Stop>
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200001c4 	.word	0x200001c4
 80024cc:	200005dc 	.word	0x200005dc

080024d0 <IR_Right_Read>:

void IR_Right_Read() {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 80024d4:	4809      	ldr	r0, [pc, #36]	; (80024fc <IR_Right_Read+0x2c>)
 80024d6:	f004 fe97 	bl	8007208 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 10);
 80024da:	210a      	movs	r1, #10
 80024dc:	4807      	ldr	r0, [pc, #28]	; (80024fc <IR_Right_Read+0x2c>)
 80024de:	f004 ff98 	bl	8007412 <HAL_ADC_PollForConversion>
	iDistanceR = HAL_ADC_GetValue(&hadc2);
 80024e2:	4806      	ldr	r0, [pc, #24]	; (80024fc <IR_Right_Read+0x2c>)
 80024e4:	f005 f930 	bl	8007748 <HAL_ADC_GetValue>
 80024e8:	4603      	mov	r3, r0
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <IR_Right_Read+0x30>)
 80024ee:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <IR_Right_Read+0x2c>)
 80024f2:	f004 ff5b 	bl	80073ac <HAL_ADC_Stop>
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000020c 	.word	0x2000020c
 8002500:	200005de 	.word	0x200005de

08002504 <StartIRTask>:
/* USER CODE END Header_StartIRTask */
void StartIRTask(void *argument) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartIRTask */
	/* Infinite loop */
	uint8_t irVal[20] = { 0 };
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	f107 0310 	add.w	r3, r7, #16
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
	for (;;) {
		HAL_UART_Transmit(&huart3, (uint8_t *) "ACK|X\r\n", 7, 0xFFFF);
 800251e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002522:	2207      	movs	r2, #7
 8002524:	4925      	ldr	r1, [pc, #148]	; (80025bc <StartIRTask+0xb8>)
 8002526:	4826      	ldr	r0, [pc, #152]	; (80025c0 <StartIRTask+0xbc>)
 8002528:	f009 f8c9 	bl	800b6be <HAL_UART_Transmit>

		sprintf(irVal, "L: %d R: %d \0", (int) iDistanceL, iDistanceR);
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <StartIRTask+0xc0>)
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <StartIRTask+0xc4>)
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	f107 000c 	add.w	r0, r7, #12
 800253a:	4924      	ldr	r1, [pc, #144]	; (80025cc <StartIRTask+0xc8>)
 800253c:	f00c ffaa 	bl	800f494 <siprintf>
		OLED_ShowString(0, 30, irVal);
 8002540:	f107 030c 	add.w	r3, r7, #12
 8002544:	461a      	mov	r2, r3
 8002546:	211e      	movs	r1, #30
 8002548:	2000      	movs	r0, #0
 800254a:	f004 f8ed 	bl	8006728 <OLED_ShowString>
		if (irResumeFlag == 1) {
 800254e:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <StartIRTask+0xcc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d104      	bne.n	8002560 <StartIRTask+0x5c>
			vTaskSuspend(IRTaskHandle);
 8002556:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <StartIRTask+0xd0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f00b f9b0 	bl	800d8c0 <vTaskSuspend>
		}
		IR_Left_Read();
 8002560:	f7ff ff9c 	bl	800249c <IR_Left_Read>
		IR_Right_Read();
 8002564:	f7ff ffb4 	bl	80024d0 <IR_Right_Read>

		if ((aRxBuffer[1] == 'L' && (iDistanceL <= irThreshold - 500)
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <StartIRTask+0xd4>)
 800256a:	785b      	ldrb	r3, [r3, #1]
 800256c:	2b4c      	cmp	r3, #76	; 0x4c
 800256e:	d10b      	bne.n	8002588 <StartIRTask+0x84>
 8002570:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <StartIRTask+0xd8>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	f2a3 13f3 	subw	r3, r3, #499	; 0x1f3
 8002578:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <StartIRTask+0xc0>)
 800257a:	8812      	ldrh	r2, [r2, #0]
 800257c:	4293      	cmp	r3, r2
 800257e:	dd03      	ble.n	8002588 <StartIRTask+0x84>
				&& irFlag == 1)
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <StartIRTask+0xdc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d00f      	beq.n	80025a8 <StartIRTask+0xa4>
				|| (aRxBuffer[1] == 'R' && (iDistanceR <= irThreshold - 500)
 8002588:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <StartIRTask+0xd4>)
 800258a:	785b      	ldrb	r3, [r3, #1]
 800258c:	2b52      	cmp	r3, #82	; 0x52
 800258e:	d110      	bne.n	80025b2 <StartIRTask+0xae>
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <StartIRTask+0xd8>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	f2a3 13f3 	subw	r3, r3, #499	; 0x1f3
 8002598:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <StartIRTask+0xc4>)
 800259a:	8812      	ldrh	r2, [r2, #0]
 800259c:	4293      	cmp	r3, r2
 800259e:	dd08      	ble.n	80025b2 <StartIRTask+0xae>
						&& irFlag == 1)) {
 80025a0:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <StartIRTask+0xdc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d104      	bne.n	80025b2 <StartIRTask+0xae>
			irFlag = 0;
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <StartIRTask+0xdc>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
			motorStop();
 80025ae:	f003 fe6b 	bl	8006288 <motorStop>
		}

		osDelay(2000);
 80025b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80025b6:	f00a f9bd 	bl	800c934 <osDelay>
		HAL_UART_Transmit(&huart3, (uint8_t *) "ACK|X\r\n", 7, 0xFFFF);
 80025ba:	e7b0      	b.n	800251e <StartIRTask+0x1a>
 80025bc:	08010b64 	.word	0x08010b64
 80025c0:	20000458 	.word	0x20000458
 80025c4:	200005dc 	.word	0x200005dc
 80025c8:	200005de 	.word	0x200005de
 80025cc:	08010b6c 	.word	0x08010b6c
 80025d0:	20000140 	.word	0x20000140
 80025d4:	200004d4 	.word	0x200004d4
 80025d8:	200004d8 	.word	0x200004d8
 80025dc:	2000013e 	.word	0x2000013e
 80025e0:	200005e0 	.word	0x200005e0

080025e4 <PIDConfigInit>:
	}
	/* USER CODE END StartIRTask */
}

void PIDConfigInit(PIDConfig * cfg, const float Kp, const float Ki, const float Kd) {
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80025f0:	edc7 0a01 	vstr	s1, [r7, #4]
 80025f4:	ed87 1a00 	vstr	s2, [r7]
	cfg->Kp = Kp;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	601a      	str	r2, [r3, #0]
	cfg->Ki = Ki;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	605a      	str	r2, [r3, #4]
	cfg->Kd = Kd;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	609a      	str	r2, [r3, #8]
	cfg->ek1 = 0;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	60da      	str	r2, [r3, #12]
	cfg->ekSum = 0;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	611a      	str	r2, [r3, #16]
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <PIDConfigReset>:

void PIDConfigReset(PIDConfig * cfg) {
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
	cfg->ek1 = 0;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
	cfg->ekSum = 0;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	611a      	str	r2, [r3, #16]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <StraightLineMove>:

int8_t dir = 1;
int correction = 0;
//PIDConfig curPIDConfig;

void StraightLineMove(const uint8_t speedMode) {
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af04      	add	r7, sp, #16
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
	__Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 8002656:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800265a:	9302      	str	r3, [sp, #8]
 800265c:	2302      	movs	r3, #2
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	4ba9      	ldr	r3, [pc, #676]	; (8002908 <StraightLineMove+0x2bc>)
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	2301      	movs	r3, #1
 8002666:	2237      	movs	r2, #55	; 0x37
 8002668:	21d0      	movs	r1, #208	; 0xd0
 800266a:	48a8      	ldr	r0, [pc, #672]	; (800290c <StraightLineMove+0x2c0>)
 800266c:	f006 f858 	bl	8008720 <HAL_I2C_Mem_Read>
 8002670:	4ba5      	ldr	r3, [pc, #660]	; (8002908 <StraightLineMove+0x2bc>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	b21a      	sxth	r2, r3
 8002678:	4ba3      	ldr	r3, [pc, #652]	; (8002908 <StraightLineMove+0x2bc>)
 800267a:	785b      	ldrb	r3, [r3, #1]
 800267c:	b21b      	sxth	r3, r3
 800267e:	4313      	orrs	r3, r2
 8002680:	b21a      	sxth	r2, r3
 8002682:	4ba3      	ldr	r3, [pc, #652]	; (8002910 <StraightLineMove+0x2c4>)
 8002684:	801a      	strh	r2, [r3, #0]
	dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 8002686:	4ba3      	ldr	r3, [pc, #652]	; (8002914 <StraightLineMove+0x2c8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b10      	cmp	r3, #16
 8002692:	d101      	bne.n	8002698 <StraightLineMove+0x4c>
 8002694:	2201      	movs	r2, #1
 8002696:	e001      	b.n	800269c <StraightLineMove+0x50>
 8002698:	f04f 32ff 	mov.w	r2, #4294967295
 800269c:	4b9e      	ldr	r3, [pc, #632]	; (8002918 <StraightLineMove+0x2cc>)
 800269e:	701a      	strb	r2, [r3, #0]
	angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 80026a0:	4b9b      	ldr	r3, [pc, #620]	; (8002910 <StraightLineMove+0x2c4>)
 80026a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a6:	f113 0f04 	cmn.w	r3, #4
 80026aa:	db04      	blt.n	80026b6 <StraightLineMove+0x6a>
 80026ac:	4b98      	ldr	r3, [pc, #608]	; (8002910 <StraightLineMove+0x2c4>)
 80026ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026b2:	2b0b      	cmp	r3, #11
 80026b4:	dd07      	ble.n	80026c6 <StraightLineMove+0x7a>
 80026b6:	4b96      	ldr	r3, [pc, #600]	; (8002910 <StraightLineMove+0x2c4>)
 80026b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026bc:	ee07 3a90 	vmov	s15, r3
 80026c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026c4:	e001      	b.n	80026ca <StraightLineMove+0x7e>
 80026c6:	eddf 7a95 	vldr	s15, [pc, #596]	; 800291c <StraightLineMove+0x2d0>
 80026ca:	4b95      	ldr	r3, [pc, #596]	; (8002920 <StraightLineMove+0x2d4>)
 80026cc:	ed93 7a00 	vldr	s14, [r3]
 80026d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026d4:	4b92      	ldr	r3, [pc, #584]	; (8002920 <StraightLineMove+0x2d4>)
 80026d6:	edc3 7a00 	vstr	s15, [r3]

	if (speedMode == SPEED_MODE_T) __PID_SPEED_T(pidTSlow, angleNow, correction, dir, newDutyL, newDutyR);
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d164      	bne.n	80027aa <StraightLineMove+0x15e>
 80026e0:	4b90      	ldr	r3, [pc, #576]	; (8002924 <StraightLineMove+0x2d8>)
 80026e2:	ed93 7a00 	vldr	s14, [r3]
 80026e6:	4b8e      	ldr	r3, [pc, #568]	; (8002920 <StraightLineMove+0x2d4>)
 80026e8:	edd3 7a00 	vldr	s15, [r3]
 80026ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026f0:	4b8c      	ldr	r3, [pc, #560]	; (8002924 <StraightLineMove+0x2d8>)
 80026f2:	edd3 6a01 	vldr	s13, [r3, #4]
 80026f6:	4b8b      	ldr	r3, [pc, #556]	; (8002924 <StraightLineMove+0x2d8>)
 80026f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80026fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002700:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002704:	4b87      	ldr	r3, [pc, #540]	; (8002924 <StraightLineMove+0x2d8>)
 8002706:	edd3 6a02 	vldr	s13, [r3, #8]
 800270a:	4b86      	ldr	r3, [pc, #536]	; (8002924 <StraightLineMove+0x2d8>)
 800270c:	ed93 6a03 	vldr	s12, [r3, #12]
 8002710:	4b83      	ldr	r3, [pc, #524]	; (8002920 <StraightLineMove+0x2d4>)
 8002712:	edd3 7a00 	vldr	s15, [r3]
 8002716:	ee76 7a67 	vsub.f32	s15, s12, s15
 800271a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800271e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002722:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002726:	ee17 2a90 	vmov	r2, s15
 800272a:	4b7f      	ldr	r3, [pc, #508]	; (8002928 <StraightLineMove+0x2dc>)
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	4b7c      	ldr	r3, [pc, #496]	; (8002920 <StraightLineMove+0x2d4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a7c      	ldr	r2, [pc, #496]	; (8002924 <StraightLineMove+0x2d8>)
 8002734:	60d3      	str	r3, [r2, #12]
 8002736:	4b7b      	ldr	r3, [pc, #492]	; (8002924 <StraightLineMove+0x2d8>)
 8002738:	ed93 7a04 	vldr	s14, [r3, #16]
 800273c:	4b78      	ldr	r3, [pc, #480]	; (8002920 <StraightLineMove+0x2d4>)
 800273e:	edd3 7a00 	vldr	s15, [r3]
 8002742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002746:	4b77      	ldr	r3, [pc, #476]	; (8002924 <StraightLineMove+0x2d8>)
 8002748:	edc3 7a04 	vstr	s15, [r3, #16]
 800274c:	4b76      	ldr	r3, [pc, #472]	; (8002928 <StraightLineMove+0x2dc>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002754:	dc06      	bgt.n	8002764 <StraightLineMove+0x118>
 8002756:	4b74      	ldr	r3, [pc, #464]	; (8002928 <StraightLineMove+0x2dc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a74      	ldr	r2, [pc, #464]	; (800292c <StraightLineMove+0x2e0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	bfb8      	it	lt
 8002760:	4613      	movlt	r3, r2
 8002762:	e001      	b.n	8002768 <StraightLineMove+0x11c>
 8002764:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002768:	4a6f      	ldr	r2, [pc, #444]	; (8002928 <StraightLineMove+0x2dc>)
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <StraightLineMove+0x2cc>)
 800276e:	f993 3000 	ldrsb.w	r3, [r3]
 8002772:	b29a      	uxth	r2, r3
 8002774:	4b6c      	ldr	r3, [pc, #432]	; (8002928 <StraightLineMove+0x2dc>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	b29b      	uxth	r3, r3
 800277a:	fb12 f303 	smulbb	r3, r2, r3
 800277e:	b29b      	uxth	r3, r3
 8002780:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8002784:	b29a      	uxth	r2, r3
 8002786:	4b6a      	ldr	r3, [pc, #424]	; (8002930 <StraightLineMove+0x2e4>)
 8002788:	801a      	strh	r2, [r3, #0]
 800278a:	4b63      	ldr	r3, [pc, #396]	; (8002918 <StraightLineMove+0x2cc>)
 800278c:	f993 3000 	ldrsb.w	r3, [r3]
 8002790:	b29a      	uxth	r2, r3
 8002792:	4b65      	ldr	r3, [pc, #404]	; (8002928 <StraightLineMove+0x2dc>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	b29b      	uxth	r3, r3
 8002798:	fb12 f303 	smulbb	r3, r2, r3
 800279c:	b29b      	uxth	r3, r3
 800279e:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	4b63      	ldr	r3, [pc, #396]	; (8002934 <StraightLineMove+0x2e8>)
 80027a6:	801a      	strh	r2, [r3, #0]
 80027a8:	e0ef      	b.n	800298a <StraightLineMove+0x33e>
	else if (speedMode == SPEED_MODE_2) __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d165      	bne.n	800287c <StraightLineMove+0x230>
 80027b0:	4b61      	ldr	r3, [pc, #388]	; (8002938 <StraightLineMove+0x2ec>)
 80027b2:	ed93 7a00 	vldr	s14, [r3]
 80027b6:	4b5a      	ldr	r3, [pc, #360]	; (8002920 <StraightLineMove+0x2d4>)
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027c0:	4b5d      	ldr	r3, [pc, #372]	; (8002938 <StraightLineMove+0x2ec>)
 80027c2:	edd3 6a01 	vldr	s13, [r3, #4]
 80027c6:	4b5c      	ldr	r3, [pc, #368]	; (8002938 <StraightLineMove+0x2ec>)
 80027c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80027cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027d4:	4b58      	ldr	r3, [pc, #352]	; (8002938 <StraightLineMove+0x2ec>)
 80027d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80027da:	4b57      	ldr	r3, [pc, #348]	; (8002938 <StraightLineMove+0x2ec>)
 80027dc:	ed93 6a03 	vldr	s12, [r3, #12]
 80027e0:	4b4f      	ldr	r3, [pc, #316]	; (8002920 <StraightLineMove+0x2d4>)
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80027ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027f6:	ee17 2a90 	vmov	r2, s15
 80027fa:	4b4b      	ldr	r3, [pc, #300]	; (8002928 <StraightLineMove+0x2dc>)
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	4b48      	ldr	r3, [pc, #288]	; (8002920 <StraightLineMove+0x2d4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a4d      	ldr	r2, [pc, #308]	; (8002938 <StraightLineMove+0x2ec>)
 8002804:	60d3      	str	r3, [r2, #12]
 8002806:	4b4c      	ldr	r3, [pc, #304]	; (8002938 <StraightLineMove+0x2ec>)
 8002808:	ed93 7a04 	vldr	s14, [r3, #16]
 800280c:	4b44      	ldr	r3, [pc, #272]	; (8002920 <StraightLineMove+0x2d4>)
 800280e:	edd3 7a00 	vldr	s15, [r3]
 8002812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002816:	4b48      	ldr	r3, [pc, #288]	; (8002938 <StraightLineMove+0x2ec>)
 8002818:	edc3 7a04 	vstr	s15, [r3, #16]
 800281c:	4b42      	ldr	r3, [pc, #264]	; (8002928 <StraightLineMove+0x2dc>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002824:	dc06      	bgt.n	8002834 <StraightLineMove+0x1e8>
 8002826:	4b40      	ldr	r3, [pc, #256]	; (8002928 <StraightLineMove+0x2dc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a44      	ldr	r2, [pc, #272]	; (800293c <StraightLineMove+0x2f0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	bfb8      	it	lt
 8002830:	4613      	movlt	r3, r2
 8002832:	e001      	b.n	8002838 <StraightLineMove+0x1ec>
 8002834:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002838:	4a3b      	ldr	r2, [pc, #236]	; (8002928 <StraightLineMove+0x2dc>)
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	4b36      	ldr	r3, [pc, #216]	; (8002918 <StraightLineMove+0x2cc>)
 800283e:	f993 3000 	ldrsb.w	r3, [r3]
 8002842:	b29a      	uxth	r2, r3
 8002844:	4b38      	ldr	r3, [pc, #224]	; (8002928 <StraightLineMove+0x2dc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	b29b      	uxth	r3, r3
 800284a:	fb12 f303 	smulbb	r3, r2, r3
 800284e:	b29b      	uxth	r3, r3
 8002850:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002854:	b29a      	uxth	r2, r3
 8002856:	4b36      	ldr	r3, [pc, #216]	; (8002930 <StraightLineMove+0x2e4>)
 8002858:	801a      	strh	r2, [r3, #0]
 800285a:	4b2f      	ldr	r3, [pc, #188]	; (8002918 <StraightLineMove+0x2cc>)
 800285c:	f993 3000 	ldrsb.w	r3, [r3]
 8002860:	b29a      	uxth	r2, r3
 8002862:	4b31      	ldr	r3, [pc, #196]	; (8002928 <StraightLineMove+0x2dc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	b29b      	uxth	r3, r3
 8002868:	fb12 f303 	smulbb	r3, r2, r3
 800286c:	b29b      	uxth	r3, r3
 800286e:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8002872:	3308      	adds	r3, #8
 8002874:	b29a      	uxth	r2, r3
 8002876:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <StraightLineMove+0x2e8>)
 8002878:	801a      	strh	r2, [r3, #0]
 800287a:	e086      	b.n	800298a <StraightLineMove+0x33e>
	else if (speedMode == SPEED_MODE_1) __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	2b01      	cmp	r3, #1
 8002880:	f040 8083 	bne.w	800298a <StraightLineMove+0x33e>
 8002884:	4b2e      	ldr	r3, [pc, #184]	; (8002940 <StraightLineMove+0x2f4>)
 8002886:	ed93 7a00 	vldr	s14, [r3]
 800288a:	4b25      	ldr	r3, [pc, #148]	; (8002920 <StraightLineMove+0x2d4>)
 800288c:	edd3 7a00 	vldr	s15, [r3]
 8002890:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002894:	4b2a      	ldr	r3, [pc, #168]	; (8002940 <StraightLineMove+0x2f4>)
 8002896:	edd3 6a01 	vldr	s13, [r3, #4]
 800289a:	4b29      	ldr	r3, [pc, #164]	; (8002940 <StraightLineMove+0x2f4>)
 800289c:	edd3 7a04 	vldr	s15, [r3, #16]
 80028a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028a8:	4b25      	ldr	r3, [pc, #148]	; (8002940 <StraightLineMove+0x2f4>)
 80028aa:	edd3 6a02 	vldr	s13, [r3, #8]
 80028ae:	4b24      	ldr	r3, [pc, #144]	; (8002940 <StraightLineMove+0x2f4>)
 80028b0:	ed93 6a03 	vldr	s12, [r3, #12]
 80028b4:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <StraightLineMove+0x2d4>)
 80028b6:	edd3 7a00 	vldr	s15, [r3]
 80028ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 80028be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ca:	ee17 2a90 	vmov	r2, s15
 80028ce:	4b16      	ldr	r3, [pc, #88]	; (8002928 <StraightLineMove+0x2dc>)
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	4b13      	ldr	r3, [pc, #76]	; (8002920 <StraightLineMove+0x2d4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1a      	ldr	r2, [pc, #104]	; (8002940 <StraightLineMove+0x2f4>)
 80028d8:	60d3      	str	r3, [r2, #12]
 80028da:	4b19      	ldr	r3, [pc, #100]	; (8002940 <StraightLineMove+0x2f4>)
 80028dc:	ed93 7a04 	vldr	s14, [r3, #16]
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <StraightLineMove+0x2d4>)
 80028e2:	edd3 7a00 	vldr	s15, [r3]
 80028e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <StraightLineMove+0x2f4>)
 80028ec:	edc3 7a04 	vstr	s15, [r3, #16]
 80028f0:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <StraightLineMove+0x2dc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80028f8:	dc24      	bgt.n	8002944 <StraightLineMove+0x2f8>
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <StraightLineMove+0x2dc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a0f      	ldr	r2, [pc, #60]	; (800293c <StraightLineMove+0x2f0>)
 8002900:	4293      	cmp	r3, r2
 8002902:	bfb8      	it	lt
 8002904:	4613      	movlt	r3, r2
 8002906:	e01f      	b.n	8002948 <StraightLineMove+0x2fc>
 8002908:	20000548 	.word	0x20000548
 800290c:	20000254 	.word	0x20000254
 8002910:	2000054a 	.word	0x2000054a
 8002914:	200002f0 	.word	0x200002f0
 8002918:	20000144 	.word	0x20000144
 800291c:	00000000 	.word	0x00000000
 8002920:	20000544 	.word	0x20000544
 8002924:	20000574 	.word	0x20000574
 8002928:	200005f4 	.word	0x200005f4
 800292c:	fffffda8 	.word	0xfffffda8
 8002930:	2000054c 	.word	0x2000054c
 8002934:	2000054e 	.word	0x2000054e
 8002938:	20000588 	.word	0x20000588
 800293c:	fffffd44 	.word	0xfffffd44
 8002940:	20000560 	.word	0x20000560
 8002944:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002948:	4a17      	ldr	r2, [pc, #92]	; (80029a8 <StraightLineMove+0x35c>)
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b17      	ldr	r3, [pc, #92]	; (80029ac <StraightLineMove+0x360>)
 800294e:	f993 3000 	ldrsb.w	r3, [r3]
 8002952:	b29a      	uxth	r2, r3
 8002954:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <StraightLineMove+0x35c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	fb12 f303 	smulbb	r3, r2, r3
 800295e:	b29b      	uxth	r3, r3
 8002960:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8002964:	b29a      	uxth	r2, r3
 8002966:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <StraightLineMove+0x364>)
 8002968:	801a      	strh	r2, [r3, #0]
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <StraightLineMove+0x360>)
 800296c:	f993 3000 	ldrsb.w	r3, [r3]
 8002970:	b29a      	uxth	r2, r3
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <StraightLineMove+0x35c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	b29b      	uxth	r3, r3
 8002978:	fb12 f303 	smulbb	r3, r2, r3
 800297c:	b29b      	uxth	r3, r3
 800297e:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 8002982:	330c      	adds	r3, #12
 8002984:	b29a      	uxth	r2, r3
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <StraightLineMove+0x368>)
 8002988:	801a      	strh	r2, [r3, #0]

	__SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <StraightLineMove+0x364>)
 800298c:	881a      	ldrh	r2, [r3, #0]
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <StraightLineMove+0x36c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	635a      	str	r2, [r3, #52]	; 0x34
 8002994:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <StraightLineMove+0x368>)
 8002996:	881a      	ldrh	r2, [r3, #0]
 8002998:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <StraightLineMove+0x36c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	200005f4 	.word	0x200005f4
 80029ac:	20000144 	.word	0x20000144
 80029b0:	2000054c 	.word	0x2000054c
 80029b4:	2000054e 	.word	0x2000054e
 80029b8:	20000410 	.word	0x20000410

080029bc <StraightLineMoveSpeedScale>:

void StraightLineMoveSpeedScale(const uint8_t speedMode, float * speedScale) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af04      	add	r7, sp, #16
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
	__Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 80029c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029cc:	9302      	str	r3, [sp, #8]
 80029ce:	2302      	movs	r3, #2
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	4b9b      	ldr	r3, [pc, #620]	; (8002c40 <StraightLineMoveSpeedScale+0x284>)
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	2301      	movs	r3, #1
 80029d8:	2237      	movs	r2, #55	; 0x37
 80029da:	21d0      	movs	r1, #208	; 0xd0
 80029dc:	4899      	ldr	r0, [pc, #612]	; (8002c44 <StraightLineMoveSpeedScale+0x288>)
 80029de:	f005 fe9f 	bl	8008720 <HAL_I2C_Mem_Read>
 80029e2:	4b97      	ldr	r3, [pc, #604]	; (8002c40 <StraightLineMoveSpeedScale+0x284>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	021b      	lsls	r3, r3, #8
 80029e8:	b21a      	sxth	r2, r3
 80029ea:	4b95      	ldr	r3, [pc, #596]	; (8002c40 <StraightLineMoveSpeedScale+0x284>)
 80029ec:	785b      	ldrb	r3, [r3, #1]
 80029ee:	b21b      	sxth	r3, r3
 80029f0:	4313      	orrs	r3, r2
 80029f2:	b21a      	sxth	r2, r3
 80029f4:	4b94      	ldr	r3, [pc, #592]	; (8002c48 <StraightLineMoveSpeedScale+0x28c>)
 80029f6:	801a      	strh	r2, [r3, #0]
	dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 80029f8:	4b94      	ldr	r3, [pc, #592]	; (8002c4c <StraightLineMoveSpeedScale+0x290>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b10      	cmp	r3, #16
 8002a04:	d101      	bne.n	8002a0a <StraightLineMoveSpeedScale+0x4e>
 8002a06:	2201      	movs	r2, #1
 8002a08:	e001      	b.n	8002a0e <StraightLineMoveSpeedScale+0x52>
 8002a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0e:	4b90      	ldr	r3, [pc, #576]	; (8002c50 <StraightLineMoveSpeedScale+0x294>)
 8002a10:	701a      	strb	r2, [r3, #0]
	angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002a12:	4b8d      	ldr	r3, [pc, #564]	; (8002c48 <StraightLineMoveSpeedScale+0x28c>)
 8002a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a18:	f113 0f04 	cmn.w	r3, #4
 8002a1c:	db04      	blt.n	8002a28 <StraightLineMoveSpeedScale+0x6c>
 8002a1e:	4b8a      	ldr	r3, [pc, #552]	; (8002c48 <StraightLineMoveSpeedScale+0x28c>)
 8002a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a24:	2b0b      	cmp	r3, #11
 8002a26:	dd07      	ble.n	8002a38 <StraightLineMoveSpeedScale+0x7c>
 8002a28:	4b87      	ldr	r3, [pc, #540]	; (8002c48 <StraightLineMoveSpeedScale+0x28c>)
 8002a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a36:	e001      	b.n	8002a3c <StraightLineMoveSpeedScale+0x80>
 8002a38:	eddf 7a86 	vldr	s15, [pc, #536]	; 8002c54 <StraightLineMoveSpeedScale+0x298>
 8002a3c:	4b86      	ldr	r3, [pc, #536]	; (8002c58 <StraightLineMoveSpeedScale+0x29c>)
 8002a3e:	ed93 7a00 	vldr	s14, [r3]
 8002a42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a46:	4b84      	ldr	r3, [pc, #528]	; (8002c58 <StraightLineMoveSpeedScale+0x29c>)
 8002a48:	edc3 7a00 	vstr	s15, [r3]
	if (speedMode == SPEED_MODE_1) __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d165      	bne.n	8002b1e <StraightLineMoveSpeedScale+0x162>
 8002a52:	4b82      	ldr	r3, [pc, #520]	; (8002c5c <StraightLineMoveSpeedScale+0x2a0>)
 8002a54:	ed93 7a00 	vldr	s14, [r3]
 8002a58:	4b7f      	ldr	r3, [pc, #508]	; (8002c58 <StraightLineMoveSpeedScale+0x29c>)
 8002a5a:	edd3 7a00 	vldr	s15, [r3]
 8002a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a62:	4b7e      	ldr	r3, [pc, #504]	; (8002c5c <StraightLineMoveSpeedScale+0x2a0>)
 8002a64:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a68:	4b7c      	ldr	r3, [pc, #496]	; (8002c5c <StraightLineMoveSpeedScale+0x2a0>)
 8002a6a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a76:	4b79      	ldr	r3, [pc, #484]	; (8002c5c <StraightLineMoveSpeedScale+0x2a0>)
 8002a78:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a7c:	4b77      	ldr	r3, [pc, #476]	; (8002c5c <StraightLineMoveSpeedScale+0x2a0>)
 8002a7e:	ed93 6a03 	vldr	s12, [r3, #12]
 8002a82:	4b75      	ldr	r3, [pc, #468]	; (8002c58 <StraightLineMoveSpeedScale+0x29c>)
 8002a84:	edd3 7a00 	vldr	s15, [r3]
 8002a88:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a98:	ee17 2a90 	vmov	r2, s15
 8002a9c:	4b70      	ldr	r3, [pc, #448]	; (8002c60 <StraightLineMoveSpeedScale+0x2a4>)
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	4b6d      	ldr	r3, [pc, #436]	; (8002c58 <StraightLineMoveSpeedScale+0x29c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a6d      	ldr	r2, [pc, #436]	; (8002c5c <StraightLineMoveSpeedScale+0x2a0>)
 8002aa6:	60d3      	str	r3, [r2, #12]
 8002aa8:	4b6c      	ldr	r3, [pc, #432]	; (8002c5c <StraightLineMoveSpeedScale+0x2a0>)
 8002aaa:	ed93 7a04 	vldr	s14, [r3, #16]
 8002aae:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <StraightLineMoveSpeedScale+0x29c>)
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab8:	4b68      	ldr	r3, [pc, #416]	; (8002c5c <StraightLineMoveSpeedScale+0x2a0>)
 8002aba:	edc3 7a04 	vstr	s15, [r3, #16]
 8002abe:	4b68      	ldr	r3, [pc, #416]	; (8002c60 <StraightLineMoveSpeedScale+0x2a4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002ac6:	dc06      	bgt.n	8002ad6 <StraightLineMoveSpeedScale+0x11a>
 8002ac8:	4b65      	ldr	r3, [pc, #404]	; (8002c60 <StraightLineMoveSpeedScale+0x2a4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a65      	ldr	r2, [pc, #404]	; (8002c64 <StraightLineMoveSpeedScale+0x2a8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	bfb8      	it	lt
 8002ad2:	4613      	movlt	r3, r2
 8002ad4:	e001      	b.n	8002ada <StraightLineMoveSpeedScale+0x11e>
 8002ad6:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002ada:	4a61      	ldr	r2, [pc, #388]	; (8002c60 <StraightLineMoveSpeedScale+0x2a4>)
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b5c      	ldr	r3, [pc, #368]	; (8002c50 <StraightLineMoveSpeedScale+0x294>)
 8002ae0:	f993 3000 	ldrsb.w	r3, [r3]
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	4b5e      	ldr	r3, [pc, #376]	; (8002c60 <StraightLineMoveSpeedScale+0x2a4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	fb12 f303 	smulbb	r3, r2, r3
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	4b5b      	ldr	r3, [pc, #364]	; (8002c68 <StraightLineMoveSpeedScale+0x2ac>)
 8002afa:	801a      	strh	r2, [r3, #0]
 8002afc:	4b54      	ldr	r3, [pc, #336]	; (8002c50 <StraightLineMoveSpeedScale+0x294>)
 8002afe:	f993 3000 	ldrsb.w	r3, [r3]
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	4b56      	ldr	r3, [pc, #344]	; (8002c60 <StraightLineMoveSpeedScale+0x2a4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	fb12 f303 	smulbb	r3, r2, r3
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 8002b14:	330c      	adds	r3, #12
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	4b54      	ldr	r3, [pc, #336]	; (8002c6c <StraightLineMoveSpeedScale+0x2b0>)
 8002b1a:	801a      	strh	r2, [r3, #0]
 8002b1c:	e067      	b.n	8002bee <StraightLineMoveSpeedScale+0x232>
	else if (speedMode == SPEED_MODE_2) __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d164      	bne.n	8002bee <StraightLineMoveSpeedScale+0x232>
 8002b24:	4b52      	ldr	r3, [pc, #328]	; (8002c70 <StraightLineMoveSpeedScale+0x2b4>)
 8002b26:	ed93 7a00 	vldr	s14, [r3]
 8002b2a:	4b4b      	ldr	r3, [pc, #300]	; (8002c58 <StraightLineMoveSpeedScale+0x29c>)
 8002b2c:	edd3 7a00 	vldr	s15, [r3]
 8002b30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b34:	4b4e      	ldr	r3, [pc, #312]	; (8002c70 <StraightLineMoveSpeedScale+0x2b4>)
 8002b36:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b3a:	4b4d      	ldr	r3, [pc, #308]	; (8002c70 <StraightLineMoveSpeedScale+0x2b4>)
 8002b3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b48:	4b49      	ldr	r3, [pc, #292]	; (8002c70 <StraightLineMoveSpeedScale+0x2b4>)
 8002b4a:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b4e:	4b48      	ldr	r3, [pc, #288]	; (8002c70 <StraightLineMoveSpeedScale+0x2b4>)
 8002b50:	ed93 6a03 	vldr	s12, [r3, #12]
 8002b54:	4b40      	ldr	r3, [pc, #256]	; (8002c58 <StraightLineMoveSpeedScale+0x29c>)
 8002b56:	edd3 7a00 	vldr	s15, [r3]
 8002b5a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b6a:	ee17 2a90 	vmov	r2, s15
 8002b6e:	4b3c      	ldr	r3, [pc, #240]	; (8002c60 <StraightLineMoveSpeedScale+0x2a4>)
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <StraightLineMoveSpeedScale+0x29c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a3e      	ldr	r2, [pc, #248]	; (8002c70 <StraightLineMoveSpeedScale+0x2b4>)
 8002b78:	60d3      	str	r3, [r2, #12]
 8002b7a:	4b3d      	ldr	r3, [pc, #244]	; (8002c70 <StraightLineMoveSpeedScale+0x2b4>)
 8002b7c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002b80:	4b35      	ldr	r3, [pc, #212]	; (8002c58 <StraightLineMoveSpeedScale+0x29c>)
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8a:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <StraightLineMoveSpeedScale+0x2b4>)
 8002b8c:	edc3 7a04 	vstr	s15, [r3, #16]
 8002b90:	4b33      	ldr	r3, [pc, #204]	; (8002c60 <StraightLineMoveSpeedScale+0x2a4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002b98:	dc06      	bgt.n	8002ba8 <StraightLineMoveSpeedScale+0x1ec>
 8002b9a:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <StraightLineMoveSpeedScale+0x2a4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a31      	ldr	r2, [pc, #196]	; (8002c64 <StraightLineMoveSpeedScale+0x2a8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	bfb8      	it	lt
 8002ba4:	4613      	movlt	r3, r2
 8002ba6:	e001      	b.n	8002bac <StraightLineMoveSpeedScale+0x1f0>
 8002ba8:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002bac:	4a2c      	ldr	r2, [pc, #176]	; (8002c60 <StraightLineMoveSpeedScale+0x2a4>)
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b27      	ldr	r3, [pc, #156]	; (8002c50 <StraightLineMoveSpeedScale+0x294>)
 8002bb2:	f993 3000 	ldrsb.w	r3, [r3]
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	4b29      	ldr	r3, [pc, #164]	; (8002c60 <StraightLineMoveSpeedScale+0x2a4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	fb12 f303 	smulbb	r3, r2, r3
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <StraightLineMoveSpeedScale+0x2ac>)
 8002bcc:	801a      	strh	r2, [r3, #0]
 8002bce:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <StraightLineMoveSpeedScale+0x294>)
 8002bd0:	f993 3000 	ldrsb.w	r3, [r3]
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <StraightLineMoveSpeedScale+0x2a4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	fb12 f303 	smulbb	r3, r2, r3
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8002be6:	3308      	adds	r3, #8
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <StraightLineMoveSpeedScale+0x2b0>)
 8002bec:	801a      	strh	r2, [r3, #0]

	__SET_MOTOR_DUTY(&htim8, newDutyL * (*speedScale), newDutyR * (*speedScale));
 8002bee:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <StraightLineMoveSpeedScale+0x2ac>)
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	ee07 3a90 	vmov	s15, r3
 8002bf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	edd3 7a00 	vldr	s15, [r3]
 8002c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c04:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <StraightLineMoveSpeedScale+0x2b8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c0c:	ee17 2a90 	vmov	r2, s15
 8002c10:	635a      	str	r2, [r3, #52]	; 0x34
 8002c12:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <StraightLineMoveSpeedScale+0x2b0>)
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	ee07 3a90 	vmov	s15, r3
 8002c1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	edd3 7a00 	vldr	s15, [r3]
 8002c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c28:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <StraightLineMoveSpeedScale+0x2b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c30:	ee17 2a90 	vmov	r2, s15
 8002c34:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000548 	.word	0x20000548
 8002c44:	20000254 	.word	0x20000254
 8002c48:	2000054a 	.word	0x2000054a
 8002c4c:	200002f0 	.word	0x200002f0
 8002c50:	20000144 	.word	0x20000144
 8002c54:	00000000 	.word	0x00000000
 8002c58:	20000544 	.word	0x20000544
 8002c5c:	20000560 	.word	0x20000560
 8002c60:	200005f4 	.word	0x200005f4
 8002c64:	fffffd44 	.word	0xfffffd44
 8002c68:	2000054c 	.word	0x2000054c
 8002c6c:	2000054e 	.word	0x2000054e
 8002c70:	20000588 	.word	0x20000588
 8002c74:	20000410 	.word	0x20000410

08002c78 <RobotMoveDist>:

void RobotMoveDist(float * targetDist, const uint8_t dir, const uint8_t speedMode) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	70fb      	strb	r3, [r7, #3]
 8002c84:	4613      	mov	r3, r2
 8002c86:	70bb      	strb	r3, [r7, #2]
	angleNow = 0; gyroZ = 0; // reset angle for PID
 8002c88:	4ba1      	ldr	r3, [pc, #644]	; (8002f10 <RobotMoveDist+0x298>)
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	4ba0      	ldr	r3, [pc, #640]	; (8002f14 <RobotMoveDist+0x29c>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	801a      	strh	r2, [r3, #0]
	PIDConfigReset(&pidTSlow);
 8002c96:	48a0      	ldr	r0, [pc, #640]	; (8002f18 <RobotMoveDist+0x2a0>)
 8002c98:	f7ff fcc5 	bl	8002626 <PIDConfigReset>
	PIDConfigReset(&pidSlow);
 8002c9c:	489f      	ldr	r0, [pc, #636]	; (8002f1c <RobotMoveDist+0x2a4>)
 8002c9e:	f7ff fcc2 	bl	8002626 <PIDConfigReset>
	PIDConfigReset(&pidFast);
 8002ca2:	489f      	ldr	r0, [pc, #636]	; (8002f20 <RobotMoveDist+0x2a8>)
 8002ca4:	f7ff fcbf 	bl	8002626 <PIDConfigReset>
	curDistTick = 0;
 8002ca8:	4b9e      	ldr	r3, [pc, #632]	; (8002f24 <RobotMoveDist+0x2ac>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	801a      	strh	r2, [r3, #0]

	__GET_TARGETTICK(*targetDist, targetDistTick);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fc40 	bl	8000538 <__aeabi_f2d>
 8002cb8:	a38f      	add	r3, pc, #572	; (adr r3, 8002ef8 <RobotMoveDist+0x280>)
 8002cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbe:	f7fd fc93 	bl	80005e8 <__aeabi_dmul>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	a38d      	add	r3, pc, #564	; (adr r3, 8002f00 <RobotMoveDist+0x288>)
 8002ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd0:	f7fd fad2 	bl	8000278 <__aeabi_dsub>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	4b91      	ldr	r3, [pc, #580]	; (8002f28 <RobotMoveDist+0x2b0>)
 8002ce2:	f7fd fdab 	bl	800083c <__aeabi_ddiv>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4610      	mov	r0, r2
 8002cec:	4619      	mov	r1, r3
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	4b8e      	ldr	r3, [pc, #568]	; (8002f2c <RobotMoveDist+0x2b4>)
 8002cf4:	f7fd fc78 	bl	80005e8 <__aeabi_dmul>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	4619      	mov	r1, r3
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	4b8a      	ldr	r3, [pc, #552]	; (8002f30 <RobotMoveDist+0x2b8>)
 8002d06:	f7fd fab7 	bl	8000278 <__aeabi_dsub>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	f7fd ff03 	bl	8000b1c <__aeabi_d2uiz>
 8002d16:	4603      	mov	r3, r0
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	4b86      	ldr	r3, [pc, #536]	; (8002f34 <RobotMoveDist+0x2bc>)
 8002d1c:	801a      	strh	r2, [r3, #0]

	last_curTask_tick = HAL_GetTick();
 8002d1e:	f004 f9ff 	bl	8007120 <HAL_GetTick>
 8002d22:	4603      	mov	r3, r0
 8002d24:	4a84      	ldr	r2, [pc, #528]	; (8002f38 <RobotMoveDist+0x2c0>)
 8002d26:	6013      	str	r3, [r2, #0]
	__SET_MOTOR_DIRECTION(dir);
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	bf0c      	ite	eq
 8002d2e:	2301      	moveq	r3, #1
 8002d30:	2300      	movne	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	2104      	movs	r1, #4
 8002d38:	4880      	ldr	r0, [pc, #512]	; (8002f3c <RobotMoveDist+0x2c4>)
 8002d3a:	f005 fa99 	bl	8008270 <HAL_GPIO_WritePin>
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf14      	ite	ne
 8002d44:	2301      	movne	r3, #1
 8002d46:	2300      	moveq	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2108      	movs	r1, #8
 8002d4e:	487b      	ldr	r0, [pc, #492]	; (8002f3c <RobotMoveDist+0x2c4>)
 8002d50:	f005 fa8e 	bl	8008270 <HAL_GPIO_WritePin>
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bf0c      	ite	eq
 8002d5a:	2301      	moveq	r3, #1
 8002d5c:	2300      	movne	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	2120      	movs	r1, #32
 8002d64:	4875      	ldr	r0, [pc, #468]	; (8002f3c <RobotMoveDist+0x2c4>)
 8002d66:	f005 fa83 	bl	8008270 <HAL_GPIO_WritePin>
 8002d6a:	78fb      	ldrb	r3, [r7, #3]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	2110      	movs	r1, #16
 8002d7a:	4870      	ldr	r0, [pc, #448]	; (8002f3c <RobotMoveDist+0x2c4>)
 8002d7c:	f005 fa78 	bl	8008270 <HAL_GPIO_WritePin>
	__SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 8002d80:	4b6f      	ldr	r3, [pc, #444]	; (8002f40 <RobotMoveDist+0x2c8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	4b6e      	ldr	r3, [pc, #440]	; (8002f44 <RobotMoveDist+0x2cc>)
 8002d8a:	801a      	strh	r2, [r3, #0]
	do {
		__GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002d8c:	4b6c      	ldr	r3, [pc, #432]	; (8002f40 <RobotMoveDist+0x2c8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	4b6a      	ldr	r3, [pc, #424]	; (8002f40 <RobotMoveDist+0x2c8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	d117      	bne.n	8002dd2 <RobotMoveDist+0x15a>
 8002da2:	4b68      	ldr	r3, [pc, #416]	; (8002f44 <RobotMoveDist+0x2cc>)
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d806      	bhi.n	8002dbc <RobotMoveDist+0x144>
 8002dae:	4b65      	ldr	r3, [pc, #404]	; (8002f44 <RobotMoveDist+0x2cc>)
 8002db0:	881a      	ldrh	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	e007      	b.n	8002dcc <RobotMoveDist+0x154>
 8002dbc:	4b61      	ldr	r3, [pc, #388]	; (8002f44 <RobotMoveDist+0x2cc>)
 8002dbe:	881a      	ldrh	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	4a5e      	ldr	r2, [pc, #376]	; (8002f48 <RobotMoveDist+0x2d0>)
 8002dce:	8013      	strh	r3, [r2, #0]
 8002dd0:	e016      	b.n	8002e00 <RobotMoveDist+0x188>
 8002dd2:	4b5c      	ldr	r3, [pc, #368]	; (8002f44 <RobotMoveDist+0x2cc>)
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d306      	bcc.n	8002dec <RobotMoveDist+0x174>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	4b58      	ldr	r3, [pc, #352]	; (8002f44 <RobotMoveDist+0x2cc>)
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	e007      	b.n	8002dfc <RobotMoveDist+0x184>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	4b54      	ldr	r3, [pc, #336]	; (8002f44 <RobotMoveDist+0x2cc>)
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	4a52      	ldr	r2, [pc, #328]	; (8002f48 <RobotMoveDist+0x2d0>)
 8002dfe:	8013      	strh	r3, [r2, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	4b4f      	ldr	r3, [pc, #316]	; (8002f44 <RobotMoveDist+0x2cc>)
 8002e06:	801a      	strh	r2, [r3, #0]
		curDistTick += dist_dL;
 8002e08:	4b46      	ldr	r3, [pc, #280]	; (8002f24 <RobotMoveDist+0x2ac>)
 8002e0a:	881a      	ldrh	r2, [r3, #0]
 8002e0c:	4b4e      	ldr	r3, [pc, #312]	; (8002f48 <RobotMoveDist+0x2d0>)
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	4413      	add	r3, r2
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	4b43      	ldr	r3, [pc, #268]	; (8002f24 <RobotMoveDist+0x2ac>)
 8002e16:	801a      	strh	r2, [r3, #0]

		if (curDistTick >= targetDistTick) break;
 8002e18:	4b42      	ldr	r3, [pc, #264]	; (8002f24 <RobotMoveDist+0x2ac>)
 8002e1a:	881a      	ldrh	r2, [r3, #0]
 8002e1c:	4b45      	ldr	r3, [pc, #276]	; (8002f34 <RobotMoveDist+0x2bc>)
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	f080 80a8 	bcs.w	8002f76 <RobotMoveDist+0x2fe>

		if (HAL_GetTick() - last_curTask_tick >= 10) {
 8002e26:	f004 f97b 	bl	8007120 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	4b42      	ldr	r3, [pc, #264]	; (8002f38 <RobotMoveDist+0x2c0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b09      	cmp	r3, #9
 8002e34:	d9aa      	bls.n	8002d8c <RobotMoveDist+0x114>
			if (speedMode == SPEED_MODE_T) {
 8002e36:	78bb      	ldrb	r3, [r7, #2]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d103      	bne.n	8002e44 <RobotMoveDist+0x1cc>
				StraightLineMove(SPEED_MODE_T);
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f7ff fc05 	bl	800264c <StraightLineMove>
 8002e42:	e092      	b.n	8002f6a <RobotMoveDist+0x2f2>
			} else {
				speedScale = abs(curDistTick - targetDistTick) / 990; // start to slow down at last 990 ticks (15cm)
 8002e44:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <RobotMoveDist+0x2ac>)
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4b3a      	ldr	r3, [pc, #232]	; (8002f34 <RobotMoveDist+0x2bc>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bfb8      	it	lt
 8002e54:	425b      	neglt	r3, r3
 8002e56:	4a3d      	ldr	r2, [pc, #244]	; (8002f4c <RobotMoveDist+0x2d4>)
 8002e58:	fb82 1203 	smull	r1, r2, r2, r3
 8002e5c:	11d2      	asrs	r2, r2, #7
 8002e5e:	17db      	asrs	r3, r3, #31
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	ee07 3a90 	vmov	s15, r3
 8002e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e6a:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <RobotMoveDist+0x2d8>)
 8002e6c:	edc3 7a00 	vstr	s15, [r3]
				if (speedMode == SPEED_MODE_1) speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8002e70:	78bb      	ldrb	r3, [r7, #2]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d11e      	bne.n	8002eb4 <RobotMoveDist+0x23c>
 8002e76:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <RobotMoveDist+0x2d8>)
 8002e78:	edd3 7a00 	vldr	s15, [r3]
 8002e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e88:	dd02      	ble.n	8002e90 <RobotMoveDist+0x218>
 8002e8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002e8e:	e00e      	b.n	8002eae <RobotMoveDist+0x236>
 8002e90:	4b2f      	ldr	r3, [pc, #188]	; (8002f50 <RobotMoveDist+0x2d8>)
 8002e92:	edd3 7a00 	vldr	s15, [r3]
 8002e96:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8002e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea2:	d502      	bpl.n	8002eaa <RobotMoveDist+0x232>
 8002ea4:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8002ea8:	e001      	b.n	8002eae <RobotMoveDist+0x236>
 8002eaa:	4b29      	ldr	r3, [pc, #164]	; (8002f50 <RobotMoveDist+0x2d8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a28      	ldr	r2, [pc, #160]	; (8002f50 <RobotMoveDist+0x2d8>)
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e055      	b.n	8002f60 <RobotMoveDist+0x2e8>
				else if (speedMode == SPEED_MODE_2)speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8002eb4:	78bb      	ldrb	r3, [r7, #2]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d152      	bne.n	8002f60 <RobotMoveDist+0x2e8>
 8002eba:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <RobotMoveDist+0x2d8>)
 8002ebc:	edd3 7a00 	vldr	s15, [r3]
 8002ec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ecc:	dd02      	ble.n	8002ed4 <RobotMoveDist+0x25c>
 8002ece:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002ed2:	e043      	b.n	8002f5c <RobotMoveDist+0x2e4>
 8002ed4:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <RobotMoveDist+0x2d8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd fb2d 	bl	8000538 <__aeabi_f2d>
 8002ede:	a30a      	add	r3, pc, #40	; (adr r3, 8002f08 <RobotMoveDist+0x290>)
 8002ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee4:	f7fd fdf2 	bl	8000acc <__aeabi_dcmplt>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d034      	beq.n	8002f58 <RobotMoveDist+0x2e0>
 8002eee:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <RobotMoveDist+0x2dc>)
 8002ef0:	e034      	b.n	8002f5c <RobotMoveDist+0x2e4>
 8002ef2:	bf00      	nop
 8002ef4:	f3af 8000 	nop.w
 8002ef8:	fc66b22a 	.word	0xfc66b22a
 8002efc:	3ff266ac 	.word	0x3ff266ac
 8002f00:	bb2526f8 	.word	0xbb2526f8
 8002f04:	3feee3d4 	.word	0x3feee3d4
 8002f08:	9999999a 	.word	0x9999999a
 8002f0c:	3fd99999 	.word	0x3fd99999
 8002f10:	20000544 	.word	0x20000544
 8002f14:	2000054a 	.word	0x2000054a
 8002f18:	20000574 	.word	0x20000574
 8002f1c:	20000560 	.word	0x20000560
 8002f20:	20000588 	.word	0x20000588
 8002f24:	20000558 	.word	0x20000558
 8002f28:	40340000 	.word	0x40340000
 8002f2c:	4094a000 	.word	0x4094a000
 8002f30:	40240000 	.word	0x40240000
 8002f34:	2000055a 	.word	0x2000055a
 8002f38:	20000550 	.word	0x20000550
 8002f3c:	40020000 	.word	0x40020000
 8002f40:	200002f0 	.word	0x200002f0
 8002f44:	2000055e 	.word	0x2000055e
 8002f48:	2000055c 	.word	0x2000055c
 8002f4c:	21195767 	.word	0x21195767
 8002f50:	20000138 	.word	0x20000138
 8002f54:	3ecccccd 	.word	0x3ecccccd
 8002f58:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <RobotMoveDist+0x318>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <RobotMoveDist+0x318>)
 8002f5e:	6013      	str	r3, [r2, #0]
				StraightLineMoveSpeedScale(speedMode, &speedScale);
 8002f60:	78bb      	ldrb	r3, [r7, #2]
 8002f62:	490b      	ldr	r1, [pc, #44]	; (8002f90 <RobotMoveDist+0x318>)
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fd29 	bl	80029bc <StraightLineMoveSpeedScale>
			}

			last_curTask_tick = HAL_GetTick();
 8002f6a:	f004 f8d9 	bl	8007120 <HAL_GetTick>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <RobotMoveDist+0x31c>)
 8002f72:	6013      	str	r3, [r2, #0]
		__GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002f74:	e70a      	b.n	8002d8c <RobotMoveDist+0x114>
		if (curDistTick >= targetDistTick) break;
 8002f76:	bf00      	nop
		}
	} while (1);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 8002f78:	4b07      	ldr	r3, [pc, #28]	; (8002f98 <RobotMoveDist+0x320>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	635a      	str	r2, [r3, #52]	; 0x34
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <RobotMoveDist+0x320>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2200      	movs	r2, #0
 8002f86:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000138 	.word	0x20000138
 8002f94:	20000550 	.word	0x20000550
 8002f98:	20000410 	.word	0x20000410
 8002f9c:	00000000 	.word	0x00000000

08002fa0 <RobotMoveDistObstacle>:

// RobotMoveDistObstacle must be called within a task(eg. runFastestPath) and not within an interrupt(eg. UART, EXTI)
// else osDelay won't work and TRI's timer interrupt can't be given chance to update obsDist_US
void RobotMoveDistObstacle(float * targetDist, const uint8_t speedMode) {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	70fb      	strb	r3, [r7, #3]
	angleNow = 0; gyroZ = 0;
 8002fac:	4baa      	ldr	r3, [pc, #680]	; (8003258 <RobotMoveDistObstacle+0x2b8>)
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	4ba9      	ldr	r3, [pc, #676]	; (800325c <RobotMoveDistObstacle+0x2bc>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	801a      	strh	r2, [r3, #0]
	PIDConfigReset(&pidTSlow);
 8002fba:	48a9      	ldr	r0, [pc, #676]	; (8003260 <RobotMoveDistObstacle+0x2c0>)
 8002fbc:	f7ff fb33 	bl	8002626 <PIDConfigReset>
	PIDConfigReset(&pidSlow);
 8002fc0:	48a8      	ldr	r0, [pc, #672]	; (8003264 <RobotMoveDistObstacle+0x2c4>)
 8002fc2:	f7ff fb30 	bl	8002626 <PIDConfigReset>
	PIDConfigReset(&pidFast);
 8002fc6:	48a8      	ldr	r0, [pc, #672]	; (8003268 <RobotMoveDistObstacle+0x2c8>)
 8002fc8:	f7ff fb2d 	bl	8002626 <PIDConfigReset>
	obsDist_US = 1000;
 8002fcc:	4ba7      	ldr	r3, [pc, #668]	; (800326c <RobotMoveDistObstacle+0x2cc>)
 8002fce:	4aa8      	ldr	r2, [pc, #672]	; (8003270 <RobotMoveDistObstacle+0x2d0>)
 8002fd0:	601a      	str	r2, [r3, #0]
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8002fd2:	2104      	movs	r1, #4
 8002fd4:	48a7      	ldr	r0, [pc, #668]	; (8003274 <RobotMoveDistObstacle+0x2d4>)
 8002fd6:	f006 ff65 	bl	8009ea4 <HAL_TIM_IC_Start_IT>
	last_curTask_tick = HAL_GetTick();
 8002fda:	f004 f8a1 	bl	8007120 <HAL_GetTick>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4aa5      	ldr	r2, [pc, #660]	; (8003278 <RobotMoveDistObstacle+0x2d8>)
 8002fe2:	6013      	str	r3, [r2, #0]

	do {
	  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	2110      	movs	r1, #16
 8002fe8:	48a4      	ldr	r0, [pc, #656]	; (800327c <RobotMoveDistObstacle+0x2dc>)
 8002fea:	f005 f941 	bl	8008270 <HAL_GPIO_WritePin>
	  __delay_us(&htim4, 10); // wait for 10us
 8002fee:	4ba1      	ldr	r3, [pc, #644]	; (8003274 <RobotMoveDistObstacle+0x2d4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ff6:	4b9f      	ldr	r3, [pc, #636]	; (8003274 <RobotMoveDistObstacle+0x2d4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	2b09      	cmp	r3, #9
 8002ffe:	d9fa      	bls.n	8002ff6 <RobotMoveDistObstacle+0x56>
	  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8003000:	2200      	movs	r2, #0
 8003002:	2110      	movs	r1, #16
 8003004:	489d      	ldr	r0, [pc, #628]	; (800327c <RobotMoveDistObstacle+0x2dc>)
 8003006:	f005 f933 	bl	8008270 <HAL_GPIO_WritePin>
	  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
 800300a:	4b9a      	ldr	r3, [pc, #616]	; (8003274 <RobotMoveDistObstacle+0x2d4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	4b98      	ldr	r3, [pc, #608]	; (8003274 <RobotMoveDistObstacle+0x2d4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0204 	orr.w	r2, r2, #4
 8003018:	60da      	str	r2, [r3, #12]
	  osDelay(10); // give timer interrupt chance to update obsDist_US value
 800301a:	200a      	movs	r0, #10
 800301c:	f009 fc8a 	bl	800c934 <osDelay>
	  if (abs(*targetDist - obsDist_US) < 0.1) break;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	ed93 7a00 	vldr	s14, [r3]
 8003026:	4b91      	ldr	r3, [pc, #580]	; (800326c <RobotMoveDistObstacle+0x2cc>)
 8003028:	edd3 7a00 	vldr	s15, [r3]
 800302c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003034:	ee17 3a90 	vmov	r3, s15
 8003038:	2b00      	cmp	r3, #0
 800303a:	db0e      	blt.n	800305a <RobotMoveDistObstacle+0xba>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	ed93 7a00 	vldr	s14, [r3]
 8003042:	4b8a      	ldr	r3, [pc, #552]	; (800326c <RobotMoveDistObstacle+0x2cc>)
 8003044:	edd3 7a00 	vldr	s15, [r3]
 8003048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800304c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003050:	ee17 3a90 	vmov	r3, s15
 8003054:	2b00      	cmp	r3, #0
 8003056:	f340 80e7 	ble.w	8003228 <RobotMoveDistObstacle+0x288>
	  __SET_MOTOR_DIRECTION(obsDist_US >= *targetDist);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	ed93 7a00 	vldr	s14, [r3]
 8003060:	4b82      	ldr	r3, [pc, #520]	; (800326c <RobotMoveDistObstacle+0x2cc>)
 8003062:	edd3 7a00 	vldr	s15, [r3]
 8003066:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800306a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306e:	bf94      	ite	ls
 8003070:	2301      	movls	r3, #1
 8003072:	2300      	movhi	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f083 0301 	eor.w	r3, r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	b2db      	uxtb	r3, r3
 800307e:	461a      	mov	r2, r3
 8003080:	2104      	movs	r1, #4
 8003082:	487f      	ldr	r0, [pc, #508]	; (8003280 <RobotMoveDistObstacle+0x2e0>)
 8003084:	f005 f8f4 	bl	8008270 <HAL_GPIO_WritePin>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	ed93 7a00 	vldr	s14, [r3]
 800308e:	4b77      	ldr	r3, [pc, #476]	; (800326c <RobotMoveDistObstacle+0x2cc>)
 8003090:	edd3 7a00 	vldr	s15, [r3]
 8003094:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309c:	bf94      	ite	ls
 800309e:	2301      	movls	r3, #1
 80030a0:	2300      	movhi	r3, #0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	2108      	movs	r1, #8
 80030a8:	4875      	ldr	r0, [pc, #468]	; (8003280 <RobotMoveDistObstacle+0x2e0>)
 80030aa:	f005 f8e1 	bl	8008270 <HAL_GPIO_WritePin>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	ed93 7a00 	vldr	s14, [r3]
 80030b4:	4b6d      	ldr	r3, [pc, #436]	; (800326c <RobotMoveDistObstacle+0x2cc>)
 80030b6:	edd3 7a00 	vldr	s15, [r3]
 80030ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c2:	bf94      	ite	ls
 80030c4:	2301      	movls	r3, #1
 80030c6:	2300      	movhi	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f083 0301 	eor.w	r3, r3, #1
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	2120      	movs	r1, #32
 80030d6:	486a      	ldr	r0, [pc, #424]	; (8003280 <RobotMoveDistObstacle+0x2e0>)
 80030d8:	f005 f8ca 	bl	8008270 <HAL_GPIO_WritePin>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	ed93 7a00 	vldr	s14, [r3]
 80030e2:	4b62      	ldr	r3, [pc, #392]	; (800326c <RobotMoveDistObstacle+0x2cc>)
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f0:	bf94      	ite	ls
 80030f2:	2301      	movls	r3, #1
 80030f4:	2300      	movhi	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	2110      	movs	r1, #16
 80030fc:	4860      	ldr	r0, [pc, #384]	; (8003280 <RobotMoveDistObstacle+0x2e0>)
 80030fe:	f005 f8b7 	bl	8008270 <HAL_GPIO_WritePin>
	  if (HAL_GetTick() - last_curTask_tick >=20) {
 8003102:	f004 f80d 	bl	8007120 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	4b5b      	ldr	r3, [pc, #364]	; (8003278 <RobotMoveDistObstacle+0x2d8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b13      	cmp	r3, #19
 8003110:	f67f af68 	bls.w	8002fe4 <RobotMoveDistObstacle+0x44>
//		  speedScale = 1;
		  if (speedMode == SPEED_MODE_1) {
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d13f      	bne.n	800319a <RobotMoveDistObstacle+0x1fa>
			  speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 800311a:	4b54      	ldr	r3, [pc, #336]	; (800326c <RobotMoveDistObstacle+0x2cc>)
 800311c:	ed93 7a00 	vldr	s14, [r3]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	edd3 7a00 	vldr	s15, [r3]
 8003126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800312e:	ee17 3a90 	vmov	r3, s15
 8003132:	2b00      	cmp	r3, #0
 8003134:	bfb8      	it	lt
 8003136:	425b      	neglt	r3, r3
 8003138:	4a52      	ldr	r2, [pc, #328]	; (8003284 <RobotMoveDistObstacle+0x2e4>)
 800313a:	fb82 1203 	smull	r1, r2, r2, r3
 800313e:	441a      	add	r2, r3
 8003140:	10d2      	asrs	r2, r2, #3
 8003142:	17db      	asrs	r3, r3, #31
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	ee07 3a90 	vmov	s15, r3
 800314a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800314e:	4b4e      	ldr	r3, [pc, #312]	; (8003288 <RobotMoveDistObstacle+0x2e8>)
 8003150:	edc3 7a00 	vstr	s15, [r3]
			  speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8003154:	4b4c      	ldr	r3, [pc, #304]	; (8003288 <RobotMoveDistObstacle+0x2e8>)
 8003156:	edd3 7a00 	vldr	s15, [r3]
 800315a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800315e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003166:	dd02      	ble.n	800316e <RobotMoveDistObstacle+0x1ce>
 8003168:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800316c:	e00e      	b.n	800318c <RobotMoveDistObstacle+0x1ec>
 800316e:	4b46      	ldr	r3, [pc, #280]	; (8003288 <RobotMoveDistObstacle+0x2e8>)
 8003170:	edd3 7a00 	vldr	s15, [r3]
 8003174:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8003178:	eef4 7ac7 	vcmpe.f32	s15, s14
 800317c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003180:	d502      	bpl.n	8003188 <RobotMoveDistObstacle+0x1e8>
 8003182:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8003186:	e001      	b.n	800318c <RobotMoveDistObstacle+0x1ec>
 8003188:	4b3f      	ldr	r3, [pc, #252]	; (8003288 <RobotMoveDistObstacle+0x2e8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a3e      	ldr	r2, [pc, #248]	; (8003288 <RobotMoveDistObstacle+0x2e8>)
 800318e:	6013      	str	r3, [r2, #0]
			  StraightLineMoveSpeedScale(SPEED_MODE_1, &speedScale);
 8003190:	493d      	ldr	r1, [pc, #244]	; (8003288 <RobotMoveDistObstacle+0x2e8>)
 8003192:	2001      	movs	r0, #1
 8003194:	f7ff fc12 	bl	80029bc <StraightLineMoveSpeedScale>
 8003198:	e040      	b.n	800321c <RobotMoveDistObstacle+0x27c>
		  } else {
			  speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 800319a:	4b34      	ldr	r3, [pc, #208]	; (800326c <RobotMoveDistObstacle+0x2cc>)
 800319c:	ed93 7a00 	vldr	s14, [r3]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	edd3 7a00 	vldr	s15, [r3]
 80031a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031ae:	ee17 3a90 	vmov	r3, s15
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bfb8      	it	lt
 80031b6:	425b      	neglt	r3, r3
 80031b8:	4a32      	ldr	r2, [pc, #200]	; (8003284 <RobotMoveDistObstacle+0x2e4>)
 80031ba:	fb82 1203 	smull	r1, r2, r2, r3
 80031be:	441a      	add	r2, r3
 80031c0:	10d2      	asrs	r2, r2, #3
 80031c2:	17db      	asrs	r3, r3, #31
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ce:	4b2e      	ldr	r3, [pc, #184]	; (8003288 <RobotMoveDistObstacle+0x2e8>)
 80031d0:	edc3 7a00 	vstr	s15, [r3]
			  speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 80031d4:	4b2c      	ldr	r3, [pc, #176]	; (8003288 <RobotMoveDistObstacle+0x2e8>)
 80031d6:	edd3 7a00 	vldr	s15, [r3]
 80031da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e6:	dd02      	ble.n	80031ee <RobotMoveDistObstacle+0x24e>
 80031e8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80031ec:	e010      	b.n	8003210 <RobotMoveDistObstacle+0x270>
 80031ee:	4b26      	ldr	r3, [pc, #152]	; (8003288 <RobotMoveDistObstacle+0x2e8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd f9a0 	bl	8000538 <__aeabi_f2d>
 80031f8:	a315      	add	r3, pc, #84	; (adr r3, 8003250 <RobotMoveDistObstacle+0x2b0>)
 80031fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fe:	f7fd fc65 	bl	8000acc <__aeabi_dcmplt>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <RobotMoveDistObstacle+0x26c>
 8003208:	4b20      	ldr	r3, [pc, #128]	; (800328c <RobotMoveDistObstacle+0x2ec>)
 800320a:	e001      	b.n	8003210 <RobotMoveDistObstacle+0x270>
 800320c:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <RobotMoveDistObstacle+0x2e8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1d      	ldr	r2, [pc, #116]	; (8003288 <RobotMoveDistObstacle+0x2e8>)
 8003212:	6013      	str	r3, [r2, #0]
			  StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 8003214:	491c      	ldr	r1, [pc, #112]	; (8003288 <RobotMoveDistObstacle+0x2e8>)
 8003216:	2002      	movs	r0, #2
 8003218:	f7ff fbd0 	bl	80029bc <StraightLineMoveSpeedScale>
		  }


		  last_curTask_tick = HAL_GetTick();
 800321c:	f003 ff80 	bl	8007120 <HAL_GetTick>
 8003220:	4603      	mov	r3, r0
 8003222:	4a15      	ldr	r2, [pc, #84]	; (8003278 <RobotMoveDistObstacle+0x2d8>)
 8003224:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8003226:	e6dd      	b.n	8002fe4 <RobotMoveDistObstacle+0x44>
	  if (abs(*targetDist - obsDist_US) < 0.1) break;
 8003228:	bf00      	nop
	  }

	} while (1);

	__SET_MOTOR_DUTY(&htim8, 0, 0);
 800322a:	4b19      	ldr	r3, [pc, #100]	; (8003290 <RobotMoveDistObstacle+0x2f0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2200      	movs	r2, #0
 8003230:	635a      	str	r2, [r3, #52]	; 0x34
 8003232:	4b17      	ldr	r3, [pc, #92]	; (8003290 <RobotMoveDistObstacle+0x2f0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_2);
 800323a:	2104      	movs	r1, #4
 800323c:	480d      	ldr	r0, [pc, #52]	; (8003274 <RobotMoveDistObstacle+0x2d4>)
 800323e:	f006 ff59 	bl	800a0f4 <HAL_TIM_IC_Stop_IT>
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	f3af 8000 	nop.w
 8003250:	9999999a 	.word	0x9999999a
 8003254:	3fd99999 	.word	0x3fd99999
 8003258:	20000544 	.word	0x20000544
 800325c:	2000054a 	.word	0x2000054a
 8003260:	20000574 	.word	0x20000574
 8003264:	20000560 	.word	0x20000560
 8003268:	20000588 	.word	0x20000588
 800326c:	200005a4 	.word	0x200005a4
 8003270:	447a0000 	.word	0x447a0000
 8003274:	20000380 	.word	0x20000380
 8003278:	20000550 	.word	0x20000550
 800327c:	40020400 	.word	0x40020400
 8003280:	40020000 	.word	0x40020000
 8003284:	88888889 	.word	0x88888889
 8003288:	20000138 	.word	0x20000138
 800328c:	3ecccccd 	.word	0x3ecccccd
 8003290:	20000410 	.word	0x20000410
 8003294:	00000000 	.word	0x00000000

08003298 <RobotMoveDistObstacle_IR>:

void RobotMoveDistObstacle_IR(float * targetDist) {
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	dataPoint = 0; IR_data_raw_acc = 0; obsDist_IR = 1000;
 80032a0:	4ba1      	ldr	r3, [pc, #644]	; (8003528 <RobotMoveDistObstacle_IR+0x290>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	801a      	strh	r2, [r3, #0]
 80032a6:	4ba1      	ldr	r3, [pc, #644]	; (800352c <RobotMoveDistObstacle_IR+0x294>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	4ba0      	ldr	r3, [pc, #640]	; (8003530 <RobotMoveDistObstacle_IR+0x298>)
 80032ae:	4aa1      	ldr	r2, [pc, #644]	; (8003534 <RobotMoveDistObstacle_IR+0x29c>)
 80032b0:	601a      	str	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 80032b2:	f003 ff35 	bl	8007120 <HAL_GetTick>
 80032b6:	4603      	mov	r3, r0
 80032b8:	4a9f      	ldr	r2, [pc, #636]	; (8003538 <RobotMoveDistObstacle_IR+0x2a0>)
 80032ba:	6013      	str	r3, [r2, #0]
//	__PEND_CURCMD(curCmd);

	do {
		__ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 80032bc:	489f      	ldr	r0, [pc, #636]	; (800353c <RobotMoveDistObstacle_IR+0x2a4>)
 80032be:	f003 ffa3 	bl	8007208 <HAL_ADC_Start>
 80032c2:	2114      	movs	r1, #20
 80032c4:	489d      	ldr	r0, [pc, #628]	; (800353c <RobotMoveDistObstacle_IR+0x2a4>)
 80032c6:	f004 f8a4 	bl	8007412 <HAL_ADC_PollForConversion>
 80032ca:	489c      	ldr	r0, [pc, #624]	; (800353c <RobotMoveDistObstacle_IR+0x2a4>)
 80032cc:	f004 fa3c 	bl	8007748 <HAL_ADC_GetValue>
 80032d0:	4602      	mov	r2, r0
 80032d2:	4b96      	ldr	r3, [pc, #600]	; (800352c <RobotMoveDistObstacle_IR+0x294>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4413      	add	r3, r2
 80032d8:	4a94      	ldr	r2, [pc, #592]	; (800352c <RobotMoveDistObstacle_IR+0x294>)
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	4b92      	ldr	r3, [pc, #584]	; (8003528 <RobotMoveDistObstacle_IR+0x290>)
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	3301      	adds	r3, #1
 80032e2:	4a97      	ldr	r2, [pc, #604]	; (8003540 <RobotMoveDistObstacle_IR+0x2a8>)
 80032e4:	fb82 1203 	smull	r1, r2, r2, r3
 80032e8:	1151      	asrs	r1, r2, #5
 80032ea:	17da      	asrs	r2, r3, #31
 80032ec:	1a8a      	subs	r2, r1, r2
 80032ee:	2164      	movs	r1, #100	; 0x64
 80032f0:	fb01 f202 	mul.w	r2, r1, r2
 80032f4:	1a9a      	subs	r2, r3, r2
 80032f6:	b292      	uxth	r2, r2
 80032f8:	4b8b      	ldr	r3, [pc, #556]	; (8003528 <RobotMoveDistObstacle_IR+0x290>)
 80032fa:	801a      	strh	r2, [r3, #0]
 80032fc:	4b8a      	ldr	r3, [pc, #552]	; (8003528 <RobotMoveDistObstacle_IR+0x290>)
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	2b63      	cmp	r3, #99	; 0x63
 8003302:	d129      	bne.n	8003358 <RobotMoveDistObstacle_IR+0xc0>
 8003304:	4b89      	ldr	r3, [pc, #548]	; (800352c <RobotMoveDistObstacle_IR+0x294>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a87      	ldr	r2, [pc, #540]	; (8003528 <RobotMoveDistObstacle_IR+0x290>)
 800330a:	8812      	ldrh	r2, [r2, #0]
 800330c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd f8ef 	bl	80004f4 <__aeabi_ui2d>
 8003316:	a37e      	add	r3, pc, #504	; (adr r3, 8003510 <RobotMoveDistObstacle_IR+0x278>)
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	f7fc ffac 	bl	8000278 <__aeabi_dsub>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	a17c      	add	r1, pc, #496	; (adr r1, 8003518 <RobotMoveDistObstacle_IR+0x280>)
 8003326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800332a:	f7fd fa87 	bl	800083c <__aeabi_ddiv>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4610      	mov	r0, r2
 8003334:	4619      	mov	r1, r3
 8003336:	f7fd fc11 	bl	8000b5c <__aeabi_d2f>
 800333a:	4603      	mov	r3, r0
 800333c:	4a7c      	ldr	r2, [pc, #496]	; (8003530 <RobotMoveDistObstacle_IR+0x298>)
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	4b7a      	ldr	r3, [pc, #488]	; (800352c <RobotMoveDistObstacle_IR+0x294>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a78      	ldr	r2, [pc, #480]	; (8003528 <RobotMoveDistObstacle_IR+0x290>)
 8003346:	8812      	ldrh	r2, [r2, #0]
 8003348:	fbb3 f3f2 	udiv	r3, r3, r2
 800334c:	b29a      	uxth	r2, r3
 800334e:	4b7d      	ldr	r3, [pc, #500]	; (8003544 <RobotMoveDistObstacle_IR+0x2ac>)
 8003350:	801a      	strh	r2, [r3, #0]
 8003352:	4b76      	ldr	r3, [pc, #472]	; (800352c <RobotMoveDistObstacle_IR+0x294>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
		if (*targetDist > 0 && abs(*targetDist - obsDist_IR) < 0.1) break;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	edd3 7a00 	vldr	s15, [r3]
 800335e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003366:	dd1c      	ble.n	80033a2 <RobotMoveDistObstacle_IR+0x10a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	ed93 7a00 	vldr	s14, [r3]
 800336e:	4b70      	ldr	r3, [pc, #448]	; (8003530 <RobotMoveDistObstacle_IR+0x298>)
 8003370:	edd3 7a00 	vldr	s15, [r3]
 8003374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800337c:	ee17 3a90 	vmov	r3, s15
 8003380:	2b00      	cmp	r3, #0
 8003382:	db0e      	blt.n	80033a2 <RobotMoveDistObstacle_IR+0x10a>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	ed93 7a00 	vldr	s14, [r3]
 800338a:	4b69      	ldr	r3, [pc, #420]	; (8003530 <RobotMoveDistObstacle_IR+0x298>)
 800338c:	edd3 7a00 	vldr	s15, [r3]
 8003390:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003398:	ee17 3a90 	vmov	r3, s15
 800339c:	2b00      	cmp	r3, #0
 800339e:	f340 80a4 	ble.w	80034ea <RobotMoveDistObstacle_IR+0x252>

		__SET_MOTOR_DIRECTION(obsDist_IR >= *targetDist);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	ed93 7a00 	vldr	s14, [r3]
 80033a8:	4b61      	ldr	r3, [pc, #388]	; (8003530 <RobotMoveDistObstacle_IR+0x298>)
 80033aa:	edd3 7a00 	vldr	s15, [r3]
 80033ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	bf94      	ite	ls
 80033b8:	2301      	movls	r3, #1
 80033ba:	2300      	movhi	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	f083 0301 	eor.w	r3, r3, #1
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	2104      	movs	r1, #4
 80033ca:	485f      	ldr	r0, [pc, #380]	; (8003548 <RobotMoveDistObstacle_IR+0x2b0>)
 80033cc:	f004 ff50 	bl	8008270 <HAL_GPIO_WritePin>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	ed93 7a00 	vldr	s14, [r3]
 80033d6:	4b56      	ldr	r3, [pc, #344]	; (8003530 <RobotMoveDistObstacle_IR+0x298>)
 80033d8:	edd3 7a00 	vldr	s15, [r3]
 80033dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e4:	bf94      	ite	ls
 80033e6:	2301      	movls	r3, #1
 80033e8:	2300      	movhi	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	2108      	movs	r1, #8
 80033f0:	4855      	ldr	r0, [pc, #340]	; (8003548 <RobotMoveDistObstacle_IR+0x2b0>)
 80033f2:	f004 ff3d 	bl	8008270 <HAL_GPIO_WritePin>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	ed93 7a00 	vldr	s14, [r3]
 80033fc:	4b4c      	ldr	r3, [pc, #304]	; (8003530 <RobotMoveDistObstacle_IR+0x298>)
 80033fe:	edd3 7a00 	vldr	s15, [r3]
 8003402:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340a:	bf94      	ite	ls
 800340c:	2301      	movls	r3, #1
 800340e:	2300      	movhi	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	f083 0301 	eor.w	r3, r3, #1
 8003416:	b2db      	uxtb	r3, r3
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	2120      	movs	r1, #32
 800341e:	484a      	ldr	r0, [pc, #296]	; (8003548 <RobotMoveDistObstacle_IR+0x2b0>)
 8003420:	f004 ff26 	bl	8008270 <HAL_GPIO_WritePin>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	ed93 7a00 	vldr	s14, [r3]
 800342a:	4b41      	ldr	r3, [pc, #260]	; (8003530 <RobotMoveDistObstacle_IR+0x298>)
 800342c:	edd3 7a00 	vldr	s15, [r3]
 8003430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003438:	bf94      	ite	ls
 800343a:	2301      	movls	r3, #1
 800343c:	2300      	movhi	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	2110      	movs	r1, #16
 8003444:	4840      	ldr	r0, [pc, #256]	; (8003548 <RobotMoveDistObstacle_IR+0x2b0>)
 8003446:	f004 ff13 	bl	8008270 <HAL_GPIO_WritePin>
	  if (HAL_GetTick() - last_curTask_tick >=10) {
 800344a:	f003 fe69 	bl	8007120 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	4b39      	ldr	r3, [pc, #228]	; (8003538 <RobotMoveDistObstacle_IR+0x2a0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b09      	cmp	r3, #9
 8003458:	f67f af30 	bls.w	80032bc <RobotMoveDistObstacle_IR+0x24>
//		  speedScale = 1;
		  speedScale = abs(obsDist_IR - *targetDist) / 15; // slow down at 15cm
 800345c:	4b34      	ldr	r3, [pc, #208]	; (8003530 <RobotMoveDistObstacle_IR+0x298>)
 800345e:	ed93 7a00 	vldr	s14, [r3]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	edd3 7a00 	vldr	s15, [r3]
 8003468:	ee77 7a67 	vsub.f32	s15, s14, s15
 800346c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003470:	ee17 3a90 	vmov	r3, s15
 8003474:	2b00      	cmp	r3, #0
 8003476:	bfb8      	it	lt
 8003478:	425b      	neglt	r3, r3
 800347a:	4a34      	ldr	r2, [pc, #208]	; (800354c <RobotMoveDistObstacle_IR+0x2b4>)
 800347c:	fb82 1203 	smull	r1, r2, r2, r3
 8003480:	441a      	add	r2, r3
 8003482:	10d2      	asrs	r2, r2, #3
 8003484:	17db      	asrs	r3, r3, #31
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	ee07 3a90 	vmov	s15, r3
 800348c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003490:	4b2f      	ldr	r3, [pc, #188]	; (8003550 <RobotMoveDistObstacle_IR+0x2b8>)
 8003492:	edc3 7a00 	vstr	s15, [r3]
		  speedScale = speedScale > 1 ? 1 : (speedScale < 0.3 ? 0.3 : speedScale);
 8003496:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <RobotMoveDistObstacle_IR+0x2b8>)
 8003498:	edd3 7a00 	vldr	s15, [r3]
 800349c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a8:	dd02      	ble.n	80034b0 <RobotMoveDistObstacle_IR+0x218>
 80034aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80034ae:	e010      	b.n	80034d2 <RobotMoveDistObstacle_IR+0x23a>
 80034b0:	4b27      	ldr	r3, [pc, #156]	; (8003550 <RobotMoveDistObstacle_IR+0x2b8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fd f83f 	bl	8000538 <__aeabi_f2d>
 80034ba:	a319      	add	r3, pc, #100	; (adr r3, 8003520 <RobotMoveDistObstacle_IR+0x288>)
 80034bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c0:	f7fd fb04 	bl	8000acc <__aeabi_dcmplt>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <RobotMoveDistObstacle_IR+0x236>
 80034ca:	4b22      	ldr	r3, [pc, #136]	; (8003554 <RobotMoveDistObstacle_IR+0x2bc>)
 80034cc:	e001      	b.n	80034d2 <RobotMoveDistObstacle_IR+0x23a>
 80034ce:	4b20      	ldr	r3, [pc, #128]	; (8003550 <RobotMoveDistObstacle_IR+0x2b8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1f      	ldr	r2, [pc, #124]	; (8003550 <RobotMoveDistObstacle_IR+0x2b8>)
 80034d4:	6013      	str	r3, [r2, #0]
		  StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 80034d6:	491e      	ldr	r1, [pc, #120]	; (8003550 <RobotMoveDistObstacle_IR+0x2b8>)
 80034d8:	2002      	movs	r0, #2
 80034da:	f7ff fa6f 	bl	80029bc <StraightLineMoveSpeedScale>

		  last_curTask_tick = HAL_GetTick();
 80034de:	f003 fe1f 	bl	8007120 <HAL_GetTick>
 80034e2:	4603      	mov	r3, r0
 80034e4:	4a14      	ldr	r2, [pc, #80]	; (8003538 <RobotMoveDistObstacle_IR+0x2a0>)
 80034e6:	6013      	str	r3, [r2, #0]
		__ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 80034e8:	e6e8      	b.n	80032bc <RobotMoveDistObstacle_IR+0x24>
		if (*targetDist > 0 && abs(*targetDist - obsDist_IR) < 0.1) break;
 80034ea:	bf00      	nop
	  }
//	  osDelay(5);
	} while (1);

//  __ON_TASK_END(&htim8, prevTask, curTask);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 80034ec:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <RobotMoveDistObstacle_IR+0x2c0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2200      	movs	r2, #0
 80034f2:	635a      	str	r2, [r3, #52]	; 0x34
 80034f4:	4b18      	ldr	r3, [pc, #96]	; (8003558 <RobotMoveDistObstacle_IR+0x2c0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2200      	movs	r2, #0
 80034fa:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_ADC_Stop(&hadc1);
 80034fc:	480f      	ldr	r0, [pc, #60]	; (800353c <RobotMoveDistObstacle_IR+0x2a4>)
 80034fe:	f003 ff55 	bl	80073ac <HAL_ADC_Stop>
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	f3af 8000 	nop.w
 8003510:	fb5723d3 	.word	0xfb5723d3
 8003514:	407046c5 	.word	0x407046c5
 8003518:	324c8366 	.word	0x324c8366
 800351c:	40d90b34 	.word	0x40d90b34
 8003520:	33333333 	.word	0x33333333
 8003524:	3fd33333 	.word	0x3fd33333
 8003528:	200005a8 	.word	0x200005a8
 800352c:	200005ac 	.word	0x200005ac
 8003530:	200005a0 	.word	0x200005a0
 8003534:	447a0000 	.word	0x447a0000
 8003538:	20000550 	.word	0x20000550
 800353c:	200001c4 	.word	0x200001c4
 8003540:	51eb851f 	.word	0x51eb851f
 8003544:	2000059c 	.word	0x2000059c
 8003548:	40020000 	.word	0x40020000
 800354c:	88888889 	.word	0x88888889
 8003550:	20000138 	.word	0x20000138
 8003554:	3e99999a 	.word	0x3e99999a
 8003558:	20000410 	.word	0x20000410
 800355c:	00000000 	.word	0x00000000

08003560 <RobotTurn>:

void RobotTurn(float * targetAngle) {
 8003560:	b5b0      	push	{r4, r5, r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af04      	add	r7, sp, #16
 8003566:	6078      	str	r0, [r7, #4]
	angleNow = 0; gyroZ = 0;
 8003568:	4b4b      	ldr	r3, [pc, #300]	; (8003698 <RobotTurn+0x138>)
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	4b4a      	ldr	r3, [pc, #296]	; (800369c <RobotTurn+0x13c>)
 8003572:	2200      	movs	r2, #0
 8003574:	801a      	strh	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 8003576:	f003 fdd3 	bl	8007120 <HAL_GetTick>
 800357a:	4603      	mov	r3, r0
 800357c:	4a48      	ldr	r2, [pc, #288]	; (80036a0 <RobotTurn+0x140>)
 800357e:	6013      	str	r3, [r2, #0]
	do {
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 8003580:	f003 fdce 	bl	8007120 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	4b46      	ldr	r3, [pc, #280]	; (80036a0 <RobotTurn+0x140>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b09      	cmp	r3, #9
 800358e:	d9f7      	bls.n	8003580 <RobotTurn+0x20>
		  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8003590:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003594:	9302      	str	r3, [sp, #8]
 8003596:	2302      	movs	r3, #2
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	4b42      	ldr	r3, [pc, #264]	; (80036a4 <RobotTurn+0x144>)
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	2301      	movs	r3, #1
 80035a0:	2237      	movs	r2, #55	; 0x37
 80035a2:	21d0      	movs	r1, #208	; 0xd0
 80035a4:	4840      	ldr	r0, [pc, #256]	; (80036a8 <RobotTurn+0x148>)
 80035a6:	f005 f8bb 	bl	8008720 <HAL_I2C_Mem_Read>
 80035aa:	4b3e      	ldr	r3, [pc, #248]	; (80036a4 <RobotTurn+0x144>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	b21a      	sxth	r2, r3
 80035b2:	4b3c      	ldr	r3, [pc, #240]	; (80036a4 <RobotTurn+0x144>)
 80035b4:	785b      	ldrb	r3, [r3, #1]
 80035b6:	b21b      	sxth	r3, r3
 80035b8:	4313      	orrs	r3, r2
 80035ba:	b21a      	sxth	r2, r3
 80035bc:	4b37      	ldr	r3, [pc, #220]	; (800369c <RobotTurn+0x13c>)
 80035be:	801a      	strh	r2, [r3, #0]
		  angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 80035c0:	4b35      	ldr	r3, [pc, #212]	; (8003698 <RobotTurn+0x138>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fc ffb7 	bl	8000538 <__aeabi_f2d>
 80035ca:	4604      	mov	r4, r0
 80035cc:	460d      	mov	r5, r1
 80035ce:	4b33      	ldr	r3, [pc, #204]	; (800369c <RobotTurn+0x13c>)
 80035d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fc ff9d 	bl	8000514 <__aeabi_i2d>
 80035da:	a32b      	add	r3, pc, #172	; (adr r3, 8003688 <RobotTurn+0x128>)
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f7fd f92c 	bl	800083c <__aeabi_ddiv>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4610      	mov	r0, r2
 80035ea:	4619      	mov	r1, r3
 80035ec:	a328      	add	r3, pc, #160	; (adr r3, 8003690 <RobotTurn+0x130>)
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	f7fc fff9 	bl	80005e8 <__aeabi_dmul>
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	4620      	mov	r0, r4
 80035fc:	4629      	mov	r1, r5
 80035fe:	f7fc fe3d 	bl	800027c <__adddf3>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4610      	mov	r0, r2
 8003608:	4619      	mov	r1, r3
 800360a:	f7fd faa7 	bl	8000b5c <__aeabi_d2f>
 800360e:	4603      	mov	r3, r0
 8003610:	4a21      	ldr	r2, [pc, #132]	; (8003698 <RobotTurn+0x138>)
 8003612:	6013      	str	r3, [r2, #0]
		  if (abs(angleNow - *targetAngle) < 0.01) break;
 8003614:	4b20      	ldr	r3, [pc, #128]	; (8003698 <RobotTurn+0x138>)
 8003616:	ed93 7a00 	vldr	s14, [r3]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	edd3 7a00 	vldr	s15, [r3]
 8003620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003628:	ee17 3a90 	vmov	r3, s15
 800362c:	2b00      	cmp	r3, #0
 800362e:	db0d      	blt.n	800364c <RobotTurn+0xec>
 8003630:	4b19      	ldr	r3, [pc, #100]	; (8003698 <RobotTurn+0x138>)
 8003632:	ed93 7a00 	vldr	s14, [r3]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	edd3 7a00 	vldr	s15, [r3]
 800363c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003644:	ee17 3a90 	vmov	r3, s15
 8003648:	2b00      	cmp	r3, #0
 800364a:	dd05      	ble.n	8003658 <RobotTurn+0xf8>
		  last_curTask_tick = HAL_GetTick();
 800364c:	f003 fd68 	bl	8007120 <HAL_GetTick>
 8003650:	4603      	mov	r3, r0
 8003652:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <RobotTurn+0x140>)
 8003654:	6013      	str	r3, [r2, #0]
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 8003656:	e793      	b.n	8003580 <RobotTurn+0x20>
		  if (abs(angleNow - *targetAngle) < 0.01) break;
 8003658:	bf00      	nop
	  }
	} while(1);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 800365a:	4b14      	ldr	r3, [pc, #80]	; (80036ac <RobotTurn+0x14c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2200      	movs	r2, #0
 8003660:	635a      	str	r2, [r3, #52]	; 0x34
 8003662:	4b12      	ldr	r3, [pc, #72]	; (80036ac <RobotTurn+0x14c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2200      	movs	r2, #0
 8003668:	639a      	str	r2, [r3, #56]	; 0x38
	__RESET_SERVO_TURN(&htim1);
 800366a:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <RobotTurn+0x150>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	224a      	movs	r2, #74	; 0x4a
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
 8003672:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003676:	f003 fd5f 	bl	8007138 <HAL_Delay>
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bdb0      	pop	{r4, r5, r7, pc}
 8003682:	bf00      	nop
 8003684:	f3af 8000 	nop.w
 8003688:	66666666 	.word	0x66666666
 800368c:	40306666 	.word	0x40306666
 8003690:	47ae147b 	.word	0x47ae147b
 8003694:	3f847ae1 	.word	0x3f847ae1
 8003698:	20000544 	.word	0x20000544
 800369c:	2000054a 	.word	0x2000054a
 80036a0:	20000550 	.word	0x20000550
 80036a4:	20000548 	.word	0x20000548
 80036a8:	20000254 	.word	0x20000254
 80036ac:	20000410 	.word	0x20000410
 80036b0:	200002a8 	.word	0x200002a8
 80036b4:	00000000 	.word	0x00000000

080036b8 <RobotTurnFastest>:

void RobotTurnFastest(float * targetAngle) {
 80036b8:	b5b0      	push	{r4, r5, r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af04      	add	r7, sp, #16
 80036be:	6078      	str	r0, [r7, #4]
	angleNow = 0; gyroZ = 0;
 80036c0:	4b49      	ldr	r3, [pc, #292]	; (80037e8 <RobotTurnFastest+0x130>)
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	4b48      	ldr	r3, [pc, #288]	; (80037ec <RobotTurnFastest+0x134>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	801a      	strh	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 80036ce:	f003 fd27 	bl	8007120 <HAL_GetTick>
 80036d2:	4603      	mov	r3, r0
 80036d4:	4a46      	ldr	r2, [pc, #280]	; (80037f0 <RobotTurnFastest+0x138>)
 80036d6:	6013      	str	r3, [r2, #0]
	do {
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 80036d8:	f003 fd22 	bl	8007120 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	4b44      	ldr	r3, [pc, #272]	; (80037f0 <RobotTurnFastest+0x138>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b09      	cmp	r3, #9
 80036e6:	d9f7      	bls.n	80036d8 <RobotTurnFastest+0x20>
		  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 80036e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036ec:	9302      	str	r3, [sp, #8]
 80036ee:	2302      	movs	r3, #2
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	4b40      	ldr	r3, [pc, #256]	; (80037f4 <RobotTurnFastest+0x13c>)
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	2301      	movs	r3, #1
 80036f8:	2237      	movs	r2, #55	; 0x37
 80036fa:	21d0      	movs	r1, #208	; 0xd0
 80036fc:	483e      	ldr	r0, [pc, #248]	; (80037f8 <RobotTurnFastest+0x140>)
 80036fe:	f005 f80f 	bl	8008720 <HAL_I2C_Mem_Read>
 8003702:	4b3c      	ldr	r3, [pc, #240]	; (80037f4 <RobotTurnFastest+0x13c>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	b21a      	sxth	r2, r3
 800370a:	4b3a      	ldr	r3, [pc, #232]	; (80037f4 <RobotTurnFastest+0x13c>)
 800370c:	785b      	ldrb	r3, [r3, #1]
 800370e:	b21b      	sxth	r3, r3
 8003710:	4313      	orrs	r3, r2
 8003712:	b21a      	sxth	r2, r3
 8003714:	4b35      	ldr	r3, [pc, #212]	; (80037ec <RobotTurnFastest+0x134>)
 8003716:	801a      	strh	r2, [r3, #0]
		  angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8003718:	4b33      	ldr	r3, [pc, #204]	; (80037e8 <RobotTurnFastest+0x130>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fc ff0b 	bl	8000538 <__aeabi_f2d>
 8003722:	4604      	mov	r4, r0
 8003724:	460d      	mov	r5, r1
 8003726:	4b31      	ldr	r3, [pc, #196]	; (80037ec <RobotTurnFastest+0x134>)
 8003728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800372c:	4618      	mov	r0, r3
 800372e:	f7fc fef1 	bl	8000514 <__aeabi_i2d>
 8003732:	a329      	add	r3, pc, #164	; (adr r3, 80037d8 <RobotTurnFastest+0x120>)
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f7fd f880 	bl	800083c <__aeabi_ddiv>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	a326      	add	r3, pc, #152	; (adr r3, 80037e0 <RobotTurnFastest+0x128>)
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	f7fc ff4d 	bl	80005e8 <__aeabi_dmul>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4620      	mov	r0, r4
 8003754:	4629      	mov	r1, r5
 8003756:	f7fc fd91 	bl	800027c <__adddf3>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4610      	mov	r0, r2
 8003760:	4619      	mov	r1, r3
 8003762:	f7fd f9fb 	bl	8000b5c <__aeabi_d2f>
 8003766:	4603      	mov	r3, r0
 8003768:	4a1f      	ldr	r2, [pc, #124]	; (80037e8 <RobotTurnFastest+0x130>)
 800376a:	6013      	str	r3, [r2, #0]
		  if (abs(angleNow - *targetAngle) < 0.01) break;
 800376c:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <RobotTurnFastest+0x130>)
 800376e:	ed93 7a00 	vldr	s14, [r3]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	edd3 7a00 	vldr	s15, [r3]
 8003778:	ee77 7a67 	vsub.f32	s15, s14, s15
 800377c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003780:	ee17 3a90 	vmov	r3, s15
 8003784:	2b00      	cmp	r3, #0
 8003786:	db0d      	blt.n	80037a4 <RobotTurnFastest+0xec>
 8003788:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <RobotTurnFastest+0x130>)
 800378a:	ed93 7a00 	vldr	s14, [r3]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	edd3 7a00 	vldr	s15, [r3]
 8003794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800379c:	ee17 3a90 	vmov	r3, s15
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	dd05      	ble.n	80037b0 <RobotTurnFastest+0xf8>
		  last_curTask_tick = HAL_GetTick();
 80037a4:	f003 fcbc 	bl	8007120 <HAL_GetTick>
 80037a8:	4603      	mov	r3, r0
 80037aa:	4a11      	ldr	r2, [pc, #68]	; (80037f0 <RobotTurnFastest+0x138>)
 80037ac:	6013      	str	r3, [r2, #0]
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 80037ae:	e793      	b.n	80036d8 <RobotTurnFastest+0x20>
		  if (abs(angleNow - *targetAngle) < 0.01) break;
 80037b0:	bf00      	nop
	  }
	} while(1);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 80037b2:	4b12      	ldr	r3, [pc, #72]	; (80037fc <RobotTurnFastest+0x144>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2200      	movs	r2, #0
 80037b8:	635a      	str	r2, [r3, #52]	; 0x34
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <RobotTurnFastest+0x144>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2200      	movs	r2, #0
 80037c0:	639a      	str	r2, [r3, #56]	; 0x38
	__RESET_SERVO_TURN_FAST(&htim1);
 80037c2:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <RobotTurnFastest+0x148>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	224a      	movs	r2, #74	; 0x4a
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
 80037ca:	20c8      	movs	r0, #200	; 0xc8
 80037cc:	f003 fcb4 	bl	8007138 <HAL_Delay>
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bdb0      	pop	{r4, r5, r7, pc}
 80037d8:	66666666 	.word	0x66666666
 80037dc:	40306666 	.word	0x40306666
 80037e0:	47ae147b 	.word	0x47ae147b
 80037e4:	3f847ae1 	.word	0x3f847ae1
 80037e8:	20000544 	.word	0x20000544
 80037ec:	2000054a 	.word	0x2000054a
 80037f0:	20000550 	.word	0x20000550
 80037f4:	20000548 	.word	0x20000548
 80037f8:	20000254 	.word	0x20000254
 80037fc:	20000410 	.word	0x20000410
 8003800:	200002a8 	.word	0x200002a8

08003804 <FASTESTPATH_TURN_RIGHT_90>:
	__SET_MOTOR_DIRECTION(1);
	__SET_MOTOR_DUTY(&htim8, 1000, 2000);
	RobotTurn(&targetAngle);
}

void FASTESTPATH_TURN_RIGHT_90() {
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
	targetAngle = -86;
 8003808:	4b16      	ldr	r3, [pc, #88]	; (8003864 <FASTESTPATH_TURN_RIGHT_90+0x60>)
 800380a:	4a17      	ldr	r2, [pc, #92]	; (8003868 <FASTESTPATH_TURN_RIGHT_90+0x64>)
 800380c:	601a      	str	r2, [r3, #0]
	__SET_SERVO_TURN(&htim1, 115);
 800380e:	4b17      	ldr	r3, [pc, #92]	; (800386c <FASTESTPATH_TURN_RIGHT_90+0x68>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2273      	movs	r2, #115	; 0x73
 8003814:	641a      	str	r2, [r3, #64]	; 0x40
 8003816:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800381a:	f003 fc8d 	bl	8007138 <HAL_Delay>
	__SET_MOTOR_DIRECTION(1);
 800381e:	2200      	movs	r2, #0
 8003820:	2104      	movs	r1, #4
 8003822:	4813      	ldr	r0, [pc, #76]	; (8003870 <FASTESTPATH_TURN_RIGHT_90+0x6c>)
 8003824:	f004 fd24 	bl	8008270 <HAL_GPIO_WritePin>
 8003828:	2201      	movs	r2, #1
 800382a:	2108      	movs	r1, #8
 800382c:	4810      	ldr	r0, [pc, #64]	; (8003870 <FASTESTPATH_TURN_RIGHT_90+0x6c>)
 800382e:	f004 fd1f 	bl	8008270 <HAL_GPIO_WritePin>
 8003832:	2200      	movs	r2, #0
 8003834:	2120      	movs	r1, #32
 8003836:	480e      	ldr	r0, [pc, #56]	; (8003870 <FASTESTPATH_TURN_RIGHT_90+0x6c>)
 8003838:	f004 fd1a 	bl	8008270 <HAL_GPIO_WritePin>
 800383c:	2201      	movs	r2, #1
 800383e:	2110      	movs	r1, #16
 8003840:	480b      	ldr	r0, [pc, #44]	; (8003870 <FASTESTPATH_TURN_RIGHT_90+0x6c>)
 8003842:	f004 fd15 	bl	8008270 <HAL_GPIO_WritePin>
	__SET_MOTOR_DUTY(&htim8, 3000, 800);
 8003846:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <FASTESTPATH_TURN_RIGHT_90+0x70>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800384e:	635a      	str	r2, [r3, #52]	; 0x34
 8003850:	4b08      	ldr	r3, [pc, #32]	; (8003874 <FASTESTPATH_TURN_RIGHT_90+0x70>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003858:	639a      	str	r2, [r3, #56]	; 0x38

	RobotTurn(&targetAngle);
 800385a:	4802      	ldr	r0, [pc, #8]	; (8003864 <FASTESTPATH_TURN_RIGHT_90+0x60>)
 800385c:	f7ff fe80 	bl	8003560 <RobotTurn>
}
 8003860:	bf00      	nop
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20000540 	.word	0x20000540
 8003868:	c2ac0000 	.word	0xc2ac0000
 800386c:	200002a8 	.word	0x200002a8
 8003870:	40020000 	.word	0x40020000
 8003874:	20000410 	.word	0x20000410

08003878 <FASTESTPATH_TURN_RIGHT_180>:

void FASTESTPATH_TURN_RIGHT_180() {
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
	targetAngle = -176;
 800387c:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <FASTESTPATH_TURN_RIGHT_180+0x60>)
 800387e:	4a17      	ldr	r2, [pc, #92]	; (80038dc <FASTESTPATH_TURN_RIGHT_180+0x64>)
 8003880:	601a      	str	r2, [r3, #0]
	__SET_SERVO_TURN(&htim1, 115);
 8003882:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <FASTESTPATH_TURN_RIGHT_180+0x68>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2273      	movs	r2, #115	; 0x73
 8003888:	641a      	str	r2, [r3, #64]	; 0x40
 800388a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800388e:	f003 fc53 	bl	8007138 <HAL_Delay>
	__SET_MOTOR_DIRECTION(1);
 8003892:	2200      	movs	r2, #0
 8003894:	2104      	movs	r1, #4
 8003896:	4813      	ldr	r0, [pc, #76]	; (80038e4 <FASTESTPATH_TURN_RIGHT_180+0x6c>)
 8003898:	f004 fcea 	bl	8008270 <HAL_GPIO_WritePin>
 800389c:	2201      	movs	r2, #1
 800389e:	2108      	movs	r1, #8
 80038a0:	4810      	ldr	r0, [pc, #64]	; (80038e4 <FASTESTPATH_TURN_RIGHT_180+0x6c>)
 80038a2:	f004 fce5 	bl	8008270 <HAL_GPIO_WritePin>
 80038a6:	2200      	movs	r2, #0
 80038a8:	2120      	movs	r1, #32
 80038aa:	480e      	ldr	r0, [pc, #56]	; (80038e4 <FASTESTPATH_TURN_RIGHT_180+0x6c>)
 80038ac:	f004 fce0 	bl	8008270 <HAL_GPIO_WritePin>
 80038b0:	2201      	movs	r2, #1
 80038b2:	2110      	movs	r1, #16
 80038b4:	480b      	ldr	r0, [pc, #44]	; (80038e4 <FASTESTPATH_TURN_RIGHT_180+0x6c>)
 80038b6:	f004 fcdb 	bl	8008270 <HAL_GPIO_WritePin>
	__SET_MOTOR_DUTY(&htim8, 3000, 800);
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <FASTESTPATH_TURN_RIGHT_180+0x70>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80038c2:	635a      	str	r2, [r3, #52]	; 0x34
 80038c4:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <FASTESTPATH_TURN_RIGHT_180+0x70>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80038cc:	639a      	str	r2, [r3, #56]	; 0x38
	RobotTurn(&targetAngle);
 80038ce:	4802      	ldr	r0, [pc, #8]	; (80038d8 <FASTESTPATH_TURN_RIGHT_180+0x60>)
 80038d0:	f7ff fe46 	bl	8003560 <RobotTurn>
}
 80038d4:	bf00      	nop
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	20000540 	.word	0x20000540
 80038dc:	c3300000 	.word	0xc3300000
 80038e0:	200002a8 	.word	0x200002a8
 80038e4:	40020000 	.word	0x40020000
 80038e8:	20000410 	.word	0x20000410

080038ec <FASTESTPATH_TURN_LEFT_90X>:

void FASTESTPATH_TURN_LEFT_90X(uint8_t * turnSize) { // x3
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
	__SET_MOTOR_DIRECTION(1);
 80038f4:	2200      	movs	r2, #0
 80038f6:	2104      	movs	r1, #4
 80038f8:	4825      	ldr	r0, [pc, #148]	; (8003990 <FASTESTPATH_TURN_LEFT_90X+0xa4>)
 80038fa:	f004 fcb9 	bl	8008270 <HAL_GPIO_WritePin>
 80038fe:	2201      	movs	r2, #1
 8003900:	2108      	movs	r1, #8
 8003902:	4823      	ldr	r0, [pc, #140]	; (8003990 <FASTESTPATH_TURN_LEFT_90X+0xa4>)
 8003904:	f004 fcb4 	bl	8008270 <HAL_GPIO_WritePin>
 8003908:	2200      	movs	r2, #0
 800390a:	2120      	movs	r1, #32
 800390c:	4820      	ldr	r0, [pc, #128]	; (8003990 <FASTESTPATH_TURN_LEFT_90X+0xa4>)
 800390e:	f004 fcaf 	bl	8008270 <HAL_GPIO_WritePin>
 8003912:	2201      	movs	r2, #1
 8003914:	2110      	movs	r1, #16
 8003916:	481e      	ldr	r0, [pc, #120]	; (8003990 <FASTESTPATH_TURN_LEFT_90X+0xa4>)
 8003918:	f004 fcaa 	bl	8008270 <HAL_GPIO_WritePin>
	switch (*turnSize) {
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d001      	beq.n	8003928 <FASTESTPATH_TURN_LEFT_90X+0x3c>
 8003924:	2b03      	cmp	r3, #3
 8003926:	d115      	bne.n	8003954 <FASTESTPATH_TURN_LEFT_90X+0x68>
	case 1:
	case 3:
		targetAngle = 83;
 8003928:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <FASTESTPATH_TURN_LEFT_90X+0xa8>)
 800392a:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <FASTESTPATH_TURN_LEFT_90X+0xac>)
 800392c:	601a      	str	r2, [r3, #0]
		__SET_SERVO_TURN(&htim1, 50);
 800392e:	4b1b      	ldr	r3, [pc, #108]	; (800399c <FASTESTPATH_TURN_LEFT_90X+0xb0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2232      	movs	r2, #50	; 0x32
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
 8003936:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800393a:	f003 fbfd 	bl	8007138 <HAL_Delay>
		__SET_MOTOR_DUTY(&htim8, 2000, 3500);
 800393e:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <FASTESTPATH_TURN_LEFT_90X+0xb4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003946:	635a      	str	r2, [r3, #52]	; 0x34
 8003948:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <FASTESTPATH_TURN_LEFT_90X+0xb4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003952:	e015      	b.n	8003980 <FASTESTPATH_TURN_LEFT_90X+0x94>
	case 2:
	case 4:
	default:
//		targetAngle = 85;
		targetAngle = 83;
 8003954:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <FASTESTPATH_TURN_LEFT_90X+0xa8>)
 8003956:	4a10      	ldr	r2, [pc, #64]	; (8003998 <FASTESTPATH_TURN_LEFT_90X+0xac>)
 8003958:	601a      	str	r2, [r3, #0]
		__SET_SERVO_TURN(&htim1, 52);
 800395a:	4b10      	ldr	r3, [pc, #64]	; (800399c <FASTESTPATH_TURN_LEFT_90X+0xb0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2234      	movs	r2, #52	; 0x34
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
 8003962:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003966:	f003 fbe7 	bl	8007138 <HAL_Delay>
//		__SET_MOTOR_DUTY(&htim8, 2500, 2916);
		__SET_MOTOR_DUTY(&htim8, 3000, 3500);
 800396a:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <FASTESTPATH_TURN_LEFT_90X+0xb4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003972:	635a      	str	r2, [r3, #52]	; 0x34
 8003974:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <FASTESTPATH_TURN_LEFT_90X+0xb4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f640 52ac 	movw	r2, #3500	; 0xdac
 800397c:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800397e:	bf00      	nop
	}
	RobotTurnFastest(&targetAngle);
 8003980:	4804      	ldr	r0, [pc, #16]	; (8003994 <FASTESTPATH_TURN_LEFT_90X+0xa8>)
 8003982:	f7ff fe99 	bl	80036b8 <RobotTurnFastest>

}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40020000 	.word	0x40020000
 8003994:	20000540 	.word	0x20000540
 8003998:	42a60000 	.word	0x42a60000
 800399c:	200002a8 	.word	0x200002a8
 80039a0:	20000410 	.word	0x20000410

080039a4 <FASTESTPATH_TURN_LEFT_90X_RETURN>:

void FASTESTPATH_TURN_LEFT_90X_RETURN(uint8_t * turnSize) {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	__SET_MOTOR_DIRECTION(1);
 80039ac:	2200      	movs	r2, #0
 80039ae:	2104      	movs	r1, #4
 80039b0:	4830      	ldr	r0, [pc, #192]	; (8003a74 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd0>)
 80039b2:	f004 fc5d 	bl	8008270 <HAL_GPIO_WritePin>
 80039b6:	2201      	movs	r2, #1
 80039b8:	2108      	movs	r1, #8
 80039ba:	482e      	ldr	r0, [pc, #184]	; (8003a74 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd0>)
 80039bc:	f004 fc58 	bl	8008270 <HAL_GPIO_WritePin>
 80039c0:	2200      	movs	r2, #0
 80039c2:	2120      	movs	r1, #32
 80039c4:	482b      	ldr	r0, [pc, #172]	; (8003a74 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd0>)
 80039c6:	f004 fc53 	bl	8008270 <HAL_GPIO_WritePin>
 80039ca:	2201      	movs	r2, #1
 80039cc:	2110      	movs	r1, #16
 80039ce:	4829      	ldr	r0, [pc, #164]	; (8003a74 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd0>)
 80039d0:	f004 fc4e 	bl	8008270 <HAL_GPIO_WritePin>
		switch (*turnSize) {
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d002      	beq.n	80039e2 <FASTESTPATH_TURN_LEFT_90X_RETURN+0x3e>
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d016      	beq.n	8003a0e <FASTESTPATH_TURN_LEFT_90X_RETURN+0x6a>
 80039e0:	e02b      	b.n	8003a3a <FASTESTPATH_TURN_LEFT_90X_RETURN+0x96>
		case 1:
			targetAngle = 83;
 80039e2:	4b25      	ldr	r3, [pc, #148]	; (8003a78 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd4>)
 80039e4:	4a25      	ldr	r2, [pc, #148]	; (8003a7c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd8>)
 80039e6:	601a      	str	r2, [r3, #0]
			__SET_SERVO_TURN(&htim1, 50);
 80039e8:	4b25      	ldr	r3, [pc, #148]	; (8003a80 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xdc>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2232      	movs	r2, #50	; 0x32
 80039ee:	641a      	str	r2, [r3, #64]	; 0x40
 80039f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80039f4:	f003 fba0 	bl	8007138 <HAL_Delay>
			__SET_MOTOR_DUTY(&htim8, 2000, 3500);
 80039f8:	4b22      	ldr	r3, [pc, #136]	; (8003a84 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003a00:	635a      	str	r2, [r3, #52]	; 0x34
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8003a0c:	e02b      	b.n	8003a66 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xc2>
		case 3:
			targetAngle = 85;
 8003a0e:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd4>)
 8003a10:	4a1d      	ldr	r2, [pc, #116]	; (8003a88 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe4>)
 8003a12:	601a      	str	r2, [r3, #0]
			__SET_SERVO_TURN(&htim1, 50);
 8003a14:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xdc>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2232      	movs	r2, #50	; 0x32
 8003a1a:	641a      	str	r2, [r3, #64]	; 0x40
 8003a1c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a20:	f003 fb8a 	bl	8007138 <HAL_Delay>
			__SET_MOTOR_DUTY(&htim8, 2000, 3500);
 8003a24:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003a36:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8003a38:	e015      	b.n	8003a66 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xc2>
		case 2:
		case 4:
		default:
	//		targetAngle = 85;
			targetAngle = 79;
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd4>)
 8003a3c:	4a13      	ldr	r2, [pc, #76]	; (8003a8c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe8>)
 8003a3e:	601a      	str	r2, [r3, #0]
			__SET_SERVO_TURN(&htim1, 52);
 8003a40:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xdc>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2234      	movs	r2, #52	; 0x34
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40
 8003a48:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a4c:	f003 fb74 	bl	8007138 <HAL_Delay>
	//		__SET_MOTOR_DUTY(&htim8, 2500, 2916);
			__SET_MOTOR_DUTY(&htim8, 3000, 3500);
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003a58:	635a      	str	r2, [r3, #52]	; 0x34
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8003a64:	bf00      	nop
		}
		RobotTurnFastest(&targetAngle);
 8003a66:	4804      	ldr	r0, [pc, #16]	; (8003a78 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd4>)
 8003a68:	f7ff fe26 	bl	80036b8 <RobotTurnFastest>
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40020000 	.word	0x40020000
 8003a78:	20000540 	.word	0x20000540
 8003a7c:	42a60000 	.word	0x42a60000
 8003a80:	200002a8 	.word	0x200002a8
 8003a84:	20000410 	.word	0x20000410
 8003a88:	42aa0000 	.word	0x42aa0000
 8003a8c:	429e0000 	.word	0x429e0000

08003a90 <FASTESTPATH_TURN_RIGHT_180X>:
//		break;
//	}
//	RobotTurnFastest(&targetAngle);
//}

void FASTESTPATH_TURN_RIGHT_180X(uint8_t * turnSize) {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	__SET_MOTOR_DIRECTION(1);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2104      	movs	r1, #4
 8003a9c:	4825      	ldr	r0, [pc, #148]	; (8003b34 <FASTESTPATH_TURN_RIGHT_180X+0xa4>)
 8003a9e:	f004 fbe7 	bl	8008270 <HAL_GPIO_WritePin>
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	2108      	movs	r1, #8
 8003aa6:	4823      	ldr	r0, [pc, #140]	; (8003b34 <FASTESTPATH_TURN_RIGHT_180X+0xa4>)
 8003aa8:	f004 fbe2 	bl	8008270 <HAL_GPIO_WritePin>
 8003aac:	2200      	movs	r2, #0
 8003aae:	2120      	movs	r1, #32
 8003ab0:	4820      	ldr	r0, [pc, #128]	; (8003b34 <FASTESTPATH_TURN_RIGHT_180X+0xa4>)
 8003ab2:	f004 fbdd 	bl	8008270 <HAL_GPIO_WritePin>
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	2110      	movs	r1, #16
 8003aba:	481e      	ldr	r0, [pc, #120]	; (8003b34 <FASTESTPATH_TURN_RIGHT_180X+0xa4>)
 8003abc:	f004 fbd8 	bl	8008270 <HAL_GPIO_WritePin>
	switch (*turnSize) {
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d001      	beq.n	8003acc <FASTESTPATH_TURN_RIGHT_180X+0x3c>
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d115      	bne.n	8003af8 <FASTESTPATH_TURN_RIGHT_180X+0x68>
	case 1:
	case 3:
		targetAngle = -172;
 8003acc:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <FASTESTPATH_TURN_RIGHT_180X+0xa8>)
 8003ace:	4a1b      	ldr	r2, [pc, #108]	; (8003b3c <FASTESTPATH_TURN_RIGHT_180X+0xac>)
 8003ad0:	601a      	str	r2, [r3, #0]
		__SET_SERVO_TURN(&htim1, 115);
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <FASTESTPATH_TURN_RIGHT_180X+0xb0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2273      	movs	r2, #115	; 0x73
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40
 8003ada:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003ade:	f003 fb2b 	bl	8007138 <HAL_Delay>
		__SET_MOTOR_DUTY(&htim8, 3500, 2000);
 8003ae2:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <FASTESTPATH_TURN_RIGHT_180X+0xb4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003aea:	635a      	str	r2, [r3, #52]	; 0x34
 8003aec:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <FASTESTPATH_TURN_RIGHT_180X+0xb4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003af4:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003af6:	e015      	b.n	8003b24 <FASTESTPATH_TURN_RIGHT_180X+0x94>
	case 2:
	case 4:
	default:
//		targetAngle = -176;
		targetAngle = -170;
 8003af8:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <FASTESTPATH_TURN_RIGHT_180X+0xa8>)
 8003afa:	4a13      	ldr	r2, [pc, #76]	; (8003b48 <FASTESTPATH_TURN_RIGHT_180X+0xb8>)
 8003afc:	601a      	str	r2, [r3, #0]
		__SET_SERVO_TURN(&htim1, 98);
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <FASTESTPATH_TURN_RIGHT_180X+0xb0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2262      	movs	r2, #98	; 0x62
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
 8003b06:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003b0a:	f003 fb15 	bl	8007138 <HAL_Delay>
//		__SET_MOTOR_DUTY(&htim8, 2700, 2500);
		__SET_MOTOR_DUTY(&htim8, 3500, 3240);
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <FASTESTPATH_TURN_RIGHT_180X+0xb4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003b16:	635a      	str	r2, [r3, #52]	; 0x34
 8003b18:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <FASTESTPATH_TURN_RIGHT_180X+0xb4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f640 42a8 	movw	r2, #3240	; 0xca8
 8003b20:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003b22:	bf00      	nop
	}
	RobotTurnFastest(&targetAngle);
 8003b24:	4804      	ldr	r0, [pc, #16]	; (8003b38 <FASTESTPATH_TURN_RIGHT_180X+0xa8>)
 8003b26:	f7ff fdc7 	bl	80036b8 <RobotTurnFastest>
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40020000 	.word	0x40020000
 8003b38:	20000540 	.word	0x20000540
 8003b3c:	c32c0000 	.word	0xc32c0000
 8003b40:	200002a8 	.word	0x200002a8
 8003b44:	20000410 	.word	0x20000410
 8003b48:	c32a0000 	.word	0xc32a0000
 8003b4c:	00000000 	.word	0x00000000

08003b50 <RobotMoveUntilIROvershoot>:

void RobotMoveUntilIROvershoot() {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
	obsDist_IR = 0;
 8003b54:	4b46      	ldr	r3, [pc, #280]	; (8003c70 <RobotMoveUntilIROvershoot+0x120>)
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
	angleNow = 0; gyroZ = 0;
 8003b5c:	4b45      	ldr	r3, [pc, #276]	; (8003c74 <RobotMoveUntilIROvershoot+0x124>)
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	4b44      	ldr	r3, [pc, #272]	; (8003c78 <RobotMoveUntilIROvershoot+0x128>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	801a      	strh	r2, [r3, #0]
	  last_curTask_tick = HAL_GetTick();
 8003b6a:	f003 fad9 	bl	8007120 <HAL_GetTick>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	4a42      	ldr	r2, [pc, #264]	; (8003c7c <RobotMoveUntilIROvershoot+0x12c>)
 8003b72:	6013      	str	r3, [r2, #0]
	  do {
		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003b74:	4842      	ldr	r0, [pc, #264]	; (8003c80 <RobotMoveUntilIROvershoot+0x130>)
 8003b76:	f003 fb47 	bl	8007208 <HAL_ADC_Start>
 8003b7a:	2114      	movs	r1, #20
 8003b7c:	4840      	ldr	r0, [pc, #256]	; (8003c80 <RobotMoveUntilIROvershoot+0x130>)
 8003b7e:	f003 fc48 	bl	8007412 <HAL_ADC_PollForConversion>
 8003b82:	483f      	ldr	r0, [pc, #252]	; (8003c80 <RobotMoveUntilIROvershoot+0x130>)
 8003b84:	f003 fde0 	bl	8007748 <HAL_ADC_GetValue>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b3e      	ldr	r3, [pc, #248]	; (8003c84 <RobotMoveUntilIROvershoot+0x134>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4413      	add	r3, r2
 8003b90:	4a3c      	ldr	r2, [pc, #240]	; (8003c84 <RobotMoveUntilIROvershoot+0x134>)
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	4b3c      	ldr	r3, [pc, #240]	; (8003c88 <RobotMoveUntilIROvershoot+0x138>)
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	4a3c      	ldr	r2, [pc, #240]	; (8003c8c <RobotMoveUntilIROvershoot+0x13c>)
 8003b9c:	fb82 1203 	smull	r1, r2, r2, r3
 8003ba0:	1151      	asrs	r1, r2, #5
 8003ba2:	17da      	asrs	r2, r3, #31
 8003ba4:	1a8a      	subs	r2, r1, r2
 8003ba6:	2164      	movs	r1, #100	; 0x64
 8003ba8:	fb01 f202 	mul.w	r2, r1, r2
 8003bac:	1a9a      	subs	r2, r3, r2
 8003bae:	b292      	uxth	r2, r2
 8003bb0:	4b35      	ldr	r3, [pc, #212]	; (8003c88 <RobotMoveUntilIROvershoot+0x138>)
 8003bb2:	801a      	strh	r2, [r3, #0]
 8003bb4:	4b34      	ldr	r3, [pc, #208]	; (8003c88 <RobotMoveUntilIROvershoot+0x138>)
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	2b63      	cmp	r3, #99	; 0x63
 8003bba:	d129      	bne.n	8003c10 <RobotMoveUntilIROvershoot+0xc0>
 8003bbc:	4b31      	ldr	r3, [pc, #196]	; (8003c84 <RobotMoveUntilIROvershoot+0x134>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a31      	ldr	r2, [pc, #196]	; (8003c88 <RobotMoveUntilIROvershoot+0x138>)
 8003bc2:	8812      	ldrh	r2, [r2, #0]
 8003bc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fc fc93 	bl	80004f4 <__aeabi_ui2d>
 8003bce:	a324      	add	r3, pc, #144	; (adr r3, 8003c60 <RobotMoveUntilIROvershoot+0x110>)
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	f7fc fb50 	bl	8000278 <__aeabi_dsub>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	a122      	add	r1, pc, #136	; (adr r1, 8003c68 <RobotMoveUntilIROvershoot+0x118>)
 8003bde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003be2:	f7fc fe2b 	bl	800083c <__aeabi_ddiv>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4610      	mov	r0, r2
 8003bec:	4619      	mov	r1, r3
 8003bee:	f7fc ffb5 	bl	8000b5c <__aeabi_d2f>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	4a1e      	ldr	r2, [pc, #120]	; (8003c70 <RobotMoveUntilIROvershoot+0x120>)
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	4b22      	ldr	r3, [pc, #136]	; (8003c84 <RobotMoveUntilIROvershoot+0x134>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a22      	ldr	r2, [pc, #136]	; (8003c88 <RobotMoveUntilIROvershoot+0x138>)
 8003bfe:	8812      	ldrh	r2, [r2, #0]
 8003c00:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <RobotMoveUntilIROvershoot+0x140>)
 8003c08:	801a      	strh	r2, [r3, #0]
 8003c0a:	4b1e      	ldr	r3, [pc, #120]	; (8003c84 <RobotMoveUntilIROvershoot+0x134>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
		  if (obsDist_IR > 40) break;
 8003c10:	4b17      	ldr	r3, [pc, #92]	; (8003c70 <RobotMoveUntilIROvershoot+0x120>)
 8003c12:	edd3 7a00 	vldr	s15, [r3]
 8003c16:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003c94 <RobotMoveUntilIROvershoot+0x144>
 8003c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c22:	dc10      	bgt.n	8003c46 <RobotMoveUntilIROvershoot+0xf6>
		  if (HAL_GetTick() - last_curTask_tick >= 10) {
 8003c24:	f003 fa7c 	bl	8007120 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <RobotMoveUntilIROvershoot+0x12c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b09      	cmp	r3, #9
 8003c32:	d99f      	bls.n	8003b74 <RobotMoveUntilIROvershoot+0x24>
			  StraightLineMove(SPEED_MODE_2);
 8003c34:	2002      	movs	r0, #2
 8003c36:	f7fe fd09 	bl	800264c <StraightLineMove>
			  last_curTask_tick = HAL_GetTick();
 8003c3a:	f003 fa71 	bl	8007120 <HAL_GetTick>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4a0e      	ldr	r2, [pc, #56]	; (8003c7c <RobotMoveUntilIROvershoot+0x12c>)
 8003c42:	6013      	str	r3, [r2, #0]
		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003c44:	e796      	b.n	8003b74 <RobotMoveUntilIROvershoot+0x24>
		  if (obsDist_IR > 40) break;
 8003c46:	bf00      	nop
		  }
	  } while (1);
	  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003c48:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <RobotMoveUntilIROvershoot+0x148>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	635a      	str	r2, [r3, #52]	; 0x34
 8003c50:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <RobotMoveUntilIROvershoot+0x148>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2200      	movs	r2, #0
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003c58:	bf00      	nop
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	f3af 8000 	nop.w
 8003c60:	fb5723d3 	.word	0xfb5723d3
 8003c64:	407046c5 	.word	0x407046c5
 8003c68:	324c8366 	.word	0x324c8366
 8003c6c:	40d90b34 	.word	0x40d90b34
 8003c70:	200005a0 	.word	0x200005a0
 8003c74:	20000544 	.word	0x20000544
 8003c78:	2000054a 	.word	0x2000054a
 8003c7c:	20000550 	.word	0x20000550
 8003c80:	200001c4 	.word	0x200001c4
 8003c84:	200005ac 	.word	0x200005ac
 8003c88:	200005a8 	.word	0x200005a8
 8003c8c:	51eb851f 	.word	0x51eb851f
 8003c90:	2000059c 	.word	0x2000059c
 8003c94:	42200000 	.word	0x42200000
 8003c98:	20000410 	.word	0x20000410
 8003c9c:	00000000 	.word	0x00000000

08003ca0 <RobotMoveUntilIRHit>:

void RobotMoveUntilIRHit() {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
	obsDist_IR = 1000;
 8003ca4:	4b46      	ldr	r3, [pc, #280]	; (8003dc0 <RobotMoveUntilIRHit+0x120>)
 8003ca6:	4a47      	ldr	r2, [pc, #284]	; (8003dc4 <RobotMoveUntilIRHit+0x124>)
 8003ca8:	601a      	str	r2, [r3, #0]
	angleNow = 0; gyroZ = 0;
 8003caa:	4b47      	ldr	r3, [pc, #284]	; (8003dc8 <RobotMoveUntilIRHit+0x128>)
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	4b46      	ldr	r3, [pc, #280]	; (8003dcc <RobotMoveUntilIRHit+0x12c>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	801a      	strh	r2, [r3, #0]
	  last_curTask_tick = HAL_GetTick();
 8003cb8:	f003 fa32 	bl	8007120 <HAL_GetTick>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	4a44      	ldr	r2, [pc, #272]	; (8003dd0 <RobotMoveUntilIRHit+0x130>)
 8003cc0:	6013      	str	r3, [r2, #0]
	  do {
		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003cc2:	4844      	ldr	r0, [pc, #272]	; (8003dd4 <RobotMoveUntilIRHit+0x134>)
 8003cc4:	f003 faa0 	bl	8007208 <HAL_ADC_Start>
 8003cc8:	2114      	movs	r1, #20
 8003cca:	4842      	ldr	r0, [pc, #264]	; (8003dd4 <RobotMoveUntilIRHit+0x134>)
 8003ccc:	f003 fba1 	bl	8007412 <HAL_ADC_PollForConversion>
 8003cd0:	4840      	ldr	r0, [pc, #256]	; (8003dd4 <RobotMoveUntilIRHit+0x134>)
 8003cd2:	f003 fd39 	bl	8007748 <HAL_ADC_GetValue>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	4b3f      	ldr	r3, [pc, #252]	; (8003dd8 <RobotMoveUntilIRHit+0x138>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4413      	add	r3, r2
 8003cde:	4a3e      	ldr	r2, [pc, #248]	; (8003dd8 <RobotMoveUntilIRHit+0x138>)
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	4b3e      	ldr	r3, [pc, #248]	; (8003ddc <RobotMoveUntilIRHit+0x13c>)
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	4a3d      	ldr	r2, [pc, #244]	; (8003de0 <RobotMoveUntilIRHit+0x140>)
 8003cea:	fb82 1203 	smull	r1, r2, r2, r3
 8003cee:	1151      	asrs	r1, r2, #5
 8003cf0:	17da      	asrs	r2, r3, #31
 8003cf2:	1a8a      	subs	r2, r1, r2
 8003cf4:	2164      	movs	r1, #100	; 0x64
 8003cf6:	fb01 f202 	mul.w	r2, r1, r2
 8003cfa:	1a9a      	subs	r2, r3, r2
 8003cfc:	b292      	uxth	r2, r2
 8003cfe:	4b37      	ldr	r3, [pc, #220]	; (8003ddc <RobotMoveUntilIRHit+0x13c>)
 8003d00:	801a      	strh	r2, [r3, #0]
 8003d02:	4b36      	ldr	r3, [pc, #216]	; (8003ddc <RobotMoveUntilIRHit+0x13c>)
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	2b63      	cmp	r3, #99	; 0x63
 8003d08:	d129      	bne.n	8003d5e <RobotMoveUntilIRHit+0xbe>
 8003d0a:	4b33      	ldr	r3, [pc, #204]	; (8003dd8 <RobotMoveUntilIRHit+0x138>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a33      	ldr	r2, [pc, #204]	; (8003ddc <RobotMoveUntilIRHit+0x13c>)
 8003d10:	8812      	ldrh	r2, [r2, #0]
 8003d12:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fc fbec 	bl	80004f4 <__aeabi_ui2d>
 8003d1c:	a324      	add	r3, pc, #144	; (adr r3, 8003db0 <RobotMoveUntilIRHit+0x110>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	f7fc faa9 	bl	8000278 <__aeabi_dsub>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	a123      	add	r1, pc, #140	; (adr r1, 8003db8 <RobotMoveUntilIRHit+0x118>)
 8003d2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d30:	f7fc fd84 	bl	800083c <__aeabi_ddiv>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f7fc ff0e 	bl	8000b5c <__aeabi_d2f>
 8003d40:	4603      	mov	r3, r0
 8003d42:	4a1f      	ldr	r2, [pc, #124]	; (8003dc0 <RobotMoveUntilIRHit+0x120>)
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <RobotMoveUntilIRHit+0x138>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a24      	ldr	r2, [pc, #144]	; (8003ddc <RobotMoveUntilIRHit+0x13c>)
 8003d4c:	8812      	ldrh	r2, [r2, #0]
 8003d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	4b23      	ldr	r3, [pc, #140]	; (8003de4 <RobotMoveUntilIRHit+0x144>)
 8003d56:	801a      	strh	r2, [r3, #0]
 8003d58:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <RobotMoveUntilIRHit+0x138>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
		  if (obsDist_IR < 40) break;
 8003d5e:	4b18      	ldr	r3, [pc, #96]	; (8003dc0 <RobotMoveUntilIRHit+0x120>)
 8003d60:	edd3 7a00 	vldr	s15, [r3]
 8003d64:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003de8 <RobotMoveUntilIRHit+0x148>
 8003d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d70:	d410      	bmi.n	8003d94 <RobotMoveUntilIRHit+0xf4>
		  if (HAL_GetTick() - last_curTask_tick >= 10) {
 8003d72:	f003 f9d5 	bl	8007120 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <RobotMoveUntilIRHit+0x130>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b09      	cmp	r3, #9
 8003d80:	d99f      	bls.n	8003cc2 <RobotMoveUntilIRHit+0x22>
			  StraightLineMove(SPEED_MODE_2);
 8003d82:	2002      	movs	r0, #2
 8003d84:	f7fe fc62 	bl	800264c <StraightLineMove>
			  last_curTask_tick = HAL_GetTick();
 8003d88:	f003 f9ca 	bl	8007120 <HAL_GetTick>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	4a10      	ldr	r2, [pc, #64]	; (8003dd0 <RobotMoveUntilIRHit+0x130>)
 8003d90:	6013      	str	r3, [r2, #0]
		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003d92:	e796      	b.n	8003cc2 <RobotMoveUntilIRHit+0x22>
		  if (obsDist_IR < 40) break;
 8003d94:	bf00      	nop
		  }
	  } while (1);
	  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003d96:	4b15      	ldr	r3, [pc, #84]	; (8003dec <RobotMoveUntilIRHit+0x14c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	635a      	str	r2, [r3, #52]	; 0x34
 8003d9e:	4b13      	ldr	r3, [pc, #76]	; (8003dec <RobotMoveUntilIRHit+0x14c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2200      	movs	r2, #0
 8003da4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	f3af 8000 	nop.w
 8003db0:	fb5723d3 	.word	0xfb5723d3
 8003db4:	407046c5 	.word	0x407046c5
 8003db8:	324c8366 	.word	0x324c8366
 8003dbc:	40d90b34 	.word	0x40d90b34
 8003dc0:	200005a0 	.word	0x200005a0
 8003dc4:	447a0000 	.word	0x447a0000
 8003dc8:	20000544 	.word	0x20000544
 8003dcc:	2000054a 	.word	0x2000054a
 8003dd0:	20000550 	.word	0x20000550
 8003dd4:	200001c4 	.word	0x200001c4
 8003dd8:	200005ac 	.word	0x200005ac
 8003ddc:	200005a8 	.word	0x200005a8
 8003de0:	51eb851f 	.word	0x51eb851f
 8003de4:	2000059c 	.word	0x2000059c
 8003de8:	42200000 	.word	0x42200000
 8003dec:	20000410 	.word	0x20000410

08003df0 <runOledTask>:
  * @retval None
  */
/* USER CODE END Header_runOledTask */
float angleTemp;
void runOledTask(void *argument)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	snprintf(ch, sizeof(ch), "%-3d%%", (int)batteryVal);
 8003df8:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <runOledTask+0x98>)
 8003dfa:	edd3 7a00 	vldr	s15, [r3]
 8003dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e02:	ee17 3a90 	vmov	r3, s15
 8003e06:	4a21      	ldr	r2, [pc, #132]	; (8003e8c <runOledTask+0x9c>)
 8003e08:	2110      	movs	r1, #16
 8003e0a:	4821      	ldr	r0, [pc, #132]	; (8003e90 <runOledTask+0xa0>)
 8003e0c:	f00b fb0e 	bl	800f42c <sniprintf>
//	OLED_ShowString(0, 0, (char *) ch);
	angleTemp = angleNow / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8003e10:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <runOledTask+0xa4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fc fb8f 	bl	8000538 <__aeabi_f2d>
 8003e1a:	a317      	add	r3, pc, #92	; (adr r3, 8003e78 <runOledTask+0x88>)
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	f7fc fd0c 	bl	800083c <__aeabi_ddiv>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4610      	mov	r0, r2
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	a314      	add	r3, pc, #80	; (adr r3, 8003e80 <runOledTask+0x90>)
 8003e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e32:	f7fc fbd9 	bl	80005e8 <__aeabi_dmul>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	f7fc fe8d 	bl	8000b5c <__aeabi_d2f>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <runOledTask+0xa8>)
 8003e46:	6013      	str	r3, [r2, #0]
	snprintf(ch, sizeof(ch), "angle:%-4d", (int) angleTemp);
 8003e48:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <runOledTask+0xa8>)
 8003e4a:	edd3 7a00 	vldr	s15, [r3]
 8003e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e52:	ee17 3a90 	vmov	r3, s15
 8003e56:	4a11      	ldr	r2, [pc, #68]	; (8003e9c <runOledTask+0xac>)
 8003e58:	2110      	movs	r1, #16
 8003e5a:	480d      	ldr	r0, [pc, #52]	; (8003e90 <runOledTask+0xa0>)
 8003e5c:	f00b fae6 	bl	800f42c <sniprintf>
	OLED_ShowString(0, 8, (char *) ch);
 8003e60:	4a0b      	ldr	r2, [pc, #44]	; (8003e90 <runOledTask+0xa0>)
 8003e62:	2108      	movs	r1, #8
 8003e64:	2000      	movs	r0, #0
 8003e66:	f002 fc5f 	bl	8006728 <OLED_ShowString>
//	OLED_ShowString(0, 24, (char *) ch);
//	snprintf(ch, sizeof(ch), "obs_a:%-4d|x:%-4d", (int)obs_a, (int) x);
//	OLED_ShowString(0, 24, (char *) ch);
//	snprintf(ch, sizeof(ch), "US:%-4d|IR:%-4d", (int)obsDist_US, (int)obsDist_IR);
//	OLED_ShowString(0, 48, (char *) ch);
	OLED_Refresh_Gram();
 8003e6a:	f002 fae9 	bl	8006440 <OLED_Refresh_Gram>

	osDelay(250);
 8003e6e:	20fa      	movs	r0, #250	; 0xfa
 8003e70:	f008 fd60 	bl	800c934 <osDelay>
	snprintf(ch, sizeof(ch), "%-3d%%", (int)batteryVal);
 8003e74:	e7c0      	b.n	8003df8 <runOledTask+0x8>
 8003e76:	bf00      	nop
 8003e78:	66666666 	.word	0x66666666
 8003e7c:	40306666 	.word	0x40306666
 8003e80:	47ae147b 	.word	0x47ae147b
 8003e84:	3f847ae1 	.word	0x3f847ae1
 8003e88:	200005b0 	.word	0x200005b0
 8003e8c:	08010b7c 	.word	0x08010b7c
 8003e90:	2000052c 	.word	0x2000052c
 8003e94:	20000544 	.word	0x20000544
 8003e98:	200005f8 	.word	0x200005f8
 8003e9c:	08010b84 	.word	0x08010b84

08003ea0 <runCmdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runCmdTask */
void runCmdTask(void *argument)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runCmdTask */
  /* Infinite loop */
  for(;;)
  {
	  switch(curCmd.index) {
 8003ea8:	4bc6      	ldr	r3, [pc, #792]	; (80041c4 <runCmdTask+0x324>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	2b63      	cmp	r3, #99	; 0x63
 8003eb0:	f200 827a 	bhi.w	80043a8 <runCmdTask+0x508>
 8003eb4:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <runCmdTask+0x1c>)
 8003eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eba:	bf00      	nop
 8003ebc:	0800404d 	.word	0x0800404d
 8003ec0:	0800404d 	.word	0x0800404d
 8003ec4:	08004069 	.word	0x08004069
 8003ec8:	08004069 	.word	0x08004069
 8003ecc:	08004069 	.word	0x08004069
 8003ed0:	08004069 	.word	0x08004069
 8003ed4:	08004239 	.word	0x08004239
 8003ed8:	08004247 	.word	0x08004247
 8003edc:	08004255 	.word	0x08004255
 8003ee0:	08004263 	.word	0x08004263
 8003ee4:	08004271 	.word	0x08004271
 8003ee8:	08004271 	.word	0x08004271
 8003eec:	080042b9 	.word	0x080042b9
 8003ef0:	080042c1 	.word	0x080042c1
 8003ef4:	080042cf 	.word	0x080042cf
 8003ef8:	080042dd 	.word	0x080042dd
 8003efc:	080042eb 	.word	0x080042eb
 8003f00:	080043a9 	.word	0x080043a9
 8003f04:	080043a9 	.word	0x080043a9
 8003f08:	080043a9 	.word	0x080043a9
 8003f0c:	080043a9 	.word	0x080043a9
 8003f10:	080043a9 	.word	0x080043a9
 8003f14:	080043a9 	.word	0x080043a9
 8003f18:	080043a9 	.word	0x080043a9
 8003f1c:	080043a9 	.word	0x080043a9
 8003f20:	080043a9 	.word	0x080043a9
 8003f24:	080043a9 	.word	0x080043a9
 8003f28:	080043a9 	.word	0x080043a9
 8003f2c:	080043a9 	.word	0x080043a9
 8003f30:	080043a9 	.word	0x080043a9
 8003f34:	080043a9 	.word	0x080043a9
 8003f38:	080043a9 	.word	0x080043a9
 8003f3c:	080043a9 	.word	0x080043a9
 8003f40:	080043a9 	.word	0x080043a9
 8003f44:	080043a9 	.word	0x080043a9
 8003f48:	080043a9 	.word	0x080043a9
 8003f4c:	080043a9 	.word	0x080043a9
 8003f50:	080043a9 	.word	0x080043a9
 8003f54:	080043a9 	.word	0x080043a9
 8003f58:	080043a9 	.word	0x080043a9
 8003f5c:	080043a9 	.word	0x080043a9
 8003f60:	080043a9 	.word	0x080043a9
 8003f64:	080043a9 	.word	0x080043a9
 8003f68:	080043a9 	.word	0x080043a9
 8003f6c:	080043a9 	.word	0x080043a9
 8003f70:	080043a9 	.word	0x080043a9
 8003f74:	080043a9 	.word	0x080043a9
 8003f78:	080043a9 	.word	0x080043a9
 8003f7c:	080043a9 	.word	0x080043a9
 8003f80:	080043a9 	.word	0x080043a9
 8003f84:	080043a9 	.word	0x080043a9
 8003f88:	080043a9 	.word	0x080043a9
 8003f8c:	080043a9 	.word	0x080043a9
 8003f90:	080043a9 	.word	0x080043a9
 8003f94:	080043a9 	.word	0x080043a9
 8003f98:	080043a9 	.word	0x080043a9
 8003f9c:	080043a9 	.word	0x080043a9
 8003fa0:	080043a9 	.word	0x080043a9
 8003fa4:	080043a9 	.word	0x080043a9
 8003fa8:	080043a9 	.word	0x080043a9
 8003fac:	080043a9 	.word	0x080043a9
 8003fb0:	080043a9 	.word	0x080043a9
 8003fb4:	080043a9 	.word	0x080043a9
 8003fb8:	080043a9 	.word	0x080043a9
 8003fbc:	080043a9 	.word	0x080043a9
 8003fc0:	080043a9 	.word	0x080043a9
 8003fc4:	080043a9 	.word	0x080043a9
 8003fc8:	080043a9 	.word	0x080043a9
 8003fcc:	080043a9 	.word	0x080043a9
 8003fd0:	080043a9 	.word	0x080043a9
 8003fd4:	080043a9 	.word	0x080043a9
 8003fd8:	080043a9 	.word	0x080043a9
 8003fdc:	080043a9 	.word	0x080043a9
 8003fe0:	080043a9 	.word	0x080043a9
 8003fe4:	080043a9 	.word	0x080043a9
 8003fe8:	080043a9 	.word	0x080043a9
 8003fec:	080043a9 	.word	0x080043a9
 8003ff0:	080043a9 	.word	0x080043a9
 8003ff4:	080043a9 	.word	0x080043a9
 8003ff8:	080043a9 	.word	0x080043a9
 8003ffc:	080043a9 	.word	0x080043a9
 8004000:	080043a9 	.word	0x080043a9
 8004004:	080043a9 	.word	0x080043a9
 8004008:	080043a9 	.word	0x080043a9
 800400c:	080043a9 	.word	0x080043a9
 8004010:	080043a9 	.word	0x080043a9
 8004014:	080043a9 	.word	0x080043a9
 8004018:	080042f9 	.word	0x080042f9
 800401c:	080042f9 	.word	0x080042f9
 8004020:	080043a9 	.word	0x080043a9
 8004024:	080043a9 	.word	0x080043a9
 8004028:	080043a9 	.word	0x080043a9
 800402c:	080043a9 	.word	0x080043a9
 8004030:	080043a9 	.word	0x080043a9
 8004034:	080043a9 	.word	0x080043a9
 8004038:	080043a9 	.word	0x080043a9
 800403c:	080043a9 	.word	0x080043a9
 8004040:	080043a9 	.word	0x080043a9
 8004044:	080043a9 	.word	0x080043a9
 8004048:	080043a9 	.word	0x080043a9
//	  	 case 0: // STOP handled in UART IRQ directly
//	  	  	  break;
	  	 case 1: //FW
	  	 case 2: //BW
	  		curTask = curCmd.index == 1 ? TASK_MOVE : TASK_MOVE_BACKWARD;
 800404c:	4b5d      	ldr	r3, [pc, #372]	; (80041c4 <runCmdTask+0x324>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b01      	cmp	r3, #1
 8004052:	bf14      	ite	ne
 8004054:	2301      	movne	r3, #1
 8004056:	2300      	moveq	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	4b5a      	ldr	r3, [pc, #360]	; (80041c8 <runCmdTask+0x328>)
 800405e:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8004060:	4b58      	ldr	r3, [pc, #352]	; (80041c4 <runCmdTask+0x324>)
 8004062:	2263      	movs	r2, #99	; 0x63
 8004064:	701a      	strb	r2, [r3, #0]
	  		 break;
 8004066:	e1a0      	b.n	80043aa <runCmdTask+0x50a>
	  	case 3: //FL manual
		case 4: //FR manual
		case 5: //BL manual
		case 6: //BR manual
			__SET_CMD_CONFIG(cfgs[curCmd.index], &htim8, &htim1, targetAngle);
 8004068:	4b56      	ldr	r3, [pc, #344]	; (80041c4 <runCmdTask+0x324>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	4a57      	ldr	r2, [pc, #348]	; (80041cc <runCmdTask+0x32c>)
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	4413      	add	r3, r2
 8004072:	3304      	adds	r3, #4
 8004074:	edd3 7a00 	vldr	s15, [r3]
 8004078:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80041d0 <runCmdTask+0x330>
 800407c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004084:	dd01      	ble.n	800408a <runCmdTask+0x1ea>
 8004086:	2373      	movs	r3, #115	; 0x73
 8004088:	e01c      	b.n	80040c4 <runCmdTask+0x224>
 800408a:	4b4e      	ldr	r3, [pc, #312]	; (80041c4 <runCmdTask+0x324>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	4a4f      	ldr	r2, [pc, #316]	; (80041cc <runCmdTask+0x32c>)
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	4413      	add	r3, r2
 8004094:	3304      	adds	r3, #4
 8004096:	edd3 7a00 	vldr	s15, [r3]
 800409a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80041d4 <runCmdTask+0x334>
 800409e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a6:	d501      	bpl.n	80040ac <runCmdTask+0x20c>
 80040a8:	2332      	movs	r3, #50	; 0x32
 80040aa:	e00b      	b.n	80040c4 <runCmdTask+0x224>
 80040ac:	4b45      	ldr	r3, [pc, #276]	; (80041c4 <runCmdTask+0x324>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	4a46      	ldr	r2, [pc, #280]	; (80041cc <runCmdTask+0x32c>)
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	4413      	add	r3, r2
 80040b6:	3304      	adds	r3, #4
 80040b8:	edd3 7a00 	vldr	s15, [r3]
 80040bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040c0:	ee17 3a90 	vmov	r3, s15
 80040c4:	4a44      	ldr	r2, [pc, #272]	; (80041d8 <runCmdTask+0x338>)
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80040ce:	f003 f833 	bl	8007138 <HAL_Delay>
 80040d2:	4b3c      	ldr	r3, [pc, #240]	; (80041c4 <runCmdTask+0x324>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	4a3d      	ldr	r2, [pc, #244]	; (80041cc <runCmdTask+0x32c>)
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	4413      	add	r3, r2
 80040dc:	3308      	adds	r3, #8
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a3e      	ldr	r2, [pc, #248]	; (80041dc <runCmdTask+0x33c>)
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	4b37      	ldr	r3, [pc, #220]	; (80041c4 <runCmdTask+0x324>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	4a38      	ldr	r2, [pc, #224]	; (80041cc <runCmdTask+0x32c>)
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	4413      	add	r3, r2
 80040ee:	330c      	adds	r3, #12
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bf0c      	ite	eq
 80040f6:	2301      	moveq	r3, #1
 80040f8:	2300      	movne	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	2104      	movs	r1, #4
 8004100:	4837      	ldr	r0, [pc, #220]	; (80041e0 <runCmdTask+0x340>)
 8004102:	f004 f8b5 	bl	8008270 <HAL_GPIO_WritePin>
 8004106:	4b2f      	ldr	r3, [pc, #188]	; (80041c4 <runCmdTask+0x324>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	4a30      	ldr	r2, [pc, #192]	; (80041cc <runCmdTask+0x32c>)
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	4413      	add	r3, r2
 8004110:	330c      	adds	r3, #12
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf14      	ite	ne
 8004118:	2301      	movne	r3, #1
 800411a:	2300      	moveq	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	2108      	movs	r1, #8
 8004122:	482f      	ldr	r0, [pc, #188]	; (80041e0 <runCmdTask+0x340>)
 8004124:	f004 f8a4 	bl	8008270 <HAL_GPIO_WritePin>
 8004128:	4b26      	ldr	r3, [pc, #152]	; (80041c4 <runCmdTask+0x324>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	4a27      	ldr	r2, [pc, #156]	; (80041cc <runCmdTask+0x32c>)
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	4413      	add	r3, r2
 8004132:	330c      	adds	r3, #12
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	bf0c      	ite	eq
 800413a:	2301      	moveq	r3, #1
 800413c:	2300      	movne	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	2120      	movs	r1, #32
 8004144:	4826      	ldr	r0, [pc, #152]	; (80041e0 <runCmdTask+0x340>)
 8004146:	f004 f893 	bl	8008270 <HAL_GPIO_WritePin>
 800414a:	4b1e      	ldr	r3, [pc, #120]	; (80041c4 <runCmdTask+0x324>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	4a1f      	ldr	r2, [pc, #124]	; (80041cc <runCmdTask+0x32c>)
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	4413      	add	r3, r2
 8004154:	330c      	adds	r3, #12
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf14      	ite	ne
 800415c:	2301      	movne	r3, #1
 800415e:	2300      	moveq	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	2110      	movs	r1, #16
 8004166:	481e      	ldr	r0, [pc, #120]	; (80041e0 <runCmdTask+0x340>)
 8004168:	f004 f882 	bl	8008270 <HAL_GPIO_WritePin>
 800416c:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <runCmdTask+0x324>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	4a16      	ldr	r2, [pc, #88]	; (80041cc <runCmdTask+0x32c>)
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	4413      	add	r3, r2
 8004176:	881a      	ldrh	r2, [r3, #0]
 8004178:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <runCmdTask+0x344>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	635a      	str	r2, [r3, #52]	; 0x34
 800417e:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <runCmdTask+0x324>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	4a12      	ldr	r2, [pc, #72]	; (80041cc <runCmdTask+0x32c>)
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	4413      	add	r3, r2
 8004188:	3302      	adds	r3, #2
 800418a:	881a      	ldrh	r2, [r3, #0]
 800418c:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <runCmdTask+0x344>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	639a      	str	r2, [r3, #56]	; 0x38
			if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <runCmdTask+0x348>)
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <runCmdTask+0x348>)
 8004198:	785b      	ldrb	r3, [r3, #1]
 800419a:	429a      	cmp	r2, r3
 800419c:	d12e      	bne.n	80041fc <runCmdTask+0x35c>
				__CLEAR_CURCMD(curCmd);
 800419e:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <runCmdTask+0x324>)
 80041a0:	2264      	movs	r2, #100	; 0x64
 80041a2:	701a      	strb	r2, [r3, #0]
 80041a4:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <runCmdTask+0x324>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 80041aa:	4a10      	ldr	r2, [pc, #64]	; (80041ec <runCmdTask+0x34c>)
 80041ac:	210f      	movs	r1, #15
 80041ae:	4810      	ldr	r0, [pc, #64]	; (80041f0 <runCmdTask+0x350>)
 80041b0:	f00b f93c 	bl	800f42c <sniprintf>
 80041b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041b8:	2206      	movs	r2, #6
 80041ba:	490e      	ldr	r1, [pc, #56]	; (80041f4 <runCmdTask+0x354>)
 80041bc:	480e      	ldr	r0, [pc, #56]	; (80041f8 <runCmdTask+0x358>)
 80041be:	f007 fa7e 	bl	800b6be <HAL_UART_Transmit>
 80041c2:	e035      	b.n	8004230 <runCmdTask+0x390>
 80041c4:	20000518 	.word	0x20000518
 80041c8:	20000134 	.word	0x20000134
 80041cc:	20000004 	.word	0x20000004
 80041d0:	42e60000 	.word	0x42e60000
 80041d4:	42480000 	.word	0x42480000
 80041d8:	200002a8 	.word	0x200002a8
 80041dc:	20000540 	.word	0x20000540
 80041e0:	40020000 	.word	0x40020000
 80041e4:	20000410 	.word	0x20000410
 80041e8:	200004e4 	.word	0x200004e4
 80041ec:	08010b40 	.word	0x08010b40
 80041f0:	2000051c 	.word	0x2000051c
 80041f4:	08010b48 	.word	0x08010b48
 80041f8:	20000458 	.word	0x20000458
			} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 80041fc:	4b6d      	ldr	r3, [pc, #436]	; (80043b4 <runCmdTask+0x514>)
 80041fe:	785b      	ldrb	r3, [r3, #1]
 8004200:	4a6d      	ldr	r2, [pc, #436]	; (80043b8 <runCmdTask+0x518>)
 8004202:	496c      	ldr	r1, [pc, #432]	; (80043b4 <runCmdTask+0x514>)
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	4b69      	ldr	r3, [pc, #420]	; (80043b4 <runCmdTask+0x514>)
 800420e:	785b      	ldrb	r3, [r3, #1]
 8004210:	3301      	adds	r3, #1
 8004212:	4a68      	ldr	r2, [pc, #416]	; (80043b4 <runCmdTask+0x514>)
 8004214:	7892      	ldrb	r2, [r2, #2]
 8004216:	fb93 f1f2 	sdiv	r1, r3, r2
 800421a:	fb01 f202 	mul.w	r2, r1, r2
 800421e:	1a9b      	subs	r3, r3, r2
 8004220:	b2da      	uxtb	r2, r3
 8004222:	4b64      	ldr	r3, [pc, #400]	; (80043b4 <runCmdTask+0x514>)
 8004224:	705a      	strb	r2, [r3, #1]
 8004226:	4a65      	ldr	r2, [pc, #404]	; (80043bc <runCmdTask+0x51c>)
 8004228:	210f      	movs	r1, #15
 800422a:	4865      	ldr	r0, [pc, #404]	; (80043c0 <runCmdTask+0x520>)
 800422c:	f00b f8fe 	bl	800f42c <sniprintf>
			__PEND_CURCMD(curCmd);
 8004230:	4b61      	ldr	r3, [pc, #388]	; (80043b8 <runCmdTask+0x518>)
 8004232:	2263      	movs	r2, #99	; 0x63
 8004234:	701a      	strb	r2, [r3, #0]
			 break;
 8004236:	e0b8      	b.n	80043aa <runCmdTask+0x50a>
	  	 case 7: // FL
	  		 curTask = TASK_FL;
 8004238:	4b62      	ldr	r3, [pc, #392]	; (80043c4 <runCmdTask+0x524>)
 800423a:	2202      	movs	r2, #2
 800423c:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 800423e:	4b5e      	ldr	r3, [pc, #376]	; (80043b8 <runCmdTask+0x518>)
 8004240:	2263      	movs	r2, #99	; 0x63
 8004242:	701a      	strb	r2, [r3, #0]
	  		 break;
 8004244:	e0b1      	b.n	80043aa <runCmdTask+0x50a>
	  	 case 8: // FR
	  		curTask = TASK_FR;
 8004246:	4b5f      	ldr	r3, [pc, #380]	; (80043c4 <runCmdTask+0x524>)
 8004248:	2203      	movs	r2, #3
 800424a:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 800424c:	4b5a      	ldr	r3, [pc, #360]	; (80043b8 <runCmdTask+0x518>)
 800424e:	2263      	movs	r2, #99	; 0x63
 8004250:	701a      	strb	r2, [r3, #0]
	  		break;
 8004252:	e0aa      	b.n	80043aa <runCmdTask+0x50a>
	  	 case 9: // BL
	  		curTask = TASK_BL;
 8004254:	4b5b      	ldr	r3, [pc, #364]	; (80043c4 <runCmdTask+0x524>)
 8004256:	2204      	movs	r2, #4
 8004258:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 800425a:	4b57      	ldr	r3, [pc, #348]	; (80043b8 <runCmdTask+0x518>)
 800425c:	2263      	movs	r2, #99	; 0x63
 800425e:	701a      	strb	r2, [r3, #0]
	  		break;
 8004260:	e0a3      	b.n	80043aa <runCmdTask+0x50a>
	  	 case 10: //BR
	  		curTask = TASK_BR;
 8004262:	4b58      	ldr	r3, [pc, #352]	; (80043c4 <runCmdTask+0x524>)
 8004264:	2205      	movs	r2, #5
 8004266:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8004268:	4b53      	ldr	r3, [pc, #332]	; (80043b8 <runCmdTask+0x518>)
 800426a:	2263      	movs	r2, #99	; 0x63
 800426c:	701a      	strb	r2, [r3, #0]
	  		break;
 800426e:	e09c      	b.n	80043aa <runCmdTask+0x50a>
	  	 case 11: // TL
	  	 case 12: // TR
	  		 __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 11 ? 1 : 0);
 8004270:	4b51      	ldr	r3, [pc, #324]	; (80043b8 <runCmdTask+0x518>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b0b      	cmp	r3, #11
 8004276:	d004      	beq.n	8004282 <runCmdTask+0x3e2>
 8004278:	4b53      	ldr	r3, [pc, #332]	; (80043c8 <runCmdTask+0x528>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2273      	movs	r2, #115	; 0x73
 800427e:	641a      	str	r2, [r3, #64]	; 0x40
 8004280:	e003      	b.n	800428a <runCmdTask+0x3ea>
 8004282:	4b51      	ldr	r3, [pc, #324]	; (80043c8 <runCmdTask+0x528>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2232      	movs	r2, #50	; 0x32
 8004288:	641a      	str	r2, [r3, #64]	; 0x40
 800428a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800428e:	f002 ff53 	bl	8007138 <HAL_Delay>
	  		__CLEAR_CURCMD(curCmd);
 8004292:	4b49      	ldr	r3, [pc, #292]	; (80043b8 <runCmdTask+0x518>)
 8004294:	2264      	movs	r2, #100	; 0x64
 8004296:	701a      	strb	r2, [r3, #0]
 8004298:	4b47      	ldr	r3, [pc, #284]	; (80043b8 <runCmdTask+0x518>)
 800429a:	2200      	movs	r2, #0
 800429c:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 800429e:	4a4b      	ldr	r2, [pc, #300]	; (80043cc <runCmdTask+0x52c>)
 80042a0:	210f      	movs	r1, #15
 80042a2:	4847      	ldr	r0, [pc, #284]	; (80043c0 <runCmdTask+0x520>)
 80042a4:	f00b f8c2 	bl	800f42c <sniprintf>
 80042a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042ac:	2206      	movs	r2, #6
 80042ae:	4948      	ldr	r1, [pc, #288]	; (80043d0 <runCmdTask+0x530>)
 80042b0:	4848      	ldr	r0, [pc, #288]	; (80043d4 <runCmdTask+0x534>)
 80042b2:	f007 fa04 	bl	800b6be <HAL_UART_Transmit>
	  		 break;
 80042b6:	e078      	b.n	80043aa <runCmdTask+0x50a>
	  	 case 13: // debug IR sensor
	  		 curTask = TASK_ADC;
 80042b8:	4b42      	ldr	r3, [pc, #264]	; (80043c4 <runCmdTask+0x524>)
 80042ba:	2206      	movs	r2, #6
 80042bc:	701a      	strb	r2, [r3, #0]
	  		 break;
 80042be:	e074      	b.n	80043aa <runCmdTask+0x50a>
	  	 case 14: // DT move until specified distance from obstacle
	  		  curTask = TASK_MOVE_OBS;
 80042c0:	4b40      	ldr	r3, [pc, #256]	; (80043c4 <runCmdTask+0x524>)
 80042c2:	2207      	movs	r2, #7
 80042c4:	701a      	strb	r2, [r3, #0]
	  		  __PEND_CURCMD(curCmd);
 80042c6:	4b3c      	ldr	r3, [pc, #240]	; (80043b8 <runCmdTask+0x518>)
 80042c8:	2263      	movs	r2, #99	; 0x63
 80042ca:	701a      	strb	r2, [r3, #0]
	  		 break;
 80042cc:	e06d      	b.n	80043aa <runCmdTask+0x50a>
	  	 case 15:
	  		 curTask = TASK_BUZZER;
 80042ce:	4b3d      	ldr	r3, [pc, #244]	; (80043c4 <runCmdTask+0x524>)
 80042d0:	220a      	movs	r2, #10
 80042d2:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 80042d4:	4b38      	ldr	r3, [pc, #224]	; (80043b8 <runCmdTask+0x518>)
 80042d6:	2263      	movs	r2, #99	; 0x63
 80042d8:	701a      	strb	r2, [r3, #0]
	  		break;
 80042da:	e066      	b.n	80043aa <runCmdTask+0x50a>
	  	 case 16:
	  		 curTask = TASK_FASTESTPATH;
 80042dc:	4b39      	ldr	r3, [pc, #228]	; (80043c4 <runCmdTask+0x524>)
 80042de:	2208      	movs	r2, #8
 80042e0:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 80042e2:	4b35      	ldr	r3, [pc, #212]	; (80043b8 <runCmdTask+0x518>)
 80042e4:	2263      	movs	r2, #99	; 0x63
 80042e6:	701a      	strb	r2, [r3, #0]
	  		 break;
 80042e8:	e05f      	b.n	80043aa <runCmdTask+0x50a>
	  	 case 17:
	  		 curTask = TASK_FASTESTPATH_V2;
 80042ea:	4b36      	ldr	r3, [pc, #216]	; (80043c4 <runCmdTask+0x524>)
 80042ec:	2209      	movs	r2, #9
 80042ee:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 80042f0:	4b31      	ldr	r3, [pc, #196]	; (80043b8 <runCmdTask+0x518>)
 80042f2:	2263      	movs	r2, #99	; 0x63
 80042f4:	701a      	strb	r2, [r3, #0]
	  		 break;
 80042f6:	e058      	b.n	80043aa <runCmdTask+0x50a>
	  	 case 88: // Axxx, rotate left by xxx degree
	  	 case 89: // Cxxx, rotate right by xxx degree
	  		 __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 88);
 80042f8:	4b2f      	ldr	r3, [pc, #188]	; (80043b8 <runCmdTask+0x518>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b58      	cmp	r3, #88	; 0x58
 80042fe:	d004      	beq.n	800430a <runCmdTask+0x46a>
 8004300:	4b31      	ldr	r3, [pc, #196]	; (80043c8 <runCmdTask+0x528>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2273      	movs	r2, #115	; 0x73
 8004306:	641a      	str	r2, [r3, #64]	; 0x40
 8004308:	e003      	b.n	8004312 <runCmdTask+0x472>
 800430a:	4b2f      	ldr	r3, [pc, #188]	; (80043c8 <runCmdTask+0x528>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2232      	movs	r2, #50	; 0x32
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
 8004312:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004316:	f002 ff0f 	bl	8007138 <HAL_Delay>
	  		 __SET_MOTOR_DIRECTION(DIR_FORWARD);
 800431a:	2200      	movs	r2, #0
 800431c:	2104      	movs	r1, #4
 800431e:	482e      	ldr	r0, [pc, #184]	; (80043d8 <runCmdTask+0x538>)
 8004320:	f003 ffa6 	bl	8008270 <HAL_GPIO_WritePin>
 8004324:	2201      	movs	r2, #1
 8004326:	2108      	movs	r1, #8
 8004328:	482b      	ldr	r0, [pc, #172]	; (80043d8 <runCmdTask+0x538>)
 800432a:	f003 ffa1 	bl	8008270 <HAL_GPIO_WritePin>
 800432e:	2200      	movs	r2, #0
 8004330:	2120      	movs	r1, #32
 8004332:	4829      	ldr	r0, [pc, #164]	; (80043d8 <runCmdTask+0x538>)
 8004334:	f003 ff9c 	bl	8008270 <HAL_GPIO_WritePin>
 8004338:	2201      	movs	r2, #1
 800433a:	2110      	movs	r1, #16
 800433c:	4826      	ldr	r0, [pc, #152]	; (80043d8 <runCmdTask+0x538>)
 800433e:	f003 ff97 	bl	8008270 <HAL_GPIO_WritePin>
	  		 if (curCmd.index == 88) {
 8004342:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <runCmdTask+0x518>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b58      	cmp	r3, #88	; 0x58
 8004348:	d113      	bne.n	8004372 <runCmdTask+0x4d2>
	  			 targetAngle = curCmd.val;
 800434a:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <runCmdTask+0x518>)
 800434c:	885b      	ldrh	r3, [r3, #2]
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004356:	4b21      	ldr	r3, [pc, #132]	; (80043dc <runCmdTask+0x53c>)
 8004358:	edc3 7a00 	vstr	s15, [r3]
	  			 __SET_MOTOR_DUTY(&htim8, 800, 1200);
 800435c:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <runCmdTask+0x540>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004364:	635a      	str	r2, [r3, #52]	; 0x34
 8004366:	4b1e      	ldr	r3, [pc, #120]	; (80043e0 <runCmdTask+0x540>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800436e:	639a      	str	r2, [r3, #56]	; 0x38
 8004370:	e013      	b.n	800439a <runCmdTask+0x4fa>
	  		 } else {
	  			targetAngle = -curCmd.val;
 8004372:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <runCmdTask+0x518>)
 8004374:	885b      	ldrh	r3, [r3, #2]
 8004376:	425b      	negs	r3, r3
 8004378:	ee07 3a90 	vmov	s15, r3
 800437c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004380:	4b16      	ldr	r3, [pc, #88]	; (80043dc <runCmdTask+0x53c>)
 8004382:	edc3 7a00 	vstr	s15, [r3]
	  			 __SET_MOTOR_DUTY(&htim8, 1200, 800);
 8004386:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <runCmdTask+0x540>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800438e:	635a      	str	r2, [r3, #52]	; 0x34
 8004390:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <runCmdTask+0x540>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004398:	639a      	str	r2, [r3, #56]	; 0x38
	  		 }
	  		__PEND_CURCMD(curCmd);
 800439a:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <runCmdTask+0x518>)
 800439c:	2263      	movs	r2, #99	; 0x63
 800439e:	701a      	strb	r2, [r3, #0]
	  		 RobotTurn(&targetAngle);
 80043a0:	480e      	ldr	r0, [pc, #56]	; (80043dc <runCmdTask+0x53c>)
 80043a2:	f7ff f8dd 	bl	8003560 <RobotTurn>
	  		 break;
 80043a6:	e000      	b.n	80043aa <runCmdTask+0x50a>
	  		 break;
	  	 case 100:
	  		 break;
	  	 default:
	  //		 curCmd.index = 99;
	  		 break;
 80043a8:	bf00      	nop
	  	 }

	  osDelay(100);
 80043aa:	2064      	movs	r0, #100	; 0x64
 80043ac:	f008 fac2 	bl	800c934 <osDelay>
	  switch(curCmd.index) {
 80043b0:	e57a      	b.n	8003ea8 <runCmdTask+0x8>
 80043b2:	bf00      	nop
 80043b4:	200004e4 	.word	0x200004e4
 80043b8:	20000518 	.word	0x20000518
 80043bc:	08010b50 	.word	0x08010b50
 80043c0:	2000051c 	.word	0x2000051c
 80043c4:	20000134 	.word	0x20000134
 80043c8:	200002a8 	.word	0x200002a8
 80043cc:	08010b40 	.word	0x08010b40
 80043d0:	08010b48 	.word	0x08010b48
 80043d4:	20000458 	.word	0x20000458
 80043d8:	40020000 	.word	0x40020000
 80043dc:	20000540 	.word	0x20000540
 80043e0:	20000410 	.word	0x20000410

080043e4 <runADCTask>:
* Greedy Task (can only preempted by UART IRQ or EXTI)
* When activate (curTask == TASK_ADC), function executes in 1MHz
*/
/* USER CODE END Header_runADCTask */
void runADCTask(void *argument)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runADCTask */
	uint16_t dataPoint = 0; uint32_t IR_data_raw_acc = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	81fb      	strh	r3, [r7, #14]
 80043f0:	2300      	movs	r3, #0
 80043f2:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_ADC) osDelay(1000);
 80043f4:	4b27      	ldr	r3, [pc, #156]	; (8004494 <runADCTask+0xb0>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b06      	cmp	r3, #6
 80043fa:	d004      	beq.n	8004406 <runADCTask+0x22>
 80043fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004400:	f008 fa98 	bl	800c934 <osDelay>
 8004404:	e7f6      	b.n	80043f4 <runADCTask+0x10>
	  else {
//			dataPoint = 0; IR_data_raw_acc = 0; obsDist_IR = 1000;
//			last_curTask_tick = HAL_GetTick();
			__PEND_CURCMD(curCmd);
 8004406:	4b24      	ldr	r3, [pc, #144]	; (8004498 <runADCTask+0xb4>)
 8004408:	2263      	movs	r2, #99	; 0x63
 800440a:	701a      	strb	r2, [r3, #0]
			targetDist = 40;
 800440c:	4b23      	ldr	r3, [pc, #140]	; (800449c <runADCTask+0xb8>)
 800440e:	4a24      	ldr	r2, [pc, #144]	; (80044a0 <runADCTask+0xbc>)
 8004410:	601a      	str	r2, [r3, #0]
			RobotMoveDistObstacle_IR(&targetDist);
 8004412:	4822      	ldr	r0, [pc, #136]	; (800449c <runADCTask+0xb8>)
 8004414:	f7fe ff40 	bl	8003298 <RobotMoveDistObstacle_IR>
//			  osDelay(5);
//			} while (1);
//
//		  __ON_TASK_END(&htim8, prevTask, curTask);
//		  HAL_ADC_Stop(&hadc1);
		  clickOnce = 0;
 8004418:	4b22      	ldr	r3, [pc, #136]	; (80044a4 <runADCTask+0xc0>)
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 800441e:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <runADCTask+0xb0>)
 8004420:	781a      	ldrb	r2, [r3, #0]
 8004422:	4b21      	ldr	r3, [pc, #132]	; (80044a8 <runADCTask+0xc4>)
 8004424:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8004426:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <runADCTask+0xb0>)
 8004428:	220b      	movs	r2, #11
 800442a:	701a      	strb	r2, [r3, #0]
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 800442c:	4b1f      	ldr	r3, [pc, #124]	; (80044ac <runADCTask+0xc8>)
 800442e:	781a      	ldrb	r2, [r3, #0]
 8004430:	4b1e      	ldr	r3, [pc, #120]	; (80044ac <runADCTask+0xc8>)
 8004432:	785b      	ldrb	r3, [r3, #1]
 8004434:	429a      	cmp	r2, r3
 8004436:	d112      	bne.n	800445e <runADCTask+0x7a>
			__CLEAR_CURCMD(curCmd);
 8004438:	4b17      	ldr	r3, [pc, #92]	; (8004498 <runADCTask+0xb4>)
 800443a:	2264      	movs	r2, #100	; 0x64
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	4b16      	ldr	r3, [pc, #88]	; (8004498 <runADCTask+0xb4>)
 8004440:	2200      	movs	r2, #0
 8004442:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 8004444:	4a1a      	ldr	r2, [pc, #104]	; (80044b0 <runADCTask+0xcc>)
 8004446:	210f      	movs	r1, #15
 8004448:	481a      	ldr	r0, [pc, #104]	; (80044b4 <runADCTask+0xd0>)
 800444a:	f00a ffef 	bl	800f42c <sniprintf>
 800444e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004452:	2206      	movs	r2, #6
 8004454:	4918      	ldr	r1, [pc, #96]	; (80044b8 <runADCTask+0xd4>)
 8004456:	4819      	ldr	r0, [pc, #100]	; (80044bc <runADCTask+0xd8>)
 8004458:	f007 f931 	bl	800b6be <HAL_UART_Transmit>
 800445c:	e7ca      	b.n	80043f4 <runADCTask+0x10>

		} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 800445e:	4b13      	ldr	r3, [pc, #76]	; (80044ac <runADCTask+0xc8>)
 8004460:	785b      	ldrb	r3, [r3, #1]
 8004462:	4a0d      	ldr	r2, [pc, #52]	; (8004498 <runADCTask+0xb4>)
 8004464:	4911      	ldr	r1, [pc, #68]	; (80044ac <runADCTask+0xc8>)
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <runADCTask+0xc8>)
 8004470:	785b      	ldrb	r3, [r3, #1]
 8004472:	3301      	adds	r3, #1
 8004474:	4a0d      	ldr	r2, [pc, #52]	; (80044ac <runADCTask+0xc8>)
 8004476:	7892      	ldrb	r2, [r2, #2]
 8004478:	fb93 f1f2 	sdiv	r1, r3, r2
 800447c:	fb01 f202 	mul.w	r2, r1, r2
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	b2da      	uxtb	r2, r3
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <runADCTask+0xc8>)
 8004486:	705a      	strb	r2, [r3, #1]
 8004488:	4a0d      	ldr	r2, [pc, #52]	; (80044c0 <runADCTask+0xdc>)
 800448a:	210f      	movs	r1, #15
 800448c:	4809      	ldr	r0, [pc, #36]	; (80044b4 <runADCTask+0xd0>)
 800448e:	f00a ffcd 	bl	800f42c <sniprintf>
	  if (curTask != TASK_ADC) osDelay(1000);
 8004492:	e7af      	b.n	80043f4 <runADCTask+0x10>
 8004494:	20000134 	.word	0x20000134
 8004498:	20000518 	.word	0x20000518
 800449c:	20000554 	.word	0x20000554
 80044a0:	42200000 	.word	0x42200000
 80044a4:	200005ec 	.word	0x200005ec
 80044a8:	20000135 	.word	0x20000135
 80044ac:	200004e4 	.word	0x200004e4
 80044b0:	08010b40 	.word	0x08010b40
 80044b4:	2000051c 	.word	0x2000051c
 80044b8:	08010b48 	.word	0x08010b48
 80044bc:	20000458 	.word	0x20000458
 80044c0:	08010b50 	.word	0x08010b50

080044c4 <runMoveDistTask>:
* @retval None
* Greedy Task (can only preempted by UART IRQ or EXTI)
*/
/* USER CODE END Header_runMoveDistTask */
void runMoveDistTask(void *argument)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runMoveDistTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_MOVE && curTask != TASK_MOVE_BACKWARD) osDelay(1000);
 80044cc:	4b85      	ldr	r3, [pc, #532]	; (80046e4 <runMoveDistTask+0x220>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d008      	beq.n	80044e6 <runMoveDistTask+0x22>
 80044d4:	4b83      	ldr	r3, [pc, #524]	; (80046e4 <runMoveDistTask+0x220>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d004      	beq.n	80044e6 <runMoveDistTask+0x22>
 80044dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044e0:	f008 fa28 	bl	800c934 <osDelay>
 80044e4:	e0fc      	b.n	80046e0 <runMoveDistTask+0x21c>
	  else {
		  if (manualMode) {
 80044e6:	4b80      	ldr	r3, [pc, #512]	; (80046e8 <runMoveDistTask+0x224>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d07e      	beq.n	80045ec <runMoveDistTask+0x128>
			  angleNow = 0; gyroZ = 0; // reset angle for PID
 80044ee:	4b7f      	ldr	r3, [pc, #508]	; (80046ec <runMoveDistTask+0x228>)
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	4b7e      	ldr	r3, [pc, #504]	; (80046f0 <runMoveDistTask+0x22c>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	801a      	strh	r2, [r3, #0]
			PIDConfigReset(&pidTSlow);
 80044fc:	487d      	ldr	r0, [pc, #500]	; (80046f4 <runMoveDistTask+0x230>)
 80044fe:	f7fe f892 	bl	8002626 <PIDConfigReset>
			PIDConfigReset(&pidSlow);
 8004502:	487d      	ldr	r0, [pc, #500]	; (80046f8 <runMoveDistTask+0x234>)
 8004504:	f7fe f88f 	bl	8002626 <PIDConfigReset>
			PIDConfigReset(&pidFast);
 8004508:	487c      	ldr	r0, [pc, #496]	; (80046fc <runMoveDistTask+0x238>)
 800450a:	f7fe f88c 	bl	8002626 <PIDConfigReset>

			__SET_MOTOR_DIRECTION(curTask == TASK_MOVE ? DIR_FORWARD : DIR_BACKWARD);
 800450e:	4b75      	ldr	r3, [pc, #468]	; (80046e4 <runMoveDistTask+0x220>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	bf14      	ite	ne
 8004516:	2301      	movne	r3, #1
 8004518:	2300      	moveq	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	2104      	movs	r1, #4
 8004520:	4877      	ldr	r0, [pc, #476]	; (8004700 <runMoveDistTask+0x23c>)
 8004522:	f003 fea5 	bl	8008270 <HAL_GPIO_WritePin>
 8004526:	4b6f      	ldr	r3, [pc, #444]	; (80046e4 <runMoveDistTask+0x220>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	bf0c      	ite	eq
 800452e:	2301      	moveq	r3, #1
 8004530:	2300      	movne	r3, #0
 8004532:	b2db      	uxtb	r3, r3
 8004534:	461a      	mov	r2, r3
 8004536:	2108      	movs	r1, #8
 8004538:	4871      	ldr	r0, [pc, #452]	; (8004700 <runMoveDistTask+0x23c>)
 800453a:	f003 fe99 	bl	8008270 <HAL_GPIO_WritePin>
 800453e:	4b69      	ldr	r3, [pc, #420]	; (80046e4 <runMoveDistTask+0x220>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	bf14      	ite	ne
 8004546:	2301      	movne	r3, #1
 8004548:	2300      	moveq	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	2120      	movs	r1, #32
 8004550:	486b      	ldr	r0, [pc, #428]	; (8004700 <runMoveDistTask+0x23c>)
 8004552:	f003 fe8d 	bl	8008270 <HAL_GPIO_WritePin>
 8004556:	4b63      	ldr	r3, [pc, #396]	; (80046e4 <runMoveDistTask+0x220>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	bf0c      	ite	eq
 800455e:	2301      	moveq	r3, #1
 8004560:	2300      	movne	r3, #0
 8004562:	b2db      	uxtb	r3, r3
 8004564:	461a      	mov	r2, r3
 8004566:	2110      	movs	r1, #16
 8004568:	4865      	ldr	r0, [pc, #404]	; (8004700 <runMoveDistTask+0x23c>)
 800456a:	f003 fe81 	bl	8008270 <HAL_GPIO_WritePin>

			  __ON_TASK_END(&htim8, prevTask, curTask);
 800456e:	4b65      	ldr	r3, [pc, #404]	; (8004704 <runMoveDistTask+0x240>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2200      	movs	r2, #0
 8004574:	635a      	str	r2, [r3, #52]	; 0x34
 8004576:	4b63      	ldr	r3, [pc, #396]	; (8004704 <runMoveDistTask+0x240>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2200      	movs	r2, #0
 800457c:	639a      	str	r2, [r3, #56]	; 0x38
 800457e:	4b59      	ldr	r3, [pc, #356]	; (80046e4 <runMoveDistTask+0x220>)
 8004580:	781a      	ldrb	r2, [r3, #0]
 8004582:	4b61      	ldr	r3, [pc, #388]	; (8004708 <runMoveDistTask+0x244>)
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	4b57      	ldr	r3, [pc, #348]	; (80046e4 <runMoveDistTask+0x220>)
 8004588:	220b      	movs	r2, #11
 800458a:	701a      	strb	r2, [r3, #0]
			  clickOnce = 0;
 800458c:	4b5f      	ldr	r3, [pc, #380]	; (800470c <runMoveDistTask+0x248>)
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]

			  __CLEAR_CURCMD(curCmd);
 8004592:	4b5f      	ldr	r3, [pc, #380]	; (8004710 <runMoveDistTask+0x24c>)
 8004594:	2264      	movs	r2, #100	; 0x64
 8004596:	701a      	strb	r2, [r3, #0]
 8004598:	4b5d      	ldr	r3, [pc, #372]	; (8004710 <runMoveDistTask+0x24c>)
 800459a:	2200      	movs	r2, #0
 800459c:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 800459e:	4a5d      	ldr	r2, [pc, #372]	; (8004714 <runMoveDistTask+0x250>)
 80045a0:	210f      	movs	r1, #15
 80045a2:	485d      	ldr	r0, [pc, #372]	; (8004718 <runMoveDistTask+0x254>)
 80045a4:	f00a ff42 	bl	800f42c <sniprintf>
 80045a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045ac:	2206      	movs	r2, #6
 80045ae:	495b      	ldr	r1, [pc, #364]	; (800471c <runMoveDistTask+0x258>)
 80045b0:	485b      	ldr	r0, [pc, #364]	; (8004720 <runMoveDistTask+0x25c>)
 80045b2:	f007 f884 	bl	800b6be <HAL_UART_Transmit>

			last_curTask_tick = HAL_GetTick();
 80045b6:	f002 fdb3 	bl	8007120 <HAL_GetTick>
 80045ba:	4603      	mov	r3, r0
 80045bc:	4a59      	ldr	r2, [pc, #356]	; (8004724 <runMoveDistTask+0x260>)
 80045be:	6013      	str	r3, [r2, #0]
			do {
				if (!manualMode) break;
 80045c0:	4b49      	ldr	r3, [pc, #292]	; (80046e8 <runMoveDistTask+0x224>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 808a 	beq.w	80046de <runMoveDistTask+0x21a>
				if (HAL_GetTick() - last_curTask_tick >= 10) {
 80045ca:	f002 fda9 	bl	8007120 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	4b54      	ldr	r3, [pc, #336]	; (8004724 <runMoveDistTask+0x260>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b09      	cmp	r3, #9
 80045d8:	d9f2      	bls.n	80045c0 <runMoveDistTask+0xfc>
					StraightLineMove(SPEED_MODE_T);
 80045da:	2000      	movs	r0, #0
 80045dc:	f7fe f836 	bl	800264c <StraightLineMove>
					last_curTask_tick = HAL_GetTick();
 80045e0:	f002 fd9e 	bl	8007120 <HAL_GetTick>
 80045e4:	4603      	mov	r3, r0
 80045e6:	4a4f      	ldr	r2, [pc, #316]	; (8004724 <runMoveDistTask+0x260>)
 80045e8:	6013      	str	r3, [r2, #0]
				if (!manualMode) break;
 80045ea:	e7e9      	b.n	80045c0 <runMoveDistTask+0xfc>
//				osDelay(5); // for video demo only, give OLED chances to update
			} while (1);

		  } else {
//			  osDelay(5000); // for video demo only
			  targetDist = (float) curCmd.val;
 80045ec:	4b48      	ldr	r3, [pc, #288]	; (8004710 <runMoveDistTask+0x24c>)
 80045ee:	885b      	ldrh	r3, [r3, #2]
 80045f0:	ee07 3a90 	vmov	s15, r3
 80045f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f8:	4b4b      	ldr	r3, [pc, #300]	; (8004728 <runMoveDistTask+0x264>)
 80045fa:	edc3 7a00 	vstr	s15, [r3]
			  // for target distance lesser than 15, move mode must be forced to SLOW
			  if (targetDist <= 15) moveMode = SLOW;
 80045fe:	4b4a      	ldr	r3, [pc, #296]	; (8004728 <runMoveDistTask+0x264>)
 8004600:	edd3 7a00 	vldr	s15, [r3]
 8004604:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8004608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800460c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004610:	d802      	bhi.n	8004618 <runMoveDistTask+0x154>
 8004612:	4b46      	ldr	r3, [pc, #280]	; (800472c <runMoveDistTask+0x268>)
 8004614:	2200      	movs	r2, #0
 8004616:	701a      	strb	r2, [r3, #0]

			  if (moveMode == SLOW) {
 8004618:	4b44      	ldr	r3, [pc, #272]	; (800472c <runMoveDistTask+0x268>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10c      	bne.n	800463a <runMoveDistTask+0x176>
				  RobotMoveDist(&targetDist, curTask == TASK_MOVE ? DIR_FORWARD : DIR_BACKWARD, SPEED_MODE_1);
 8004620:	4b30      	ldr	r3, [pc, #192]	; (80046e4 <runMoveDistTask+0x220>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	bf0c      	ite	eq
 8004628:	2301      	moveq	r3, #1
 800462a:	2300      	movne	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2201      	movs	r2, #1
 8004630:	4619      	mov	r1, r3
 8004632:	483d      	ldr	r0, [pc, #244]	; (8004728 <runMoveDistTask+0x264>)
 8004634:	f7fe fb20 	bl	8002c78 <RobotMoveDist>
 8004638:	e00b      	b.n	8004652 <runMoveDistTask+0x18e>
			  } else {
				  RobotMoveDist(&targetDist, curTask == TASK_MOVE ? DIR_FORWARD : DIR_BACKWARD, SPEED_MODE_2);
 800463a:	4b2a      	ldr	r3, [pc, #168]	; (80046e4 <runMoveDistTask+0x220>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	bf0c      	ite	eq
 8004642:	2301      	moveq	r3, #1
 8004644:	2300      	movne	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2202      	movs	r2, #2
 800464a:	4619      	mov	r1, r3
 800464c:	4836      	ldr	r0, [pc, #216]	; (8004728 <runMoveDistTask+0x264>)
 800464e:	f7fe fb13 	bl	8002c78 <RobotMoveDist>
			  }

			  __ON_TASK_END(&htim8, prevTask, curTask);
 8004652:	4b2c      	ldr	r3, [pc, #176]	; (8004704 <runMoveDistTask+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2200      	movs	r2, #0
 8004658:	635a      	str	r2, [r3, #52]	; 0x34
 800465a:	4b2a      	ldr	r3, [pc, #168]	; (8004704 <runMoveDistTask+0x240>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2200      	movs	r2, #0
 8004660:	639a      	str	r2, [r3, #56]	; 0x38
 8004662:	4b20      	ldr	r3, [pc, #128]	; (80046e4 <runMoveDistTask+0x220>)
 8004664:	781a      	ldrb	r2, [r3, #0]
 8004666:	4b28      	ldr	r3, [pc, #160]	; (8004708 <runMoveDistTask+0x244>)
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	4b1e      	ldr	r3, [pc, #120]	; (80046e4 <runMoveDistTask+0x220>)
 800466c:	220b      	movs	r2, #11
 800466e:	701a      	strb	r2, [r3, #0]
				  clickOnce = 0;
 8004670:	4b26      	ldr	r3, [pc, #152]	; (800470c <runMoveDistTask+0x248>)
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]

				if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8004676:	4b2e      	ldr	r3, [pc, #184]	; (8004730 <runMoveDistTask+0x26c>)
 8004678:	781a      	ldrb	r2, [r3, #0]
 800467a:	4b2d      	ldr	r3, [pc, #180]	; (8004730 <runMoveDistTask+0x26c>)
 800467c:	785b      	ldrb	r3, [r3, #1]
 800467e:	429a      	cmp	r2, r3
 8004680:	d112      	bne.n	80046a8 <runMoveDistTask+0x1e4>
					__CLEAR_CURCMD(curCmd);
 8004682:	4b23      	ldr	r3, [pc, #140]	; (8004710 <runMoveDistTask+0x24c>)
 8004684:	2264      	movs	r2, #100	; 0x64
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	4b21      	ldr	r3, [pc, #132]	; (8004710 <runMoveDistTask+0x24c>)
 800468a:	2200      	movs	r2, #0
 800468c:	805a      	strh	r2, [r3, #2]
					__ACK_TASK_DONE(&huart3, rxMsg);
 800468e:	4a21      	ldr	r2, [pc, #132]	; (8004714 <runMoveDistTask+0x250>)
 8004690:	210f      	movs	r1, #15
 8004692:	4821      	ldr	r0, [pc, #132]	; (8004718 <runMoveDistTask+0x254>)
 8004694:	f00a feca 	bl	800f42c <sniprintf>
 8004698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800469c:	2206      	movs	r2, #6
 800469e:	491f      	ldr	r1, [pc, #124]	; (800471c <runMoveDistTask+0x258>)
 80046a0:	481f      	ldr	r0, [pc, #124]	; (8004720 <runMoveDistTask+0x25c>)
 80046a2:	f007 f80c 	bl	800b6be <HAL_UART_Transmit>
 80046a6:	e711      	b.n	80044cc <runMoveDistTask+0x8>
				} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 80046a8:	4b21      	ldr	r3, [pc, #132]	; (8004730 <runMoveDistTask+0x26c>)
 80046aa:	785b      	ldrb	r3, [r3, #1]
 80046ac:	4a18      	ldr	r2, [pc, #96]	; (8004710 <runMoveDistTask+0x24c>)
 80046ae:	4920      	ldr	r1, [pc, #128]	; (8004730 <runMoveDistTask+0x26c>)
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <runMoveDistTask+0x26c>)
 80046ba:	785b      	ldrb	r3, [r3, #1]
 80046bc:	3301      	adds	r3, #1
 80046be:	4a1c      	ldr	r2, [pc, #112]	; (8004730 <runMoveDistTask+0x26c>)
 80046c0:	7892      	ldrb	r2, [r2, #2]
 80046c2:	fb93 f1f2 	sdiv	r1, r3, r2
 80046c6:	fb01 f202 	mul.w	r2, r1, r2
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	4b18      	ldr	r3, [pc, #96]	; (8004730 <runMoveDistTask+0x26c>)
 80046d0:	705a      	strb	r2, [r3, #1]
 80046d2:	4a18      	ldr	r2, [pc, #96]	; (8004734 <runMoveDistTask+0x270>)
 80046d4:	210f      	movs	r1, #15
 80046d6:	4810      	ldr	r0, [pc, #64]	; (8004718 <runMoveDistTask+0x254>)
 80046d8:	f00a fea8 	bl	800f42c <sniprintf>
 80046dc:	e6f6      	b.n	80044cc <runMoveDistTask+0x8>
				if (!manualMode) break;
 80046de:	bf00      	nop
	  if (curTask != TASK_MOVE && curTask != TASK_MOVE_BACKWARD) osDelay(1000);
 80046e0:	e6f4      	b.n	80044cc <runMoveDistTask+0x8>
 80046e2:	bf00      	nop
 80046e4:	20000134 	.word	0x20000134
 80046e8:	2000053c 	.word	0x2000053c
 80046ec:	20000544 	.word	0x20000544
 80046f0:	2000054a 	.word	0x2000054a
 80046f4:	20000574 	.word	0x20000574
 80046f8:	20000560 	.word	0x20000560
 80046fc:	20000588 	.word	0x20000588
 8004700:	40020000 	.word	0x40020000
 8004704:	20000410 	.word	0x20000410
 8004708:	20000135 	.word	0x20000135
 800470c:	200005ec 	.word	0x200005ec
 8004710:	20000518 	.word	0x20000518
 8004714:	08010b40 	.word	0x08010b40
 8004718:	2000051c 	.word	0x2000051c
 800471c:	08010b48 	.word	0x08010b48
 8004720:	20000458 	.word	0x20000458
 8004724:	20000550 	.word	0x20000550
 8004728:	20000554 	.word	0x20000554
 800472c:	20000136 	.word	0x20000136
 8004730:	200004e4 	.word	0x200004e4
 8004734:	08010b50 	.word	0x08010b50

08004738 <runFastestPathTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFastestPathTask */
void runFastestPathTask(void *argument)
{
 8004738:	b5b0      	push	{r4, r5, r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af04      	add	r7, sp, #16
 800473e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFastestPathTask */
	uint8_t hadOvershoot = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_FASTESTPATH) osDelay(1000);
 8004744:	4b84      	ldr	r3, [pc, #528]	; (8004958 <runFastestPathTask+0x220>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	2b08      	cmp	r3, #8
 800474a:	d004      	beq.n	8004756 <runFastestPathTask+0x1e>
 800474c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004750:	f008 f8f0 	bl	800c934 <osDelay>
 8004754:	e7f6      	b.n	8004744 <runFastestPathTask+0xc>
	  else {
		  if (step == 0) {
 8004756:	4b81      	ldr	r3, [pc, #516]	; (800495c <runFastestPathTask+0x224>)
 8004758:	f993 3000 	ldrsb.w	r3, [r3]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d107      	bne.n	8004770 <runFastestPathTask+0x38>
			  targetDist = 30;
 8004760:	4b7f      	ldr	r3, [pc, #508]	; (8004960 <runFastestPathTask+0x228>)
 8004762:	4a80      	ldr	r2, [pc, #512]	; (8004964 <runFastestPathTask+0x22c>)
 8004764:	601a      	str	r2, [r3, #0]
			  RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8004766:	2102      	movs	r1, #2
 8004768:	487d      	ldr	r0, [pc, #500]	; (8004960 <runFastestPathTask+0x228>)
 800476a:	f7fe fc19 	bl	8002fa0 <RobotMoveDistObstacle>
 800476e:	e23c      	b.n	8004bea <runFastestPathTask+0x4b2>
		  } else if (step == 1) {
 8004770:	4b7a      	ldr	r3, [pc, #488]	; (800495c <runFastestPathTask+0x224>)
 8004772:	f993 3000 	ldrsb.w	r3, [r3]
 8004776:	2b01      	cmp	r3, #1
 8004778:	f040 8198 	bne.w	8004aac <runFastestPathTask+0x374>
			  //2:  turn left by 90 degree, record down angle when US sensor overshoot
			  hadOvershoot = 0;
 800477c:	2300      	movs	r3, #0
 800477e:	73fb      	strb	r3, [r7, #15]
			  angleNow = 0; gyroZ = 0;
 8004780:	4b79      	ldr	r3, [pc, #484]	; (8004968 <runFastestPathTask+0x230>)
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	4b78      	ldr	r3, [pc, #480]	; (800496c <runFastestPathTask+0x234>)
 800478a:	2200      	movs	r2, #0
 800478c:	801a      	strh	r2, [r3, #0]
			  angle_left = 0;
 800478e:	4b78      	ldr	r3, [pc, #480]	; (8004970 <runFastestPathTask+0x238>)
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	601a      	str	r2, [r3, #0]
			  targetAngle = 90;
 8004796:	4b77      	ldr	r3, [pc, #476]	; (8004974 <runFastestPathTask+0x23c>)
 8004798:	4a77      	ldr	r2, [pc, #476]	; (8004978 <runFastestPathTask+0x240>)
 800479a:	601a      	str	r2, [r3, #0]
			  obsDist_US = 0;
 800479c:	4b77      	ldr	r3, [pc, #476]	; (800497c <runFastestPathTask+0x244>)
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
			  __SET_SERVO_TURN_MAX(&htim1, 0);
 80047a4:	4b76      	ldr	r3, [pc, #472]	; (8004980 <runFastestPathTask+0x248>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2232      	movs	r2, #50	; 0x32
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40
 80047ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80047b0:	f002 fcc2 	bl	8007138 <HAL_Delay>
			  __SET_MOTOR_DUTY(&htim8, 600, 1000);
 80047b4:	4b73      	ldr	r3, [pc, #460]	; (8004984 <runFastestPathTask+0x24c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80047bc:	635a      	str	r2, [r3, #52]	; 0x34
 80047be:	4b71      	ldr	r3, [pc, #452]	; (8004984 <runFastestPathTask+0x24c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047c6:	639a      	str	r2, [r3, #56]	; 0x38
			  __SET_MOTOR_DIRECTION(1);
 80047c8:	2200      	movs	r2, #0
 80047ca:	2104      	movs	r1, #4
 80047cc:	486e      	ldr	r0, [pc, #440]	; (8004988 <runFastestPathTask+0x250>)
 80047ce:	f003 fd4f 	bl	8008270 <HAL_GPIO_WritePin>
 80047d2:	2201      	movs	r2, #1
 80047d4:	2108      	movs	r1, #8
 80047d6:	486c      	ldr	r0, [pc, #432]	; (8004988 <runFastestPathTask+0x250>)
 80047d8:	f003 fd4a 	bl	8008270 <HAL_GPIO_WritePin>
 80047dc:	2200      	movs	r2, #0
 80047de:	2120      	movs	r1, #32
 80047e0:	4869      	ldr	r0, [pc, #420]	; (8004988 <runFastestPathTask+0x250>)
 80047e2:	f003 fd45 	bl	8008270 <HAL_GPIO_WritePin>
 80047e6:	2201      	movs	r2, #1
 80047e8:	2110      	movs	r1, #16
 80047ea:	4867      	ldr	r0, [pc, #412]	; (8004988 <runFastestPathTask+0x250>)
 80047ec:	f003 fd40 	bl	8008270 <HAL_GPIO_WritePin>
			  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80047f0:	2104      	movs	r1, #4
 80047f2:	4866      	ldr	r0, [pc, #408]	; (800498c <runFastestPathTask+0x254>)
 80047f4:	f005 fb56 	bl	8009ea4 <HAL_TIM_IC_Start_IT>
			  last_curTask_tick = HAL_GetTick();
 80047f8:	f002 fc92 	bl	8007120 <HAL_GetTick>
 80047fc:	4603      	mov	r3, r0
 80047fe:	4a64      	ldr	r2, [pc, #400]	; (8004990 <runFastestPathTask+0x258>)
 8004800:	6013      	str	r3, [r2, #0]
			  do {
				  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8004802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004806:	9302      	str	r3, [sp, #8]
 8004808:	2302      	movs	r3, #2
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	4b61      	ldr	r3, [pc, #388]	; (8004994 <runFastestPathTask+0x25c>)
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	2301      	movs	r3, #1
 8004812:	2237      	movs	r2, #55	; 0x37
 8004814:	21d0      	movs	r1, #208	; 0xd0
 8004816:	4860      	ldr	r0, [pc, #384]	; (8004998 <runFastestPathTask+0x260>)
 8004818:	f003 ff82 	bl	8008720 <HAL_I2C_Mem_Read>
 800481c:	4b5d      	ldr	r3, [pc, #372]	; (8004994 <runFastestPathTask+0x25c>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	b21a      	sxth	r2, r3
 8004824:	4b5b      	ldr	r3, [pc, #364]	; (8004994 <runFastestPathTask+0x25c>)
 8004826:	785b      	ldrb	r3, [r3, #1]
 8004828:	b21b      	sxth	r3, r3
 800482a:	4313      	orrs	r3, r2
 800482c:	b21a      	sxth	r2, r3
 800482e:	4b4f      	ldr	r3, [pc, #316]	; (800496c <runFastestPathTask+0x234>)
 8004830:	801a      	strh	r2, [r3, #0]
				  if (!hadOvershoot) {
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d11d      	bne.n	8004874 <runFastestPathTask+0x13c>
					  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8004838:	2201      	movs	r2, #1
 800483a:	2110      	movs	r1, #16
 800483c:	4857      	ldr	r0, [pc, #348]	; (800499c <runFastestPathTask+0x264>)
 800483e:	f003 fd17 	bl	8008270 <HAL_GPIO_WritePin>
					  __delay_us(&htim4, 10); // wait for 10us
 8004842:	4b52      	ldr	r3, [pc, #328]	; (800498c <runFastestPathTask+0x254>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2200      	movs	r2, #0
 8004848:	625a      	str	r2, [r3, #36]	; 0x24
 800484a:	4b50      	ldr	r3, [pc, #320]	; (800498c <runFastestPathTask+0x254>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	2b09      	cmp	r3, #9
 8004852:	d9fa      	bls.n	800484a <runFastestPathTask+0x112>
					  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8004854:	2200      	movs	r2, #0
 8004856:	2110      	movs	r1, #16
 8004858:	4850      	ldr	r0, [pc, #320]	; (800499c <runFastestPathTask+0x264>)
 800485a:	f003 fd09 	bl	8008270 <HAL_GPIO_WritePin>
					  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
 800485e:	4b4b      	ldr	r3, [pc, #300]	; (800498c <runFastestPathTask+0x254>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	4b49      	ldr	r3, [pc, #292]	; (800498c <runFastestPathTask+0x254>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0204 	orr.w	r2, r2, #4
 800486c:	60da      	str	r2, [r3, #12]
					  osDelay(5); // give timer interrupt chance to update obsDist_US value
 800486e:	2005      	movs	r0, #5
 8004870:	f008 f860 	bl	800c934 <osDelay>
				  }


				  if (HAL_GetTick() - last_curTask_tick >=10) {
 8004874:	f002 fc54 	bl	8007120 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	4b45      	ldr	r3, [pc, #276]	; (8004990 <runFastestPathTask+0x258>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b09      	cmp	r3, #9
 8004882:	d9be      	bls.n	8004802 <runFastestPathTask+0xca>
//					  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
					  angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8004884:	4b38      	ldr	r3, [pc, #224]	; (8004968 <runFastestPathTask+0x230>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f7fb fe55 	bl	8000538 <__aeabi_f2d>
 800488e:	4604      	mov	r4, r0
 8004890:	460d      	mov	r5, r1
 8004892:	4b36      	ldr	r3, [pc, #216]	; (800496c <runFastestPathTask+0x234>)
 8004894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004898:	4618      	mov	r0, r3
 800489a:	f7fb fe3b 	bl	8000514 <__aeabi_i2d>
 800489e:	a32a      	add	r3, pc, #168	; (adr r3, 8004948 <runFastestPathTask+0x210>)
 80048a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a4:	f7fb ffca 	bl	800083c <__aeabi_ddiv>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4610      	mov	r0, r2
 80048ae:	4619      	mov	r1, r3
 80048b0:	a327      	add	r3, pc, #156	; (adr r3, 8004950 <runFastestPathTask+0x218>)
 80048b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b6:	f7fb fe97 	bl	80005e8 <__aeabi_dmul>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	4620      	mov	r0, r4
 80048c0:	4629      	mov	r1, r5
 80048c2:	f7fb fcdb 	bl	800027c <__adddf3>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4610      	mov	r0, r2
 80048cc:	4619      	mov	r1, r3
 80048ce:	f7fc f945 	bl	8000b5c <__aeabi_d2f>
 80048d2:	4603      	mov	r3, r0
 80048d4:	4a24      	ldr	r2, [pc, #144]	; (8004968 <runFastestPathTask+0x230>)
 80048d6:	6013      	str	r3, [r2, #0]
					  if (obsDist_US > 55 && !hadOvershoot) {
 80048d8:	4b28      	ldr	r3, [pc, #160]	; (800497c <runFastestPathTask+0x244>)
 80048da:	edd3 7a00 	vldr	s15, [r3]
 80048de:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80049a0 <runFastestPathTask+0x268>
 80048e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ea:	dd08      	ble.n	80048fe <runFastestPathTask+0x1c6>
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d105      	bne.n	80048fe <runFastestPathTask+0x1c6>
						  angle_left = angleNow;
 80048f2:	4b1d      	ldr	r3, [pc, #116]	; (8004968 <runFastestPathTask+0x230>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1e      	ldr	r2, [pc, #120]	; (8004970 <runFastestPathTask+0x238>)
 80048f8:	6013      	str	r3, [r2, #0]
						  hadOvershoot = 1;
 80048fa:	2301      	movs	r3, #1
 80048fc:	73fb      	strb	r3, [r7, #15]
					  }

					  if (abs(targetAngle - angleNow) < 0.01) break;
 80048fe:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <runFastestPathTask+0x23c>)
 8004900:	ed93 7a00 	vldr	s14, [r3]
 8004904:	4b18      	ldr	r3, [pc, #96]	; (8004968 <runFastestPathTask+0x230>)
 8004906:	edd3 7a00 	vldr	s15, [r3]
 800490a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800490e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004912:	ee17 3a90 	vmov	r3, s15
 8004916:	2b00      	cmp	r3, #0
 8004918:	db0d      	blt.n	8004936 <runFastestPathTask+0x1fe>
 800491a:	4b16      	ldr	r3, [pc, #88]	; (8004974 <runFastestPathTask+0x23c>)
 800491c:	ed93 7a00 	vldr	s14, [r3]
 8004920:	4b11      	ldr	r3, [pc, #68]	; (8004968 <runFastestPathTask+0x230>)
 8004922:	edd3 7a00 	vldr	s15, [r3]
 8004926:	ee77 7a67 	vsub.f32	s15, s14, s15
 800492a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800492e:	ee17 3a90 	vmov	r3, s15
 8004932:	2b00      	cmp	r3, #0
 8004934:	dd36      	ble.n	80049a4 <runFastestPathTask+0x26c>
					  last_curTask_tick = HAL_GetTick();
 8004936:	f002 fbf3 	bl	8007120 <HAL_GetTick>
 800493a:	4603      	mov	r3, r0
 800493c:	4a14      	ldr	r2, [pc, #80]	; (8004990 <runFastestPathTask+0x258>)
 800493e:	6013      	str	r3, [r2, #0]
				  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8004940:	e75f      	b.n	8004802 <runFastestPathTask+0xca>
 8004942:	bf00      	nop
 8004944:	f3af 8000 	nop.w
 8004948:	66666666 	.word	0x66666666
 800494c:	40306666 	.word	0x40306666
 8004950:	47ae147b 	.word	0x47ae147b
 8004954:	3f847ae1 	.word	0x3f847ae1
 8004958:	20000134 	.word	0x20000134
 800495c:	200005f0 	.word	0x200005f0
 8004960:	20000554 	.word	0x20000554
 8004964:	41f00000 	.word	0x41f00000
 8004968:	20000544 	.word	0x20000544
 800496c:	2000054a 	.word	0x2000054a
 8004970:	200005bc 	.word	0x200005bc
 8004974:	20000540 	.word	0x20000540
 8004978:	42b40000 	.word	0x42b40000
 800497c:	200005a4 	.word	0x200005a4
 8004980:	200002a8 	.word	0x200002a8
 8004984:	20000410 	.word	0x20000410
 8004988:	40020000 	.word	0x40020000
 800498c:	20000380 	.word	0x20000380
 8004990:	20000550 	.word	0x20000550
 8004994:	20000548 	.word	0x20000548
 8004998:	20000254 	.word	0x20000254
 800499c:	40020400 	.word	0x40020400
 80049a0:	425c0000 	.word	0x425c0000
					  if (abs(targetAngle - angleNow) < 0.01) break;
 80049a4:	bf00      	nop
				  }

				} while (1);
			  __SET_MOTOR_DUTY(&htim8, 0, 0);
 80049a6:	4ba2      	ldr	r3, [pc, #648]	; (8004c30 <runFastestPathTask+0x4f8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2200      	movs	r2, #0
 80049ac:	635a      	str	r2, [r3, #52]	; 0x34
 80049ae:	4ba0      	ldr	r3, [pc, #640]	; (8004c30 <runFastestPathTask+0x4f8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2200      	movs	r2, #0
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38
			  __RESET_SERVO_TURN(&htim1);
 80049b6:	4b9f      	ldr	r3, [pc, #636]	; (8004c34 <runFastestPathTask+0x4fc>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	224a      	movs	r2, #74	; 0x4a
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40
 80049be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80049c2:	f002 fbb9 	bl	8007138 <HAL_Delay>
			  osDelay(10);
 80049c6:	200a      	movs	r0, #10
 80049c8:	f007 ffb4 	bl	800c934 <osDelay>

			  obs_a = 30 * tanf(angle_left * PI / 180);
 80049cc:	4b9a      	ldr	r3, [pc, #616]	; (8004c38 <runFastestPathTask+0x500>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fb fdb1 	bl	8000538 <__aeabi_f2d>
 80049d6:	a394      	add	r3, pc, #592	; (adr r3, 8004c28 <runFastestPathTask+0x4f0>)
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	f7fb fe04 	bl	80005e8 <__aeabi_dmul>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4610      	mov	r0, r2
 80049e6:	4619      	mov	r1, r3
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	4b93      	ldr	r3, [pc, #588]	; (8004c3c <runFastestPathTask+0x504>)
 80049ee:	f7fb ff25 	bl	800083c <__aeabi_ddiv>
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4610      	mov	r0, r2
 80049f8:	4619      	mov	r1, r3
 80049fa:	f7fc f8af 	bl	8000b5c <__aeabi_d2f>
 80049fe:	4603      	mov	r3, r0
 8004a00:	ee00 3a10 	vmov	s0, r3
 8004a04:	f00b fae4 	bl	800ffd0 <tanf>
 8004a08:	eef0 7a40 	vmov.f32	s15, s0
 8004a0c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004a10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a14:	4b8a      	ldr	r3, [pc, #552]	; (8004c40 <runFastestPathTask+0x508>)
 8004a16:	edc3 7a00 	vstr	s15, [r3]
			  angle_right = atanf((60 - obs_a) / 30) * 180 / PI;
 8004a1a:	4b89      	ldr	r3, [pc, #548]	; (8004c40 <runFastestPathTask+0x508>)
 8004a1c:	edd3 7a00 	vldr	s15, [r3]
 8004a20:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8004c44 <runFastestPathTask+0x50c>
 8004a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a28:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8004a2c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004a30:	eeb0 0a47 	vmov.f32	s0, s14
 8004a34:	f00b f9f0 	bl	800fe18 <atanf>
 8004a38:	eef0 7a40 	vmov.f32	s15, s0
 8004a3c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8004c48 <runFastestPathTask+0x510>
 8004a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a44:	ee17 0a90 	vmov	r0, s15
 8004a48:	f7fb fd76 	bl	8000538 <__aeabi_f2d>
 8004a4c:	a376      	add	r3, pc, #472	; (adr r3, 8004c28 <runFastestPathTask+0x4f0>)
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	f7fb fef3 	bl	800083c <__aeabi_ddiv>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	f7fc f87d 	bl	8000b5c <__aeabi_d2f>
 8004a62:	4603      	mov	r3, r0
 8004a64:	4a79      	ldr	r2, [pc, #484]	; (8004c4c <runFastestPathTask+0x514>)
 8004a66:	6013      	str	r3, [r2, #0]
			  x = sqrtf((60 - obs_a) * (60 - obs_a) + 900) - 23; // 23 robot length offset
 8004a68:	4b75      	ldr	r3, [pc, #468]	; (8004c40 <runFastestPathTask+0x508>)
 8004a6a:	edd3 7a00 	vldr	s15, [r3]
 8004a6e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8004c44 <runFastestPathTask+0x50c>
 8004a72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a76:	4b72      	ldr	r3, [pc, #456]	; (8004c40 <runFastestPathTask+0x508>)
 8004a78:	edd3 7a00 	vldr	s15, [r3]
 8004a7c:	eddf 6a71 	vldr	s13, [pc, #452]	; 8004c44 <runFastestPathTask+0x50c>
 8004a80:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a88:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8004c50 <runFastestPathTask+0x518>
 8004a8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a90:	eeb0 0a67 	vmov.f32	s0, s15
 8004a94:	f00b f9a2 	bl	800fddc <sqrtf>
 8004a98:	eef0 7a40 	vmov.f32	s15, s0
 8004a9c:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8004aa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004aa4:	4b6b      	ldr	r3, [pc, #428]	; (8004c54 <runFastestPathTask+0x51c>)
 8004aa6:	edc3 7a00 	vstr	s15, [r3]
 8004aaa:	e09e      	b.n	8004bea <runFastestPathTask+0x4b2>

		  } else if (step == 2) {
 8004aac:	4b6a      	ldr	r3, [pc, #424]	; (8004c58 <runFastestPathTask+0x520>)
 8004aae:	f993 3000 	ldrsb.w	r3, [r3]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d105      	bne.n	8004ac2 <runFastestPathTask+0x38a>
			  // 3: move forward until IR overshoot
			  RobotMoveUntilIROvershoot();
 8004ab6:	f7ff f84b 	bl	8003b50 <RobotMoveUntilIROvershoot>
			  osDelay(10);
 8004aba:	200a      	movs	r0, #10
 8004abc:	f007 ff3a 	bl	800c934 <osDelay>
 8004ac0:	e093      	b.n	8004bea <runFastestPathTask+0x4b2>
		  }else if (step == 3) {
 8004ac2:	4b65      	ldr	r3, [pc, #404]	; (8004c58 <runFastestPathTask+0x520>)
 8004ac4:	f993 3000 	ldrsb.w	r3, [r3]
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	d105      	bne.n	8004ad8 <runFastestPathTask+0x3a0>
			  // 4: Turn right by 180 degree
			  FASTESTPATH_TURN_RIGHT_180();
 8004acc:	f7fe fed4 	bl	8003878 <FASTESTPATH_TURN_RIGHT_180>
			  osDelay(10);
 8004ad0:	200a      	movs	r0, #10
 8004ad2:	f007 ff2f 	bl	800c934 <osDelay>
 8004ad6:	e088      	b.n	8004bea <runFastestPathTask+0x4b2>
		  } else if (step == 4){
 8004ad8:	4b5f      	ldr	r3, [pc, #380]	; (8004c58 <runFastestPathTask+0x520>)
 8004ada:	f993 3000 	ldrsb.w	r3, [r3]
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d105      	bne.n	8004aee <runFastestPathTask+0x3b6>
			  // 5: move forward until right beside obstacle
			  RobotMoveUntilIRHit();
 8004ae2:	f7ff f8dd 	bl	8003ca0 <RobotMoveUntilIRHit>
			  osDelay(10);
 8004ae6:	200a      	movs	r0, #10
 8004ae8:	f007 ff24 	bl	800c934 <osDelay>
 8004aec:	e07d      	b.n	8004bea <runFastestPathTask+0x4b2>
		  }else if (step == 5) {
 8004aee:	4b5a      	ldr	r3, [pc, #360]	; (8004c58 <runFastestPathTask+0x520>)
 8004af0:	f993 3000 	ldrsb.w	r3, [r3]
 8004af4:	2b05      	cmp	r3, #5
 8004af6:	d105      	bne.n	8004b04 <runFastestPathTask+0x3cc>
			  // 6: move forward until IR overshoot
			  RobotMoveUntilIROvershoot();
 8004af8:	f7ff f82a 	bl	8003b50 <RobotMoveUntilIROvershoot>
			  osDelay(10);
 8004afc:	200a      	movs	r0, #10
 8004afe:	f007 ff19 	bl	800c934 <osDelay>
 8004b02:	e072      	b.n	8004bea <runFastestPathTask+0x4b2>
		  }else if (step == 6) {
 8004b04:	4b54      	ldr	r3, [pc, #336]	; (8004c58 <runFastestPathTask+0x520>)
 8004b06:	f993 3000 	ldrsb.w	r3, [r3]
 8004b0a:	2b06      	cmp	r3, #6
 8004b0c:	d105      	bne.n	8004b1a <runFastestPathTask+0x3e2>
			  // 7: Turn right by 90 degree
			  FASTESTPATH_TURN_RIGHT_90();
 8004b0e:	f7fe fe79 	bl	8003804 <FASTESTPATH_TURN_RIGHT_90>
			  osDelay(10);
 8004b12:	200a      	movs	r0, #10
 8004b14:	f007 ff0e 	bl	800c934 <osDelay>
 8004b18:	e067      	b.n	8004bea <runFastestPathTask+0x4b2>
		  }else if (step == 7) {
 8004b1a:	4b4f      	ldr	r3, [pc, #316]	; (8004c58 <runFastestPathTask+0x520>)
 8004b1c:	f993 3000 	ldrsb.w	r3, [r3]
 8004b20:	2b07      	cmp	r3, #7
 8004b22:	d105      	bne.n	8004b30 <runFastestPathTask+0x3f8>
			  // 8: move forward until IR overshoot
			  RobotMoveUntilIROvershoot();
 8004b24:	f7ff f814 	bl	8003b50 <RobotMoveUntilIROvershoot>
			  osDelay(10);
 8004b28:	200a      	movs	r0, #10
 8004b2a:	f007 ff03 	bl	800c934 <osDelay>
 8004b2e:	e05c      	b.n	8004bea <runFastestPathTask+0x4b2>
		  }else if (step == 8) {
 8004b30:	4b49      	ldr	r3, [pc, #292]	; (8004c58 <runFastestPathTask+0x520>)
 8004b32:	f993 3000 	ldrsb.w	r3, [r3]
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d11d      	bne.n	8004b76 <runFastestPathTask+0x43e>
			  // 9: turn right by angle_right
			  __SET_SERVO_TURN_MAX(&htim1, 1);
 8004b3a:	4b3e      	ldr	r3, [pc, #248]	; (8004c34 <runFastestPathTask+0x4fc>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2273      	movs	r2, #115	; 0x73
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40
 8004b42:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004b46:	f002 faf7 	bl	8007138 <HAL_Delay>
			  __SET_MOTOR_DUTY(&htim8, 2000, 1000);
 8004b4a:	4b39      	ldr	r3, [pc, #228]	; (8004c30 <runFastestPathTask+0x4f8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b52:	635a      	str	r2, [r3, #52]	; 0x34
 8004b54:	4b36      	ldr	r3, [pc, #216]	; (8004c30 <runFastestPathTask+0x4f8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b5c:	639a      	str	r2, [r3, #56]	; 0x38
			  targetAngle = angle_right *-1;
 8004b5e:	4b3b      	ldr	r3, [pc, #236]	; (8004c4c <runFastestPathTask+0x514>)
 8004b60:	edd3 7a00 	vldr	s15, [r3]
 8004b64:	eef1 7a67 	vneg.f32	s15, s15
 8004b68:	4b3c      	ldr	r3, [pc, #240]	; (8004c5c <runFastestPathTask+0x524>)
 8004b6a:	edc3 7a00 	vstr	s15, [r3]
			  RobotTurn(&targetAngle);
 8004b6e:	483b      	ldr	r0, [pc, #236]	; (8004c5c <runFastestPathTask+0x524>)
 8004b70:	f7fe fcf6 	bl	8003560 <RobotTurn>
 8004b74:	e039      	b.n	8004bea <runFastestPathTask+0x4b2>
		  }else if (step == 9) {
 8004b76:	4b38      	ldr	r3, [pc, #224]	; (8004c58 <runFastestPathTask+0x520>)
 8004b78:	f993 3000 	ldrsb.w	r3, [r3]
 8004b7c:	2b09      	cmp	r3, #9
 8004b7e:	d109      	bne.n	8004b94 <runFastestPathTask+0x45c>
			  //10: move until center of the original path
			  targetDist = x;
 8004b80:	4b34      	ldr	r3, [pc, #208]	; (8004c54 <runFastestPathTask+0x51c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a36      	ldr	r2, [pc, #216]	; (8004c60 <runFastestPathTask+0x528>)
 8004b86:	6013      	str	r3, [r2, #0]
			  RobotMoveDist(&targetDist, 1, SPEED_MODE_T);
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	4834      	ldr	r0, [pc, #208]	; (8004c60 <runFastestPathTask+0x528>)
 8004b8e:	f7fe f873 	bl	8002c78 <RobotMoveDist>
 8004b92:	e02a      	b.n	8004bea <runFastestPathTask+0x4b2>
		  }else if (step == 10) {
 8004b94:	4b30      	ldr	r3, [pc, #192]	; (8004c58 <runFastestPathTask+0x520>)
 8004b96:	f993 3000 	ldrsb.w	r3, [r3]
 8004b9a:	2b0a      	cmp	r3, #10
 8004b9c:	d119      	bne.n	8004bd2 <runFastestPathTask+0x49a>
			  //11: turn left to face the carpark
			  __SET_SERVO_TURN_MAX(&htim1, 0);
 8004b9e:	4b25      	ldr	r3, [pc, #148]	; (8004c34 <runFastestPathTask+0x4fc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2232      	movs	r2, #50	; 0x32
 8004ba4:	641a      	str	r2, [r3, #64]	; 0x40
 8004ba6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004baa:	f002 fac5 	bl	8007138 <HAL_Delay>
			  __SET_MOTOR_DUTY(&htim8, 1000, 2000);
 8004bae:	4b20      	ldr	r3, [pc, #128]	; (8004c30 <runFastestPathTask+0x4f8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bb6:	635a      	str	r2, [r3, #52]	; 0x34
 8004bb8:	4b1d      	ldr	r3, [pc, #116]	; (8004c30 <runFastestPathTask+0x4f8>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004bc0:	639a      	str	r2, [r3, #56]	; 0x38
			  targetAngle = angle_right;
 8004bc2:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <runFastestPathTask+0x514>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a25      	ldr	r2, [pc, #148]	; (8004c5c <runFastestPathTask+0x524>)
 8004bc8:	6013      	str	r3, [r2, #0]
			  RobotTurn(&targetAngle);
 8004bca:	4824      	ldr	r0, [pc, #144]	; (8004c5c <runFastestPathTask+0x524>)
 8004bcc:	f7fe fcc8 	bl	8003560 <RobotTurn>
 8004bd0:	e00b      	b.n	8004bea <runFastestPathTask+0x4b2>
		  } else if (step == 11) {
 8004bd2:	4b21      	ldr	r3, [pc, #132]	; (8004c58 <runFastestPathTask+0x520>)
 8004bd4:	f993 3000 	ldrsb.w	r3, [r3]
 8004bd8:	2b0b      	cmp	r3, #11
 8004bda:	d106      	bne.n	8004bea <runFastestPathTask+0x4b2>
			  //12: back to the carpark
			  targetDist = 15;
 8004bdc:	4b20      	ldr	r3, [pc, #128]	; (8004c60 <runFastestPathTask+0x528>)
 8004bde:	4a21      	ldr	r2, [pc, #132]	; (8004c64 <runFastestPathTask+0x52c>)
 8004be0:	601a      	str	r2, [r3, #0]
			  RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8004be2:	2102      	movs	r1, #2
 8004be4:	481e      	ldr	r0, [pc, #120]	; (8004c60 <runFastestPathTask+0x528>)
 8004be6:	f7fe f9db 	bl	8002fa0 <RobotMoveDistObstacle>
		  }

		  clickOnce = 0;
 8004bea:	4b1f      	ldr	r3, [pc, #124]	; (8004c68 <runFastestPathTask+0x530>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8004bf0:	4b1e      	ldr	r3, [pc, #120]	; (8004c6c <runFastestPathTask+0x534>)
 8004bf2:	781a      	ldrb	r2, [r3, #0]
 8004bf4:	4b1e      	ldr	r3, [pc, #120]	; (8004c70 <runFastestPathTask+0x538>)
 8004bf6:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8004bf8:	4b1c      	ldr	r3, [pc, #112]	; (8004c6c <runFastestPathTask+0x534>)
 8004bfa:	220b      	movs	r2, #11
 8004bfc:	701a      	strb	r2, [r3, #0]
		  __CLEAR_CURCMD(curCmd);
 8004bfe:	4b1d      	ldr	r3, [pc, #116]	; (8004c74 <runFastestPathTask+0x53c>)
 8004c00:	2264      	movs	r2, #100	; 0x64
 8004c02:	701a      	strb	r2, [r3, #0]
 8004c04:	4b1b      	ldr	r3, [pc, #108]	; (8004c74 <runFastestPathTask+0x53c>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	805a      	strh	r2, [r3, #2]
		  __ACK_TASK_DONE(&huart3, rxMsg);
 8004c0a:	4a1b      	ldr	r2, [pc, #108]	; (8004c78 <runFastestPathTask+0x540>)
 8004c0c:	210f      	movs	r1, #15
 8004c0e:	481b      	ldr	r0, [pc, #108]	; (8004c7c <runFastestPathTask+0x544>)
 8004c10:	f00a fc0c 	bl	800f42c <sniprintf>
 8004c14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c18:	2206      	movs	r2, #6
 8004c1a:	4919      	ldr	r1, [pc, #100]	; (8004c80 <runFastestPathTask+0x548>)
 8004c1c:	4819      	ldr	r0, [pc, #100]	; (8004c84 <runFastestPathTask+0x54c>)
 8004c1e:	f006 fd4e 	bl	800b6be <HAL_UART_Transmit>
	  if (curTask != TASK_FASTESTPATH) osDelay(1000);
 8004c22:	e58f      	b.n	8004744 <runFastestPathTask+0xc>
 8004c24:	f3af 8000 	nop.w
 8004c28:	54524550 	.word	0x54524550
 8004c2c:	400921fb 	.word	0x400921fb
 8004c30:	20000410 	.word	0x20000410
 8004c34:	200002a8 	.word	0x200002a8
 8004c38:	200005bc 	.word	0x200005bc
 8004c3c:	40668000 	.word	0x40668000
 8004c40:	200005b4 	.word	0x200005b4
 8004c44:	42700000 	.word	0x42700000
 8004c48:	43340000 	.word	0x43340000
 8004c4c:	200005c0 	.word	0x200005c0
 8004c50:	44610000 	.word	0x44610000
 8004c54:	200005b8 	.word	0x200005b8
 8004c58:	200005f0 	.word	0x200005f0
 8004c5c:	20000540 	.word	0x20000540
 8004c60:	20000554 	.word	0x20000554
 8004c64:	41700000 	.word	0x41700000
 8004c68:	200005ec 	.word	0x200005ec
 8004c6c:	20000134 	.word	0x20000134
 8004c70:	20000135 	.word	0x20000135
 8004c74:	20000518 	.word	0x20000518
 8004c78:	08010b40 	.word	0x08010b40
 8004c7c:	2000051c 	.word	0x2000051c
 8004c80:	08010b48 	.word	0x08010b48
 8004c84:	20000458 	.word	0x20000458

08004c88 <runBuzzerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBuzzerTask */
void runBuzzerTask(void *argument)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBuzzerTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_BUZZER) osDelay(1000);
 8004c90:	4b31      	ldr	r3, [pc, #196]	; (8004d58 <runBuzzerTask+0xd0>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b0a      	cmp	r3, #10
 8004c96:	d01c      	beq.n	8004cd2 <runBuzzerTask+0x4a>
 8004c98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c9c:	f007 fe4a 	bl	800c934 <osDelay>
 8004ca0:	e7f6      	b.n	8004c90 <runBuzzerTask+0x8>
	  else {
		  while (curCmd.val > 0) {
			  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ca8:	482c      	ldr	r0, [pc, #176]	; (8004d5c <runBuzzerTask+0xd4>)
 8004caa:	f003 fae1 	bl	8008270 <HAL_GPIO_WritePin>
			  osDelay(100);
 8004cae:	2064      	movs	r0, #100	; 0x64
 8004cb0:	f007 fe40 	bl	800c934 <osDelay>
			  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cba:	4828      	ldr	r0, [pc, #160]	; (8004d5c <runBuzzerTask+0xd4>)
 8004cbc:	f003 fad8 	bl	8008270 <HAL_GPIO_WritePin>
			  osDelay(100);
 8004cc0:	2064      	movs	r0, #100	; 0x64
 8004cc2:	f007 fe37 	bl	800c934 <osDelay>
			  curCmd.val--;
 8004cc6:	4b26      	ldr	r3, [pc, #152]	; (8004d60 <runBuzzerTask+0xd8>)
 8004cc8:	885b      	ldrh	r3, [r3, #2]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	4b24      	ldr	r3, [pc, #144]	; (8004d60 <runBuzzerTask+0xd8>)
 8004cd0:	805a      	strh	r2, [r3, #2]
		  while (curCmd.val > 0) {
 8004cd2:	4b23      	ldr	r3, [pc, #140]	; (8004d60 <runBuzzerTask+0xd8>)
 8004cd4:	885b      	ldrh	r3, [r3, #2]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e3      	bne.n	8004ca2 <runBuzzerTask+0x1a>
		  }
		  prevTask = curTask;
 8004cda:	4b1f      	ldr	r3, [pc, #124]	; (8004d58 <runBuzzerTask+0xd0>)
 8004cdc:	781a      	ldrb	r2, [r3, #0]
 8004cde:	4b21      	ldr	r3, [pc, #132]	; (8004d64 <runBuzzerTask+0xdc>)
 8004ce0:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8004ce2:	4b1d      	ldr	r3, [pc, #116]	; (8004d58 <runBuzzerTask+0xd0>)
 8004ce4:	220b      	movs	r2, #11
 8004ce6:	701a      	strb	r2, [r3, #0]
		  clickOnce = 0;
 8004ce8:	4b1f      	ldr	r3, [pc, #124]	; (8004d68 <runBuzzerTask+0xe0>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]


		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8004cee:	4b1f      	ldr	r3, [pc, #124]	; (8004d6c <runBuzzerTask+0xe4>)
 8004cf0:	781a      	ldrb	r2, [r3, #0]
 8004cf2:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <runBuzzerTask+0xe4>)
 8004cf4:	785b      	ldrb	r3, [r3, #1]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d112      	bne.n	8004d20 <runBuzzerTask+0x98>
				__CLEAR_CURCMD(curCmd);
 8004cfa:	4b19      	ldr	r3, [pc, #100]	; (8004d60 <runBuzzerTask+0xd8>)
 8004cfc:	2264      	movs	r2, #100	; 0x64
 8004cfe:	701a      	strb	r2, [r3, #0]
 8004d00:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <runBuzzerTask+0xd8>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8004d06:	4a1a      	ldr	r2, [pc, #104]	; (8004d70 <runBuzzerTask+0xe8>)
 8004d08:	210f      	movs	r1, #15
 8004d0a:	481a      	ldr	r0, [pc, #104]	; (8004d74 <runBuzzerTask+0xec>)
 8004d0c:	f00a fb8e 	bl	800f42c <sniprintf>
 8004d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d14:	2206      	movs	r2, #6
 8004d16:	4918      	ldr	r1, [pc, #96]	; (8004d78 <runBuzzerTask+0xf0>)
 8004d18:	4818      	ldr	r0, [pc, #96]	; (8004d7c <runBuzzerTask+0xf4>)
 8004d1a:	f006 fcd0 	bl	800b6be <HAL_UART_Transmit>
 8004d1e:	e7b7      	b.n	8004c90 <runBuzzerTask+0x8>
			} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004d20:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <runBuzzerTask+0xe4>)
 8004d22:	785b      	ldrb	r3, [r3, #1]
 8004d24:	4a0e      	ldr	r2, [pc, #56]	; (8004d60 <runBuzzerTask+0xd8>)
 8004d26:	4911      	ldr	r1, [pc, #68]	; (8004d6c <runBuzzerTask+0xe4>)
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4b0e      	ldr	r3, [pc, #56]	; (8004d6c <runBuzzerTask+0xe4>)
 8004d32:	785b      	ldrb	r3, [r3, #1]
 8004d34:	3301      	adds	r3, #1
 8004d36:	4a0d      	ldr	r2, [pc, #52]	; (8004d6c <runBuzzerTask+0xe4>)
 8004d38:	7892      	ldrb	r2, [r2, #2]
 8004d3a:	fb93 f1f2 	sdiv	r1, r3, r2
 8004d3e:	fb01 f202 	mul.w	r2, r1, r2
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	4b09      	ldr	r3, [pc, #36]	; (8004d6c <runBuzzerTask+0xe4>)
 8004d48:	705a      	strb	r2, [r3, #1]
 8004d4a:	4a0d      	ldr	r2, [pc, #52]	; (8004d80 <runBuzzerTask+0xf8>)
 8004d4c:	210f      	movs	r1, #15
 8004d4e:	4809      	ldr	r0, [pc, #36]	; (8004d74 <runBuzzerTask+0xec>)
 8004d50:	f00a fb6c 	bl	800f42c <sniprintf>
	  if (curTask != TASK_BUZZER) osDelay(1000);
 8004d54:	e79c      	b.n	8004c90 <runBuzzerTask+0x8>
 8004d56:	bf00      	nop
 8004d58:	20000134 	.word	0x20000134
 8004d5c:	40020400 	.word	0x40020400
 8004d60:	20000518 	.word	0x20000518
 8004d64:	20000135 	.word	0x20000135
 8004d68:	200005ec 	.word	0x200005ec
 8004d6c:	200004e4 	.word	0x200004e4
 8004d70:	08010b40 	.word	0x08010b40
 8004d74:	2000051c 	.word	0x2000051c
 8004d78:	08010b48 	.word	0x08010b48
 8004d7c:	20000458 	.word	0x20000458
 8004d80:	08010b50 	.word	0x08010b50

08004d84 <runFLTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFLTask */
void runFLTask(void *argument)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFLTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_FL) osDelay(1000);
 8004d8c:	4b9d      	ldr	r3, [pc, #628]	; (8005004 <runFLTask+0x280>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d004      	beq.n	8004d9e <runFLTask+0x1a>
 8004d94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d98:	f007 fdcc 	bl	800c934 <osDelay>
 8004d9c:	e7f6      	b.n	8004d8c <runFLTask+0x8>
	  else {
//		  osDelay(3000); // video demo only
		  switch(curCmd.val) {
 8004d9e:	4b9a      	ldr	r3, [pc, #616]	; (8005008 <runFLTask+0x284>)
 8004da0:	885b      	ldrh	r3, [r3, #2]
 8004da2:	2b14      	cmp	r3, #20
 8004da4:	f000 8081 	beq.w	8004eaa <runFLTask+0x126>
 8004da8:	2b1e      	cmp	r3, #30
 8004daa:	f040 8107 	bne.w	8004fbc <runFLTask+0x238>
		  case 30: // FL30 (4x2)
			  __SET_CMD_CONFIG(cfgs[CONFIG_FL30], &htim8, &htim1, targetAngle);
 8004dae:	4b97      	ldr	r3, [pc, #604]	; (800500c <runFLTask+0x288>)
 8004db0:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8004db4:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8005010 <runFLTask+0x28c>
 8004db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc0:	dd01      	ble.n	8004dc6 <runFLTask+0x42>
 8004dc2:	2373      	movs	r3, #115	; 0x73
 8004dc4:	e012      	b.n	8004dec <runFLTask+0x68>
 8004dc6:	4b91      	ldr	r3, [pc, #580]	; (800500c <runFLTask+0x288>)
 8004dc8:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8004dcc:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8005014 <runFLTask+0x290>
 8004dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd8:	d501      	bpl.n	8004dde <runFLTask+0x5a>
 8004dda:	2332      	movs	r3, #50	; 0x32
 8004ddc:	e006      	b.n	8004dec <runFLTask+0x68>
 8004dde:	4b8b      	ldr	r3, [pc, #556]	; (800500c <runFLTask+0x288>)
 8004de0:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8004de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de8:	ee17 3a90 	vmov	r3, s15
 8004dec:	4a8a      	ldr	r2, [pc, #552]	; (8005018 <runFLTask+0x294>)
 8004dee:	6812      	ldr	r2, [r2, #0]
 8004df0:	6413      	str	r3, [r2, #64]	; 0x40
 8004df2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004df6:	f002 f99f 	bl	8007138 <HAL_Delay>
 8004dfa:	4b84      	ldr	r3, [pc, #528]	; (800500c <runFLTask+0x288>)
 8004dfc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004e00:	4a86      	ldr	r2, [pc, #536]	; (800501c <runFLTask+0x298>)
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	4b81      	ldr	r3, [pc, #516]	; (800500c <runFLTask+0x288>)
 8004e06:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	bf0c      	ite	eq
 8004e0e:	2301      	moveq	r3, #1
 8004e10:	2300      	movne	r3, #0
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	461a      	mov	r2, r3
 8004e16:	2104      	movs	r1, #4
 8004e18:	4881      	ldr	r0, [pc, #516]	; (8005020 <runFLTask+0x29c>)
 8004e1a:	f003 fa29 	bl	8008270 <HAL_GPIO_WritePin>
 8004e1e:	4b7b      	ldr	r3, [pc, #492]	; (800500c <runFLTask+0x288>)
 8004e20:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf14      	ite	ne
 8004e28:	2301      	movne	r3, #1
 8004e2a:	2300      	moveq	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2108      	movs	r1, #8
 8004e32:	487b      	ldr	r0, [pc, #492]	; (8005020 <runFLTask+0x29c>)
 8004e34:	f003 fa1c 	bl	8008270 <HAL_GPIO_WritePin>
 8004e38:	4b74      	ldr	r3, [pc, #464]	; (800500c <runFLTask+0x288>)
 8004e3a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bf0c      	ite	eq
 8004e42:	2301      	moveq	r3, #1
 8004e44:	2300      	movne	r3, #0
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	2120      	movs	r1, #32
 8004e4c:	4874      	ldr	r0, [pc, #464]	; (8005020 <runFLTask+0x29c>)
 8004e4e:	f003 fa0f 	bl	8008270 <HAL_GPIO_WritePin>
 8004e52:	4b6e      	ldr	r3, [pc, #440]	; (800500c <runFLTask+0x288>)
 8004e54:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf14      	ite	ne
 8004e5c:	2301      	movne	r3, #1
 8004e5e:	2300      	moveq	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	2110      	movs	r1, #16
 8004e66:	486e      	ldr	r0, [pc, #440]	; (8005020 <runFLTask+0x29c>)
 8004e68:	f003 fa02 	bl	8008270 <HAL_GPIO_WritePin>
 8004e6c:	4b67      	ldr	r3, [pc, #412]	; (800500c <runFLTask+0x288>)
 8004e6e:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 8004e72:	4b6c      	ldr	r3, [pc, #432]	; (8005024 <runFLTask+0x2a0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	635a      	str	r2, [r3, #52]	; 0x34
 8004e78:	4b64      	ldr	r3, [pc, #400]	; (800500c <runFLTask+0x288>)
 8004e7a:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
 8004e7e:	4b69      	ldr	r3, [pc, #420]	; (8005024 <runFLTask+0x2a0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8004e84:	4865      	ldr	r0, [pc, #404]	; (800501c <runFLTask+0x298>)
 8004e86:	f7fe fb6b 	bl	8003560 <RobotTurn>
			  osDelay(10);
 8004e8a:	200a      	movs	r0, #10
 8004e8c:	f007 fd52 	bl	800c934 <osDelay>
			  targetDist = 4;
 8004e90:	4b65      	ldr	r3, [pc, #404]	; (8005028 <runFLTask+0x2a4>)
 8004e92:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004e96:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	4862      	ldr	r0, [pc, #392]	; (8005028 <runFLTask+0x2a4>)
 8004e9e:	f7fd feeb 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 8004ea2:	200a      	movs	r0, #10
 8004ea4:	f007 fd46 	bl	800c934 <osDelay>
			  break;
 8004ea8:	e126      	b.n	80050f8 <runFLTask+0x374>
		  case 20: // FL20 (outdoor 3x1)
			  targetDist = 4;
 8004eaa:	4b5f      	ldr	r3, [pc, #380]	; (8005028 <runFLTask+0x2a4>)
 8004eac:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004eb0:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	485c      	ldr	r0, [pc, #368]	; (8005028 <runFLTask+0x2a4>)
 8004eb8:	f7fd fede 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 8004ebc:	200a      	movs	r0, #10
 8004ebe:	f007 fd39 	bl	800c934 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_FL20], &htim8, &htim1, targetAngle);
 8004ec2:	4b52      	ldr	r3, [pc, #328]	; (800500c <runFLTask+0x288>)
 8004ec4:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004ec8:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8005010 <runFLTask+0x28c>
 8004ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed4:	dd01      	ble.n	8004eda <runFLTask+0x156>
 8004ed6:	2373      	movs	r3, #115	; 0x73
 8004ed8:	e012      	b.n	8004f00 <runFLTask+0x17c>
 8004eda:	4b4c      	ldr	r3, [pc, #304]	; (800500c <runFLTask+0x288>)
 8004edc:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004ee0:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8005014 <runFLTask+0x290>
 8004ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eec:	d501      	bpl.n	8004ef2 <runFLTask+0x16e>
 8004eee:	2332      	movs	r3, #50	; 0x32
 8004ef0:	e006      	b.n	8004f00 <runFLTask+0x17c>
 8004ef2:	4b46      	ldr	r3, [pc, #280]	; (800500c <runFLTask+0x288>)
 8004ef4:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004efc:	ee17 3a90 	vmov	r3, s15
 8004f00:	4a45      	ldr	r2, [pc, #276]	; (8005018 <runFLTask+0x294>)
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	6413      	str	r3, [r2, #64]	; 0x40
 8004f06:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004f0a:	f002 f915 	bl	8007138 <HAL_Delay>
 8004f0e:	4b3f      	ldr	r3, [pc, #252]	; (800500c <runFLTask+0x288>)
 8004f10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004f14:	4a41      	ldr	r2, [pc, #260]	; (800501c <runFLTask+0x298>)
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	4b3c      	ldr	r3, [pc, #240]	; (800500c <runFLTask+0x288>)
 8004f1a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	bf0c      	ite	eq
 8004f22:	2301      	moveq	r3, #1
 8004f24:	2300      	movne	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	2104      	movs	r1, #4
 8004f2c:	483c      	ldr	r0, [pc, #240]	; (8005020 <runFLTask+0x29c>)
 8004f2e:	f003 f99f 	bl	8008270 <HAL_GPIO_WritePin>
 8004f32:	4b36      	ldr	r3, [pc, #216]	; (800500c <runFLTask+0x288>)
 8004f34:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bf14      	ite	ne
 8004f3c:	2301      	movne	r3, #1
 8004f3e:	2300      	moveq	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	2108      	movs	r1, #8
 8004f46:	4836      	ldr	r0, [pc, #216]	; (8005020 <runFLTask+0x29c>)
 8004f48:	f003 f992 	bl	8008270 <HAL_GPIO_WritePin>
 8004f4c:	4b2f      	ldr	r3, [pc, #188]	; (800500c <runFLTask+0x288>)
 8004f4e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	bf0c      	ite	eq
 8004f56:	2301      	moveq	r3, #1
 8004f58:	2300      	movne	r3, #0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	2120      	movs	r1, #32
 8004f60:	482f      	ldr	r0, [pc, #188]	; (8005020 <runFLTask+0x29c>)
 8004f62:	f003 f985 	bl	8008270 <HAL_GPIO_WritePin>
 8004f66:	4b29      	ldr	r3, [pc, #164]	; (800500c <runFLTask+0x288>)
 8004f68:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf14      	ite	ne
 8004f70:	2301      	movne	r3, #1
 8004f72:	2300      	moveq	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	461a      	mov	r2, r3
 8004f78:	2110      	movs	r1, #16
 8004f7a:	4829      	ldr	r0, [pc, #164]	; (8005020 <runFLTask+0x29c>)
 8004f7c:	f003 f978 	bl	8008270 <HAL_GPIO_WritePin>
 8004f80:	4b22      	ldr	r3, [pc, #136]	; (800500c <runFLTask+0x288>)
 8004f82:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 8004f86:	4b27      	ldr	r3, [pc, #156]	; (8005024 <runFLTask+0x2a0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	635a      	str	r2, [r3, #52]	; 0x34
 8004f8c:	4b1f      	ldr	r3, [pc, #124]	; (800500c <runFLTask+0x288>)
 8004f8e:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 8004f92:	4b24      	ldr	r3, [pc, #144]	; (8005024 <runFLTask+0x2a0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8004f98:	4820      	ldr	r0, [pc, #128]	; (800501c <runFLTask+0x298>)
 8004f9a:	f7fe fae1 	bl	8003560 <RobotTurn>
			  osDelay(10);
 8004f9e:	200a      	movs	r0, #10
 8004fa0:	f007 fcc8 	bl	800c934 <osDelay>
			  targetDist = 7;
 8004fa4:	4b20      	ldr	r3, [pc, #128]	; (8005028 <runFLTask+0x2a4>)
 8004fa6:	4a21      	ldr	r2, [pc, #132]	; (800502c <runFLTask+0x2a8>)
 8004fa8:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004faa:	2200      	movs	r2, #0
 8004fac:	2100      	movs	r1, #0
 8004fae:	481e      	ldr	r0, [pc, #120]	; (8005028 <runFLTask+0x2a4>)
 8004fb0:	f7fd fe62 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 8004fb4:	200a      	movs	r0, #10
 8004fb6:	f007 fcbd 	bl	800c934 <osDelay>
			  break;
 8004fba:	e09d      	b.n	80050f8 <runFLTask+0x374>
		  default: // FL00 (indoor 3x1)
			  targetDist = 4;
 8004fbc:	4b1a      	ldr	r3, [pc, #104]	; (8005028 <runFLTask+0x2a4>)
 8004fbe:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004fc2:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	4817      	ldr	r0, [pc, #92]	; (8005028 <runFLTask+0x2a4>)
 8004fca:	f7fd fe55 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 8004fce:	200a      	movs	r0, #10
 8004fd0:	f007 fcb0 	bl	800c934 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_FL00], &htim8, &htim1, targetAngle);
 8004fd4:	4b0d      	ldr	r3, [pc, #52]	; (800500c <runFLTask+0x288>)
 8004fd6:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004fda:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005010 <runFLTask+0x28c>
 8004fde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe6:	dd01      	ble.n	8004fec <runFLTask+0x268>
 8004fe8:	2373      	movs	r3, #115	; 0x73
 8004fea:	e028      	b.n	800503e <runFLTask+0x2ba>
 8004fec:	4b07      	ldr	r3, [pc, #28]	; (800500c <runFLTask+0x288>)
 8004fee:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004ff2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005014 <runFLTask+0x290>
 8004ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ffe:	d517      	bpl.n	8005030 <runFLTask+0x2ac>
 8005000:	2332      	movs	r3, #50	; 0x32
 8005002:	e01c      	b.n	800503e <runFLTask+0x2ba>
 8005004:	20000134 	.word	0x20000134
 8005008:	20000518 	.word	0x20000518
 800500c:	20000004 	.word	0x20000004
 8005010:	42e60000 	.word	0x42e60000
 8005014:	42480000 	.word	0x42480000
 8005018:	200002a8 	.word	0x200002a8
 800501c:	20000540 	.word	0x20000540
 8005020:	40020000 	.word	0x40020000
 8005024:	20000410 	.word	0x20000410
 8005028:	20000554 	.word	0x20000554
 800502c:	40e00000 	.word	0x40e00000
 8005030:	4b50      	ldr	r3, [pc, #320]	; (8005174 <runFLTask+0x3f0>)
 8005032:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8005036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800503a:	ee17 3a90 	vmov	r3, s15
 800503e:	4a4e      	ldr	r2, [pc, #312]	; (8005178 <runFLTask+0x3f4>)
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	6413      	str	r3, [r2, #64]	; 0x40
 8005044:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005048:	f002 f876 	bl	8007138 <HAL_Delay>
 800504c:	4b49      	ldr	r3, [pc, #292]	; (8005174 <runFLTask+0x3f0>)
 800504e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005050:	4a4a      	ldr	r2, [pc, #296]	; (800517c <runFLTask+0x3f8>)
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	4b47      	ldr	r3, [pc, #284]	; (8005174 <runFLTask+0x3f0>)
 8005056:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800505a:	2b00      	cmp	r3, #0
 800505c:	bf0c      	ite	eq
 800505e:	2301      	moveq	r3, #1
 8005060:	2300      	movne	r3, #0
 8005062:	b2db      	uxtb	r3, r3
 8005064:	461a      	mov	r2, r3
 8005066:	2104      	movs	r1, #4
 8005068:	4845      	ldr	r0, [pc, #276]	; (8005180 <runFLTask+0x3fc>)
 800506a:	f003 f901 	bl	8008270 <HAL_GPIO_WritePin>
 800506e:	4b41      	ldr	r3, [pc, #260]	; (8005174 <runFLTask+0x3f0>)
 8005070:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005074:	2b00      	cmp	r3, #0
 8005076:	bf14      	ite	ne
 8005078:	2301      	movne	r3, #1
 800507a:	2300      	moveq	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	461a      	mov	r2, r3
 8005080:	2108      	movs	r1, #8
 8005082:	483f      	ldr	r0, [pc, #252]	; (8005180 <runFLTask+0x3fc>)
 8005084:	f003 f8f4 	bl	8008270 <HAL_GPIO_WritePin>
 8005088:	4b3a      	ldr	r3, [pc, #232]	; (8005174 <runFLTask+0x3f0>)
 800508a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800508e:	2b00      	cmp	r3, #0
 8005090:	bf0c      	ite	eq
 8005092:	2301      	moveq	r3, #1
 8005094:	2300      	movne	r3, #0
 8005096:	b2db      	uxtb	r3, r3
 8005098:	461a      	mov	r2, r3
 800509a:	2120      	movs	r1, #32
 800509c:	4838      	ldr	r0, [pc, #224]	; (8005180 <runFLTask+0x3fc>)
 800509e:	f003 f8e7 	bl	8008270 <HAL_GPIO_WritePin>
 80050a2:	4b34      	ldr	r3, [pc, #208]	; (8005174 <runFLTask+0x3f0>)
 80050a4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	bf14      	ite	ne
 80050ac:	2301      	movne	r3, #1
 80050ae:	2300      	moveq	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	461a      	mov	r2, r3
 80050b4:	2110      	movs	r1, #16
 80050b6:	4832      	ldr	r0, [pc, #200]	; (8005180 <runFLTask+0x3fc>)
 80050b8:	f003 f8da 	bl	8008270 <HAL_GPIO_WritePin>
 80050bc:	4b2d      	ldr	r3, [pc, #180]	; (8005174 <runFLTask+0x3f0>)
 80050be:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 80050c2:	4b30      	ldr	r3, [pc, #192]	; (8005184 <runFLTask+0x400>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	635a      	str	r2, [r3, #52]	; 0x34
 80050c8:	4b2a      	ldr	r3, [pc, #168]	; (8005174 <runFLTask+0x3f0>)
 80050ca:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 80050ce:	4b2d      	ldr	r3, [pc, #180]	; (8005184 <runFLTask+0x400>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 80050d4:	4829      	ldr	r0, [pc, #164]	; (800517c <runFLTask+0x3f8>)
 80050d6:	f7fe fa43 	bl	8003560 <RobotTurn>
			  osDelay(10);
 80050da:	200a      	movs	r0, #10
 80050dc:	f007 fc2a 	bl	800c934 <osDelay>
			  targetDist = 7;
 80050e0:	4b29      	ldr	r3, [pc, #164]	; (8005188 <runFLTask+0x404>)
 80050e2:	4a2a      	ldr	r2, [pc, #168]	; (800518c <runFLTask+0x408>)
 80050e4:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80050e6:	2200      	movs	r2, #0
 80050e8:	2100      	movs	r1, #0
 80050ea:	4827      	ldr	r0, [pc, #156]	; (8005188 <runFLTask+0x404>)
 80050ec:	f7fd fdc4 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 80050f0:	200a      	movs	r0, #10
 80050f2:	f007 fc1f 	bl	800c934 <osDelay>
			  break;
 80050f6:	bf00      	nop
		  }


		  clickOnce = 0;
 80050f8:	4b25      	ldr	r3, [pc, #148]	; (8005190 <runFLTask+0x40c>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 80050fe:	4b25      	ldr	r3, [pc, #148]	; (8005194 <runFLTask+0x410>)
 8005100:	781a      	ldrb	r2, [r3, #0]
 8005102:	4b25      	ldr	r3, [pc, #148]	; (8005198 <runFLTask+0x414>)
 8005104:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8005106:	4b23      	ldr	r3, [pc, #140]	; (8005194 <runFLTask+0x410>)
 8005108:	220b      	movs	r2, #11
 800510a:	701a      	strb	r2, [r3, #0]

		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 800510c:	4b23      	ldr	r3, [pc, #140]	; (800519c <runFLTask+0x418>)
 800510e:	781a      	ldrb	r2, [r3, #0]
 8005110:	4b22      	ldr	r3, [pc, #136]	; (800519c <runFLTask+0x418>)
 8005112:	785b      	ldrb	r3, [r3, #1]
 8005114:	429a      	cmp	r2, r3
 8005116:	d112      	bne.n	800513e <runFLTask+0x3ba>
				__CLEAR_CURCMD(curCmd);
 8005118:	4b21      	ldr	r3, [pc, #132]	; (80051a0 <runFLTask+0x41c>)
 800511a:	2264      	movs	r2, #100	; 0x64
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <runFLTask+0x41c>)
 8005120:	2200      	movs	r2, #0
 8005122:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8005124:	4a1f      	ldr	r2, [pc, #124]	; (80051a4 <runFLTask+0x420>)
 8005126:	210f      	movs	r1, #15
 8005128:	481f      	ldr	r0, [pc, #124]	; (80051a8 <runFLTask+0x424>)
 800512a:	f00a f97f 	bl	800f42c <sniprintf>
 800512e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005132:	2206      	movs	r2, #6
 8005134:	491d      	ldr	r1, [pc, #116]	; (80051ac <runFLTask+0x428>)
 8005136:	481e      	ldr	r0, [pc, #120]	; (80051b0 <runFLTask+0x42c>)
 8005138:	f006 fac1 	bl	800b6be <HAL_UART_Transmit>
 800513c:	e626      	b.n	8004d8c <runFLTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 800513e:	4b17      	ldr	r3, [pc, #92]	; (800519c <runFLTask+0x418>)
 8005140:	785b      	ldrb	r3, [r3, #1]
 8005142:	4a17      	ldr	r2, [pc, #92]	; (80051a0 <runFLTask+0x41c>)
 8005144:	4915      	ldr	r1, [pc, #84]	; (800519c <runFLTask+0x418>)
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	440b      	add	r3, r1
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	4b13      	ldr	r3, [pc, #76]	; (800519c <runFLTask+0x418>)
 8005150:	785b      	ldrb	r3, [r3, #1]
 8005152:	3301      	adds	r3, #1
 8005154:	4a11      	ldr	r2, [pc, #68]	; (800519c <runFLTask+0x418>)
 8005156:	7892      	ldrb	r2, [r2, #2]
 8005158:	fb93 f1f2 	sdiv	r1, r3, r2
 800515c:	fb01 f202 	mul.w	r2, r1, r2
 8005160:	1a9b      	subs	r3, r3, r2
 8005162:	b2da      	uxtb	r2, r3
 8005164:	4b0d      	ldr	r3, [pc, #52]	; (800519c <runFLTask+0x418>)
 8005166:	705a      	strb	r2, [r3, #1]
 8005168:	4a12      	ldr	r2, [pc, #72]	; (80051b4 <runFLTask+0x430>)
 800516a:	210f      	movs	r1, #15
 800516c:	480e      	ldr	r0, [pc, #56]	; (80051a8 <runFLTask+0x424>)
 800516e:	f00a f95d 	bl	800f42c <sniprintf>
	  if (curTask != TASK_FL) osDelay(1000);
 8005172:	e60b      	b.n	8004d8c <runFLTask+0x8>
 8005174:	20000004 	.word	0x20000004
 8005178:	200002a8 	.word	0x200002a8
 800517c:	20000540 	.word	0x20000540
 8005180:	40020000 	.word	0x40020000
 8005184:	20000410 	.word	0x20000410
 8005188:	20000554 	.word	0x20000554
 800518c:	40e00000 	.word	0x40e00000
 8005190:	200005ec 	.word	0x200005ec
 8005194:	20000134 	.word	0x20000134
 8005198:	20000135 	.word	0x20000135
 800519c:	200004e4 	.word	0x200004e4
 80051a0:	20000518 	.word	0x20000518
 80051a4:	08010b40 	.word	0x08010b40
 80051a8:	2000051c 	.word	0x2000051c
 80051ac:	08010b48 	.word	0x08010b48
 80051b0:	20000458 	.word	0x20000458
 80051b4:	08010b50 	.word	0x08010b50

080051b8 <runFRTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFRTask */
void runFRTask(void *argument)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFRTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_FR) osDelay(1000);
 80051c0:	4b9d      	ldr	r3, [pc, #628]	; (8005438 <runFRTask+0x280>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d004      	beq.n	80051d2 <runFRTask+0x1a>
 80051c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051cc:	f007 fbb2 	bl	800c934 <osDelay>
 80051d0:	e7f6      	b.n	80051c0 <runFRTask+0x8>
	  else {
//		  osDelay(3000); // video demo only
		  switch(curCmd.val) {
 80051d2:	4b9a      	ldr	r3, [pc, #616]	; (800543c <runFRTask+0x284>)
 80051d4:	885b      	ldrh	r3, [r3, #2]
 80051d6:	2b14      	cmp	r3, #20
 80051d8:	f000 8081 	beq.w	80052de <runFRTask+0x126>
 80051dc:	2b1e      	cmp	r3, #30
 80051de:	f040 8108 	bne.w	80053f2 <runFRTask+0x23a>
		  case 30: // FR30 (4x2)
			  __SET_CMD_CONFIG(cfgs[CONFIG_FR30], &htim8, &htim1, targetAngle);
 80051e2:	4b97      	ldr	r3, [pc, #604]	; (8005440 <runFRTask+0x288>)
 80051e4:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 80051e8:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8005444 <runFRTask+0x28c>
 80051ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f4:	dd01      	ble.n	80051fa <runFRTask+0x42>
 80051f6:	2373      	movs	r3, #115	; 0x73
 80051f8:	e012      	b.n	8005220 <runFRTask+0x68>
 80051fa:	4b91      	ldr	r3, [pc, #580]	; (8005440 <runFRTask+0x288>)
 80051fc:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8005200:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8005448 <runFRTask+0x290>
 8005204:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520c:	d501      	bpl.n	8005212 <runFRTask+0x5a>
 800520e:	2332      	movs	r3, #50	; 0x32
 8005210:	e006      	b.n	8005220 <runFRTask+0x68>
 8005212:	4b8b      	ldr	r3, [pc, #556]	; (8005440 <runFRTask+0x288>)
 8005214:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8005218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800521c:	ee17 3a90 	vmov	r3, s15
 8005220:	4a8a      	ldr	r2, [pc, #552]	; (800544c <runFRTask+0x294>)
 8005222:	6812      	ldr	r2, [r2, #0]
 8005224:	6413      	str	r3, [r2, #64]	; 0x40
 8005226:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800522a:	f001 ff85 	bl	8007138 <HAL_Delay>
 800522e:	4b84      	ldr	r3, [pc, #528]	; (8005440 <runFRTask+0x288>)
 8005230:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005234:	4a86      	ldr	r2, [pc, #536]	; (8005450 <runFRTask+0x298>)
 8005236:	6013      	str	r3, [r2, #0]
 8005238:	4b81      	ldr	r3, [pc, #516]	; (8005440 <runFRTask+0x288>)
 800523a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800523e:	2b00      	cmp	r3, #0
 8005240:	bf0c      	ite	eq
 8005242:	2301      	moveq	r3, #1
 8005244:	2300      	movne	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	461a      	mov	r2, r3
 800524a:	2104      	movs	r1, #4
 800524c:	4881      	ldr	r0, [pc, #516]	; (8005454 <runFRTask+0x29c>)
 800524e:	f003 f80f 	bl	8008270 <HAL_GPIO_WritePin>
 8005252:	4b7b      	ldr	r3, [pc, #492]	; (8005440 <runFRTask+0x288>)
 8005254:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8005258:	2b00      	cmp	r3, #0
 800525a:	bf14      	ite	ne
 800525c:	2301      	movne	r3, #1
 800525e:	2300      	moveq	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	461a      	mov	r2, r3
 8005264:	2108      	movs	r1, #8
 8005266:	487b      	ldr	r0, [pc, #492]	; (8005454 <runFRTask+0x29c>)
 8005268:	f003 f802 	bl	8008270 <HAL_GPIO_WritePin>
 800526c:	4b74      	ldr	r3, [pc, #464]	; (8005440 <runFRTask+0x288>)
 800526e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8005272:	2b00      	cmp	r3, #0
 8005274:	bf0c      	ite	eq
 8005276:	2301      	moveq	r3, #1
 8005278:	2300      	movne	r3, #0
 800527a:	b2db      	uxtb	r3, r3
 800527c:	461a      	mov	r2, r3
 800527e:	2120      	movs	r1, #32
 8005280:	4874      	ldr	r0, [pc, #464]	; (8005454 <runFRTask+0x29c>)
 8005282:	f002 fff5 	bl	8008270 <HAL_GPIO_WritePin>
 8005286:	4b6e      	ldr	r3, [pc, #440]	; (8005440 <runFRTask+0x288>)
 8005288:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800528c:	2b00      	cmp	r3, #0
 800528e:	bf14      	ite	ne
 8005290:	2301      	movne	r3, #1
 8005292:	2300      	moveq	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	2110      	movs	r1, #16
 800529a:	486e      	ldr	r0, [pc, #440]	; (8005454 <runFRTask+0x29c>)
 800529c:	f002 ffe8 	bl	8008270 <HAL_GPIO_WritePin>
 80052a0:	4b67      	ldr	r3, [pc, #412]	; (8005440 <runFRTask+0x288>)
 80052a2:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 80052a6:	4b6c      	ldr	r3, [pc, #432]	; (8005458 <runFRTask+0x2a0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	635a      	str	r2, [r3, #52]	; 0x34
 80052ac:	4b64      	ldr	r3, [pc, #400]	; (8005440 <runFRTask+0x288>)
 80052ae:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 80052b2:	4b69      	ldr	r3, [pc, #420]	; (8005458 <runFRTask+0x2a0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 80052b8:	4865      	ldr	r0, [pc, #404]	; (8005450 <runFRTask+0x298>)
 80052ba:	f7fe f951 	bl	8003560 <RobotTurn>
			  osDelay(10);
 80052be:	200a      	movs	r0, #10
 80052c0:	f007 fb38 	bl	800c934 <osDelay>
			  targetDist = 4;
 80052c4:	4b65      	ldr	r3, [pc, #404]	; (800545c <runFRTask+0x2a4>)
 80052c6:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80052ca:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80052cc:	2200      	movs	r2, #0
 80052ce:	2100      	movs	r1, #0
 80052d0:	4862      	ldr	r0, [pc, #392]	; (800545c <runFRTask+0x2a4>)
 80052d2:	f7fd fcd1 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 80052d6:	200a      	movs	r0, #10
 80052d8:	f007 fb2c 	bl	800c934 <osDelay>
			  break;
 80052dc:	e127      	b.n	800552e <runFRTask+0x376>
		  case 20: // FR20 (outdoor 3x1)
			  targetDist = 4;
 80052de:	4b5f      	ldr	r3, [pc, #380]	; (800545c <runFRTask+0x2a4>)
 80052e0:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80052e4:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80052e6:	2200      	movs	r2, #0
 80052e8:	2100      	movs	r1, #0
 80052ea:	485c      	ldr	r0, [pc, #368]	; (800545c <runFRTask+0x2a4>)
 80052ec:	f7fd fcc4 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 80052f0:	200a      	movs	r0, #10
 80052f2:	f007 fb1f 	bl	800c934 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_FR20], &htim8, &htim1, targetAngle);
 80052f6:	4b52      	ldr	r3, [pc, #328]	; (8005440 <runFRTask+0x288>)
 80052f8:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 80052fc:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8005444 <runFRTask+0x28c>
 8005300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005308:	dd01      	ble.n	800530e <runFRTask+0x156>
 800530a:	2373      	movs	r3, #115	; 0x73
 800530c:	e012      	b.n	8005334 <runFRTask+0x17c>
 800530e:	4b4c      	ldr	r3, [pc, #304]	; (8005440 <runFRTask+0x288>)
 8005310:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8005314:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8005448 <runFRTask+0x290>
 8005318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800531c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005320:	d501      	bpl.n	8005326 <runFRTask+0x16e>
 8005322:	2332      	movs	r3, #50	; 0x32
 8005324:	e006      	b.n	8005334 <runFRTask+0x17c>
 8005326:	4b46      	ldr	r3, [pc, #280]	; (8005440 <runFRTask+0x288>)
 8005328:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 800532c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005330:	ee17 3a90 	vmov	r3, s15
 8005334:	4a45      	ldr	r2, [pc, #276]	; (800544c <runFRTask+0x294>)
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	6413      	str	r3, [r2, #64]	; 0x40
 800533a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800533e:	f001 fefb 	bl	8007138 <HAL_Delay>
 8005342:	4b3f      	ldr	r3, [pc, #252]	; (8005440 <runFRTask+0x288>)
 8005344:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005348:	4a41      	ldr	r2, [pc, #260]	; (8005450 <runFRTask+0x298>)
 800534a:	6013      	str	r3, [r2, #0]
 800534c:	4b3c      	ldr	r3, [pc, #240]	; (8005440 <runFRTask+0x288>)
 800534e:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8005352:	2b00      	cmp	r3, #0
 8005354:	bf0c      	ite	eq
 8005356:	2301      	moveq	r3, #1
 8005358:	2300      	movne	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	461a      	mov	r2, r3
 800535e:	2104      	movs	r1, #4
 8005360:	483c      	ldr	r0, [pc, #240]	; (8005454 <runFRTask+0x29c>)
 8005362:	f002 ff85 	bl	8008270 <HAL_GPIO_WritePin>
 8005366:	4b36      	ldr	r3, [pc, #216]	; (8005440 <runFRTask+0x288>)
 8005368:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800536c:	2b00      	cmp	r3, #0
 800536e:	bf14      	ite	ne
 8005370:	2301      	movne	r3, #1
 8005372:	2300      	moveq	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	461a      	mov	r2, r3
 8005378:	2108      	movs	r1, #8
 800537a:	4836      	ldr	r0, [pc, #216]	; (8005454 <runFRTask+0x29c>)
 800537c:	f002 ff78 	bl	8008270 <HAL_GPIO_WritePin>
 8005380:	4b2f      	ldr	r3, [pc, #188]	; (8005440 <runFRTask+0x288>)
 8005382:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8005386:	2b00      	cmp	r3, #0
 8005388:	bf0c      	ite	eq
 800538a:	2301      	moveq	r3, #1
 800538c:	2300      	movne	r3, #0
 800538e:	b2db      	uxtb	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	2120      	movs	r1, #32
 8005394:	482f      	ldr	r0, [pc, #188]	; (8005454 <runFRTask+0x29c>)
 8005396:	f002 ff6b 	bl	8008270 <HAL_GPIO_WritePin>
 800539a:	4b29      	ldr	r3, [pc, #164]	; (8005440 <runFRTask+0x288>)
 800539c:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bf14      	ite	ne
 80053a4:	2301      	movne	r3, #1
 80053a6:	2300      	moveq	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	461a      	mov	r2, r3
 80053ac:	2110      	movs	r1, #16
 80053ae:	4829      	ldr	r0, [pc, #164]	; (8005454 <runFRTask+0x29c>)
 80053b0:	f002 ff5e 	bl	8008270 <HAL_GPIO_WritePin>
 80053b4:	4b22      	ldr	r3, [pc, #136]	; (8005440 <runFRTask+0x288>)
 80053b6:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 80053ba:	4b27      	ldr	r3, [pc, #156]	; (8005458 <runFRTask+0x2a0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	635a      	str	r2, [r3, #52]	; 0x34
 80053c0:	4b1f      	ldr	r3, [pc, #124]	; (8005440 <runFRTask+0x288>)
 80053c2:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 80053c6:	4b24      	ldr	r3, [pc, #144]	; (8005458 <runFRTask+0x2a0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 80053cc:	4820      	ldr	r0, [pc, #128]	; (8005450 <runFRTask+0x298>)
 80053ce:	f7fe f8c7 	bl	8003560 <RobotTurn>
			  osDelay(10);
 80053d2:	200a      	movs	r0, #10
 80053d4:	f007 faae 	bl	800c934 <osDelay>
			  targetDist = 8;
 80053d8:	4b20      	ldr	r3, [pc, #128]	; (800545c <runFRTask+0x2a4>)
 80053da:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80053de:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80053e0:	2200      	movs	r2, #0
 80053e2:	2100      	movs	r1, #0
 80053e4:	481d      	ldr	r0, [pc, #116]	; (800545c <runFRTask+0x2a4>)
 80053e6:	f7fd fc47 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 80053ea:	200a      	movs	r0, #10
 80053ec:	f007 faa2 	bl	800c934 <osDelay>
			  break;
 80053f0:	e09d      	b.n	800552e <runFRTask+0x376>
		  default: // FR00 (indoor 3x1)
			  targetDist = 3;
 80053f2:	4b1a      	ldr	r3, [pc, #104]	; (800545c <runFRTask+0x2a4>)
 80053f4:	4a1a      	ldr	r2, [pc, #104]	; (8005460 <runFRTask+0x2a8>)
 80053f6:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80053f8:	2200      	movs	r2, #0
 80053fa:	2100      	movs	r1, #0
 80053fc:	4817      	ldr	r0, [pc, #92]	; (800545c <runFRTask+0x2a4>)
 80053fe:	f7fd fc3b 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 8005402:	200a      	movs	r0, #10
 8005404:	f007 fa96 	bl	800c934 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_FR00], &htim8, &htim1, targetAngle);
 8005408:	4b0d      	ldr	r3, [pc, #52]	; (8005440 <runFRTask+0x288>)
 800540a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800540e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005444 <runFRTask+0x28c>
 8005412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541a:	dd01      	ble.n	8005420 <runFRTask+0x268>
 800541c:	2373      	movs	r3, #115	; 0x73
 800541e:	e028      	b.n	8005472 <runFRTask+0x2ba>
 8005420:	4b07      	ldr	r3, [pc, #28]	; (8005440 <runFRTask+0x288>)
 8005422:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8005426:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005448 <runFRTask+0x290>
 800542a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800542e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005432:	d517      	bpl.n	8005464 <runFRTask+0x2ac>
 8005434:	2332      	movs	r3, #50	; 0x32
 8005436:	e01c      	b.n	8005472 <runFRTask+0x2ba>
 8005438:	20000134 	.word	0x20000134
 800543c:	20000518 	.word	0x20000518
 8005440:	20000004 	.word	0x20000004
 8005444:	42e60000 	.word	0x42e60000
 8005448:	42480000 	.word	0x42480000
 800544c:	200002a8 	.word	0x200002a8
 8005450:	20000540 	.word	0x20000540
 8005454:	40020000 	.word	0x40020000
 8005458:	20000410 	.word	0x20000410
 800545c:	20000554 	.word	0x20000554
 8005460:	40400000 	.word	0x40400000
 8005464:	4b51      	ldr	r3, [pc, #324]	; (80055ac <runFRTask+0x3f4>)
 8005466:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800546a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800546e:	ee17 3a90 	vmov	r3, s15
 8005472:	4a4f      	ldr	r2, [pc, #316]	; (80055b0 <runFRTask+0x3f8>)
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	6413      	str	r3, [r2, #64]	; 0x40
 8005478:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800547c:	f001 fe5c 	bl	8007138 <HAL_Delay>
 8005480:	4b4a      	ldr	r3, [pc, #296]	; (80055ac <runFRTask+0x3f4>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005486:	4a4b      	ldr	r2, [pc, #300]	; (80055b4 <runFRTask+0x3fc>)
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	4b48      	ldr	r3, [pc, #288]	; (80055ac <runFRTask+0x3f4>)
 800548c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005490:	2b00      	cmp	r3, #0
 8005492:	bf0c      	ite	eq
 8005494:	2301      	moveq	r3, #1
 8005496:	2300      	movne	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	461a      	mov	r2, r3
 800549c:	2104      	movs	r1, #4
 800549e:	4846      	ldr	r0, [pc, #280]	; (80055b8 <runFRTask+0x400>)
 80054a0:	f002 fee6 	bl	8008270 <HAL_GPIO_WritePin>
 80054a4:	4b41      	ldr	r3, [pc, #260]	; (80055ac <runFRTask+0x3f4>)
 80054a6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	bf14      	ite	ne
 80054ae:	2301      	movne	r3, #1
 80054b0:	2300      	moveq	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	2108      	movs	r1, #8
 80054b8:	483f      	ldr	r0, [pc, #252]	; (80055b8 <runFRTask+0x400>)
 80054ba:	f002 fed9 	bl	8008270 <HAL_GPIO_WritePin>
 80054be:	4b3b      	ldr	r3, [pc, #236]	; (80055ac <runFRTask+0x3f4>)
 80054c0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	461a      	mov	r2, r3
 80054d0:	2120      	movs	r1, #32
 80054d2:	4839      	ldr	r0, [pc, #228]	; (80055b8 <runFRTask+0x400>)
 80054d4:	f002 fecc 	bl	8008270 <HAL_GPIO_WritePin>
 80054d8:	4b34      	ldr	r3, [pc, #208]	; (80055ac <runFRTask+0x3f4>)
 80054da:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	bf14      	ite	ne
 80054e2:	2301      	movne	r3, #1
 80054e4:	2300      	moveq	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	2110      	movs	r1, #16
 80054ec:	4832      	ldr	r0, [pc, #200]	; (80055b8 <runFRTask+0x400>)
 80054ee:	f002 febf 	bl	8008270 <HAL_GPIO_WritePin>
 80054f2:	4b2e      	ldr	r3, [pc, #184]	; (80055ac <runFRTask+0x3f4>)
 80054f4:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 80054f8:	4b30      	ldr	r3, [pc, #192]	; (80055bc <runFRTask+0x404>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	635a      	str	r2, [r3, #52]	; 0x34
 80054fe:	4b2b      	ldr	r3, [pc, #172]	; (80055ac <runFRTask+0x3f4>)
 8005500:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8005504:	4b2d      	ldr	r3, [pc, #180]	; (80055bc <runFRTask+0x404>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 800550a:	482a      	ldr	r0, [pc, #168]	; (80055b4 <runFRTask+0x3fc>)
 800550c:	f7fe f828 	bl	8003560 <RobotTurn>
			  osDelay(10);
 8005510:	200a      	movs	r0, #10
 8005512:	f007 fa0f 	bl	800c934 <osDelay>
			  targetDist = 6.5;
 8005516:	4b2a      	ldr	r3, [pc, #168]	; (80055c0 <runFRTask+0x408>)
 8005518:	4a2a      	ldr	r2, [pc, #168]	; (80055c4 <runFRTask+0x40c>)
 800551a:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800551c:	2200      	movs	r2, #0
 800551e:	2100      	movs	r1, #0
 8005520:	4827      	ldr	r0, [pc, #156]	; (80055c0 <runFRTask+0x408>)
 8005522:	f7fd fba9 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 8005526:	200a      	movs	r0, #10
 8005528:	f007 fa04 	bl	800c934 <osDelay>
			  break;
 800552c:	bf00      	nop
		  }


		  clickOnce = 0;
 800552e:	4b26      	ldr	r3, [pc, #152]	; (80055c8 <runFRTask+0x410>)
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8005534:	4b25      	ldr	r3, [pc, #148]	; (80055cc <runFRTask+0x414>)
 8005536:	781a      	ldrb	r2, [r3, #0]
 8005538:	4b25      	ldr	r3, [pc, #148]	; (80055d0 <runFRTask+0x418>)
 800553a:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 800553c:	4b23      	ldr	r3, [pc, #140]	; (80055cc <runFRTask+0x414>)
 800553e:	220b      	movs	r2, #11
 8005540:	701a      	strb	r2, [r3, #0]
		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8005542:	4b24      	ldr	r3, [pc, #144]	; (80055d4 <runFRTask+0x41c>)
 8005544:	781a      	ldrb	r2, [r3, #0]
 8005546:	4b23      	ldr	r3, [pc, #140]	; (80055d4 <runFRTask+0x41c>)
 8005548:	785b      	ldrb	r3, [r3, #1]
 800554a:	429a      	cmp	r2, r3
 800554c:	d112      	bne.n	8005574 <runFRTask+0x3bc>
				__CLEAR_CURCMD(curCmd);
 800554e:	4b22      	ldr	r3, [pc, #136]	; (80055d8 <runFRTask+0x420>)
 8005550:	2264      	movs	r2, #100	; 0x64
 8005552:	701a      	strb	r2, [r3, #0]
 8005554:	4b20      	ldr	r3, [pc, #128]	; (80055d8 <runFRTask+0x420>)
 8005556:	2200      	movs	r2, #0
 8005558:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 800555a:	4a20      	ldr	r2, [pc, #128]	; (80055dc <runFRTask+0x424>)
 800555c:	210f      	movs	r1, #15
 800555e:	4820      	ldr	r0, [pc, #128]	; (80055e0 <runFRTask+0x428>)
 8005560:	f009 ff64 	bl	800f42c <sniprintf>
 8005564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005568:	2206      	movs	r2, #6
 800556a:	491e      	ldr	r1, [pc, #120]	; (80055e4 <runFRTask+0x42c>)
 800556c:	481e      	ldr	r0, [pc, #120]	; (80055e8 <runFRTask+0x430>)
 800556e:	f006 f8a6 	bl	800b6be <HAL_UART_Transmit>
 8005572:	e625      	b.n	80051c0 <runFRTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005574:	4b17      	ldr	r3, [pc, #92]	; (80055d4 <runFRTask+0x41c>)
 8005576:	785b      	ldrb	r3, [r3, #1]
 8005578:	4a17      	ldr	r2, [pc, #92]	; (80055d8 <runFRTask+0x420>)
 800557a:	4916      	ldr	r1, [pc, #88]	; (80055d4 <runFRTask+0x41c>)
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	440b      	add	r3, r1
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <runFRTask+0x41c>)
 8005586:	785b      	ldrb	r3, [r3, #1]
 8005588:	3301      	adds	r3, #1
 800558a:	4a12      	ldr	r2, [pc, #72]	; (80055d4 <runFRTask+0x41c>)
 800558c:	7892      	ldrb	r2, [r2, #2]
 800558e:	fb93 f1f2 	sdiv	r1, r3, r2
 8005592:	fb01 f202 	mul.w	r2, r1, r2
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	b2da      	uxtb	r2, r3
 800559a:	4b0e      	ldr	r3, [pc, #56]	; (80055d4 <runFRTask+0x41c>)
 800559c:	705a      	strb	r2, [r3, #1]
 800559e:	4a13      	ldr	r2, [pc, #76]	; (80055ec <runFRTask+0x434>)
 80055a0:	210f      	movs	r1, #15
 80055a2:	480f      	ldr	r0, [pc, #60]	; (80055e0 <runFRTask+0x428>)
 80055a4:	f009 ff42 	bl	800f42c <sniprintf>
	  if (curTask != TASK_FR) osDelay(1000);
 80055a8:	e60a      	b.n	80051c0 <runFRTask+0x8>
 80055aa:	bf00      	nop
 80055ac:	20000004 	.word	0x20000004
 80055b0:	200002a8 	.word	0x200002a8
 80055b4:	20000540 	.word	0x20000540
 80055b8:	40020000 	.word	0x40020000
 80055bc:	20000410 	.word	0x20000410
 80055c0:	20000554 	.word	0x20000554
 80055c4:	40d00000 	.word	0x40d00000
 80055c8:	200005ec 	.word	0x200005ec
 80055cc:	20000134 	.word	0x20000134
 80055d0:	20000135 	.word	0x20000135
 80055d4:	200004e4 	.word	0x200004e4
 80055d8:	20000518 	.word	0x20000518
 80055dc:	08010b40 	.word	0x08010b40
 80055e0:	2000051c 	.word	0x2000051c
 80055e4:	08010b48 	.word	0x08010b48
 80055e8:	20000458 	.word	0x20000458
 80055ec:	08010b50 	.word	0x08010b50

080055f0 <runBLTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBLTask */
void runBLTask(void *argument)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBLTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_BL) osDelay(1000);
 80055f8:	4b9c      	ldr	r3, [pc, #624]	; (800586c <runBLTask+0x27c>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d004      	beq.n	800560a <runBLTask+0x1a>
 8005600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005604:	f007 f996 	bl	800c934 <osDelay>
 8005608:	e7f6      	b.n	80055f8 <runBLTask+0x8>
	  else {
//		  osDelay(3000); // video demo only
		  switch(curCmd.val) {
 800560a:	4b99      	ldr	r3, [pc, #612]	; (8005870 <runBLTask+0x280>)
 800560c:	885b      	ldrh	r3, [r3, #2]
 800560e:	2b14      	cmp	r3, #20
 8005610:	d07f      	beq.n	8005712 <runBLTask+0x122>
 8005612:	2b1e      	cmp	r3, #30
 8005614:	f040 8106 	bne.w	8005824 <runBLTask+0x234>
		  case 30: // BL30 (4x2)
			  __SET_CMD_CONFIG(cfgs[CONFIG_BL30], &htim8, &htim1, targetAngle);
 8005618:	4b96      	ldr	r3, [pc, #600]	; (8005874 <runBLTask+0x284>)
 800561a:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 800561e:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8005878 <runBLTask+0x288>
 8005622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800562a:	dd01      	ble.n	8005630 <runBLTask+0x40>
 800562c:	2373      	movs	r3, #115	; 0x73
 800562e:	e012      	b.n	8005656 <runBLTask+0x66>
 8005630:	4b90      	ldr	r3, [pc, #576]	; (8005874 <runBLTask+0x284>)
 8005632:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8005636:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800587c <runBLTask+0x28c>
 800563a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800563e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005642:	d501      	bpl.n	8005648 <runBLTask+0x58>
 8005644:	2332      	movs	r3, #50	; 0x32
 8005646:	e006      	b.n	8005656 <runBLTask+0x66>
 8005648:	4b8a      	ldr	r3, [pc, #552]	; (8005874 <runBLTask+0x284>)
 800564a:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 800564e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005652:	ee17 3a90 	vmov	r3, s15
 8005656:	4a8a      	ldr	r2, [pc, #552]	; (8005880 <runBLTask+0x290>)
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	6413      	str	r3, [r2, #64]	; 0x40
 800565c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005660:	f001 fd6a 	bl	8007138 <HAL_Delay>
 8005664:	4b83      	ldr	r3, [pc, #524]	; (8005874 <runBLTask+0x284>)
 8005666:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800566a:	4a86      	ldr	r2, [pc, #536]	; (8005884 <runBLTask+0x294>)
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	4b81      	ldr	r3, [pc, #516]	; (8005874 <runBLTask+0x284>)
 8005670:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8005674:	2b00      	cmp	r3, #0
 8005676:	bf0c      	ite	eq
 8005678:	2301      	moveq	r3, #1
 800567a:	2300      	movne	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	461a      	mov	r2, r3
 8005680:	2104      	movs	r1, #4
 8005682:	4881      	ldr	r0, [pc, #516]	; (8005888 <runBLTask+0x298>)
 8005684:	f002 fdf4 	bl	8008270 <HAL_GPIO_WritePin>
 8005688:	4b7a      	ldr	r3, [pc, #488]	; (8005874 <runBLTask+0x284>)
 800568a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800568e:	2b00      	cmp	r3, #0
 8005690:	bf14      	ite	ne
 8005692:	2301      	movne	r3, #1
 8005694:	2300      	moveq	r3, #0
 8005696:	b2db      	uxtb	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	2108      	movs	r1, #8
 800569c:	487a      	ldr	r0, [pc, #488]	; (8005888 <runBLTask+0x298>)
 800569e:	f002 fde7 	bl	8008270 <HAL_GPIO_WritePin>
 80056a2:	4b74      	ldr	r3, [pc, #464]	; (8005874 <runBLTask+0x284>)
 80056a4:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bf0c      	ite	eq
 80056ac:	2301      	moveq	r3, #1
 80056ae:	2300      	movne	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	2120      	movs	r1, #32
 80056b6:	4874      	ldr	r0, [pc, #464]	; (8005888 <runBLTask+0x298>)
 80056b8:	f002 fdda 	bl	8008270 <HAL_GPIO_WritePin>
 80056bc:	4b6d      	ldr	r3, [pc, #436]	; (8005874 <runBLTask+0x284>)
 80056be:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	bf14      	ite	ne
 80056c6:	2301      	movne	r3, #1
 80056c8:	2300      	moveq	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	461a      	mov	r2, r3
 80056ce:	2110      	movs	r1, #16
 80056d0:	486d      	ldr	r0, [pc, #436]	; (8005888 <runBLTask+0x298>)
 80056d2:	f002 fdcd 	bl	8008270 <HAL_GPIO_WritePin>
 80056d6:	4b67      	ldr	r3, [pc, #412]	; (8005874 <runBLTask+0x284>)
 80056d8:	f8b3 2110 	ldrh.w	r2, [r3, #272]	; 0x110
 80056dc:	4b6b      	ldr	r3, [pc, #428]	; (800588c <runBLTask+0x29c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	635a      	str	r2, [r3, #52]	; 0x34
 80056e2:	4b64      	ldr	r3, [pc, #400]	; (8005874 <runBLTask+0x284>)
 80056e4:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 80056e8:	4b68      	ldr	r3, [pc, #416]	; (800588c <runBLTask+0x29c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 80056ee:	4865      	ldr	r0, [pc, #404]	; (8005884 <runBLTask+0x294>)
 80056f0:	f7fd ff36 	bl	8003560 <RobotTurn>
			  osDelay(10);
 80056f4:	200a      	movs	r0, #10
 80056f6:	f007 f91d 	bl	800c934 <osDelay>
			  targetDist = 4.5;
 80056fa:	4b65      	ldr	r3, [pc, #404]	; (8005890 <runBLTask+0x2a0>)
 80056fc:	4a65      	ldr	r2, [pc, #404]	; (8005894 <runBLTask+0x2a4>)
 80056fe:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005700:	2200      	movs	r2, #0
 8005702:	2100      	movs	r1, #0
 8005704:	4862      	ldr	r0, [pc, #392]	; (8005890 <runBLTask+0x2a0>)
 8005706:	f7fd fab7 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 800570a:	200a      	movs	r0, #10
 800570c:	f007 f912 	bl	800c934 <osDelay>
			  break;
 8005710:	e129      	b.n	8005966 <runBLTask+0x376>
		  case 20: // BL20 (outdoor 3x1)
			  targetDist = 6;
 8005712:	4b5f      	ldr	r3, [pc, #380]	; (8005890 <runBLTask+0x2a0>)
 8005714:	4a60      	ldr	r2, [pc, #384]	; (8005898 <runBLTask+0x2a8>)
 8005716:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005718:	2200      	movs	r2, #0
 800571a:	2101      	movs	r1, #1
 800571c:	485c      	ldr	r0, [pc, #368]	; (8005890 <runBLTask+0x2a0>)
 800571e:	f7fd faab 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 8005722:	200a      	movs	r0, #10
 8005724:	f007 f906 	bl	800c934 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_BL20], &htim8, &htim1, targetAngle);
 8005728:	4b52      	ldr	r3, [pc, #328]	; (8005874 <runBLTask+0x284>)
 800572a:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 800572e:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8005878 <runBLTask+0x288>
 8005732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573a:	dd01      	ble.n	8005740 <runBLTask+0x150>
 800573c:	2373      	movs	r3, #115	; 0x73
 800573e:	e012      	b.n	8005766 <runBLTask+0x176>
 8005740:	4b4c      	ldr	r3, [pc, #304]	; (8005874 <runBLTask+0x284>)
 8005742:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8005746:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800587c <runBLTask+0x28c>
 800574a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800574e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005752:	d501      	bpl.n	8005758 <runBLTask+0x168>
 8005754:	2332      	movs	r3, #50	; 0x32
 8005756:	e006      	b.n	8005766 <runBLTask+0x176>
 8005758:	4b46      	ldr	r3, [pc, #280]	; (8005874 <runBLTask+0x284>)
 800575a:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 800575e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005762:	ee17 3a90 	vmov	r3, s15
 8005766:	4a46      	ldr	r2, [pc, #280]	; (8005880 <runBLTask+0x290>)
 8005768:	6812      	ldr	r2, [r2, #0]
 800576a:	6413      	str	r3, [r2, #64]	; 0x40
 800576c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005770:	f001 fce2 	bl	8007138 <HAL_Delay>
 8005774:	4b3f      	ldr	r3, [pc, #252]	; (8005874 <runBLTask+0x284>)
 8005776:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800577a:	4a42      	ldr	r2, [pc, #264]	; (8005884 <runBLTask+0x294>)
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	4b3d      	ldr	r3, [pc, #244]	; (8005874 <runBLTask+0x284>)
 8005780:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005784:	2b00      	cmp	r3, #0
 8005786:	bf0c      	ite	eq
 8005788:	2301      	moveq	r3, #1
 800578a:	2300      	movne	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	461a      	mov	r2, r3
 8005790:	2104      	movs	r1, #4
 8005792:	483d      	ldr	r0, [pc, #244]	; (8005888 <runBLTask+0x298>)
 8005794:	f002 fd6c 	bl	8008270 <HAL_GPIO_WritePin>
 8005798:	4b36      	ldr	r3, [pc, #216]	; (8005874 <runBLTask+0x284>)
 800579a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bf14      	ite	ne
 80057a2:	2301      	movne	r3, #1
 80057a4:	2300      	moveq	r3, #0
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	461a      	mov	r2, r3
 80057aa:	2108      	movs	r1, #8
 80057ac:	4836      	ldr	r0, [pc, #216]	; (8005888 <runBLTask+0x298>)
 80057ae:	f002 fd5f 	bl	8008270 <HAL_GPIO_WritePin>
 80057b2:	4b30      	ldr	r3, [pc, #192]	; (8005874 <runBLTask+0x284>)
 80057b4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	bf0c      	ite	eq
 80057bc:	2301      	moveq	r3, #1
 80057be:	2300      	movne	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	461a      	mov	r2, r3
 80057c4:	2120      	movs	r1, #32
 80057c6:	4830      	ldr	r0, [pc, #192]	; (8005888 <runBLTask+0x298>)
 80057c8:	f002 fd52 	bl	8008270 <HAL_GPIO_WritePin>
 80057cc:	4b29      	ldr	r3, [pc, #164]	; (8005874 <runBLTask+0x284>)
 80057ce:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	bf14      	ite	ne
 80057d6:	2301      	movne	r3, #1
 80057d8:	2300      	moveq	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	461a      	mov	r2, r3
 80057de:	2110      	movs	r1, #16
 80057e0:	4829      	ldr	r0, [pc, #164]	; (8005888 <runBLTask+0x298>)
 80057e2:	f002 fd45 	bl	8008270 <HAL_GPIO_WritePin>
 80057e6:	4b23      	ldr	r3, [pc, #140]	; (8005874 <runBLTask+0x284>)
 80057e8:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80057ec:	4b27      	ldr	r3, [pc, #156]	; (800588c <runBLTask+0x29c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	635a      	str	r2, [r3, #52]	; 0x34
 80057f2:	4b20      	ldr	r3, [pc, #128]	; (8005874 <runBLTask+0x284>)
 80057f4:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80057f8:	4b24      	ldr	r3, [pc, #144]	; (800588c <runBLTask+0x29c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 80057fe:	4821      	ldr	r0, [pc, #132]	; (8005884 <runBLTask+0x294>)
 8005800:	f7fd feae 	bl	8003560 <RobotTurn>
			  osDelay(10);
 8005804:	200a      	movs	r0, #10
 8005806:	f007 f895 	bl	800c934 <osDelay>
			  targetDist = 2;
 800580a:	4b21      	ldr	r3, [pc, #132]	; (8005890 <runBLTask+0x2a0>)
 800580c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005810:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005812:	2200      	movs	r2, #0
 8005814:	2101      	movs	r1, #1
 8005816:	481e      	ldr	r0, [pc, #120]	; (8005890 <runBLTask+0x2a0>)
 8005818:	f7fd fa2e 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 800581c:	200a      	movs	r0, #10
 800581e:	f007 f889 	bl	800c934 <osDelay>
			  break;
 8005822:	e0a0      	b.n	8005966 <runBLTask+0x376>
		  default: // BL00 (indoor 3x1)
			  targetDist = 6;
 8005824:	4b1a      	ldr	r3, [pc, #104]	; (8005890 <runBLTask+0x2a0>)
 8005826:	4a1c      	ldr	r2, [pc, #112]	; (8005898 <runBLTask+0x2a8>)
 8005828:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 800582a:	2200      	movs	r2, #0
 800582c:	2101      	movs	r1, #1
 800582e:	4818      	ldr	r0, [pc, #96]	; (8005890 <runBLTask+0x2a0>)
 8005830:	f7fd fa22 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 8005834:	200a      	movs	r0, #10
 8005836:	f007 f87d 	bl	800c934 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_BL00], &htim8, &htim1, targetAngle);
 800583a:	4b0e      	ldr	r3, [pc, #56]	; (8005874 <runBLTask+0x284>)
 800583c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005840:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005878 <runBLTask+0x288>
 8005844:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800584c:	dd01      	ble.n	8005852 <runBLTask+0x262>
 800584e:	2373      	movs	r3, #115	; 0x73
 8005850:	e02b      	b.n	80058aa <runBLTask+0x2ba>
 8005852:	4b08      	ldr	r3, [pc, #32]	; (8005874 <runBLTask+0x284>)
 8005854:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005858:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800587c <runBLTask+0x28c>
 800585c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005864:	d51a      	bpl.n	800589c <runBLTask+0x2ac>
 8005866:	2332      	movs	r3, #50	; 0x32
 8005868:	e01f      	b.n	80058aa <runBLTask+0x2ba>
 800586a:	bf00      	nop
 800586c:	20000134 	.word	0x20000134
 8005870:	20000518 	.word	0x20000518
 8005874:	20000004 	.word	0x20000004
 8005878:	42e60000 	.word	0x42e60000
 800587c:	42480000 	.word	0x42480000
 8005880:	200002a8 	.word	0x200002a8
 8005884:	20000540 	.word	0x20000540
 8005888:	40020000 	.word	0x40020000
 800588c:	20000410 	.word	0x20000410
 8005890:	20000554 	.word	0x20000554
 8005894:	40900000 	.word	0x40900000
 8005898:	40c00000 	.word	0x40c00000
 800589c:	4b51      	ldr	r3, [pc, #324]	; (80059e4 <runBLTask+0x3f4>)
 800589e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80058a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058a6:	ee17 3a90 	vmov	r3, s15
 80058aa:	4a4f      	ldr	r2, [pc, #316]	; (80059e8 <runBLTask+0x3f8>)
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	6413      	str	r3, [r2, #64]	; 0x40
 80058b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80058b4:	f001 fc40 	bl	8007138 <HAL_Delay>
 80058b8:	4b4a      	ldr	r3, [pc, #296]	; (80059e4 <runBLTask+0x3f4>)
 80058ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058be:	4a4b      	ldr	r2, [pc, #300]	; (80059ec <runBLTask+0x3fc>)
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	4b48      	ldr	r3, [pc, #288]	; (80059e4 <runBLTask+0x3f4>)
 80058c4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bf0c      	ite	eq
 80058cc:	2301      	moveq	r3, #1
 80058ce:	2300      	movne	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	461a      	mov	r2, r3
 80058d4:	2104      	movs	r1, #4
 80058d6:	4846      	ldr	r0, [pc, #280]	; (80059f0 <runBLTask+0x400>)
 80058d8:	f002 fcca 	bl	8008270 <HAL_GPIO_WritePin>
 80058dc:	4b41      	ldr	r3, [pc, #260]	; (80059e4 <runBLTask+0x3f4>)
 80058de:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	bf14      	ite	ne
 80058e6:	2301      	movne	r3, #1
 80058e8:	2300      	moveq	r3, #0
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	2108      	movs	r1, #8
 80058f0:	483f      	ldr	r0, [pc, #252]	; (80059f0 <runBLTask+0x400>)
 80058f2:	f002 fcbd 	bl	8008270 <HAL_GPIO_WritePin>
 80058f6:	4b3b      	ldr	r3, [pc, #236]	; (80059e4 <runBLTask+0x3f4>)
 80058f8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	bf0c      	ite	eq
 8005900:	2301      	moveq	r3, #1
 8005902:	2300      	movne	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	461a      	mov	r2, r3
 8005908:	2120      	movs	r1, #32
 800590a:	4839      	ldr	r0, [pc, #228]	; (80059f0 <runBLTask+0x400>)
 800590c:	f002 fcb0 	bl	8008270 <HAL_GPIO_WritePin>
 8005910:	4b34      	ldr	r3, [pc, #208]	; (80059e4 <runBLTask+0x3f4>)
 8005912:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005916:	2b00      	cmp	r3, #0
 8005918:	bf14      	ite	ne
 800591a:	2301      	movne	r3, #1
 800591c:	2300      	moveq	r3, #0
 800591e:	b2db      	uxtb	r3, r3
 8005920:	461a      	mov	r2, r3
 8005922:	2110      	movs	r1, #16
 8005924:	4832      	ldr	r0, [pc, #200]	; (80059f0 <runBLTask+0x400>)
 8005926:	f002 fca3 	bl	8008270 <HAL_GPIO_WritePin>
 800592a:	4b2e      	ldr	r3, [pc, #184]	; (80059e4 <runBLTask+0x3f4>)
 800592c:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 8005930:	4b30      	ldr	r3, [pc, #192]	; (80059f4 <runBLTask+0x404>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	635a      	str	r2, [r3, #52]	; 0x34
 8005936:	4b2b      	ldr	r3, [pc, #172]	; (80059e4 <runBLTask+0x3f4>)
 8005938:	f8b3 2092 	ldrh.w	r2, [r3, #146]	; 0x92
 800593c:	4b2d      	ldr	r3, [pc, #180]	; (80059f4 <runBLTask+0x404>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8005942:	482a      	ldr	r0, [pc, #168]	; (80059ec <runBLTask+0x3fc>)
 8005944:	f7fd fe0c 	bl	8003560 <RobotTurn>
			  osDelay(10);
 8005948:	200a      	movs	r0, #10
 800594a:	f006 fff3 	bl	800c934 <osDelay>
			  targetDist = 2.5;
 800594e:	4b2a      	ldr	r3, [pc, #168]	; (80059f8 <runBLTask+0x408>)
 8005950:	4a2a      	ldr	r2, [pc, #168]	; (80059fc <runBLTask+0x40c>)
 8005952:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005954:	2200      	movs	r2, #0
 8005956:	2101      	movs	r1, #1
 8005958:	4827      	ldr	r0, [pc, #156]	; (80059f8 <runBLTask+0x408>)
 800595a:	f7fd f98d 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 800595e:	200a      	movs	r0, #10
 8005960:	f006 ffe8 	bl	800c934 <osDelay>
			  break;
 8005964:	bf00      	nop
		  }


		  clickOnce = 0;
 8005966:	4b26      	ldr	r3, [pc, #152]	; (8005a00 <runBLTask+0x410>)
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 800596c:	4b25      	ldr	r3, [pc, #148]	; (8005a04 <runBLTask+0x414>)
 800596e:	781a      	ldrb	r2, [r3, #0]
 8005970:	4b25      	ldr	r3, [pc, #148]	; (8005a08 <runBLTask+0x418>)
 8005972:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8005974:	4b23      	ldr	r3, [pc, #140]	; (8005a04 <runBLTask+0x414>)
 8005976:	220b      	movs	r2, #11
 8005978:	701a      	strb	r2, [r3, #0]
		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 800597a:	4b24      	ldr	r3, [pc, #144]	; (8005a0c <runBLTask+0x41c>)
 800597c:	781a      	ldrb	r2, [r3, #0]
 800597e:	4b23      	ldr	r3, [pc, #140]	; (8005a0c <runBLTask+0x41c>)
 8005980:	785b      	ldrb	r3, [r3, #1]
 8005982:	429a      	cmp	r2, r3
 8005984:	d112      	bne.n	80059ac <runBLTask+0x3bc>
				__CLEAR_CURCMD(curCmd);
 8005986:	4b22      	ldr	r3, [pc, #136]	; (8005a10 <runBLTask+0x420>)
 8005988:	2264      	movs	r2, #100	; 0x64
 800598a:	701a      	strb	r2, [r3, #0]
 800598c:	4b20      	ldr	r3, [pc, #128]	; (8005a10 <runBLTask+0x420>)
 800598e:	2200      	movs	r2, #0
 8005990:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8005992:	4a20      	ldr	r2, [pc, #128]	; (8005a14 <runBLTask+0x424>)
 8005994:	210f      	movs	r1, #15
 8005996:	4820      	ldr	r0, [pc, #128]	; (8005a18 <runBLTask+0x428>)
 8005998:	f009 fd48 	bl	800f42c <sniprintf>
 800599c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059a0:	2206      	movs	r2, #6
 80059a2:	491e      	ldr	r1, [pc, #120]	; (8005a1c <runBLTask+0x42c>)
 80059a4:	481e      	ldr	r0, [pc, #120]	; (8005a20 <runBLTask+0x430>)
 80059a6:	f005 fe8a 	bl	800b6be <HAL_UART_Transmit>
 80059aa:	e625      	b.n	80055f8 <runBLTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 80059ac:	4b17      	ldr	r3, [pc, #92]	; (8005a0c <runBLTask+0x41c>)
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	4a17      	ldr	r2, [pc, #92]	; (8005a10 <runBLTask+0x420>)
 80059b2:	4916      	ldr	r1, [pc, #88]	; (8005a0c <runBLTask+0x41c>)
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	440b      	add	r3, r1
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	4b13      	ldr	r3, [pc, #76]	; (8005a0c <runBLTask+0x41c>)
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	3301      	adds	r3, #1
 80059c2:	4a12      	ldr	r2, [pc, #72]	; (8005a0c <runBLTask+0x41c>)
 80059c4:	7892      	ldrb	r2, [r2, #2]
 80059c6:	fb93 f1f2 	sdiv	r1, r3, r2
 80059ca:	fb01 f202 	mul.w	r2, r1, r2
 80059ce:	1a9b      	subs	r3, r3, r2
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	4b0e      	ldr	r3, [pc, #56]	; (8005a0c <runBLTask+0x41c>)
 80059d4:	705a      	strb	r2, [r3, #1]
 80059d6:	4a13      	ldr	r2, [pc, #76]	; (8005a24 <runBLTask+0x434>)
 80059d8:	210f      	movs	r1, #15
 80059da:	480f      	ldr	r0, [pc, #60]	; (8005a18 <runBLTask+0x428>)
 80059dc:	f009 fd26 	bl	800f42c <sniprintf>
	  if (curTask != TASK_BL) osDelay(1000);
 80059e0:	e60a      	b.n	80055f8 <runBLTask+0x8>
 80059e2:	bf00      	nop
 80059e4:	20000004 	.word	0x20000004
 80059e8:	200002a8 	.word	0x200002a8
 80059ec:	20000540 	.word	0x20000540
 80059f0:	40020000 	.word	0x40020000
 80059f4:	20000410 	.word	0x20000410
 80059f8:	20000554 	.word	0x20000554
 80059fc:	40200000 	.word	0x40200000
 8005a00:	200005ec 	.word	0x200005ec
 8005a04:	20000134 	.word	0x20000134
 8005a08:	20000135 	.word	0x20000135
 8005a0c:	200004e4 	.word	0x200004e4
 8005a10:	20000518 	.word	0x20000518
 8005a14:	08010b40 	.word	0x08010b40
 8005a18:	2000051c 	.word	0x2000051c
 8005a1c:	08010b48 	.word	0x08010b48
 8005a20:	20000458 	.word	0x20000458
 8005a24:	08010b50 	.word	0x08010b50

08005a28 <runBRTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBRTask */
void runBRTask(void *argument)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBRTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_BR) osDelay(1000);
 8005a30:	4b9b      	ldr	r3, [pc, #620]	; (8005ca0 <runBRTask+0x278>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	2b05      	cmp	r3, #5
 8005a36:	d004      	beq.n	8005a42 <runBRTask+0x1a>
 8005a38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a3c:	f006 ff7a 	bl	800c934 <osDelay>
 8005a40:	e7f6      	b.n	8005a30 <runBRTask+0x8>
	  else {
//		  osDelay(3000); // video demo only
		  switch(curCmd.val) {
 8005a42:	4b98      	ldr	r3, [pc, #608]	; (8005ca4 <runBRTask+0x27c>)
 8005a44:	885b      	ldrh	r3, [r3, #2]
 8005a46:	2b14      	cmp	r3, #20
 8005a48:	d07f      	beq.n	8005b4a <runBRTask+0x122>
 8005a4a:	2b1e      	cmp	r3, #30
 8005a4c:	f040 8105 	bne.w	8005c5a <runBRTask+0x232>
		  case 30: // BR30 (4x2)
			  __SET_CMD_CONFIG(cfgs[CONFIG_BR30], &htim8, &htim1, targetAngle);
 8005a50:	4b95      	ldr	r3, [pc, #596]	; (8005ca8 <runBRTask+0x280>)
 8005a52:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8005a56:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8005cac <runBRTask+0x284>
 8005a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a62:	dd01      	ble.n	8005a68 <runBRTask+0x40>
 8005a64:	2373      	movs	r3, #115	; 0x73
 8005a66:	e012      	b.n	8005a8e <runBRTask+0x66>
 8005a68:	4b8f      	ldr	r3, [pc, #572]	; (8005ca8 <runBRTask+0x280>)
 8005a6a:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8005a6e:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8005cb0 <runBRTask+0x288>
 8005a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a7a:	d501      	bpl.n	8005a80 <runBRTask+0x58>
 8005a7c:	2332      	movs	r3, #50	; 0x32
 8005a7e:	e006      	b.n	8005a8e <runBRTask+0x66>
 8005a80:	4b89      	ldr	r3, [pc, #548]	; (8005ca8 <runBRTask+0x280>)
 8005a82:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8005a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a8a:	ee17 3a90 	vmov	r3, s15
 8005a8e:	4a89      	ldr	r2, [pc, #548]	; (8005cb4 <runBRTask+0x28c>)
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	6413      	str	r3, [r2, #64]	; 0x40
 8005a94:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005a98:	f001 fb4e 	bl	8007138 <HAL_Delay>
 8005a9c:	4b82      	ldr	r3, [pc, #520]	; (8005ca8 <runBRTask+0x280>)
 8005a9e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8005aa2:	4a85      	ldr	r2, [pc, #532]	; (8005cb8 <runBRTask+0x290>)
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	4b80      	ldr	r3, [pc, #512]	; (8005ca8 <runBRTask+0x280>)
 8005aa8:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	bf0c      	ite	eq
 8005ab0:	2301      	moveq	r3, #1
 8005ab2:	2300      	movne	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	2104      	movs	r1, #4
 8005aba:	4880      	ldr	r0, [pc, #512]	; (8005cbc <runBRTask+0x294>)
 8005abc:	f002 fbd8 	bl	8008270 <HAL_GPIO_WritePin>
 8005ac0:	4b79      	ldr	r3, [pc, #484]	; (8005ca8 <runBRTask+0x280>)
 8005ac2:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	bf14      	ite	ne
 8005aca:	2301      	movne	r3, #1
 8005acc:	2300      	moveq	r3, #0
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2108      	movs	r1, #8
 8005ad4:	4879      	ldr	r0, [pc, #484]	; (8005cbc <runBRTask+0x294>)
 8005ad6:	f002 fbcb 	bl	8008270 <HAL_GPIO_WritePin>
 8005ada:	4b73      	ldr	r3, [pc, #460]	; (8005ca8 <runBRTask+0x280>)
 8005adc:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	bf0c      	ite	eq
 8005ae4:	2301      	moveq	r3, #1
 8005ae6:	2300      	movne	r3, #0
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	461a      	mov	r2, r3
 8005aec:	2120      	movs	r1, #32
 8005aee:	4873      	ldr	r0, [pc, #460]	; (8005cbc <runBRTask+0x294>)
 8005af0:	f002 fbbe 	bl	8008270 <HAL_GPIO_WritePin>
 8005af4:	4b6c      	ldr	r3, [pc, #432]	; (8005ca8 <runBRTask+0x280>)
 8005af6:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	bf14      	ite	ne
 8005afe:	2301      	movne	r3, #1
 8005b00:	2300      	moveq	r3, #0
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	2110      	movs	r1, #16
 8005b08:	486c      	ldr	r0, [pc, #432]	; (8005cbc <runBRTask+0x294>)
 8005b0a:	f002 fbb1 	bl	8008270 <HAL_GPIO_WritePin>
 8005b0e:	4b66      	ldr	r3, [pc, #408]	; (8005ca8 <runBRTask+0x280>)
 8005b10:	f8b3 2120 	ldrh.w	r2, [r3, #288]	; 0x120
 8005b14:	4b6a      	ldr	r3, [pc, #424]	; (8005cc0 <runBRTask+0x298>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	635a      	str	r2, [r3, #52]	; 0x34
 8005b1a:	4b63      	ldr	r3, [pc, #396]	; (8005ca8 <runBRTask+0x280>)
 8005b1c:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
 8005b20:	4b67      	ldr	r3, [pc, #412]	; (8005cc0 <runBRTask+0x298>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8005b26:	4864      	ldr	r0, [pc, #400]	; (8005cb8 <runBRTask+0x290>)
 8005b28:	f7fd fd1a 	bl	8003560 <RobotTurn>
			  osDelay(10);
 8005b2c:	200a      	movs	r0, #10
 8005b2e:	f006 ff01 	bl	800c934 <osDelay>
			  targetDist = 5;
 8005b32:	4b64      	ldr	r3, [pc, #400]	; (8005cc4 <runBRTask+0x29c>)
 8005b34:	4a64      	ldr	r2, [pc, #400]	; (8005cc8 <runBRTask+0x2a0>)
 8005b36:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4861      	ldr	r0, [pc, #388]	; (8005cc4 <runBRTask+0x29c>)
 8005b3e:	f7fd f89b 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 8005b42:	200a      	movs	r0, #10
 8005b44:	f006 fef6 	bl	800c934 <osDelay>
			  break;
 8005b48:	e129      	b.n	8005d9e <runBRTask+0x376>
		  case 20: // BR20 (outdoor 3x1)
			  targetDist = 7;
 8005b4a:	4b5e      	ldr	r3, [pc, #376]	; (8005cc4 <runBRTask+0x29c>)
 8005b4c:	4a5f      	ldr	r2, [pc, #380]	; (8005ccc <runBRTask+0x2a4>)
 8005b4e:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005b50:	2200      	movs	r2, #0
 8005b52:	2101      	movs	r1, #1
 8005b54:	485b      	ldr	r0, [pc, #364]	; (8005cc4 <runBRTask+0x29c>)
 8005b56:	f7fd f88f 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 8005b5a:	200a      	movs	r0, #10
 8005b5c:	f006 feea 	bl	800c934 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_BR20], &htim8, &htim1, targetAngle);
 8005b60:	4b51      	ldr	r3, [pc, #324]	; (8005ca8 <runBRTask+0x280>)
 8005b62:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8005b66:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8005cac <runBRTask+0x284>
 8005b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b72:	dd01      	ble.n	8005b78 <runBRTask+0x150>
 8005b74:	2373      	movs	r3, #115	; 0x73
 8005b76:	e012      	b.n	8005b9e <runBRTask+0x176>
 8005b78:	4b4b      	ldr	r3, [pc, #300]	; (8005ca8 <runBRTask+0x280>)
 8005b7a:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8005b7e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8005cb0 <runBRTask+0x288>
 8005b82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b8a:	d501      	bpl.n	8005b90 <runBRTask+0x168>
 8005b8c:	2332      	movs	r3, #50	; 0x32
 8005b8e:	e006      	b.n	8005b9e <runBRTask+0x176>
 8005b90:	4b45      	ldr	r3, [pc, #276]	; (8005ca8 <runBRTask+0x280>)
 8005b92:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8005b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b9a:	ee17 3a90 	vmov	r3, s15
 8005b9e:	4a45      	ldr	r2, [pc, #276]	; (8005cb4 <runBRTask+0x28c>)
 8005ba0:	6812      	ldr	r2, [r2, #0]
 8005ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8005ba4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005ba8:	f001 fac6 	bl	8007138 <HAL_Delay>
 8005bac:	4b3e      	ldr	r3, [pc, #248]	; (8005ca8 <runBRTask+0x280>)
 8005bae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005bb2:	4a41      	ldr	r2, [pc, #260]	; (8005cb8 <runBRTask+0x290>)
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	4b3c      	ldr	r3, [pc, #240]	; (8005ca8 <runBRTask+0x280>)
 8005bb8:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	bf0c      	ite	eq
 8005bc0:	2301      	moveq	r3, #1
 8005bc2:	2300      	movne	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	2104      	movs	r1, #4
 8005bca:	483c      	ldr	r0, [pc, #240]	; (8005cbc <runBRTask+0x294>)
 8005bcc:	f002 fb50 	bl	8008270 <HAL_GPIO_WritePin>
 8005bd0:	4b35      	ldr	r3, [pc, #212]	; (8005ca8 <runBRTask+0x280>)
 8005bd2:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	bf14      	ite	ne
 8005bda:	2301      	movne	r3, #1
 8005bdc:	2300      	moveq	r3, #0
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	2108      	movs	r1, #8
 8005be4:	4835      	ldr	r0, [pc, #212]	; (8005cbc <runBRTask+0x294>)
 8005be6:	f002 fb43 	bl	8008270 <HAL_GPIO_WritePin>
 8005bea:	4b2f      	ldr	r3, [pc, #188]	; (8005ca8 <runBRTask+0x280>)
 8005bec:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	bf0c      	ite	eq
 8005bf4:	2301      	moveq	r3, #1
 8005bf6:	2300      	movne	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	2120      	movs	r1, #32
 8005bfe:	482f      	ldr	r0, [pc, #188]	; (8005cbc <runBRTask+0x294>)
 8005c00:	f002 fb36 	bl	8008270 <HAL_GPIO_WritePin>
 8005c04:	4b28      	ldr	r3, [pc, #160]	; (8005ca8 <runBRTask+0x280>)
 8005c06:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	bf14      	ite	ne
 8005c0e:	2301      	movne	r3, #1
 8005c10:	2300      	moveq	r3, #0
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	461a      	mov	r2, r3
 8005c16:	2110      	movs	r1, #16
 8005c18:	4828      	ldr	r0, [pc, #160]	; (8005cbc <runBRTask+0x294>)
 8005c1a:	f002 fb29 	bl	8008270 <HAL_GPIO_WritePin>
 8005c1e:	4b22      	ldr	r3, [pc, #136]	; (8005ca8 <runBRTask+0x280>)
 8005c20:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 8005c24:	4b26      	ldr	r3, [pc, #152]	; (8005cc0 <runBRTask+0x298>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	635a      	str	r2, [r3, #52]	; 0x34
 8005c2a:	4b1f      	ldr	r3, [pc, #124]	; (8005ca8 <runBRTask+0x280>)
 8005c2c:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 8005c30:	4b23      	ldr	r3, [pc, #140]	; (8005cc0 <runBRTask+0x298>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8005c36:	4820      	ldr	r0, [pc, #128]	; (8005cb8 <runBRTask+0x290>)
 8005c38:	f7fd fc92 	bl	8003560 <RobotTurn>
			  osDelay(10);
 8005c3c:	200a      	movs	r0, #10
 8005c3e:	f006 fe79 	bl	800c934 <osDelay>
			  targetDist = 3;
 8005c42:	4b20      	ldr	r3, [pc, #128]	; (8005cc4 <runBRTask+0x29c>)
 8005c44:	4a22      	ldr	r2, [pc, #136]	; (8005cd0 <runBRTask+0x2a8>)
 8005c46:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	481d      	ldr	r0, [pc, #116]	; (8005cc4 <runBRTask+0x29c>)
 8005c4e:	f7fd f813 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 8005c52:	200a      	movs	r0, #10
 8005c54:	f006 fe6e 	bl	800c934 <osDelay>
			  break;
 8005c58:	e0a1      	b.n	8005d9e <runBRTask+0x376>
		  default: // BR00 (indoor 3x1)
			  targetDist = 7;
 8005c5a:	4b1a      	ldr	r3, [pc, #104]	; (8005cc4 <runBRTask+0x29c>)
 8005c5c:	4a1b      	ldr	r2, [pc, #108]	; (8005ccc <runBRTask+0x2a4>)
 8005c5e:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005c60:	2200      	movs	r2, #0
 8005c62:	2101      	movs	r1, #1
 8005c64:	4817      	ldr	r0, [pc, #92]	; (8005cc4 <runBRTask+0x29c>)
 8005c66:	f7fd f807 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 8005c6a:	200a      	movs	r0, #10
 8005c6c:	f006 fe62 	bl	800c934 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_BR00], &htim8, &htim1, targetAngle);
 8005c70:	4b0d      	ldr	r3, [pc, #52]	; (8005ca8 <runBRTask+0x280>)
 8005c72:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005c76:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005cac <runBRTask+0x284>
 8005c7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c82:	dd01      	ble.n	8005c88 <runBRTask+0x260>
 8005c84:	2373      	movs	r3, #115	; 0x73
 8005c86:	e02c      	b.n	8005ce2 <runBRTask+0x2ba>
 8005c88:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <runBRTask+0x280>)
 8005c8a:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005c8e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005cb0 <runBRTask+0x288>
 8005c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c9a:	d51b      	bpl.n	8005cd4 <runBRTask+0x2ac>
 8005c9c:	2332      	movs	r3, #50	; 0x32
 8005c9e:	e020      	b.n	8005ce2 <runBRTask+0x2ba>
 8005ca0:	20000134 	.word	0x20000134
 8005ca4:	20000518 	.word	0x20000518
 8005ca8:	20000004 	.word	0x20000004
 8005cac:	42e60000 	.word	0x42e60000
 8005cb0:	42480000 	.word	0x42480000
 8005cb4:	200002a8 	.word	0x200002a8
 8005cb8:	20000540 	.word	0x20000540
 8005cbc:	40020000 	.word	0x40020000
 8005cc0:	20000410 	.word	0x20000410
 8005cc4:	20000554 	.word	0x20000554
 8005cc8:	40a00000 	.word	0x40a00000
 8005ccc:	40e00000 	.word	0x40e00000
 8005cd0:	40400000 	.word	0x40400000
 8005cd4:	4b51      	ldr	r3, [pc, #324]	; (8005e1c <runBRTask+0x3f4>)
 8005cd6:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cde:	ee17 3a90 	vmov	r3, s15
 8005ce2:	4a4f      	ldr	r2, [pc, #316]	; (8005e20 <runBRTask+0x3f8>)
 8005ce4:	6812      	ldr	r2, [r2, #0]
 8005ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8005ce8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005cec:	f001 fa24 	bl	8007138 <HAL_Delay>
 8005cf0:	4b4a      	ldr	r3, [pc, #296]	; (8005e1c <runBRTask+0x3f4>)
 8005cf2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005cf6:	4a4b      	ldr	r2, [pc, #300]	; (8005e24 <runBRTask+0x3fc>)
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	4b48      	ldr	r3, [pc, #288]	; (8005e1c <runBRTask+0x3f4>)
 8005cfc:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	bf0c      	ite	eq
 8005d04:	2301      	moveq	r3, #1
 8005d06:	2300      	movne	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	2104      	movs	r1, #4
 8005d0e:	4846      	ldr	r0, [pc, #280]	; (8005e28 <runBRTask+0x400>)
 8005d10:	f002 faae 	bl	8008270 <HAL_GPIO_WritePin>
 8005d14:	4b41      	ldr	r3, [pc, #260]	; (8005e1c <runBRTask+0x3f4>)
 8005d16:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	bf14      	ite	ne
 8005d1e:	2301      	movne	r3, #1
 8005d20:	2300      	moveq	r3, #0
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	461a      	mov	r2, r3
 8005d26:	2108      	movs	r1, #8
 8005d28:	483f      	ldr	r0, [pc, #252]	; (8005e28 <runBRTask+0x400>)
 8005d2a:	f002 faa1 	bl	8008270 <HAL_GPIO_WritePin>
 8005d2e:	4b3b      	ldr	r3, [pc, #236]	; (8005e1c <runBRTask+0x3f4>)
 8005d30:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	bf0c      	ite	eq
 8005d38:	2301      	moveq	r3, #1
 8005d3a:	2300      	movne	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	2120      	movs	r1, #32
 8005d42:	4839      	ldr	r0, [pc, #228]	; (8005e28 <runBRTask+0x400>)
 8005d44:	f002 fa94 	bl	8008270 <HAL_GPIO_WritePin>
 8005d48:	4b34      	ldr	r3, [pc, #208]	; (8005e1c <runBRTask+0x3f4>)
 8005d4a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bf14      	ite	ne
 8005d52:	2301      	movne	r3, #1
 8005d54:	2300      	moveq	r3, #0
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	461a      	mov	r2, r3
 8005d5a:	2110      	movs	r1, #16
 8005d5c:	4832      	ldr	r0, [pc, #200]	; (8005e28 <runBRTask+0x400>)
 8005d5e:	f002 fa87 	bl	8008270 <HAL_GPIO_WritePin>
 8005d62:	4b2e      	ldr	r3, [pc, #184]	; (8005e1c <runBRTask+0x3f4>)
 8005d64:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8005d68:	4b30      	ldr	r3, [pc, #192]	; (8005e2c <runBRTask+0x404>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	635a      	str	r2, [r3, #52]	; 0x34
 8005d6e:	4b2b      	ldr	r3, [pc, #172]	; (8005e1c <runBRTask+0x3f4>)
 8005d70:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	; 0xa2
 8005d74:	4b2d      	ldr	r3, [pc, #180]	; (8005e2c <runBRTask+0x404>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8005d7a:	482a      	ldr	r0, [pc, #168]	; (8005e24 <runBRTask+0x3fc>)
 8005d7c:	f7fd fbf0 	bl	8003560 <RobotTurn>
			  osDelay(10);
 8005d80:	200a      	movs	r0, #10
 8005d82:	f006 fdd7 	bl	800c934 <osDelay>
			  targetDist = 3;
 8005d86:	4b2a      	ldr	r3, [pc, #168]	; (8005e30 <runBRTask+0x408>)
 8005d88:	4a2a      	ldr	r2, [pc, #168]	; (8005e34 <runBRTask+0x40c>)
 8005d8a:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2101      	movs	r1, #1
 8005d90:	4827      	ldr	r0, [pc, #156]	; (8005e30 <runBRTask+0x408>)
 8005d92:	f7fc ff71 	bl	8002c78 <RobotMoveDist>
			  osDelay(10);
 8005d96:	200a      	movs	r0, #10
 8005d98:	f006 fdcc 	bl	800c934 <osDelay>
			  break;
 8005d9c:	bf00      	nop
		  }


		  clickOnce = 0;
 8005d9e:	4b26      	ldr	r3, [pc, #152]	; (8005e38 <runBRTask+0x410>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8005da4:	4b25      	ldr	r3, [pc, #148]	; (8005e3c <runBRTask+0x414>)
 8005da6:	781a      	ldrb	r2, [r3, #0]
 8005da8:	4b25      	ldr	r3, [pc, #148]	; (8005e40 <runBRTask+0x418>)
 8005daa:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8005dac:	4b23      	ldr	r3, [pc, #140]	; (8005e3c <runBRTask+0x414>)
 8005dae:	220b      	movs	r2, #11
 8005db0:	701a      	strb	r2, [r3, #0]
		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8005db2:	4b24      	ldr	r3, [pc, #144]	; (8005e44 <runBRTask+0x41c>)
 8005db4:	781a      	ldrb	r2, [r3, #0]
 8005db6:	4b23      	ldr	r3, [pc, #140]	; (8005e44 <runBRTask+0x41c>)
 8005db8:	785b      	ldrb	r3, [r3, #1]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d112      	bne.n	8005de4 <runBRTask+0x3bc>
				__CLEAR_CURCMD(curCmd);
 8005dbe:	4b22      	ldr	r3, [pc, #136]	; (8005e48 <runBRTask+0x420>)
 8005dc0:	2264      	movs	r2, #100	; 0x64
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	4b20      	ldr	r3, [pc, #128]	; (8005e48 <runBRTask+0x420>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8005dca:	4a20      	ldr	r2, [pc, #128]	; (8005e4c <runBRTask+0x424>)
 8005dcc:	210f      	movs	r1, #15
 8005dce:	4820      	ldr	r0, [pc, #128]	; (8005e50 <runBRTask+0x428>)
 8005dd0:	f009 fb2c 	bl	800f42c <sniprintf>
 8005dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dd8:	2206      	movs	r2, #6
 8005dda:	491e      	ldr	r1, [pc, #120]	; (8005e54 <runBRTask+0x42c>)
 8005ddc:	481e      	ldr	r0, [pc, #120]	; (8005e58 <runBRTask+0x430>)
 8005dde:	f005 fc6e 	bl	800b6be <HAL_UART_Transmit>
 8005de2:	e625      	b.n	8005a30 <runBRTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005de4:	4b17      	ldr	r3, [pc, #92]	; (8005e44 <runBRTask+0x41c>)
 8005de6:	785b      	ldrb	r3, [r3, #1]
 8005de8:	4a17      	ldr	r2, [pc, #92]	; (8005e48 <runBRTask+0x420>)
 8005dea:	4916      	ldr	r1, [pc, #88]	; (8005e44 <runBRTask+0x41c>)
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	440b      	add	r3, r1
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	4b13      	ldr	r3, [pc, #76]	; (8005e44 <runBRTask+0x41c>)
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	4a12      	ldr	r2, [pc, #72]	; (8005e44 <runBRTask+0x41c>)
 8005dfc:	7892      	ldrb	r2, [r2, #2]
 8005dfe:	fb93 f1f2 	sdiv	r1, r3, r2
 8005e02:	fb01 f202 	mul.w	r2, r1, r2
 8005e06:	1a9b      	subs	r3, r3, r2
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	4b0e      	ldr	r3, [pc, #56]	; (8005e44 <runBRTask+0x41c>)
 8005e0c:	705a      	strb	r2, [r3, #1]
 8005e0e:	4a13      	ldr	r2, [pc, #76]	; (8005e5c <runBRTask+0x434>)
 8005e10:	210f      	movs	r1, #15
 8005e12:	480f      	ldr	r0, [pc, #60]	; (8005e50 <runBRTask+0x428>)
 8005e14:	f009 fb0a 	bl	800f42c <sniprintf>
	  if (curTask != TASK_BR) osDelay(1000);
 8005e18:	e60a      	b.n	8005a30 <runBRTask+0x8>
 8005e1a:	bf00      	nop
 8005e1c:	20000004 	.word	0x20000004
 8005e20:	200002a8 	.word	0x200002a8
 8005e24:	20000540 	.word	0x20000540
 8005e28:	40020000 	.word	0x40020000
 8005e2c:	20000410 	.word	0x20000410
 8005e30:	20000554 	.word	0x20000554
 8005e34:	40400000 	.word	0x40400000
 8005e38:	200005ec 	.word	0x200005ec
 8005e3c:	20000134 	.word	0x20000134
 8005e40:	20000135 	.word	0x20000135
 8005e44:	200004e4 	.word	0x200004e4
 8005e48:	20000518 	.word	0x20000518
 8005e4c:	08010b40 	.word	0x08010b40
 8005e50:	2000051c 	.word	0x2000051c
 8005e54:	08010b48 	.word	0x08010b48
 8005e58:	20000458 	.word	0x20000458
 8005e5c:	08010b50 	.word	0x08010b50

08005e60 <runFastestPathTask_V2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFastestPathTask_V2 */
void runFastestPathTask_V2(void *argument)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFastestPathTask_V2 */
	const float FL_Offset_Y = 1.5;
 8005e68:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005e6c:	60fb      	str	r3, [r7, #12]
	uint8_t turnSize = 2;
 8005e6e:	2302      	movs	r3, #2
 8005e70:	72bb      	strb	r3, [r7, #10]
	uint8_t speedModeFP = SPEED_MODE_2;
 8005e72:	2302      	movs	r3, #2
 8005e74:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_FASTESTPATH_V2) osDelay(1000);
 8005e76:	4b56      	ldr	r3, [pc, #344]	; (8005fd0 <runFastestPathTask_V2+0x170>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b09      	cmp	r3, #9
 8005e7c:	d004      	beq.n	8005e88 <runFastestPathTask_V2+0x28>
 8005e7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e82:	f006 fd57 	bl	800c934 <osDelay>
 8005e86:	e09f      	b.n	8005fc8 <runFastestPathTask_V2+0x168>
	  else {
		  turnSize = curCmd.val;
 8005e88:	4b52      	ldr	r3, [pc, #328]	; (8005fd4 <runFastestPathTask_V2+0x174>)
 8005e8a:	885b      	ldrh	r3, [r3, #2]
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	72bb      	strb	r3, [r7, #10]
		  speedModeFP = (turnSize == 1 || turnSize == 2) ? SPEED_MODE_2 : SPEED_MODE_1;
 8005e90:	7abb      	ldrb	r3, [r7, #10]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d002      	beq.n	8005e9c <runFastestPathTask_V2+0x3c>
 8005e96:	7abb      	ldrb	r3, [r7, #10]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d101      	bne.n	8005ea0 <runFastestPathTask_V2+0x40>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e000      	b.n	8005ea2 <runFastestPathTask_V2+0x42>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	72fb      	strb	r3, [r7, #11]
//		  if (turnSize == 3 || turnSize == 4) speedModeFP = SPEED_MODE_1;
//		   STEP 1: move forward until x cm behind the obstacle
//		  if (step == 0) {
			 targetDist = 70;
 8005ea4:	4b4c      	ldr	r3, [pc, #304]	; (8005fd8 <runFastestPathTask_V2+0x178>)
 8005ea6:	4a4d      	ldr	r2, [pc, #308]	; (8005fdc <runFastestPathTask_V2+0x17c>)
 8005ea8:	601a      	str	r2, [r3, #0]
			 RobotMoveDist(&targetDist, DIR_FORWARD, speedModeFP);
 8005eaa:	7afb      	ldrb	r3, [r7, #11]
 8005eac:	461a      	mov	r2, r3
 8005eae:	2101      	movs	r1, #1
 8005eb0:	4849      	ldr	r0, [pc, #292]	; (8005fd8 <runFastestPathTask_V2+0x178>)
 8005eb2:	f7fc fee1 	bl	8002c78 <RobotMoveDist>
		  switch (turnSize) {
 8005eb6:	7abb      	ldrb	r3, [r7, #10]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d81e      	bhi.n	8005efc <runFastestPathTask_V2+0x9c>
 8005ebe:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <runFastestPathTask_V2+0x64>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005ed5 	.word	0x08005ed5
 8005ec8:	08005ee9 	.word	0x08005ee9
 8005ecc:	08005ed5 	.word	0x08005ed5
 8005ed0:	08005ee9 	.word	0x08005ee9
		  case 1:
		  case 3:
			  targetDist = 20 + 7 + FL_Offset_Y;
 8005ed4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ed8:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
 8005edc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ee0:	4b3d      	ldr	r3, [pc, #244]	; (8005fd8 <runFastestPathTask_V2+0x178>)
 8005ee2:	edc3 7a00 	vstr	s15, [r3]
			  break;
 8005ee6:	e00a      	b.n	8005efe <runFastestPathTask_V2+0x9e>
		  case 2:
		  case 4:
			  targetDist = 40 + 7 + FL_Offset_Y;
 8005ee8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005eec:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8005fe0 <runFastestPathTask_V2+0x180>
 8005ef0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ef4:	4b38      	ldr	r3, [pc, #224]	; (8005fd8 <runFastestPathTask_V2+0x178>)
 8005ef6:	edc3 7a00 	vstr	s15, [r3]
			  break;
 8005efa:	e000      	b.n	8005efe <runFastestPathTask_V2+0x9e>
		  default:
			  break;
 8005efc:	bf00      	nop
		  }

			  RobotMoveDistObstacle(&targetDist, speedModeFP);
 8005efe:	7afb      	ldrb	r3, [r7, #11]
 8005f00:	4619      	mov	r1, r3
 8005f02:	4835      	ldr	r0, [pc, #212]	; (8005fd8 <runFastestPathTask_V2+0x178>)
 8005f04:	f7fd f84c 	bl	8002fa0 <RobotMoveDistObstacle>
//		  } else if (step == 1) {
			  // STEP 2: turn left
			  FASTESTPATH_TURN_LEFT_90X(&turnSize);
 8005f08:	f107 030a 	add.w	r3, r7, #10
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fd fced 	bl	80038ec <FASTESTPATH_TURN_LEFT_90X>
//		  } else if (step == 2) {
			  // STEP 3: turn right 180
			  FASTESTPATH_TURN_RIGHT_180X(&turnSize);
 8005f12:	f107 030a 	add.w	r3, r7, #10
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fd fdba 	bl	8003a90 <FASTESTPATH_TURN_RIGHT_180X>
//		  } else if (step == 3) {
			  // STEP 4: move right by 94cm
			  switch (turnSize) {
 8005f1c:	7abb      	ldrb	r3, [r7, #10]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d813      	bhi.n	8005f4c <runFastestPathTask_V2+0xec>
 8005f24:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <runFastestPathTask_V2+0xcc>)
 8005f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2a:	bf00      	nop
 8005f2c:	08005f3d 	.word	0x08005f3d
 8005f30:	08005f45 	.word	0x08005f45
 8005f34:	08005f3d 	.word	0x08005f3d
 8005f38:	08005f45 	.word	0x08005f45
			  case 1:
			  case 3:
				  targetDist = 52;
 8005f3c:	4b26      	ldr	r3, [pc, #152]	; (8005fd8 <runFastestPathTask_V2+0x178>)
 8005f3e:	4a29      	ldr	r2, [pc, #164]	; (8005fe4 <runFastestPathTask_V2+0x184>)
 8005f40:	601a      	str	r2, [r3, #0]
				  break;
 8005f42:	e004      	b.n	8005f4e <runFastestPathTask_V2+0xee>
			  case 2:
			  case 4:
				  targetDist = 70;
 8005f44:	4b24      	ldr	r3, [pc, #144]	; (8005fd8 <runFastestPathTask_V2+0x178>)
 8005f46:	4a25      	ldr	r2, [pc, #148]	; (8005fdc <runFastestPathTask_V2+0x17c>)
 8005f48:	601a      	str	r2, [r3, #0]
//				  targetDist = 60;
				  break;
 8005f4a:	e000      	b.n	8005f4e <runFastestPathTask_V2+0xee>
			  default:
				  break;
 8005f4c:	bf00      	nop
			  }
			  RobotMoveDist(&targetDist, DIR_FORWARD, speedModeFP);
 8005f4e:	7afb      	ldrb	r3, [r7, #11]
 8005f50:	461a      	mov	r2, r3
 8005f52:	2101      	movs	r1, #1
 8005f54:	4820      	ldr	r0, [pc, #128]	; (8005fd8 <runFastestPathTask_V2+0x178>)
 8005f56:	f7fc fe8f 	bl	8002c78 <RobotMoveDist>
//		  } else if (step == 4) {
			  // STEP 5: turn right 180
			  FASTESTPATH_TURN_RIGHT_180X(&turnSize);
 8005f5a:	f107 030a 	add.w	r3, r7, #10
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fd fd96 	bl	8003a90 <FASTESTPATH_TURN_RIGHT_180X>
//		  } else if (step == 5) {
			  // STEP 6: turn left (back to initial path)
//			  FASTESTPATH_TURN_LEFT_90X(&turnSize);
			  FASTESTPATH_TURN_LEFT_90X_RETURN(&turnSize);
 8005f64:	f107 030a 	add.w	r3, r7, #10
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fd fd1b 	bl	80039a4 <FASTESTPATH_TURN_LEFT_90X_RETURN>
//		  } else if (step == 6) {
			  // STEP 7: move back to carpack
			  targetDist = 60;
 8005f6e:	4b1a      	ldr	r3, [pc, #104]	; (8005fd8 <runFastestPathTask_V2+0x178>)
 8005f70:	4a1d      	ldr	r2, [pc, #116]	; (8005fe8 <runFastestPathTask_V2+0x188>)
 8005f72:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, speedModeFP);
 8005f74:	7afb      	ldrb	r3, [r7, #11]
 8005f76:	461a      	mov	r2, r3
 8005f78:	2101      	movs	r1, #1
 8005f7a:	4817      	ldr	r0, [pc, #92]	; (8005fd8 <runFastestPathTask_V2+0x178>)
 8005f7c:	f7fc fe7c 	bl	8002c78 <RobotMoveDist>
			  targetDist = 15;
 8005f80:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <runFastestPathTask_V2+0x178>)
 8005f82:	4a1a      	ldr	r2, [pc, #104]	; (8005fec <runFastestPathTask_V2+0x18c>)
 8005f84:	601a      	str	r2, [r3, #0]
			  RobotMoveDistObstacle(&targetDist, speedModeFP);
 8005f86:	7afb      	ldrb	r3, [r7, #11]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4813      	ldr	r0, [pc, #76]	; (8005fd8 <runFastestPathTask_V2+0x178>)
 8005f8c:	f7fd f808 	bl	8002fa0 <RobotMoveDistObstacle>
//		  }

//		  step = (step + 1) % 7;

			// DONE.
			prevTask = curTask;
 8005f90:	4b0f      	ldr	r3, [pc, #60]	; (8005fd0 <runFastestPathTask_V2+0x170>)
 8005f92:	781a      	ldrb	r2, [r3, #0]
 8005f94:	4b16      	ldr	r3, [pc, #88]	; (8005ff0 <runFastestPathTask_V2+0x190>)
 8005f96:	701a      	strb	r2, [r3, #0]
			curTask = TASK_NONE;
 8005f98:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <runFastestPathTask_V2+0x170>)
 8005f9a:	220b      	movs	r2, #11
 8005f9c:	701a      	strb	r2, [r3, #0]
//			__ACK_TASK_DONE(&huart3, rxMsg);
			snprintf((char *)rxMsg, sizeof(rxMsg) - 1, "done!"); \
 8005f9e:	4a15      	ldr	r2, [pc, #84]	; (8005ff4 <runFastestPathTask_V2+0x194>)
 8005fa0:	210f      	movs	r1, #15
 8005fa2:	4815      	ldr	r0, [pc, #84]	; (8005ff8 <runFastestPathTask_V2+0x198>)
 8005fa4:	f009 fa42 	bl	800f42c <sniprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) "ACK|X\r\n", 7, 0xFFFF); \
 8005fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fac:	2207      	movs	r2, #7
 8005fae:	4913      	ldr	r1, [pc, #76]	; (8005ffc <runFastestPathTask_V2+0x19c>)
 8005fb0:	4813      	ldr	r0, [pc, #76]	; (8006000 <runFastestPathTask_V2+0x1a0>)
 8005fb2:	f005 fb84 	bl	800b6be <HAL_UART_Transmit>
			__CLEAR_CURCMD(curCmd);
 8005fb6:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <runFastestPathTask_V2+0x174>)
 8005fb8:	2264      	movs	r2, #100	; 0x64
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <runFastestPathTask_V2+0x174>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	805a      	strh	r2, [r3, #2]
			clickOnce = 0;
 8005fc2:	4b10      	ldr	r3, [pc, #64]	; (8006004 <runFastestPathTask_V2+0x1a4>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]
	  }
    osDelay(1);
 8005fc8:	2001      	movs	r0, #1
 8005fca:	f006 fcb3 	bl	800c934 <osDelay>
	  if (curTask != TASK_FASTESTPATH_V2) osDelay(1000);
 8005fce:	e752      	b.n	8005e76 <runFastestPathTask_V2+0x16>
 8005fd0:	20000134 	.word	0x20000134
 8005fd4:	20000518 	.word	0x20000518
 8005fd8:	20000554 	.word	0x20000554
 8005fdc:	428c0000 	.word	0x428c0000
 8005fe0:	423c0000 	.word	0x423c0000
 8005fe4:	42500000 	.word	0x42500000
 8005fe8:	42700000 	.word	0x42700000
 8005fec:	41700000 	.word	0x41700000
 8005ff0:	20000135 	.word	0x20000135
 8005ff4:	08010b40 	.word	0x08010b40
 8005ff8:	2000051c 	.word	0x2000051c
 8005ffc:	08010b64 	.word	0x08010b64
 8006000:	20000458 	.word	0x20000458
 8006004:	200005ec 	.word	0x200005ec

08006008 <HCSR04_Read>:
  }
  /* USER CODE END runFastestPathTask_V2 */
}

void HCSR04_Read(void) //Call when u want to get reading from US
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_SET);
 800600c:	2201      	movs	r2, #1
 800600e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006012:	480b      	ldr	r0, [pc, #44]	; (8006040 <HCSR04_Read+0x38>)
 8006014:	f002 f92c 	bl	8008270 <HAL_GPIO_WritePin>
	delay_us(10);
 8006018:	200a      	movs	r0, #10
 800601a:	f000 f815 	bl	8006048 <delay_us>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 800601e:	2200      	movs	r2, #0
 8006020:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006024:	4806      	ldr	r0, [pc, #24]	; (8006040 <HCSR04_Read+0x38>)
 8006026:	f002 f923 	bl	8008270 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 800602a:	4b06      	ldr	r3, [pc, #24]	; (8006044 <HCSR04_Read+0x3c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	4b04      	ldr	r3, [pc, #16]	; (8006044 <HCSR04_Read+0x3c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f042 0202 	orr.w	r2, r2, #2
 8006038:	60da      	str	r2, [r3, #12]
}
 800603a:	bf00      	nop
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	40020c00 	.word	0x40020c00
 8006044:	20000380 	.word	0x20000380

08006048 <delay_us>:
void delay_us(uint16_t us)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	4603      	mov	r3, r0
 8006050:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 8006052:	4b09      	ldr	r3, [pc, #36]	; (8006078 <delay_us+0x30>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2200      	movs	r2, #0
 8006058:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 800605a:	bf00      	nop
 800605c:	4b06      	ldr	r3, [pc, #24]	; (8006078 <delay_us+0x30>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006062:	88fb      	ldrh	r3, [r7, #6]
 8006064:	429a      	cmp	r2, r3
 8006066:	d3f9      	bcc.n	800605c <delay_us+0x14>
}
 8006068:	bf00      	nop
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	20000380 	.word	0x20000380
 800607c:	00000000 	.word	0x00000000

08006080 <HAL_TIM_IC_CaptureCallback>:
//#define ECHO_PIN PE9
//#define ECHO_PORT PEB
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	7f1b      	ldrb	r3, [r3, #28]
 800608c:	2b01      	cmp	r3, #1
 800608e:	f040 8083 	bne.w	8006198 <HAL_TIM_IC_CaptureCallback+0x118>
		if (Is_First_Captured == 0) {
 8006092:	4b45      	ldr	r3, [pc, #276]	; (80061a8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d11a      	bne.n	80060d0 <HAL_TIM_IC_CaptureCallback+0x50>
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800609a:	2100      	movs	r1, #0
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f004 fd39 	bl	800ab14 <HAL_TIM_ReadCapturedValue>
 80060a2:	4603      	mov	r3, r0
 80060a4:	4a41      	ldr	r2, [pc, #260]	; (80061ac <HAL_TIM_IC_CaptureCallback+0x12c>)
 80060a6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;
 80060a8:	4b3f      	ldr	r3, [pc, #252]	; (80061a8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80060aa:	2201      	movs	r2, #1
 80060ac:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6a1a      	ldr	r2, [r3, #32]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 020a 	bic.w	r2, r2, #10
 80060bc:	621a      	str	r2, [r3, #32]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6a1a      	ldr	r2, [r3, #32]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f042 0202 	orr.w	r2, r2, #2
 80060cc:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 80060ce:	e063      	b.n	8006198 <HAL_TIM_IC_CaptureCallback+0x118>
		} else if (Is_First_Captured == 1) {
 80060d0:	4b35      	ldr	r3, [pc, #212]	; (80061a8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d15f      	bne.n	8006198 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80060d8:	2100      	movs	r1, #0
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f004 fd1a 	bl	800ab14 <HAL_TIM_ReadCapturedValue>
 80060e0:	4603      	mov	r3, r0
 80060e2:	4a33      	ldr	r2, [pc, #204]	; (80061b0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80060e4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2200      	movs	r2, #0
 80060ec:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 80060ee:	4b30      	ldr	r3, [pc, #192]	; (80061b0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b2e      	ldr	r3, [pc, #184]	; (80061ac <HAL_TIM_IC_CaptureCallback+0x12c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d907      	bls.n	800610a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 80060fa:	4b2d      	ldr	r3, [pc, #180]	; (80061b0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4b2b      	ldr	r3, [pc, #172]	; (80061ac <HAL_TIM_IC_CaptureCallback+0x12c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	4a2b      	ldr	r2, [pc, #172]	; (80061b4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	e00f      	b.n	800612a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 800610a:	4b28      	ldr	r3, [pc, #160]	; (80061ac <HAL_TIM_IC_CaptureCallback+0x12c>)
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	4b28      	ldr	r3, [pc, #160]	; (80061b0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	429a      	cmp	r2, r3
 8006114:	d909      	bls.n	800612a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (65535 - IC_Val1) + IC_Val2;
 8006116:	4b26      	ldr	r3, [pc, #152]	; (80061b0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	4b24      	ldr	r3, [pc, #144]	; (80061ac <HAL_TIM_IC_CaptureCallback+0x12c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8006124:	33ff      	adds	r3, #255	; 0xff
 8006126:	4a23      	ldr	r2, [pc, #140]	; (80061b4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8006128:	6013      	str	r3, [r2, #0]
			Distance = Difference * .0343 / 2;
 800612a:	4b22      	ldr	r3, [pc, #136]	; (80061b4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4618      	mov	r0, r3
 8006130:	f7fa f9e0 	bl	80004f4 <__aeabi_ui2d>
 8006134:	a31a      	add	r3, pc, #104	; (adr r3, 80061a0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f7fa fa55 	bl	80005e8 <__aeabi_dmul>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4610      	mov	r0, r2
 8006144:	4619      	mov	r1, r3
 8006146:	f04f 0200 	mov.w	r2, #0
 800614a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800614e:	f7fa fb75 	bl	800083c <__aeabi_ddiv>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4610      	mov	r0, r2
 8006158:	4619      	mov	r1, r3
 800615a:	f7fa fcdf 	bl	8000b1c <__aeabi_d2uiz>
 800615e:	4603      	mov	r3, r0
 8006160:	b29a      	uxth	r2, r3
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8006164:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0;
 8006166:	4b10      	ldr	r3, [pc, #64]	; (80061a8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6a1a      	ldr	r2, [r3, #32]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 020a 	bic.w	r2, r2, #10
 800617a:	621a      	str	r2, [r3, #32]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6a12      	ldr	r2, [r2, #32]
 8006186:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8006188:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <HAL_TIM_IC_CaptureCallback+0x13c>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 0202 	bic.w	r2, r2, #2
 8006196:	60da      	str	r2, [r3, #12]
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	04816f00 	.word	0x04816f00
 80061a4:	3fa18fc5 	.word	0x3fa18fc5
 80061a8:	200005cc 	.word	0x200005cc
 80061ac:	200005c4 	.word	0x200005c4
 80061b0:	200005c8 	.word	0x200005c8
 80061b4:	200005d0 	.word	0x200005d0
 80061b8:	200005d4 	.word	0x200005d4
 80061bc:	20000380 	.word	0x20000380

080061c0 <sensorTask>:
void sensorTask(void *argument) {
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
	uint8_t usVal[20] = { 0 };
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	f107 0310 	add.w	r3, r7, #16
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	605a      	str	r2, [r3, #4]
 80061d6:	609a      	str	r2, [r3, #8]
 80061d8:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN StartUltrasonicTask */
		HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);  // HC-SR04 Sensor
 80061da:	2100      	movs	r1, #0
 80061dc:	4813      	ldr	r0, [pc, #76]	; (800622c <sensorTask+0x6c>)
 80061de:	f003 fe61 	bl	8009ea4 <HAL_TIM_IC_Start_IT>
		/* Infinite loop */
		for (;;) {
			HCSR04_Read();
 80061e2:	f7ff ff11 	bl	8006008 <HCSR04_Read>
			sprintf(usVal, "Distance: %d \0", (int) Distance);
 80061e6:	4b12      	ldr	r3, [pc, #72]	; (8006230 <sensorTask+0x70>)
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	f107 030c 	add.w	r3, r7, #12
 80061f0:	4910      	ldr	r1, [pc, #64]	; (8006234 <sensorTask+0x74>)
 80061f2:	4618      	mov	r0, r3
 80061f4:	f009 f94e 	bl	800f494 <siprintf>
			OLED_ShowString(0, 20, usVal);
 80061f8:	f107 030c 	add.w	r3, r7, #12
 80061fc:	461a      	mov	r2, r3
 80061fe:	2114      	movs	r1, #20
 8006200:	2000      	movs	r0, #0
 8006202:	f000 fa91 	bl	8006728 <OLED_ShowString>

			if (Distance <= usThreshold && usFlag == 1) {
 8006206:	4b0a      	ldr	r3, [pc, #40]	; (8006230 <sensorTask+0x70>)
 8006208:	881a      	ldrh	r2, [r3, #0]
 800620a:	4b0b      	ldr	r3, [pc, #44]	; (8006238 <sensorTask+0x78>)
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	429a      	cmp	r2, r3
 8006210:	d808      	bhi.n	8006224 <sensorTask+0x64>
 8006212:	4b0a      	ldr	r3, [pc, #40]	; (800623c <sensorTask+0x7c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d104      	bne.n	8006224 <sensorTask+0x64>
				usFlag = 0;
 800621a:	4b08      	ldr	r3, [pc, #32]	; (800623c <sensorTask+0x7c>)
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]
				//moveCarStop();
				motorStop();
 8006220:	f000 f832 	bl	8006288 <motorStop>
			}

			osDelay(100);
 8006224:	2064      	movs	r0, #100	; 0x64
 8006226:	f006 fb85 	bl	800c934 <osDelay>
			HCSR04_Read();
 800622a:	e7da      	b.n	80061e2 <sensorTask+0x22>
 800622c:	20000380 	.word	0x20000380
 8006230:	200005d4 	.word	0x200005d4
 8006234:	08010b90 	.word	0x08010b90
 8006238:	2000013c 	.word	0x2000013c
 800623c:	200005d8 	.word	0x200005d8

08006240 <setLeftPWM>:
		}
		/* USER CODE END StartUltrasonicTask */

}
void setLeftPWM(uint16_t dutyCycle) {
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	4603      	mov	r3, r0
 8006248:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, dutyCycle);
 800624a:	4b05      	ldr	r3, [pc, #20]	; (8006260 <setLeftPWM+0x20>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	88fa      	ldrh	r2, [r7, #6]
 8006250:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	20000410 	.word	0x20000410

08006264 <setRightPWM>:

void setRightPWM(uint16_t dutyCycle) {
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	4603      	mov	r3, r0
 800626c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, dutyCycle);
 800626e:	4b05      	ldr	r3, [pc, #20]	; (8006284 <setRightPWM+0x20>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	88fa      	ldrh	r2, [r7, #6]
 8006274:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	20000410 	.word	0x20000410

08006288 <motorStop>:

void motorStop() {
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
	// ------- left motor
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800628c:	2200      	movs	r2, #0
 800628e:	2120      	movs	r1, #32
 8006290:	480c      	ldr	r0, [pc, #48]	; (80062c4 <motorStop+0x3c>)
 8006292:	f001 ffed 	bl	8008270 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8006296:	2200      	movs	r2, #0
 8006298:	2110      	movs	r1, #16
 800629a:	480a      	ldr	r0, [pc, #40]	; (80062c4 <motorStop+0x3c>)
 800629c:	f001 ffe8 	bl	8008270 <HAL_GPIO_WritePin>
	// ------- right motor
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80062a0:	2200      	movs	r2, #0
 80062a2:	2104      	movs	r1, #4
 80062a4:	4807      	ldr	r0, [pc, #28]	; (80062c4 <motorStop+0x3c>)
 80062a6:	f001 ffe3 	bl	8008270 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80062aa:	2200      	movs	r2, #0
 80062ac:	2108      	movs	r1, #8
 80062ae:	4805      	ldr	r0, [pc, #20]	; (80062c4 <motorStop+0x3c>)
 80062b0:	f001 ffde 	bl	8008270 <HAL_GPIO_WritePin>
	setLeftPWM(0);
 80062b4:	2000      	movs	r0, #0
 80062b6:	f7ff ffc3 	bl	8006240 <setLeftPWM>
	setRightPWM(0);
 80062ba:	2000      	movs	r0, #0
 80062bc:	f7ff ffd2 	bl	8006264 <setRightPWM>
}
 80062c0:	bf00      	nop
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	40020000 	.word	0x40020000

080062c8 <runBatteryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBatteryTask */
void runBatteryTask(void *argument)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBatteryTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start(&hadc2);
 80062d0:	4819      	ldr	r0, [pc, #100]	; (8006338 <runBatteryTask+0x70>)
 80062d2:	f000 ff99 	bl	8007208 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2,20);
 80062d6:	2114      	movs	r1, #20
 80062d8:	4817      	ldr	r0, [pc, #92]	; (8006338 <runBatteryTask+0x70>)
 80062da:	f001 f89a 	bl	8007412 <HAL_ADC_PollForConversion>
	batteryVal = HAL_ADC_GetValue(&hadc2) / 1421.752066 * 100;
 80062de:	4816      	ldr	r0, [pc, #88]	; (8006338 <runBatteryTask+0x70>)
 80062e0:	f001 fa32 	bl	8007748 <HAL_ADC_GetValue>
 80062e4:	4603      	mov	r3, r0
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fa f904 	bl	80004f4 <__aeabi_ui2d>
 80062ec:	a310      	add	r3, pc, #64	; (adr r3, 8006330 <runBatteryTask+0x68>)
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	f7fa faa3 	bl	800083c <__aeabi_ddiv>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	4610      	mov	r0, r2
 80062fc:	4619      	mov	r1, r3
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	4b0e      	ldr	r3, [pc, #56]	; (800633c <runBatteryTask+0x74>)
 8006304:	f7fa f970 	bl	80005e8 <__aeabi_dmul>
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	4610      	mov	r0, r2
 800630e:	4619      	mov	r1, r3
 8006310:	f7fa fc24 	bl	8000b5c <__aeabi_d2f>
 8006314:	4603      	mov	r3, r0
 8006316:	4a0a      	ldr	r2, [pc, #40]	; (8006340 <runBatteryTask+0x78>)
 8006318:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc2);
 800631a:	4807      	ldr	r0, [pc, #28]	; (8006338 <runBatteryTask+0x70>)
 800631c:	f001 f846 	bl	80073ac <HAL_ADC_Stop>
    osDelay(30000); // check battery level every 30 seconds
 8006320:	f247 5030 	movw	r0, #30000	; 0x7530
 8006324:	f006 fb06 	bl	800c934 <osDelay>
	HAL_ADC_Start(&hadc2);
 8006328:	e7d2      	b.n	80062d0 <runBatteryTask+0x8>
 800632a:	bf00      	nop
 800632c:	f3af 8000 	nop.w
 8006330:	1d96e9bc 	.word	0x1d96e9bc
 8006334:	40963702 	.word	0x40963702
 8006338:	2000020c 	.word	0x2000020c
 800633c:	40590000 	.word	0x40590000
 8006340:	200005b0 	.word	0x200005b0

08006344 <runMoveDistObsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runMoveDistObsTask */
void runMoveDistObsTask(void *argument)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runMoveDistObsTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_MOVE_OBS) osDelay(1000);
 800634c:	4b2d      	ldr	r3, [pc, #180]	; (8006404 <runMoveDistObsTask+0xc0>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b07      	cmp	r3, #7
 8006352:	d004      	beq.n	800635e <runMoveDistObsTask+0x1a>
 8006354:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006358:	f006 faec 	bl	800c934 <osDelay>
 800635c:	e7f6      	b.n	800634c <runMoveDistObsTask+0x8>
	  else {
		  targetDist = (float) curCmd.val;
 800635e:	4b2a      	ldr	r3, [pc, #168]	; (8006408 <runMoveDistObsTask+0xc4>)
 8006360:	885b      	ldrh	r3, [r3, #2]
 8006362:	ee07 3a90 	vmov	s15, r3
 8006366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636a:	4b28      	ldr	r3, [pc, #160]	; (800640c <runMoveDistObsTask+0xc8>)
 800636c:	edc3 7a00 	vstr	s15, [r3]
		  RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8006370:	2102      	movs	r1, #2
 8006372:	4826      	ldr	r0, [pc, #152]	; (800640c <runMoveDistObsTask+0xc8>)
 8006374:	f7fc fe14 	bl	8002fa0 <RobotMoveDistObstacle>

		  __ON_TASK_END(&htim8, prevTask, curTask);
 8006378:	4b25      	ldr	r3, [pc, #148]	; (8006410 <runMoveDistObsTask+0xcc>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2200      	movs	r2, #0
 800637e:	635a      	str	r2, [r3, #52]	; 0x34
 8006380:	4b23      	ldr	r3, [pc, #140]	; (8006410 <runMoveDistObsTask+0xcc>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2200      	movs	r2, #0
 8006386:	639a      	str	r2, [r3, #56]	; 0x38
 8006388:	4b1e      	ldr	r3, [pc, #120]	; (8006404 <runMoveDistObsTask+0xc0>)
 800638a:	781a      	ldrb	r2, [r3, #0]
 800638c:	4b21      	ldr	r3, [pc, #132]	; (8006414 <runMoveDistObsTask+0xd0>)
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <runMoveDistObsTask+0xc0>)
 8006392:	220b      	movs	r2, #11
 8006394:	701a      	strb	r2, [r3, #0]
		  clickOnce = 0;
 8006396:	4b20      	ldr	r3, [pc, #128]	; (8006418 <runMoveDistObsTask+0xd4>)
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]

		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 800639c:	4b1f      	ldr	r3, [pc, #124]	; (800641c <runMoveDistObsTask+0xd8>)
 800639e:	781a      	ldrb	r2, [r3, #0]
 80063a0:	4b1e      	ldr	r3, [pc, #120]	; (800641c <runMoveDistObsTask+0xd8>)
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d112      	bne.n	80063ce <runMoveDistObsTask+0x8a>
			__CLEAR_CURCMD(curCmd);
 80063a8:	4b17      	ldr	r3, [pc, #92]	; (8006408 <runMoveDistObsTask+0xc4>)
 80063aa:	2264      	movs	r2, #100	; 0x64
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	4b16      	ldr	r3, [pc, #88]	; (8006408 <runMoveDistObsTask+0xc4>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 80063b4:	4a1a      	ldr	r2, [pc, #104]	; (8006420 <runMoveDistObsTask+0xdc>)
 80063b6:	210f      	movs	r1, #15
 80063b8:	481a      	ldr	r0, [pc, #104]	; (8006424 <runMoveDistObsTask+0xe0>)
 80063ba:	f009 f837 	bl	800f42c <sniprintf>
 80063be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063c2:	2206      	movs	r2, #6
 80063c4:	4918      	ldr	r1, [pc, #96]	; (8006428 <runMoveDistObsTask+0xe4>)
 80063c6:	4819      	ldr	r0, [pc, #100]	; (800642c <runMoveDistObsTask+0xe8>)
 80063c8:	f005 f979 	bl	800b6be <HAL_UART_Transmit>
 80063cc:	e7be      	b.n	800634c <runMoveDistObsTask+0x8>
		} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 80063ce:	4b13      	ldr	r3, [pc, #76]	; (800641c <runMoveDistObsTask+0xd8>)
 80063d0:	785b      	ldrb	r3, [r3, #1]
 80063d2:	4a0d      	ldr	r2, [pc, #52]	; (8006408 <runMoveDistObsTask+0xc4>)
 80063d4:	4911      	ldr	r1, [pc, #68]	; (800641c <runMoveDistObsTask+0xd8>)
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	440b      	add	r3, r1
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	4b0f      	ldr	r3, [pc, #60]	; (800641c <runMoveDistObsTask+0xd8>)
 80063e0:	785b      	ldrb	r3, [r3, #1]
 80063e2:	3301      	adds	r3, #1
 80063e4:	4a0d      	ldr	r2, [pc, #52]	; (800641c <runMoveDistObsTask+0xd8>)
 80063e6:	7892      	ldrb	r2, [r2, #2]
 80063e8:	fb93 f1f2 	sdiv	r1, r3, r2
 80063ec:	fb01 f202 	mul.w	r2, r1, r2
 80063f0:	1a9b      	subs	r3, r3, r2
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	4b09      	ldr	r3, [pc, #36]	; (800641c <runMoveDistObsTask+0xd8>)
 80063f6:	705a      	strb	r2, [r3, #1]
 80063f8:	4a0d      	ldr	r2, [pc, #52]	; (8006430 <runMoveDistObsTask+0xec>)
 80063fa:	210f      	movs	r1, #15
 80063fc:	4809      	ldr	r0, [pc, #36]	; (8006424 <runMoveDistObsTask+0xe0>)
 80063fe:	f009 f815 	bl	800f42c <sniprintf>
	  if (curTask != TASK_MOVE_OBS) osDelay(1000);
 8006402:	e7a3      	b.n	800634c <runMoveDistObsTask+0x8>
 8006404:	20000134 	.word	0x20000134
 8006408:	20000518 	.word	0x20000518
 800640c:	20000554 	.word	0x20000554
 8006410:	20000410 	.word	0x20000410
 8006414:	20000135 	.word	0x20000135
 8006418:	200005ec 	.word	0x200005ec
 800641c:	200004e4 	.word	0x200004e4
 8006420:	08010b40 	.word	0x08010b40
 8006424:	2000051c 	.word	0x2000051c
 8006428:	08010b48 	.word	0x08010b48
 800642c:	20000458 	.word	0x20000458
 8006430:	08010b50 	.word	0x08010b50

08006434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006438:	b672      	cpsid	i
}
 800643a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800643c:	e7fe      	b.n	800643c <Error_Handler+0x8>
	...

08006440 <OLED_Refresh_Gram>:

#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8006446:	2300      	movs	r3, #0
 8006448:	71fb      	strb	r3, [r7, #7]
 800644a:	e026      	b.n	800649a <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	3b50      	subs	r3, #80	; 0x50
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2100      	movs	r1, #0
 8006454:	4618      	mov	r0, r3
 8006456:	f000 f82b 	bl	80064b0 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800645a:	2100      	movs	r1, #0
 800645c:	2000      	movs	r0, #0
 800645e:	f000 f827 	bl	80064b0 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8006462:	2100      	movs	r1, #0
 8006464:	2010      	movs	r0, #16
 8006466:	f000 f823 	bl	80064b0 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800646a:	2300      	movs	r3, #0
 800646c:	71bb      	strb	r3, [r7, #6]
 800646e:	e00d      	b.n	800648c <OLED_Refresh_Gram+0x4c>
 8006470:	79ba      	ldrb	r2, [r7, #6]
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	490d      	ldr	r1, [pc, #52]	; (80064ac <OLED_Refresh_Gram+0x6c>)
 8006476:	00d2      	lsls	r2, r2, #3
 8006478:	440a      	add	r2, r1
 800647a:	4413      	add	r3, r2
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2101      	movs	r1, #1
 8006480:	4618      	mov	r0, r3
 8006482:	f000 f815 	bl	80064b0 <OLED_WR_Byte>
 8006486:	79bb      	ldrb	r3, [r7, #6]
 8006488:	3301      	adds	r3, #1
 800648a:	71bb      	strb	r3, [r7, #6]
 800648c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006490:	2b00      	cmp	r3, #0
 8006492:	daed      	bge.n	8006470 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	3301      	adds	r3, #1
 8006498:	71fb      	strb	r3, [r7, #7]
 800649a:	79fb      	ldrb	r3, [r7, #7]
 800649c:	2b07      	cmp	r3, #7
 800649e:	d9d5      	bls.n	800644c <OLED_Refresh_Gram+0xc>
	}   
}
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	200005fc 	.word	0x200005fc

080064b0 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	4603      	mov	r3, r0
 80064b8:	460a      	mov	r2, r1
 80064ba:	71fb      	strb	r3, [r7, #7]
 80064bc:	4613      	mov	r3, r2
 80064be:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 80064c0:	79bb      	ldrb	r3, [r7, #6]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d006      	beq.n	80064d4 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 80064c6:	2201      	movs	r2, #1
 80064c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064cc:	481c      	ldr	r0, [pc, #112]	; (8006540 <OLED_WR_Byte+0x90>)
 80064ce:	f001 fecf 	bl	8008270 <HAL_GPIO_WritePin>
 80064d2:	e005      	b.n	80064e0 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80064d4:	2200      	movs	r2, #0
 80064d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064da:	4819      	ldr	r0, [pc, #100]	; (8006540 <OLED_WR_Byte+0x90>)
 80064dc:	f001 fec8 	bl	8008270 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80064e0:	2300      	movs	r3, #0
 80064e2:	73fb      	strb	r3, [r7, #15]
 80064e4:	e01e      	b.n	8006524 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80064e6:	2200      	movs	r2, #0
 80064e8:	2120      	movs	r1, #32
 80064ea:	4815      	ldr	r0, [pc, #84]	; (8006540 <OLED_WR_Byte+0x90>)
 80064ec:	f001 fec0 	bl	8008270 <HAL_GPIO_WritePin>
		if(dat&0x80)
 80064f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	da05      	bge.n	8006504 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80064f8:	2201      	movs	r2, #1
 80064fa:	2140      	movs	r1, #64	; 0x40
 80064fc:	4810      	ldr	r0, [pc, #64]	; (8006540 <OLED_WR_Byte+0x90>)
 80064fe:	f001 feb7 	bl	8008270 <HAL_GPIO_WritePin>
 8006502:	e004      	b.n	800650e <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8006504:	2200      	movs	r2, #0
 8006506:	2140      	movs	r1, #64	; 0x40
 8006508:	480d      	ldr	r0, [pc, #52]	; (8006540 <OLED_WR_Byte+0x90>)
 800650a:	f001 feb1 	bl	8008270 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800650e:	2201      	movs	r2, #1
 8006510:	2120      	movs	r1, #32
 8006512:	480b      	ldr	r0, [pc, #44]	; (8006540 <OLED_WR_Byte+0x90>)
 8006514:	f001 feac 	bl	8008270 <HAL_GPIO_WritePin>
		dat<<=1;   
 8006518:	79fb      	ldrb	r3, [r7, #7]
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	3301      	adds	r3, #1
 8006522:	73fb      	strb	r3, [r7, #15]
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	2b07      	cmp	r3, #7
 8006528:	d9dd      	bls.n	80064e6 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800652a:	2201      	movs	r2, #1
 800652c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006530:	4803      	ldr	r0, [pc, #12]	; (8006540 <OLED_WR_Byte+0x90>)
 8006532:	f001 fe9d 	bl	8008270 <HAL_GPIO_WritePin>
} 
 8006536:	bf00      	nop
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	40021000 	.word	0x40021000

08006544 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800654a:	2300      	movs	r3, #0
 800654c:	71fb      	strb	r3, [r7, #7]
 800654e:	e014      	b.n	800657a <OLED_Clear+0x36>
 8006550:	2300      	movs	r3, #0
 8006552:	71bb      	strb	r3, [r7, #6]
 8006554:	e00a      	b.n	800656c <OLED_Clear+0x28>
 8006556:	79ba      	ldrb	r2, [r7, #6]
 8006558:	79fb      	ldrb	r3, [r7, #7]
 800655a:	490c      	ldr	r1, [pc, #48]	; (800658c <OLED_Clear+0x48>)
 800655c:	00d2      	lsls	r2, r2, #3
 800655e:	440a      	add	r2, r1
 8006560:	4413      	add	r3, r2
 8006562:	2200      	movs	r2, #0
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	79bb      	ldrb	r3, [r7, #6]
 8006568:	3301      	adds	r3, #1
 800656a:	71bb      	strb	r3, [r7, #6]
 800656c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006570:	2b00      	cmp	r3, #0
 8006572:	daf0      	bge.n	8006556 <OLED_Clear+0x12>
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	3301      	adds	r3, #1
 8006578:	71fb      	strb	r3, [r7, #7]
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	2b07      	cmp	r3, #7
 800657e:	d9e7      	bls.n	8006550 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8006580:	f7ff ff5e 	bl	8006440 <OLED_Refresh_Gram>
}
 8006584:	bf00      	nop
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	200005fc 	.word	0x200005fc

08006590 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	4603      	mov	r3, r0
 8006598:	71fb      	strb	r3, [r7, #7]
 800659a:	460b      	mov	r3, r1
 800659c:	71bb      	strb	r3, [r7, #6]
 800659e:	4613      	mov	r3, r2
 80065a0:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80065a2:	2300      	movs	r3, #0
 80065a4:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80065a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	db41      	blt.n	8006632 <OLED_DrawPoint+0xa2>
 80065ae:	79bb      	ldrb	r3, [r7, #6]
 80065b0:	2b3f      	cmp	r3, #63	; 0x3f
 80065b2:	d83e      	bhi.n	8006632 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80065b4:	79bb      	ldrb	r3, [r7, #6]
 80065b6:	08db      	lsrs	r3, r3, #3
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	f1c3 0307 	rsb	r3, r3, #7
 80065be:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80065c0:	79bb      	ldrb	r3, [r7, #6]
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80065c8:	7b7b      	ldrb	r3, [r7, #13]
 80065ca:	f1c3 0307 	rsb	r3, r3, #7
 80065ce:	2201      	movs	r2, #1
 80065d0:	fa02 f303 	lsl.w	r3, r2, r3
 80065d4:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80065d6:	797b      	ldrb	r3, [r7, #5]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d012      	beq.n	8006602 <OLED_DrawPoint+0x72>
 80065dc:	79fa      	ldrb	r2, [r7, #7]
 80065de:	7bbb      	ldrb	r3, [r7, #14]
 80065e0:	4917      	ldr	r1, [pc, #92]	; (8006640 <OLED_DrawPoint+0xb0>)
 80065e2:	00d2      	lsls	r2, r2, #3
 80065e4:	440a      	add	r2, r1
 80065e6:	4413      	add	r3, r2
 80065e8:	7818      	ldrb	r0, [r3, #0]
 80065ea:	79fa      	ldrb	r2, [r7, #7]
 80065ec:	7bbb      	ldrb	r3, [r7, #14]
 80065ee:	7bf9      	ldrb	r1, [r7, #15]
 80065f0:	4301      	orrs	r1, r0
 80065f2:	b2c8      	uxtb	r0, r1
 80065f4:	4912      	ldr	r1, [pc, #72]	; (8006640 <OLED_DrawPoint+0xb0>)
 80065f6:	00d2      	lsls	r2, r2, #3
 80065f8:	440a      	add	r2, r1
 80065fa:	4413      	add	r3, r2
 80065fc:	4602      	mov	r2, r0
 80065fe:	701a      	strb	r2, [r3, #0]
 8006600:	e018      	b.n	8006634 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8006602:	79fa      	ldrb	r2, [r7, #7]
 8006604:	7bbb      	ldrb	r3, [r7, #14]
 8006606:	490e      	ldr	r1, [pc, #56]	; (8006640 <OLED_DrawPoint+0xb0>)
 8006608:	00d2      	lsls	r2, r2, #3
 800660a:	440a      	add	r2, r1
 800660c:	4413      	add	r3, r2
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	b25a      	sxtb	r2, r3
 8006612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006616:	43db      	mvns	r3, r3
 8006618:	b25b      	sxtb	r3, r3
 800661a:	4013      	ands	r3, r2
 800661c:	b259      	sxtb	r1, r3
 800661e:	79fa      	ldrb	r2, [r7, #7]
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	b2c8      	uxtb	r0, r1
 8006624:	4906      	ldr	r1, [pc, #24]	; (8006640 <OLED_DrawPoint+0xb0>)
 8006626:	00d2      	lsls	r2, r2, #3
 8006628:	440a      	add	r2, r1
 800662a:	4413      	add	r3, r2
 800662c:	4602      	mov	r2, r0
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	e000      	b.n	8006634 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8006632:	bf00      	nop
}
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	200005fc 	.word	0x200005fc

08006644 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8006644:	b590      	push	{r4, r7, lr}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	4604      	mov	r4, r0
 800664c:	4608      	mov	r0, r1
 800664e:	4611      	mov	r1, r2
 8006650:	461a      	mov	r2, r3
 8006652:	4623      	mov	r3, r4
 8006654:	71fb      	strb	r3, [r7, #7]
 8006656:	4603      	mov	r3, r0
 8006658:	71bb      	strb	r3, [r7, #6]
 800665a:	460b      	mov	r3, r1
 800665c:	717b      	strb	r3, [r7, #5]
 800665e:	4613      	mov	r3, r2
 8006660:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8006662:	79bb      	ldrb	r3, [r7, #6]
 8006664:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8006666:	797b      	ldrb	r3, [r7, #5]
 8006668:	3b20      	subs	r3, #32
 800666a:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800666c:	2300      	movs	r3, #0
 800666e:	73bb      	strb	r3, [r7, #14]
 8006670:	e04d      	b.n	800670e <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8006672:	793b      	ldrb	r3, [r7, #4]
 8006674:	2b0c      	cmp	r3, #12
 8006676:	d10b      	bne.n	8006690 <OLED_ShowChar+0x4c>
 8006678:	797a      	ldrb	r2, [r7, #5]
 800667a:	7bb9      	ldrb	r1, [r7, #14]
 800667c:	4828      	ldr	r0, [pc, #160]	; (8006720 <OLED_ShowChar+0xdc>)
 800667e:	4613      	mov	r3, r2
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4403      	add	r3, r0
 8006688:	440b      	add	r3, r1
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	73fb      	strb	r3, [r7, #15]
 800668e:	e007      	b.n	80066a0 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8006690:	797a      	ldrb	r2, [r7, #5]
 8006692:	7bbb      	ldrb	r3, [r7, #14]
 8006694:	4923      	ldr	r1, [pc, #140]	; (8006724 <OLED_ShowChar+0xe0>)
 8006696:	0112      	lsls	r2, r2, #4
 8006698:	440a      	add	r2, r1
 800669a:	4413      	add	r3, r2
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80066a0:	2300      	movs	r3, #0
 80066a2:	737b      	strb	r3, [r7, #13]
 80066a4:	e02d      	b.n	8006702 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80066a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	da07      	bge.n	80066be <OLED_ShowChar+0x7a>
 80066ae:	f897 2020 	ldrb.w	r2, [r7, #32]
 80066b2:	79b9      	ldrb	r1, [r7, #6]
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7ff ff6a 	bl	8006590 <OLED_DrawPoint>
 80066bc:	e00c      	b.n	80066d8 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80066be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	bf0c      	ite	eq
 80066c6:	2301      	moveq	r3, #1
 80066c8:	2300      	movne	r3, #0
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	461a      	mov	r2, r3
 80066ce:	79b9      	ldrb	r1, [r7, #6]
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff ff5c 	bl	8006590 <OLED_DrawPoint>
			temp<<=1;
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	73fb      	strb	r3, [r7, #15]
			y++;
 80066de:	79bb      	ldrb	r3, [r7, #6]
 80066e0:	3301      	adds	r3, #1
 80066e2:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80066e4:	79ba      	ldrb	r2, [r7, #6]
 80066e6:	7b3b      	ldrb	r3, [r7, #12]
 80066e8:	1ad2      	subs	r2, r2, r3
 80066ea:	793b      	ldrb	r3, [r7, #4]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d105      	bne.n	80066fc <OLED_ShowChar+0xb8>
			{
				y=y0;
 80066f0:	7b3b      	ldrb	r3, [r7, #12]
 80066f2:	71bb      	strb	r3, [r7, #6]
				x++;
 80066f4:	79fb      	ldrb	r3, [r7, #7]
 80066f6:	3301      	adds	r3, #1
 80066f8:	71fb      	strb	r3, [r7, #7]
				break;
 80066fa:	e005      	b.n	8006708 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80066fc:	7b7b      	ldrb	r3, [r7, #13]
 80066fe:	3301      	adds	r3, #1
 8006700:	737b      	strb	r3, [r7, #13]
 8006702:	7b7b      	ldrb	r3, [r7, #13]
 8006704:	2b07      	cmp	r3, #7
 8006706:	d9ce      	bls.n	80066a6 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8006708:	7bbb      	ldrb	r3, [r7, #14]
 800670a:	3301      	adds	r3, #1
 800670c:	73bb      	strb	r3, [r7, #14]
 800670e:	7bba      	ldrb	r2, [r7, #14]
 8006710:	793b      	ldrb	r3, [r7, #4]
 8006712:	429a      	cmp	r2, r3
 8006714:	d3ad      	bcc.n	8006672 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8006716:	bf00      	nop
 8006718:	bf00      	nop
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	bd90      	pop	{r4, r7, pc}
 8006720:	08010dd4 	.word	0x08010dd4
 8006724:	08011248 	.word	0x08011248

08006728 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af02      	add	r7, sp, #8
 800672e:	4603      	mov	r3, r0
 8006730:	603a      	str	r2, [r7, #0]
 8006732:	71fb      	strb	r3, [r7, #7]
 8006734:	460b      	mov	r3, r1
 8006736:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8006738:	e01f      	b.n	800677a <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800673a:	79fb      	ldrb	r3, [r7, #7]
 800673c:	2b7a      	cmp	r3, #122	; 0x7a
 800673e:	d904      	bls.n	800674a <OLED_ShowString+0x22>
 8006740:	2300      	movs	r3, #0
 8006742:	71fb      	strb	r3, [r7, #7]
 8006744:	79bb      	ldrb	r3, [r7, #6]
 8006746:	3310      	adds	r3, #16
 8006748:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800674a:	79bb      	ldrb	r3, [r7, #6]
 800674c:	2b3a      	cmp	r3, #58	; 0x3a
 800674e:	d905      	bls.n	800675c <OLED_ShowString+0x34>
 8006750:	2300      	movs	r3, #0
 8006752:	71fb      	strb	r3, [r7, #7]
 8006754:	79fb      	ldrb	r3, [r7, #7]
 8006756:	71bb      	strb	r3, [r7, #6]
 8006758:	f7ff fef4 	bl	8006544 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781a      	ldrb	r2, [r3, #0]
 8006760:	79b9      	ldrb	r1, [r7, #6]
 8006762:	79f8      	ldrb	r0, [r7, #7]
 8006764:	2301      	movs	r3, #1
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	230c      	movs	r3, #12
 800676a:	f7ff ff6b 	bl	8006644 <OLED_ShowChar>
        x+=8;
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	3308      	adds	r3, #8
 8006772:	71fb      	strb	r3, [r7, #7]
        p++;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	3301      	adds	r3, #1
 8006778:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1db      	bne.n	800673a <OLED_ShowString+0x12>
    }  
}	 
 8006782:	bf00      	nop
 8006784:	bf00      	nop
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <OLED_Init>:

void OLED_Init(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8006790:	f002 fd48 	bl	8009224 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8006794:	4b41      	ldr	r3, [pc, #260]	; (800689c <OLED_Init+0x110>)
 8006796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006798:	4a40      	ldr	r2, [pc, #256]	; (800689c <OLED_Init+0x110>)
 800679a:	f023 0301 	bic.w	r3, r3, #1
 800679e:	6713      	str	r3, [r2, #112]	; 0x70
 80067a0:	4b3e      	ldr	r3, [pc, #248]	; (800689c <OLED_Init+0x110>)
 80067a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a4:	4a3d      	ldr	r2, [pc, #244]	; (800689c <OLED_Init+0x110>)
 80067a6:	f023 0304 	bic.w	r3, r3, #4
 80067aa:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80067ac:	f002 fd4e 	bl	800924c <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80067b0:	2200      	movs	r2, #0
 80067b2:	2180      	movs	r1, #128	; 0x80
 80067b4:	483a      	ldr	r0, [pc, #232]	; (80068a0 <OLED_Init+0x114>)
 80067b6:	f001 fd5b 	bl	8008270 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80067ba:	2064      	movs	r0, #100	; 0x64
 80067bc:	f000 fcbc 	bl	8007138 <HAL_Delay>
	OLED_RST_Set();
 80067c0:	2201      	movs	r2, #1
 80067c2:	2180      	movs	r1, #128	; 0x80
 80067c4:	4836      	ldr	r0, [pc, #216]	; (80068a0 <OLED_Init+0x114>)
 80067c6:	f001 fd53 	bl	8008270 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80067ca:	2100      	movs	r1, #0
 80067cc:	20ae      	movs	r0, #174	; 0xae
 80067ce:	f7ff fe6f 	bl	80064b0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80067d2:	2100      	movs	r1, #0
 80067d4:	20d5      	movs	r0, #213	; 0xd5
 80067d6:	f7ff fe6b 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80067da:	2100      	movs	r1, #0
 80067dc:	2050      	movs	r0, #80	; 0x50
 80067de:	f7ff fe67 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80067e2:	2100      	movs	r1, #0
 80067e4:	20a8      	movs	r0, #168	; 0xa8
 80067e6:	f7ff fe63 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80067ea:	2100      	movs	r1, #0
 80067ec:	203f      	movs	r0, #63	; 0x3f
 80067ee:	f7ff fe5f 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80067f2:	2100      	movs	r1, #0
 80067f4:	20d3      	movs	r0, #211	; 0xd3
 80067f6:	f7ff fe5b 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80067fa:	2100      	movs	r1, #0
 80067fc:	2000      	movs	r0, #0
 80067fe:	f7ff fe57 	bl	80064b0 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8006802:	2100      	movs	r1, #0
 8006804:	2040      	movs	r0, #64	; 0x40
 8006806:	f7ff fe53 	bl	80064b0 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800680a:	2100      	movs	r1, #0
 800680c:	208d      	movs	r0, #141	; 0x8d
 800680e:	f7ff fe4f 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8006812:	2100      	movs	r1, #0
 8006814:	2014      	movs	r0, #20
 8006816:	f7ff fe4b 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800681a:	2100      	movs	r1, #0
 800681c:	2020      	movs	r0, #32
 800681e:	f7ff fe47 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8006822:	2100      	movs	r1, #0
 8006824:	2002      	movs	r0, #2
 8006826:	f7ff fe43 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800682a:	2100      	movs	r1, #0
 800682c:	20a1      	movs	r0, #161	; 0xa1
 800682e:	f7ff fe3f 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8006832:	2100      	movs	r1, #0
 8006834:	20c0      	movs	r0, #192	; 0xc0
 8006836:	f7ff fe3b 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800683a:	2100      	movs	r1, #0
 800683c:	20da      	movs	r0, #218	; 0xda
 800683e:	f7ff fe37 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8006842:	2100      	movs	r1, #0
 8006844:	2012      	movs	r0, #18
 8006846:	f7ff fe33 	bl	80064b0 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800684a:	2100      	movs	r1, #0
 800684c:	2081      	movs	r0, #129	; 0x81
 800684e:	f7ff fe2f 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8006852:	2100      	movs	r1, #0
 8006854:	20ef      	movs	r0, #239	; 0xef
 8006856:	f7ff fe2b 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800685a:	2100      	movs	r1, #0
 800685c:	20d9      	movs	r0, #217	; 0xd9
 800685e:	f7ff fe27 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8006862:	2100      	movs	r1, #0
 8006864:	20f1      	movs	r0, #241	; 0xf1
 8006866:	f7ff fe23 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800686a:	2100      	movs	r1, #0
 800686c:	20db      	movs	r0, #219	; 0xdb
 800686e:	f7ff fe1f 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8006872:	2100      	movs	r1, #0
 8006874:	2030      	movs	r0, #48	; 0x30
 8006876:	f7ff fe1b 	bl	80064b0 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800687a:	2100      	movs	r1, #0
 800687c:	20a4      	movs	r0, #164	; 0xa4
 800687e:	f7ff fe17 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8006882:	2100      	movs	r1, #0
 8006884:	20a6      	movs	r0, #166	; 0xa6
 8006886:	f7ff fe13 	bl	80064b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800688a:	2100      	movs	r1, #0
 800688c:	20af      	movs	r0, #175	; 0xaf
 800688e:	f7ff fe0f 	bl	80064b0 <OLED_WR_Byte>
	OLED_Clear(); 
 8006892:	f7ff fe57 	bl	8006544 <OLED_Clear>
}
 8006896:	bf00      	nop
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	40023800 	.word	0x40023800
 80068a0:	40021000 	.word	0x40021000

080068a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068aa:	2300      	movs	r3, #0
 80068ac:	607b      	str	r3, [r7, #4]
 80068ae:	4b16      	ldr	r3, [pc, #88]	; (8006908 <HAL_MspInit+0x64>)
 80068b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b2:	4a15      	ldr	r2, [pc, #84]	; (8006908 <HAL_MspInit+0x64>)
 80068b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068b8:	6453      	str	r3, [r2, #68]	; 0x44
 80068ba:	4b13      	ldr	r3, [pc, #76]	; (8006908 <HAL_MspInit+0x64>)
 80068bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068c2:	607b      	str	r3, [r7, #4]
 80068c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80068c6:	2300      	movs	r3, #0
 80068c8:	603b      	str	r3, [r7, #0]
 80068ca:	4b0f      	ldr	r3, [pc, #60]	; (8006908 <HAL_MspInit+0x64>)
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	4a0e      	ldr	r2, [pc, #56]	; (8006908 <HAL_MspInit+0x64>)
 80068d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d4:	6413      	str	r3, [r2, #64]	; 0x40
 80068d6:	4b0c      	ldr	r3, [pc, #48]	; (8006908 <HAL_MspInit+0x64>)
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068de:	603b      	str	r3, [r7, #0]
 80068e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80068e2:	2200      	movs	r2, #0
 80068e4:	210f      	movs	r1, #15
 80068e6:	f06f 0001 	mvn.w	r0, #1
 80068ea:	f001 fa5c 	bl	8007da6 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80068ee:	2200      	movs	r2, #0
 80068f0:	2105      	movs	r1, #5
 80068f2:	2005      	movs	r0, #5
 80068f4:	f001 fa57 	bl	8007da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80068f8:	2005      	movs	r0, #5
 80068fa:	f001 fa70 	bl	8007dde <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068fe:	bf00      	nop
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40023800 	.word	0x40023800

0800690c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08c      	sub	sp, #48	; 0x30
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006914:	f107 031c 	add.w	r3, r7, #28
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	605a      	str	r2, [r3, #4]
 800691e:	609a      	str	r2, [r3, #8]
 8006920:	60da      	str	r2, [r3, #12]
 8006922:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a36      	ldr	r2, [pc, #216]	; (8006a04 <HAL_ADC_MspInit+0xf8>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d130      	bne.n	8006990 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800692e:	2300      	movs	r3, #0
 8006930:	61bb      	str	r3, [r7, #24]
 8006932:	4b35      	ldr	r3, [pc, #212]	; (8006a08 <HAL_ADC_MspInit+0xfc>)
 8006934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006936:	4a34      	ldr	r2, [pc, #208]	; (8006a08 <HAL_ADC_MspInit+0xfc>)
 8006938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800693c:	6453      	str	r3, [r2, #68]	; 0x44
 800693e:	4b32      	ldr	r3, [pc, #200]	; (8006a08 <HAL_ADC_MspInit+0xfc>)
 8006940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006946:	61bb      	str	r3, [r7, #24]
 8006948:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]
 800694e:	4b2e      	ldr	r3, [pc, #184]	; (8006a08 <HAL_ADC_MspInit+0xfc>)
 8006950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006952:	4a2d      	ldr	r2, [pc, #180]	; (8006a08 <HAL_ADC_MspInit+0xfc>)
 8006954:	f043 0301 	orr.w	r3, r3, #1
 8006958:	6313      	str	r3, [r2, #48]	; 0x30
 800695a:	4b2b      	ldr	r3, [pc, #172]	; (8006a08 <HAL_ADC_MspInit+0xfc>)
 800695c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006966:	2301      	movs	r3, #1
 8006968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800696a:	2303      	movs	r3, #3
 800696c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800696e:	2300      	movs	r3, #0
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006972:	f107 031c 	add.w	r3, r7, #28
 8006976:	4619      	mov	r1, r3
 8006978:	4824      	ldr	r0, [pc, #144]	; (8006a0c <HAL_ADC_MspInit+0x100>)
 800697a:	f001 fadd 	bl	8007f38 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800697e:	2200      	movs	r2, #0
 8006980:	2105      	movs	r1, #5
 8006982:	2012      	movs	r0, #18
 8006984:	f001 fa0f 	bl	8007da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006988:	2012      	movs	r0, #18
 800698a:	f001 fa28 	bl	8007dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800698e:	e034      	b.n	80069fa <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1e      	ldr	r2, [pc, #120]	; (8006a10 <HAL_ADC_MspInit+0x104>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d12f      	bne.n	80069fa <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800699a:	2300      	movs	r3, #0
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	4b1a      	ldr	r3, [pc, #104]	; (8006a08 <HAL_ADC_MspInit+0xfc>)
 80069a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a2:	4a19      	ldr	r2, [pc, #100]	; (8006a08 <HAL_ADC_MspInit+0xfc>)
 80069a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069a8:	6453      	str	r3, [r2, #68]	; 0x44
 80069aa:	4b17      	ldr	r3, [pc, #92]	; (8006a08 <HAL_ADC_MspInit+0xfc>)
 80069ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069b2:	613b      	str	r3, [r7, #16]
 80069b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	4b13      	ldr	r3, [pc, #76]	; (8006a08 <HAL_ADC_MspInit+0xfc>)
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	4a12      	ldr	r2, [pc, #72]	; (8006a08 <HAL_ADC_MspInit+0xfc>)
 80069c0:	f043 0301 	orr.w	r3, r3, #1
 80069c4:	6313      	str	r3, [r2, #48]	; 0x30
 80069c6:	4b10      	ldr	r3, [pc, #64]	; (8006a08 <HAL_ADC_MspInit+0xfc>)
 80069c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80069d2:	2302      	movs	r3, #2
 80069d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069d6:	2303      	movs	r3, #3
 80069d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069de:	f107 031c 	add.w	r3, r7, #28
 80069e2:	4619      	mov	r1, r3
 80069e4:	4809      	ldr	r0, [pc, #36]	; (8006a0c <HAL_ADC_MspInit+0x100>)
 80069e6:	f001 faa7 	bl	8007f38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80069ea:	2200      	movs	r2, #0
 80069ec:	2105      	movs	r1, #5
 80069ee:	2012      	movs	r0, #18
 80069f0:	f001 f9d9 	bl	8007da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80069f4:	2012      	movs	r0, #18
 80069f6:	f001 f9f2 	bl	8007dde <HAL_NVIC_EnableIRQ>
}
 80069fa:	bf00      	nop
 80069fc:	3730      	adds	r7, #48	; 0x30
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	40012000 	.word	0x40012000
 8006a08:	40023800 	.word	0x40023800
 8006a0c:	40020000 	.word	0x40020000
 8006a10:	40012100 	.word	0x40012100

08006a14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08a      	sub	sp, #40	; 0x28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a1c:	f107 0314 	add.w	r3, r7, #20
 8006a20:	2200      	movs	r2, #0
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	605a      	str	r2, [r3, #4]
 8006a26:	609a      	str	r2, [r3, #8]
 8006a28:	60da      	str	r2, [r3, #12]
 8006a2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a19      	ldr	r2, [pc, #100]	; (8006a98 <HAL_I2C_MspInit+0x84>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d12c      	bne.n	8006a90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a36:	2300      	movs	r3, #0
 8006a38:	613b      	str	r3, [r7, #16]
 8006a3a:	4b18      	ldr	r3, [pc, #96]	; (8006a9c <HAL_I2C_MspInit+0x88>)
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3e:	4a17      	ldr	r2, [pc, #92]	; (8006a9c <HAL_I2C_MspInit+0x88>)
 8006a40:	f043 0302 	orr.w	r3, r3, #2
 8006a44:	6313      	str	r3, [r2, #48]	; 0x30
 8006a46:	4b15      	ldr	r3, [pc, #84]	; (8006a9c <HAL_I2C_MspInit+0x88>)
 8006a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	613b      	str	r3, [r7, #16]
 8006a50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006a52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a58:	2312      	movs	r3, #18
 8006a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a60:	2303      	movs	r3, #3
 8006a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006a64:	2304      	movs	r3, #4
 8006a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a68:	f107 0314 	add.w	r3, r7, #20
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	480c      	ldr	r0, [pc, #48]	; (8006aa0 <HAL_I2C_MspInit+0x8c>)
 8006a70:	f001 fa62 	bl	8007f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006a74:	2300      	movs	r3, #0
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	4b08      	ldr	r3, [pc, #32]	; (8006a9c <HAL_I2C_MspInit+0x88>)
 8006a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7c:	4a07      	ldr	r2, [pc, #28]	; (8006a9c <HAL_I2C_MspInit+0x88>)
 8006a7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a82:	6413      	str	r3, [r2, #64]	; 0x40
 8006a84:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <HAL_I2C_MspInit+0x88>)
 8006a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a8c:	60fb      	str	r3, [r7, #12]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006a90:	bf00      	nop
 8006a92:	3728      	adds	r7, #40	; 0x28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	40005400 	.word	0x40005400
 8006a9c:	40023800 	.word	0x40023800
 8006aa0:	40020400 	.word	0x40020400

08006aa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08c      	sub	sp, #48	; 0x30
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006aac:	f107 031c 	add.w	r3, r7, #28
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	605a      	str	r2, [r3, #4]
 8006ab6:	609a      	str	r2, [r3, #8]
 8006ab8:	60da      	str	r2, [r3, #12]
 8006aba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a40      	ldr	r2, [pc, #256]	; (8006bc4 <HAL_TIM_Base_MspInit+0x120>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d135      	bne.n	8006b32 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61bb      	str	r3, [r7, #24]
 8006aca:	4b3f      	ldr	r3, [pc, #252]	; (8006bc8 <HAL_TIM_Base_MspInit+0x124>)
 8006acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ace:	4a3e      	ldr	r2, [pc, #248]	; (8006bc8 <HAL_TIM_Base_MspInit+0x124>)
 8006ad0:	f043 0301 	orr.w	r3, r3, #1
 8006ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8006ad6:	4b3c      	ldr	r3, [pc, #240]	; (8006bc8 <HAL_TIM_Base_MspInit+0x124>)
 8006ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	61bb      	str	r3, [r7, #24]
 8006ae0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	617b      	str	r3, [r7, #20]
 8006ae6:	4b38      	ldr	r3, [pc, #224]	; (8006bc8 <HAL_TIM_Base_MspInit+0x124>)
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aea:	4a37      	ldr	r2, [pc, #220]	; (8006bc8 <HAL_TIM_Base_MspInit+0x124>)
 8006aec:	f043 0310 	orr.w	r3, r3, #16
 8006af0:	6313      	str	r3, [r2, #48]	; 0x30
 8006af2:	4b35      	ldr	r3, [pc, #212]	; (8006bc8 <HAL_TIM_Base_MspInit+0x124>)
 8006af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af6:	f003 0310 	and.w	r3, r3, #16
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b04:	2302      	movs	r3, #2
 8006b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006b10:	2301      	movs	r3, #1
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b14:	f107 031c 	add.w	r3, r7, #28
 8006b18:	4619      	mov	r1, r3
 8006b1a:	482c      	ldr	r0, [pc, #176]	; (8006bcc <HAL_TIM_Base_MspInit+0x128>)
 8006b1c:	f001 fa0c 	bl	8007f38 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8006b20:	2200      	movs	r2, #0
 8006b22:	2105      	movs	r1, #5
 8006b24:	201b      	movs	r0, #27
 8006b26:	f001 f93e 	bl	8007da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006b2a:	201b      	movs	r0, #27
 8006b2c:	f001 f957 	bl	8007dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006b30:	e044      	b.n	8006bbc <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM6)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a26      	ldr	r2, [pc, #152]	; (8006bd0 <HAL_TIM_Base_MspInit+0x12c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d10e      	bne.n	8006b5a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	613b      	str	r3, [r7, #16]
 8006b40:	4b21      	ldr	r3, [pc, #132]	; (8006bc8 <HAL_TIM_Base_MspInit+0x124>)
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	4a20      	ldr	r2, [pc, #128]	; (8006bc8 <HAL_TIM_Base_MspInit+0x124>)
 8006b46:	f043 0310 	orr.w	r3, r3, #16
 8006b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8006b4c:	4b1e      	ldr	r3, [pc, #120]	; (8006bc8 <HAL_TIM_Base_MspInit+0x124>)
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b50:	f003 0310 	and.w	r3, r3, #16
 8006b54:	613b      	str	r3, [r7, #16]
 8006b56:	693b      	ldr	r3, [r7, #16]
}
 8006b58:	e030      	b.n	8006bbc <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM8)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a1d      	ldr	r2, [pc, #116]	; (8006bd4 <HAL_TIM_Base_MspInit+0x130>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d12b      	bne.n	8006bbc <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	4b17      	ldr	r3, [pc, #92]	; (8006bc8 <HAL_TIM_Base_MspInit+0x124>)
 8006b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6c:	4a16      	ldr	r2, [pc, #88]	; (8006bc8 <HAL_TIM_Base_MspInit+0x124>)
 8006b6e:	f043 0302 	orr.w	r3, r3, #2
 8006b72:	6453      	str	r3, [r2, #68]	; 0x44
 8006b74:	4b14      	ldr	r3, [pc, #80]	; (8006bc8 <HAL_TIM_Base_MspInit+0x124>)
 8006b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b80:	2300      	movs	r3, #0
 8006b82:	60bb      	str	r3, [r7, #8]
 8006b84:	4b10      	ldr	r3, [pc, #64]	; (8006bc8 <HAL_TIM_Base_MspInit+0x124>)
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	4a0f      	ldr	r2, [pc, #60]	; (8006bc8 <HAL_TIM_Base_MspInit+0x124>)
 8006b8a:	f043 0304 	orr.w	r3, r3, #4
 8006b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8006b90:	4b0d      	ldr	r3, [pc, #52]	; (8006bc8 <HAL_TIM_Base_MspInit+0x124>)
 8006b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	60bb      	str	r3, [r7, #8]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8006b9c:	23c0      	movs	r3, #192	; 0xc0
 8006b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006bac:	2303      	movs	r3, #3
 8006bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006bb0:	f107 031c 	add.w	r3, r7, #28
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	4808      	ldr	r0, [pc, #32]	; (8006bd8 <HAL_TIM_Base_MspInit+0x134>)
 8006bb8:	f001 f9be 	bl	8007f38 <HAL_GPIO_Init>
}
 8006bbc:	bf00      	nop
 8006bbe:	3730      	adds	r7, #48	; 0x30
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40010000 	.word	0x40010000
 8006bc8:	40023800 	.word	0x40023800
 8006bcc:	40021000 	.word	0x40021000
 8006bd0:	40001000 	.word	0x40001000
 8006bd4:	40010400 	.word	0x40010400
 8006bd8:	40020800 	.word	0x40020800

08006bdc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08c      	sub	sp, #48	; 0x30
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006be4:	f107 031c 	add.w	r3, r7, #28
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	605a      	str	r2, [r3, #4]
 8006bee:	609a      	str	r2, [r3, #8]
 8006bf0:	60da      	str	r2, [r3, #12]
 8006bf2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bfc:	d14b      	bne.n	8006c96 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006bfe:	2300      	movs	r3, #0
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	4b3f      	ldr	r3, [pc, #252]	; (8006d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	4a3e      	ldr	r2, [pc, #248]	; (8006d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8006c08:	f043 0301 	orr.w	r3, r3, #1
 8006c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c0e:	4b3c      	ldr	r3, [pc, #240]	; (8006d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	61bb      	str	r3, [r7, #24]
 8006c18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	617b      	str	r3, [r7, #20]
 8006c1e:	4b38      	ldr	r3, [pc, #224]	; (8006d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8006c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c22:	4a37      	ldr	r2, [pc, #220]	; (8006d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8006c24:	f043 0301 	orr.w	r3, r3, #1
 8006c28:	6313      	str	r3, [r2, #48]	; 0x30
 8006c2a:	4b35      	ldr	r3, [pc, #212]	; (8006d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	617b      	str	r3, [r7, #20]
 8006c34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c36:	2300      	movs	r3, #0
 8006c38:	613b      	str	r3, [r7, #16]
 8006c3a:	4b31      	ldr	r3, [pc, #196]	; (8006d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8006c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3e:	4a30      	ldr	r2, [pc, #192]	; (8006d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8006c40:	f043 0302 	orr.w	r3, r3, #2
 8006c44:	6313      	str	r3, [r2, #48]	; 0x30
 8006c46:	4b2e      	ldr	r3, [pc, #184]	; (8006d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8006c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	613b      	str	r3, [r7, #16]
 8006c50:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_CH1_Pin;
 8006c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c58:	2302      	movs	r3, #2
 8006c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c60:	2300      	movs	r3, #0
 8006c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006c64:	2301      	movs	r3, #1
 8006c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH1_GPIO_Port, &GPIO_InitStruct);
 8006c68:	f107 031c 	add.w	r3, r7, #28
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4825      	ldr	r0, [pc, #148]	; (8006d04 <HAL_TIM_Encoder_MspInit+0x128>)
 8006c70:	f001 f962 	bl	8007f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA_CH2_Pin;
 8006c74:	2308      	movs	r3, #8
 8006c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c78:	2302      	movs	r3, #2
 8006c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c80:	2300      	movs	r3, #0
 8006c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006c84:	2301      	movs	r3, #1
 8006c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH2_GPIO_Port, &GPIO_InitStruct);
 8006c88:	f107 031c 	add.w	r3, r7, #28
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	481e      	ldr	r0, [pc, #120]	; (8006d08 <HAL_TIM_Encoder_MspInit+0x12c>)
 8006c90:	f001 f952 	bl	8007f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006c94:	e030      	b.n	8006cf8 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a1c      	ldr	r2, [pc, #112]	; (8006d0c <HAL_TIM_Encoder_MspInit+0x130>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d12b      	bne.n	8006cf8 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	4b16      	ldr	r3, [pc, #88]	; (8006d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca8:	4a15      	ldr	r2, [pc, #84]	; (8006d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8006caa:	f043 0302 	orr.w	r3, r3, #2
 8006cae:	6413      	str	r3, [r2, #64]	; 0x40
 8006cb0:	4b13      	ldr	r3, [pc, #76]	; (8006d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8006cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	60fb      	str	r3, [r7, #12]
 8006cba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60bb      	str	r3, [r7, #8]
 8006cc0:	4b0f      	ldr	r3, [pc, #60]	; (8006d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8006cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc4:	4a0e      	ldr	r2, [pc, #56]	; (8006d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8006cc6:	f043 0301 	orr.w	r3, r3, #1
 8006cca:	6313      	str	r3, [r2, #48]	; 0x30
 8006ccc:	4b0c      	ldr	r3, [pc, #48]	; (8006d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8006cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	60bb      	str	r3, [r7, #8]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderB_CH1_Pin|EncoderB_CH2_Pin;
 8006cd8:	23c0      	movs	r3, #192	; 0xc0
 8006cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006ce8:	2302      	movs	r3, #2
 8006cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cec:	f107 031c 	add.w	r3, r7, #28
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4804      	ldr	r0, [pc, #16]	; (8006d04 <HAL_TIM_Encoder_MspInit+0x128>)
 8006cf4:	f001 f920 	bl	8007f38 <HAL_GPIO_Init>
}
 8006cf8:	bf00      	nop
 8006cfa:	3730      	adds	r7, #48	; 0x30
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	40023800 	.word	0x40023800
 8006d04:	40020000 	.word	0x40020000
 8006d08:	40020400 	.word	0x40020400
 8006d0c:	40000400 	.word	0x40000400

08006d10 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b08a      	sub	sp, #40	; 0x28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d18:	f107 0314 	add.w	r3, r7, #20
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	605a      	str	r2, [r3, #4]
 8006d22:	609a      	str	r2, [r3, #8]
 8006d24:	60da      	str	r2, [r3, #12]
 8006d26:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a1d      	ldr	r2, [pc, #116]	; (8006da4 <HAL_TIM_IC_MspInit+0x94>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d134      	bne.n	8006d9c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006d32:	2300      	movs	r3, #0
 8006d34:	613b      	str	r3, [r7, #16]
 8006d36:	4b1c      	ldr	r3, [pc, #112]	; (8006da8 <HAL_TIM_IC_MspInit+0x98>)
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	4a1b      	ldr	r2, [pc, #108]	; (8006da8 <HAL_TIM_IC_MspInit+0x98>)
 8006d3c:	f043 0304 	orr.w	r3, r3, #4
 8006d40:	6413      	str	r3, [r2, #64]	; 0x40
 8006d42:	4b19      	ldr	r3, [pc, #100]	; (8006da8 <HAL_TIM_IC_MspInit+0x98>)
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	f003 0304 	and.w	r3, r3, #4
 8006d4a:	613b      	str	r3, [r7, #16]
 8006d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]
 8006d52:	4b15      	ldr	r3, [pc, #84]	; (8006da8 <HAL_TIM_IC_MspInit+0x98>)
 8006d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d56:	4a14      	ldr	r2, [pc, #80]	; (8006da8 <HAL_TIM_IC_MspInit+0x98>)
 8006d58:	f043 0308 	orr.w	r3, r3, #8
 8006d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d5e:	4b12      	ldr	r3, [pc, #72]	; (8006da8 <HAL_TIM_IC_MspInit+0x98>)
 8006d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d62:	f003 0308 	and.w	r3, r3, #8
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8006d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d70:	2302      	movs	r3, #2
 8006d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8006d80:	f107 0314 	add.w	r3, r7, #20
 8006d84:	4619      	mov	r1, r3
 8006d86:	4809      	ldr	r0, [pc, #36]	; (8006dac <HAL_TIM_IC_MspInit+0x9c>)
 8006d88:	f001 f8d6 	bl	8007f38 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2105      	movs	r1, #5
 8006d90:	201e      	movs	r0, #30
 8006d92:	f001 f808 	bl	8007da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006d96:	201e      	movs	r0, #30
 8006d98:	f001 f821 	bl	8007dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006d9c:	bf00      	nop
 8006d9e:	3728      	adds	r7, #40	; 0x28
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	40000800 	.word	0x40000800
 8006da8:	40023800 	.word	0x40023800
 8006dac:	40020c00 	.word	0x40020c00

08006db0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006db8:	f107 030c 	add.w	r3, r7, #12
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	605a      	str	r2, [r3, #4]
 8006dc2:	609a      	str	r2, [r3, #8]
 8006dc4:	60da      	str	r2, [r3, #12]
 8006dc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a12      	ldr	r2, [pc, #72]	; (8006e18 <HAL_TIM_MspPostInit+0x68>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d11e      	bne.n	8006e10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60bb      	str	r3, [r7, #8]
 8006dd6:	4b11      	ldr	r3, [pc, #68]	; (8006e1c <HAL_TIM_MspPostInit+0x6c>)
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dda:	4a10      	ldr	r2, [pc, #64]	; (8006e1c <HAL_TIM_MspPostInit+0x6c>)
 8006ddc:	f043 0310 	orr.w	r3, r3, #16
 8006de0:	6313      	str	r3, [r2, #48]	; 0x30
 8006de2:	4b0e      	ldr	r3, [pc, #56]	; (8006e1c <HAL_TIM_MspPostInit+0x6c>)
 8006de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de6:	f003 0310 	and.w	r3, r3, #16
 8006dea:	60bb      	str	r3, [r7, #8]
 8006dec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006dee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006df2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006df4:	2302      	movs	r3, #2
 8006df6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006e00:	2301      	movs	r3, #1
 8006e02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e04:	f107 030c 	add.w	r3, r7, #12
 8006e08:	4619      	mov	r1, r3
 8006e0a:	4805      	ldr	r0, [pc, #20]	; (8006e20 <HAL_TIM_MspPostInit+0x70>)
 8006e0c:	f001 f894 	bl	8007f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006e10:	bf00      	nop
 8006e12:	3720      	adds	r7, #32
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40010000 	.word	0x40010000
 8006e1c:	40023800 	.word	0x40023800
 8006e20:	40021000 	.word	0x40021000

08006e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b08a      	sub	sp, #40	; 0x28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e2c:	f107 0314 	add.w	r3, r7, #20
 8006e30:	2200      	movs	r2, #0
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	605a      	str	r2, [r3, #4]
 8006e36:	609a      	str	r2, [r3, #8]
 8006e38:	60da      	str	r2, [r3, #12]
 8006e3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a1d      	ldr	r2, [pc, #116]	; (8006eb8 <HAL_UART_MspInit+0x94>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d134      	bne.n	8006eb0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006e46:	2300      	movs	r3, #0
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	4b1c      	ldr	r3, [pc, #112]	; (8006ebc <HAL_UART_MspInit+0x98>)
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	4a1b      	ldr	r2, [pc, #108]	; (8006ebc <HAL_UART_MspInit+0x98>)
 8006e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e54:	6413      	str	r3, [r2, #64]	; 0x40
 8006e56:	4b19      	ldr	r3, [pc, #100]	; (8006ebc <HAL_UART_MspInit+0x98>)
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e5e:	613b      	str	r3, [r7, #16]
 8006e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
 8006e66:	4b15      	ldr	r3, [pc, #84]	; (8006ebc <HAL_UART_MspInit+0x98>)
 8006e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6a:	4a14      	ldr	r2, [pc, #80]	; (8006ebc <HAL_UART_MspInit+0x98>)
 8006e6c:	f043 0304 	orr.w	r3, r3, #4
 8006e70:	6313      	str	r3, [r2, #48]	; 0x30
 8006e72:	4b12      	ldr	r3, [pc, #72]	; (8006ebc <HAL_UART_MspInit+0x98>)
 8006e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e76:	f003 0304 	and.w	r3, r3, #4
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006e7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e84:	2302      	movs	r3, #2
 8006e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006e90:	2307      	movs	r3, #7
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e94:	f107 0314 	add.w	r3, r7, #20
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4809      	ldr	r0, [pc, #36]	; (8006ec0 <HAL_UART_MspInit+0x9c>)
 8006e9c:	f001 f84c 	bl	8007f38 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2105      	movs	r1, #5
 8006ea4:	2027      	movs	r0, #39	; 0x27
 8006ea6:	f000 ff7e 	bl	8007da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006eaa:	2027      	movs	r0, #39	; 0x27
 8006eac:	f000 ff97 	bl	8007dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006eb0:	bf00      	nop
 8006eb2:	3728      	adds	r7, #40	; 0x28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	40004800 	.word	0x40004800
 8006ebc:	40023800 	.word	0x40023800
 8006ec0:	40020800 	.word	0x40020800

08006ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006ec8:	e7fe      	b.n	8006ec8 <NMI_Handler+0x4>

08006eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006ece:	e7fe      	b.n	8006ece <HardFault_Handler+0x4>

08006ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006ed4:	e7fe      	b.n	8006ed4 <MemManage_Handler+0x4>

08006ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006eda:	e7fe      	b.n	8006eda <BusFault_Handler+0x4>

08006edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006ee0:	e7fe      	b.n	8006ee0 <UsageFault_Handler+0x4>

08006ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006ee6:	bf00      	nop
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006ef4:	f000 f900 	bl	80070f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006ef8:	f007 f9a0 	bl	800e23c <xTaskGetSchedulerState>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d001      	beq.n	8006f06 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006f02:	f007 ff89 	bl	800ee18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006f06:	bf00      	nop
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8006f0e:	bf00      	nop
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006f1c:	4803      	ldr	r0, [pc, #12]	; (8006f2c <ADC_IRQHandler+0x14>)
 8006f1e:	f000 fb03 	bl	8007528 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8006f22:	4803      	ldr	r0, [pc, #12]	; (8006f30 <ADC_IRQHandler+0x18>)
 8006f24:	f000 fb00 	bl	8007528 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006f28:	bf00      	nop
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	200001c4 	.word	0x200001c4
 8006f30:	2000020c 	.word	0x2000020c

08006f34 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006f38:	4802      	ldr	r0, [pc, #8]	; (8006f44 <TIM1_CC_IRQHandler+0x10>)
 8006f3a:	f003 fabd 	bl	800a4b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8006f3e:	bf00      	nop
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	200002a8 	.word	0x200002a8

08006f48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006f4c:	4802      	ldr	r0, [pc, #8]	; (8006f58 <TIM4_IRQHandler+0x10>)
 8006f4e:	f003 fab3 	bl	800a4b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006f52:	bf00      	nop
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	20000380 	.word	0x20000380

08006f5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006f60:	4802      	ldr	r0, [pc, #8]	; (8006f6c <USART3_IRQHandler+0x10>)
 8006f62:	f004 fc6f 	bl	800b844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006f66:	bf00      	nop
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000458 	.word	0x20000458

08006f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f78:	4a14      	ldr	r2, [pc, #80]	; (8006fcc <_sbrk+0x5c>)
 8006f7a:	4b15      	ldr	r3, [pc, #84]	; (8006fd0 <_sbrk+0x60>)
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f84:	4b13      	ldr	r3, [pc, #76]	; (8006fd4 <_sbrk+0x64>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d102      	bne.n	8006f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006f8c:	4b11      	ldr	r3, [pc, #68]	; (8006fd4 <_sbrk+0x64>)
 8006f8e:	4a12      	ldr	r2, [pc, #72]	; (8006fd8 <_sbrk+0x68>)
 8006f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f92:	4b10      	ldr	r3, [pc, #64]	; (8006fd4 <_sbrk+0x64>)
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4413      	add	r3, r2
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d207      	bcs.n	8006fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006fa0:	f008 faa0 	bl	800f4e4 <__errno>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	220c      	movs	r2, #12
 8006fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006faa:	f04f 33ff 	mov.w	r3, #4294967295
 8006fae:	e009      	b.n	8006fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006fb0:	4b08      	ldr	r3, [pc, #32]	; (8006fd4 <_sbrk+0x64>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006fb6:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <_sbrk+0x64>)
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	4a05      	ldr	r2, [pc, #20]	; (8006fd4 <_sbrk+0x64>)
 8006fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20020000 	.word	0x20020000
 8006fd0:	00000400 	.word	0x00000400
 8006fd4:	200009fc 	.word	0x200009fc
 8006fd8:	200054a0 	.word	0x200054a0

08006fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006fe0:	4b06      	ldr	r3, [pc, #24]	; (8006ffc <SystemInit+0x20>)
 8006fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe6:	4a05      	ldr	r2, [pc, #20]	; (8006ffc <SystemInit+0x20>)
 8006fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006ff0:	bf00      	nop
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	e000ed00 	.word	0xe000ed00

08007000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007038 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007004:	480d      	ldr	r0, [pc, #52]	; (800703c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007006:	490e      	ldr	r1, [pc, #56]	; (8007040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007008:	4a0e      	ldr	r2, [pc, #56]	; (8007044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800700a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800700c:	e002      	b.n	8007014 <LoopCopyDataInit>

0800700e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800700e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007012:	3304      	adds	r3, #4

08007014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007018:	d3f9      	bcc.n	800700e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800701a:	4a0b      	ldr	r2, [pc, #44]	; (8007048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800701c:	4c0b      	ldr	r4, [pc, #44]	; (800704c <LoopFillZerobss+0x26>)
  movs r3, #0
 800701e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007020:	e001      	b.n	8007026 <LoopFillZerobss>

08007022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007024:	3204      	adds	r2, #4

08007026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007028:	d3fb      	bcc.n	8007022 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800702a:	f7ff ffd7 	bl	8006fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800702e:	f008 fa5f 	bl	800f4f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007032:	f7fa f819 	bl	8001068 <main>
  bx  lr    
 8007036:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007038:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800703c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007040:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 8007044:	08011d84 	.word	0x08011d84
  ldr r2, =_sbss
 8007048:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 800704c:	2000549c 	.word	0x2000549c

08007050 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007050:	e7fe      	b.n	8007050 <CAN1_RX0_IRQHandler>
	...

08007054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007058:	4b0e      	ldr	r3, [pc, #56]	; (8007094 <HAL_Init+0x40>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a0d      	ldr	r2, [pc, #52]	; (8007094 <HAL_Init+0x40>)
 800705e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007064:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <HAL_Init+0x40>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a0a      	ldr	r2, [pc, #40]	; (8007094 <HAL_Init+0x40>)
 800706a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800706e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007070:	4b08      	ldr	r3, [pc, #32]	; (8007094 <HAL_Init+0x40>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a07      	ldr	r2, [pc, #28]	; (8007094 <HAL_Init+0x40>)
 8007076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800707a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800707c:	2003      	movs	r0, #3
 800707e:	f000 fe87 	bl	8007d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007082:	200f      	movs	r0, #15
 8007084:	f000 f808 	bl	8007098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007088:	f7ff fc0c 	bl	80068a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	40023c00 	.word	0x40023c00

08007098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80070a0:	4b12      	ldr	r3, [pc, #72]	; (80070ec <HAL_InitTick+0x54>)
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	4b12      	ldr	r3, [pc, #72]	; (80070f0 <HAL_InitTick+0x58>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	4619      	mov	r1, r3
 80070aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80070b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 fe9f 	bl	8007dfa <HAL_SYSTICK_Config>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e00e      	b.n	80070e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b0f      	cmp	r3, #15
 80070ca:	d80a      	bhi.n	80070e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80070cc:	2200      	movs	r2, #0
 80070ce:	6879      	ldr	r1, [r7, #4]
 80070d0:	f04f 30ff 	mov.w	r0, #4294967295
 80070d4:	f000 fe67 	bl	8007da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80070d8:	4a06      	ldr	r2, [pc, #24]	; (80070f4 <HAL_InitTick+0x5c>)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	e000      	b.n	80070e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	20000148 	.word	0x20000148
 80070f0:	20000150 	.word	0x20000150
 80070f4:	2000014c 	.word	0x2000014c

080070f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80070fc:	4b06      	ldr	r3, [pc, #24]	; (8007118 <HAL_IncTick+0x20>)
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	4b06      	ldr	r3, [pc, #24]	; (800711c <HAL_IncTick+0x24>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4413      	add	r3, r2
 8007108:	4a04      	ldr	r2, [pc, #16]	; (800711c <HAL_IncTick+0x24>)
 800710a:	6013      	str	r3, [r2, #0]
}
 800710c:	bf00      	nop
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	20000150 	.word	0x20000150
 800711c:	20000a00 	.word	0x20000a00

08007120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007120:	b480      	push	{r7}
 8007122:	af00      	add	r7, sp, #0
  return uwTick;
 8007124:	4b03      	ldr	r3, [pc, #12]	; (8007134 <HAL_GetTick+0x14>)
 8007126:	681b      	ldr	r3, [r3, #0]
}
 8007128:	4618      	mov	r0, r3
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	20000a00 	.word	0x20000a00

08007138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007140:	f7ff ffee 	bl	8007120 <HAL_GetTick>
 8007144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007150:	d005      	beq.n	800715e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007152:	4b0a      	ldr	r3, [pc, #40]	; (800717c <HAL_Delay+0x44>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4413      	add	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800715e:	bf00      	nop
 8007160:	f7ff ffde 	bl	8007120 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	429a      	cmp	r2, r3
 800716e:	d8f7      	bhi.n	8007160 <HAL_Delay+0x28>
  {
  }
}
 8007170:	bf00      	nop
 8007172:	bf00      	nop
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	20000150 	.word	0x20000150

08007180 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e033      	b.n	80071fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719a:	2b00      	cmp	r3, #0
 800719c:	d109      	bne.n	80071b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7ff fbb4 	bl	800690c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	f003 0310 	and.w	r3, r3, #16
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d118      	bne.n	80071f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80071c6:	f023 0302 	bic.w	r3, r3, #2
 80071ca:	f043 0202 	orr.w	r2, r3, #2
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fc06 	bl	80079e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	f023 0303 	bic.w	r3, r3, #3
 80071e6:	f043 0201 	orr.w	r2, r3, #1
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	641a      	str	r2, [r3, #64]	; 0x40
 80071ee:	e001      	b.n	80071f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
	...

08007208 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800721a:	2b01      	cmp	r3, #1
 800721c:	d101      	bne.n	8007222 <HAL_ADC_Start+0x1a>
 800721e:	2302      	movs	r3, #2
 8007220:	e0b2      	b.n	8007388 <HAL_ADC_Start+0x180>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b01      	cmp	r3, #1
 8007236:	d018      	beq.n	800726a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689a      	ldr	r2, [r3, #8]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0201 	orr.w	r2, r2, #1
 8007246:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007248:	4b52      	ldr	r3, [pc, #328]	; (8007394 <HAL_ADC_Start+0x18c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a52      	ldr	r2, [pc, #328]	; (8007398 <HAL_ADC_Start+0x190>)
 800724e:	fba2 2303 	umull	r2, r3, r2, r3
 8007252:	0c9a      	lsrs	r2, r3, #18
 8007254:	4613      	mov	r3, r2
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	4413      	add	r3, r2
 800725a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800725c:	e002      	b.n	8007264 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	3b01      	subs	r3, #1
 8007262:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1f9      	bne.n	800725e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b01      	cmp	r3, #1
 8007276:	d17a      	bne.n	800736e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007280:	f023 0301 	bic.w	r3, r3, #1
 8007284:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007296:	2b00      	cmp	r3, #0
 8007298:	d007      	beq.n	80072aa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80072a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072b6:	d106      	bne.n	80072c6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072bc:	f023 0206 	bic.w	r2, r3, #6
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	645a      	str	r2, [r3, #68]	; 0x44
 80072c4:	e002      	b.n	80072cc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80072d4:	4b31      	ldr	r3, [pc, #196]	; (800739c <HAL_ADC_Start+0x194>)
 80072d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80072e0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f003 031f 	and.w	r3, r3, #31
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d12a      	bne.n	8007344 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a2b      	ldr	r2, [pc, #172]	; (80073a0 <HAL_ADC_Start+0x198>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d015      	beq.n	8007324 <HAL_ADC_Start+0x11c>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a29      	ldr	r2, [pc, #164]	; (80073a4 <HAL_ADC_Start+0x19c>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d105      	bne.n	800730e <HAL_ADC_Start+0x106>
 8007302:	4b26      	ldr	r3, [pc, #152]	; (800739c <HAL_ADC_Start+0x194>)
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f003 031f 	and.w	r3, r3, #31
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a25      	ldr	r2, [pc, #148]	; (80073a8 <HAL_ADC_Start+0x1a0>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d136      	bne.n	8007386 <HAL_ADC_Start+0x17e>
 8007318:	4b20      	ldr	r3, [pc, #128]	; (800739c <HAL_ADC_Start+0x194>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f003 0310 	and.w	r3, r3, #16
 8007320:	2b00      	cmp	r3, #0
 8007322:	d130      	bne.n	8007386 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d129      	bne.n	8007386 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689a      	ldr	r2, [r3, #8]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007340:	609a      	str	r2, [r3, #8]
 8007342:	e020      	b.n	8007386 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a15      	ldr	r2, [pc, #84]	; (80073a0 <HAL_ADC_Start+0x198>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d11b      	bne.n	8007386 <HAL_ADC_Start+0x17e>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d114      	bne.n	8007386 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689a      	ldr	r2, [r3, #8]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800736a:	609a      	str	r2, [r3, #8]
 800736c:	e00b      	b.n	8007386 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	f043 0210 	orr.w	r2, r3, #16
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737e:	f043 0201 	orr.w	r2, r3, #1
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	20000148 	.word	0x20000148
 8007398:	431bde83 	.word	0x431bde83
 800739c:	40012300 	.word	0x40012300
 80073a0:	40012000 	.word	0x40012000
 80073a4:	40012100 	.word	0x40012100
 80073a8:	40012200 	.word	0x40012200

080073ac <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d101      	bne.n	80073c2 <HAL_ADC_Stop+0x16>
 80073be:	2302      	movs	r3, #2
 80073c0:	e021      	b.n	8007406 <HAL_ADC_Stop+0x5a>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f022 0201 	bic.w	r2, r2, #1
 80073d8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d109      	bne.n	80073fc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80073f0:	f023 0301 	bic.w	r3, r3, #1
 80073f4:	f043 0201 	orr.w	r2, r3, #1
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800742a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800742e:	d113      	bne.n	8007458 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800743a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743e:	d10b      	bne.n	8007458 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007444:	f043 0220 	orr.w	r2, r3, #32
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e063      	b.n	8007520 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007458:	f7ff fe62 	bl	8007120 <HAL_GetTick>
 800745c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800745e:	e021      	b.n	80074a4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007466:	d01d      	beq.n	80074a4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d007      	beq.n	800747e <HAL_ADC_PollForConversion+0x6c>
 800746e:	f7ff fe57 	bl	8007120 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	429a      	cmp	r2, r3
 800747c:	d212      	bcs.n	80074a4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b02      	cmp	r3, #2
 800748a:	d00b      	beq.n	80074a4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007490:	f043 0204 	orr.w	r2, r3, #4
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e03d      	b.n	8007520 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0302 	and.w	r3, r3, #2
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d1d6      	bne.n	8007460 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f06f 0212 	mvn.w	r2, #18
 80074ba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d123      	bne.n	800751e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d11f      	bne.n	800751e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d006      	beq.n	80074fa <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d111      	bne.n	800751e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d105      	bne.n	800751e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007516:	f043 0201 	orr.w	r2, r3, #1
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	617b      	str	r3, [r7, #20]
 8007534:	2300      	movs	r3, #0
 8007536:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f003 0320 	and.w	r3, r3, #32
 8007556:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d049      	beq.n	80075f2 <HAL_ADC_IRQHandler+0xca>
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d046      	beq.n	80075f2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b00      	cmp	r3, #0
 800756e:	d105      	bne.n	800757c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007574:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d12b      	bne.n	80075e2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800758e:	2b00      	cmp	r3, #0
 8007590:	d127      	bne.n	80075e2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007598:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800759c:	2b00      	cmp	r3, #0
 800759e:	d006      	beq.n	80075ae <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d119      	bne.n	80075e2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0220 	bic.w	r2, r2, #32
 80075bc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d105      	bne.n	80075e2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	f043 0201 	orr.w	r2, r3, #1
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f8bd 	bl	8007762 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f06f 0212 	mvn.w	r2, #18
 80075f0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007600:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d057      	beq.n	80076b8 <HAL_ADC_IRQHandler+0x190>
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d054      	beq.n	80076b8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	f003 0310 	and.w	r3, r3, #16
 8007616:	2b00      	cmp	r3, #0
 8007618:	d105      	bne.n	8007626 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d139      	bne.n	80076a8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800763e:	2b00      	cmp	r3, #0
 8007640:	d006      	beq.n	8007650 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800764c:	2b00      	cmp	r3, #0
 800764e:	d12b      	bne.n	80076a8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800765a:	2b00      	cmp	r3, #0
 800765c:	d124      	bne.n	80076a8 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007668:	2b00      	cmp	r3, #0
 800766a:	d11d      	bne.n	80076a8 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8007670:	2b00      	cmp	r3, #0
 8007672:	d119      	bne.n	80076a8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007682:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007688:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007698:	2b00      	cmp	r3, #0
 800769a:	d105      	bne.n	80076a8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a0:	f043 0201 	orr.w	r2, r3, #1
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fa97 	bl	8007bdc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f06f 020c 	mvn.w	r2, #12
 80076b6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d017      	beq.n	80076fe <HAL_ADC_IRQHandler+0x1d6>
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d014      	beq.n	80076fe <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d10d      	bne.n	80076fe <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f841 	bl	8007776 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f06f 0201 	mvn.w	r2, #1
 80076fc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f003 0320 	and.w	r3, r3, #32
 8007704:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800770c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d015      	beq.n	8007740 <HAL_ADC_IRQHandler+0x218>
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d012      	beq.n	8007740 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771e:	f043 0202 	orr.w	r2, r3, #2
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f06f 0220 	mvn.w	r2, #32
 800772e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f82a 	bl	800778a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f06f 0220 	mvn.w	r2, #32
 800773e:	601a      	str	r2, [r3, #0]
  }
}
 8007740:	bf00      	nop
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007756:	4618      	mov	r0, r3
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800776a:	bf00      	nop
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800777e:	bf00      	nop
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800778a:	b480      	push	{r7}
 800778c:	b083      	sub	sp, #12
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
	...

080077a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d101      	bne.n	80077bc <HAL_ADC_ConfigChannel+0x1c>
 80077b8:	2302      	movs	r3, #2
 80077ba:	e105      	b.n	80079c8 <HAL_ADC_ConfigChannel+0x228>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b09      	cmp	r3, #9
 80077ca:	d925      	bls.n	8007818 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68d9      	ldr	r1, [r3, #12]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	4613      	mov	r3, r2
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	4413      	add	r3, r2
 80077e0:	3b1e      	subs	r3, #30
 80077e2:	2207      	movs	r2, #7
 80077e4:	fa02 f303 	lsl.w	r3, r2, r3
 80077e8:	43da      	mvns	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	400a      	ands	r2, r1
 80077f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68d9      	ldr	r1, [r3, #12]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	4618      	mov	r0, r3
 8007804:	4603      	mov	r3, r0
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	4403      	add	r3, r0
 800780a:	3b1e      	subs	r3, #30
 800780c:	409a      	lsls	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	60da      	str	r2, [r3, #12]
 8007816:	e022      	b.n	800785e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6919      	ldr	r1, [r3, #16]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	b29b      	uxth	r3, r3
 8007824:	461a      	mov	r2, r3
 8007826:	4613      	mov	r3, r2
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	4413      	add	r3, r2
 800782c:	2207      	movs	r2, #7
 800782e:	fa02 f303 	lsl.w	r3, r2, r3
 8007832:	43da      	mvns	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	400a      	ands	r2, r1
 800783a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6919      	ldr	r1, [r3, #16]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	689a      	ldr	r2, [r3, #8]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	b29b      	uxth	r3, r3
 800784c:	4618      	mov	r0, r3
 800784e:	4603      	mov	r3, r0
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	4403      	add	r3, r0
 8007854:	409a      	lsls	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	2b06      	cmp	r3, #6
 8007864:	d824      	bhi.n	80078b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	4613      	mov	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	3b05      	subs	r3, #5
 8007878:	221f      	movs	r2, #31
 800787a:	fa02 f303 	lsl.w	r3, r2, r3
 800787e:	43da      	mvns	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	400a      	ands	r2, r1
 8007886:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	b29b      	uxth	r3, r3
 8007894:	4618      	mov	r0, r3
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	4613      	mov	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	3b05      	subs	r3, #5
 80078a2:	fa00 f203 	lsl.w	r2, r0, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	635a      	str	r2, [r3, #52]	; 0x34
 80078ae:	e04c      	b.n	800794a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	2b0c      	cmp	r3, #12
 80078b6:	d824      	bhi.n	8007902 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	4613      	mov	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	3b23      	subs	r3, #35	; 0x23
 80078ca:	221f      	movs	r2, #31
 80078cc:	fa02 f303 	lsl.w	r3, r2, r3
 80078d0:	43da      	mvns	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	400a      	ands	r2, r1
 80078d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	4618      	mov	r0, r3
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	4613      	mov	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	3b23      	subs	r3, #35	; 0x23
 80078f4:	fa00 f203 	lsl.w	r2, r0, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	631a      	str	r2, [r3, #48]	; 0x30
 8007900:	e023      	b.n	800794a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	4613      	mov	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	3b41      	subs	r3, #65	; 0x41
 8007914:	221f      	movs	r2, #31
 8007916:	fa02 f303 	lsl.w	r3, r2, r3
 800791a:	43da      	mvns	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	400a      	ands	r2, r1
 8007922:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	b29b      	uxth	r3, r3
 8007930:	4618      	mov	r0, r3
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	4613      	mov	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	3b41      	subs	r3, #65	; 0x41
 800793e:	fa00 f203 	lsl.w	r2, r0, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800794a:	4b22      	ldr	r3, [pc, #136]	; (80079d4 <HAL_ADC_ConfigChannel+0x234>)
 800794c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a21      	ldr	r2, [pc, #132]	; (80079d8 <HAL_ADC_ConfigChannel+0x238>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d109      	bne.n	800796c <HAL_ADC_ConfigChannel+0x1cc>
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b12      	cmp	r3, #18
 800795e:	d105      	bne.n	800796c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a19      	ldr	r2, [pc, #100]	; (80079d8 <HAL_ADC_ConfigChannel+0x238>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d123      	bne.n	80079be <HAL_ADC_ConfigChannel+0x21e>
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b10      	cmp	r3, #16
 800797c:	d003      	beq.n	8007986 <HAL_ADC_ConfigChannel+0x1e6>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b11      	cmp	r3, #17
 8007984:	d11b      	bne.n	80079be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b10      	cmp	r3, #16
 8007998:	d111      	bne.n	80079be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800799a:	4b10      	ldr	r3, [pc, #64]	; (80079dc <HAL_ADC_ConfigChannel+0x23c>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a10      	ldr	r2, [pc, #64]	; (80079e0 <HAL_ADC_ConfigChannel+0x240>)
 80079a0:	fba2 2303 	umull	r2, r3, r2, r3
 80079a4:	0c9a      	lsrs	r2, r3, #18
 80079a6:	4613      	mov	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	005b      	lsls	r3, r3, #1
 80079ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80079b0:	e002      	b.n	80079b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1f9      	bne.n	80079b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	40012300 	.word	0x40012300
 80079d8:	40012000 	.word	0x40012000
 80079dc:	20000148 	.word	0x20000148
 80079e0:	431bde83 	.word	0x431bde83

080079e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80079ec:	4b79      	ldr	r3, [pc, #484]	; (8007bd4 <ADC_Init+0x1f0>)
 80079ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	431a      	orrs	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	6859      	ldr	r1, [r3, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	021a      	lsls	r2, r3, #8
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007a3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6859      	ldr	r1, [r3, #4]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6899      	ldr	r1, [r3, #8]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a76:	4a58      	ldr	r2, [pc, #352]	; (8007bd8 <ADC_Init+0x1f4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d022      	beq.n	8007ac2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689a      	ldr	r2, [r3, #8]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007a8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6899      	ldr	r1, [r3, #8]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007aac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6899      	ldr	r1, [r3, #8]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	609a      	str	r2, [r3, #8]
 8007ac0:	e00f      	b.n	8007ae2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ad0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689a      	ldr	r2, [r3, #8]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007ae0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	689a      	ldr	r2, [r3, #8]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0202 	bic.w	r2, r2, #2
 8007af0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6899      	ldr	r1, [r3, #8]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	7e1b      	ldrb	r3, [r3, #24]
 8007afc:	005a      	lsls	r2, r3, #1
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d01b      	beq.n	8007b48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685a      	ldr	r2, [r3, #4]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007b2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6859      	ldr	r1, [r3, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	035a      	lsls	r2, r3, #13
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	605a      	str	r2, [r3, #4]
 8007b46:	e007      	b.n	8007b58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007b66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	3b01      	subs	r3, #1
 8007b74:	051a      	lsls	r2, r3, #20
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007b8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6899      	ldr	r1, [r3, #8]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b9a:	025a      	lsls	r2, r3, #9
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6899      	ldr	r1, [r3, #8]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	029a      	lsls	r2, r3, #10
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	609a      	str	r2, [r3, #8]
}
 8007bc8:	bf00      	nop
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr
 8007bd4:	40012300 	.word	0x40012300
 8007bd8:	0f000001 	.word	0x0f000001

08007bdc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f003 0307 	and.w	r3, r3, #7
 8007bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c00:	4b0c      	ldr	r3, [pc, #48]	; (8007c34 <__NVIC_SetPriorityGrouping+0x44>)
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c22:	4a04      	ldr	r2, [pc, #16]	; (8007c34 <__NVIC_SetPriorityGrouping+0x44>)
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	60d3      	str	r3, [r2, #12]
}
 8007c28:	bf00      	nop
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	e000ed00 	.word	0xe000ed00

08007c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c3c:	4b04      	ldr	r3, [pc, #16]	; (8007c50 <__NVIC_GetPriorityGrouping+0x18>)
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	0a1b      	lsrs	r3, r3, #8
 8007c42:	f003 0307 	and.w	r3, r3, #7
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	e000ed00 	.word	0xe000ed00

08007c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	db0b      	blt.n	8007c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c66:	79fb      	ldrb	r3, [r7, #7]
 8007c68:	f003 021f 	and.w	r2, r3, #31
 8007c6c:	4907      	ldr	r1, [pc, #28]	; (8007c8c <__NVIC_EnableIRQ+0x38>)
 8007c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c72:	095b      	lsrs	r3, r3, #5
 8007c74:	2001      	movs	r0, #1
 8007c76:	fa00 f202 	lsl.w	r2, r0, r2
 8007c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c7e:	bf00      	nop
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	e000e100 	.word	0xe000e100

08007c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	4603      	mov	r3, r0
 8007c98:	6039      	str	r1, [r7, #0]
 8007c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	db0a      	blt.n	8007cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	490c      	ldr	r1, [pc, #48]	; (8007cdc <__NVIC_SetPriority+0x4c>)
 8007caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cae:	0112      	lsls	r2, r2, #4
 8007cb0:	b2d2      	uxtb	r2, r2
 8007cb2:	440b      	add	r3, r1
 8007cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007cb8:	e00a      	b.n	8007cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	4908      	ldr	r1, [pc, #32]	; (8007ce0 <__NVIC_SetPriority+0x50>)
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	f003 030f 	and.w	r3, r3, #15
 8007cc6:	3b04      	subs	r3, #4
 8007cc8:	0112      	lsls	r2, r2, #4
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	440b      	add	r3, r1
 8007cce:	761a      	strb	r2, [r3, #24]
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	e000e100 	.word	0xe000e100
 8007ce0:	e000ed00 	.word	0xe000ed00

08007ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b089      	sub	sp, #36	; 0x24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	f1c3 0307 	rsb	r3, r3, #7
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	bf28      	it	cs
 8007d02:	2304      	movcs	r3, #4
 8007d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	3304      	adds	r3, #4
 8007d0a:	2b06      	cmp	r3, #6
 8007d0c:	d902      	bls.n	8007d14 <NVIC_EncodePriority+0x30>
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	3b03      	subs	r3, #3
 8007d12:	e000      	b.n	8007d16 <NVIC_EncodePriority+0x32>
 8007d14:	2300      	movs	r3, #0
 8007d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d18:	f04f 32ff 	mov.w	r2, #4294967295
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d22:	43da      	mvns	r2, r3
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	401a      	ands	r2, r3
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	fa01 f303 	lsl.w	r3, r1, r3
 8007d36:	43d9      	mvns	r1, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d3c:	4313      	orrs	r3, r2
         );
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3724      	adds	r7, #36	; 0x24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
	...

08007d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	3b01      	subs	r3, #1
 8007d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d5c:	d301      	bcc.n	8007d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e00f      	b.n	8007d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d62:	4a0a      	ldr	r2, [pc, #40]	; (8007d8c <SysTick_Config+0x40>)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d6a:	210f      	movs	r1, #15
 8007d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d70:	f7ff ff8e 	bl	8007c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <SysTick_Config+0x40>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d7a:	4b04      	ldr	r3, [pc, #16]	; (8007d8c <SysTick_Config+0x40>)
 8007d7c:	2207      	movs	r2, #7
 8007d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	e000e010 	.word	0xe000e010

08007d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff ff29 	bl	8007bf0 <__NVIC_SetPriorityGrouping>
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b086      	sub	sp, #24
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	4603      	mov	r3, r0
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	607a      	str	r2, [r7, #4]
 8007db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007db8:	f7ff ff3e 	bl	8007c38 <__NVIC_GetPriorityGrouping>
 8007dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	68b9      	ldr	r1, [r7, #8]
 8007dc2:	6978      	ldr	r0, [r7, #20]
 8007dc4:	f7ff ff8e 	bl	8007ce4 <NVIC_EncodePriority>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dce:	4611      	mov	r1, r2
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7ff ff5d 	bl	8007c90 <__NVIC_SetPriority>
}
 8007dd6:	bf00      	nop
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	4603      	mov	r3, r0
 8007de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7ff ff31 	bl	8007c54 <__NVIC_EnableIRQ>
}
 8007df2:	bf00      	nop
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7ff ffa2 	bl	8007d4c <SysTick_Config>
 8007e08:	4603      	mov	r3, r0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007e20:	f7ff f97e 	bl	8007120 <HAL_GetTick>
 8007e24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d008      	beq.n	8007e44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2280      	movs	r2, #128	; 0x80
 8007e36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e052      	b.n	8007eea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f022 0216 	bic.w	r2, r2, #22
 8007e52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	695a      	ldr	r2, [r3, #20]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d103      	bne.n	8007e74 <HAL_DMA_Abort+0x62>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d007      	beq.n	8007e84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f022 0208 	bic.w	r2, r2, #8
 8007e82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0201 	bic.w	r2, r2, #1
 8007e92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e94:	e013      	b.n	8007ebe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e96:	f7ff f943 	bl	8007120 <HAL_GetTick>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	2b05      	cmp	r3, #5
 8007ea2:	d90c      	bls.n	8007ebe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2203      	movs	r2, #3
 8007eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e015      	b.n	8007eea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e4      	bne.n	8007e96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ed0:	223f      	movs	r2, #63	; 0x3f
 8007ed2:	409a      	lsls	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b083      	sub	sp, #12
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d004      	beq.n	8007f10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2280      	movs	r2, #128	; 0x80
 8007f0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e00c      	b.n	8007f2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2205      	movs	r2, #5
 8007f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 0201 	bic.w	r2, r2, #1
 8007f26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	370c      	adds	r7, #12
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
	...

08007f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b089      	sub	sp, #36	; 0x24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f4e:	2300      	movs	r3, #0
 8007f50:	61fb      	str	r3, [r7, #28]
 8007f52:	e16b      	b.n	800822c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007f54:	2201      	movs	r2, #1
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	4013      	ands	r3, r2
 8007f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	f040 815a 	bne.w	8008226 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d005      	beq.n	8007f8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d130      	bne.n	8007fec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	005b      	lsls	r3, r3, #1
 8007f94:	2203      	movs	r2, #3
 8007f96:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9a:	43db      	mvns	r3, r3
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	68da      	ldr	r2, [r3, #12]
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	fa02 f303 	lsl.w	r3, r2, r3
 8007fae:	69ba      	ldr	r2, [r7, #24]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc8:	43db      	mvns	r3, r3
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	4013      	ands	r3, r2
 8007fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	091b      	lsrs	r3, r3, #4
 8007fd6:	f003 0201 	and.w	r2, r3, #1
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	69ba      	ldr	r2, [r7, #24]
 8007fea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f003 0303 	and.w	r3, r3, #3
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d017      	beq.n	8008028 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	005b      	lsls	r3, r3, #1
 8008002:	2203      	movs	r2, #3
 8008004:	fa02 f303 	lsl.w	r3, r2, r3
 8008008:	43db      	mvns	r3, r3
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	4013      	ands	r3, r2
 800800e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	005b      	lsls	r3, r3, #1
 8008018:	fa02 f303 	lsl.w	r3, r2, r3
 800801c:	69ba      	ldr	r2, [r7, #24]
 800801e:	4313      	orrs	r3, r2
 8008020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	69ba      	ldr	r2, [r7, #24]
 8008026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	f003 0303 	and.w	r3, r3, #3
 8008030:	2b02      	cmp	r3, #2
 8008032:	d123      	bne.n	800807c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	08da      	lsrs	r2, r3, #3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	3208      	adds	r2, #8
 800803c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008040:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	f003 0307 	and.w	r3, r3, #7
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	220f      	movs	r2, #15
 800804c:	fa02 f303 	lsl.w	r3, r2, r3
 8008050:	43db      	mvns	r3, r3
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	4013      	ands	r3, r2
 8008056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	691a      	ldr	r2, [r3, #16]
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	f003 0307 	and.w	r3, r3, #7
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	fa02 f303 	lsl.w	r3, r2, r3
 8008068:	69ba      	ldr	r2, [r7, #24]
 800806a:	4313      	orrs	r3, r2
 800806c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	08da      	lsrs	r2, r3, #3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	3208      	adds	r2, #8
 8008076:	69b9      	ldr	r1, [r7, #24]
 8008078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	2203      	movs	r2, #3
 8008088:	fa02 f303 	lsl.w	r3, r2, r3
 800808c:	43db      	mvns	r3, r3
 800808e:	69ba      	ldr	r2, [r7, #24]
 8008090:	4013      	ands	r3, r2
 8008092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	f003 0203 	and.w	r2, r3, #3
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	005b      	lsls	r3, r3, #1
 80080a0:	fa02 f303 	lsl.w	r3, r2, r3
 80080a4:	69ba      	ldr	r2, [r7, #24]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 80b4 	beq.w	8008226 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080be:	2300      	movs	r3, #0
 80080c0:	60fb      	str	r3, [r7, #12]
 80080c2:	4b60      	ldr	r3, [pc, #384]	; (8008244 <HAL_GPIO_Init+0x30c>)
 80080c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c6:	4a5f      	ldr	r2, [pc, #380]	; (8008244 <HAL_GPIO_Init+0x30c>)
 80080c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080cc:	6453      	str	r3, [r2, #68]	; 0x44
 80080ce:	4b5d      	ldr	r3, [pc, #372]	; (8008244 <HAL_GPIO_Init+0x30c>)
 80080d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080d6:	60fb      	str	r3, [r7, #12]
 80080d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80080da:	4a5b      	ldr	r2, [pc, #364]	; (8008248 <HAL_GPIO_Init+0x310>)
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	089b      	lsrs	r3, r3, #2
 80080e0:	3302      	adds	r3, #2
 80080e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	220f      	movs	r2, #15
 80080f2:	fa02 f303 	lsl.w	r3, r2, r3
 80080f6:	43db      	mvns	r3, r3
 80080f8:	69ba      	ldr	r2, [r7, #24]
 80080fa:	4013      	ands	r3, r2
 80080fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a52      	ldr	r2, [pc, #328]	; (800824c <HAL_GPIO_Init+0x314>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d02b      	beq.n	800815e <HAL_GPIO_Init+0x226>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a51      	ldr	r2, [pc, #324]	; (8008250 <HAL_GPIO_Init+0x318>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d025      	beq.n	800815a <HAL_GPIO_Init+0x222>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a50      	ldr	r2, [pc, #320]	; (8008254 <HAL_GPIO_Init+0x31c>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d01f      	beq.n	8008156 <HAL_GPIO_Init+0x21e>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a4f      	ldr	r2, [pc, #316]	; (8008258 <HAL_GPIO_Init+0x320>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d019      	beq.n	8008152 <HAL_GPIO_Init+0x21a>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a4e      	ldr	r2, [pc, #312]	; (800825c <HAL_GPIO_Init+0x324>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d013      	beq.n	800814e <HAL_GPIO_Init+0x216>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a4d      	ldr	r2, [pc, #308]	; (8008260 <HAL_GPIO_Init+0x328>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d00d      	beq.n	800814a <HAL_GPIO_Init+0x212>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a4c      	ldr	r2, [pc, #304]	; (8008264 <HAL_GPIO_Init+0x32c>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d007      	beq.n	8008146 <HAL_GPIO_Init+0x20e>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a4b      	ldr	r2, [pc, #300]	; (8008268 <HAL_GPIO_Init+0x330>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d101      	bne.n	8008142 <HAL_GPIO_Init+0x20a>
 800813e:	2307      	movs	r3, #7
 8008140:	e00e      	b.n	8008160 <HAL_GPIO_Init+0x228>
 8008142:	2308      	movs	r3, #8
 8008144:	e00c      	b.n	8008160 <HAL_GPIO_Init+0x228>
 8008146:	2306      	movs	r3, #6
 8008148:	e00a      	b.n	8008160 <HAL_GPIO_Init+0x228>
 800814a:	2305      	movs	r3, #5
 800814c:	e008      	b.n	8008160 <HAL_GPIO_Init+0x228>
 800814e:	2304      	movs	r3, #4
 8008150:	e006      	b.n	8008160 <HAL_GPIO_Init+0x228>
 8008152:	2303      	movs	r3, #3
 8008154:	e004      	b.n	8008160 <HAL_GPIO_Init+0x228>
 8008156:	2302      	movs	r3, #2
 8008158:	e002      	b.n	8008160 <HAL_GPIO_Init+0x228>
 800815a:	2301      	movs	r3, #1
 800815c:	e000      	b.n	8008160 <HAL_GPIO_Init+0x228>
 800815e:	2300      	movs	r3, #0
 8008160:	69fa      	ldr	r2, [r7, #28]
 8008162:	f002 0203 	and.w	r2, r2, #3
 8008166:	0092      	lsls	r2, r2, #2
 8008168:	4093      	lsls	r3, r2
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	4313      	orrs	r3, r2
 800816e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008170:	4935      	ldr	r1, [pc, #212]	; (8008248 <HAL_GPIO_Init+0x310>)
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	089b      	lsrs	r3, r3, #2
 8008176:	3302      	adds	r3, #2
 8008178:	69ba      	ldr	r2, [r7, #24]
 800817a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800817e:	4b3b      	ldr	r3, [pc, #236]	; (800826c <HAL_GPIO_Init+0x334>)
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	43db      	mvns	r3, r3
 8008188:	69ba      	ldr	r2, [r7, #24]
 800818a:	4013      	ands	r3, r2
 800818c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800819a:	69ba      	ldr	r2, [r7, #24]
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	4313      	orrs	r3, r2
 80081a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80081a2:	4a32      	ldr	r2, [pc, #200]	; (800826c <HAL_GPIO_Init+0x334>)
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80081a8:	4b30      	ldr	r3, [pc, #192]	; (800826c <HAL_GPIO_Init+0x334>)
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	43db      	mvns	r3, r3
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	4013      	ands	r3, r2
 80081b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80081cc:	4a27      	ldr	r2, [pc, #156]	; (800826c <HAL_GPIO_Init+0x334>)
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80081d2:	4b26      	ldr	r3, [pc, #152]	; (800826c <HAL_GPIO_Init+0x334>)
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	43db      	mvns	r3, r3
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	4013      	ands	r3, r2
 80081e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80081ee:	69ba      	ldr	r2, [r7, #24]
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80081f6:	4a1d      	ldr	r2, [pc, #116]	; (800826c <HAL_GPIO_Init+0x334>)
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80081fc:	4b1b      	ldr	r3, [pc, #108]	; (800826c <HAL_GPIO_Init+0x334>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	43db      	mvns	r3, r3
 8008206:	69ba      	ldr	r2, [r7, #24]
 8008208:	4013      	ands	r3, r2
 800820a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008218:	69ba      	ldr	r2, [r7, #24]
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	4313      	orrs	r3, r2
 800821e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008220:	4a12      	ldr	r2, [pc, #72]	; (800826c <HAL_GPIO_Init+0x334>)
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	3301      	adds	r3, #1
 800822a:	61fb      	str	r3, [r7, #28]
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	2b0f      	cmp	r3, #15
 8008230:	f67f ae90 	bls.w	8007f54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008234:	bf00      	nop
 8008236:	bf00      	nop
 8008238:	3724      	adds	r7, #36	; 0x24
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	40023800 	.word	0x40023800
 8008248:	40013800 	.word	0x40013800
 800824c:	40020000 	.word	0x40020000
 8008250:	40020400 	.word	0x40020400
 8008254:	40020800 	.word	0x40020800
 8008258:	40020c00 	.word	0x40020c00
 800825c:	40021000 	.word	0x40021000
 8008260:	40021400 	.word	0x40021400
 8008264:	40021800 	.word	0x40021800
 8008268:	40021c00 	.word	0x40021c00
 800826c:	40013c00 	.word	0x40013c00

08008270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	807b      	strh	r3, [r7, #2]
 800827c:	4613      	mov	r3, r2
 800827e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008280:	787b      	ldrb	r3, [r7, #1]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008286:	887a      	ldrh	r2, [r7, #2]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800828c:	e003      	b.n	8008296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800828e:	887b      	ldrh	r3, [r7, #2]
 8008290:	041a      	lsls	r2, r3, #16
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	619a      	str	r2, [r3, #24]
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
	...

080082a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e12b      	b.n	800850e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d106      	bne.n	80082d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7fe fba2 	bl	8006a14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2224      	movs	r2, #36	; 0x24
 80082d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0201 	bic.w	r2, r2, #1
 80082e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008306:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008308:	f001 fbe4 	bl	8009ad4 <HAL_RCC_GetPCLK1Freq>
 800830c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	4a81      	ldr	r2, [pc, #516]	; (8008518 <HAL_I2C_Init+0x274>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d807      	bhi.n	8008328 <HAL_I2C_Init+0x84>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4a80      	ldr	r2, [pc, #512]	; (800851c <HAL_I2C_Init+0x278>)
 800831c:	4293      	cmp	r3, r2
 800831e:	bf94      	ite	ls
 8008320:	2301      	movls	r3, #1
 8008322:	2300      	movhi	r3, #0
 8008324:	b2db      	uxtb	r3, r3
 8008326:	e006      	b.n	8008336 <HAL_I2C_Init+0x92>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	4a7d      	ldr	r2, [pc, #500]	; (8008520 <HAL_I2C_Init+0x27c>)
 800832c:	4293      	cmp	r3, r2
 800832e:	bf94      	ite	ls
 8008330:	2301      	movls	r3, #1
 8008332:	2300      	movhi	r3, #0
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e0e7      	b.n	800850e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	4a78      	ldr	r2, [pc, #480]	; (8008524 <HAL_I2C_Init+0x280>)
 8008342:	fba2 2303 	umull	r2, r3, r2, r3
 8008346:	0c9b      	lsrs	r3, r3, #18
 8008348:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	430a      	orrs	r2, r1
 800835c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6a1b      	ldr	r3, [r3, #32]
 8008364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	4a6a      	ldr	r2, [pc, #424]	; (8008518 <HAL_I2C_Init+0x274>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d802      	bhi.n	8008378 <HAL_I2C_Init+0xd4>
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	3301      	adds	r3, #1
 8008376:	e009      	b.n	800838c <HAL_I2C_Init+0xe8>
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800837e:	fb02 f303 	mul.w	r3, r2, r3
 8008382:	4a69      	ldr	r2, [pc, #420]	; (8008528 <HAL_I2C_Init+0x284>)
 8008384:	fba2 2303 	umull	r2, r3, r2, r3
 8008388:	099b      	lsrs	r3, r3, #6
 800838a:	3301      	adds	r3, #1
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	6812      	ldr	r2, [r2, #0]
 8008390:	430b      	orrs	r3, r1
 8008392:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	69db      	ldr	r3, [r3, #28]
 800839a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800839e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	495c      	ldr	r1, [pc, #368]	; (8008518 <HAL_I2C_Init+0x274>)
 80083a8:	428b      	cmp	r3, r1
 80083aa:	d819      	bhi.n	80083e0 <HAL_I2C_Init+0x13c>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	1e59      	subs	r1, r3, #1
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80083ba:	1c59      	adds	r1, r3, #1
 80083bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80083c0:	400b      	ands	r3, r1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <HAL_I2C_Init+0x138>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	1e59      	subs	r1, r3, #1
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80083d4:	3301      	adds	r3, #1
 80083d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083da:	e051      	b.n	8008480 <HAL_I2C_Init+0x1dc>
 80083dc:	2304      	movs	r3, #4
 80083de:	e04f      	b.n	8008480 <HAL_I2C_Init+0x1dc>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d111      	bne.n	800840c <HAL_I2C_Init+0x168>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	1e58      	subs	r0, r3, #1
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6859      	ldr	r1, [r3, #4]
 80083f0:	460b      	mov	r3, r1
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	440b      	add	r3, r1
 80083f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80083fa:	3301      	adds	r3, #1
 80083fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008400:	2b00      	cmp	r3, #0
 8008402:	bf0c      	ite	eq
 8008404:	2301      	moveq	r3, #1
 8008406:	2300      	movne	r3, #0
 8008408:	b2db      	uxtb	r3, r3
 800840a:	e012      	b.n	8008432 <HAL_I2C_Init+0x18e>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	1e58      	subs	r0, r3, #1
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6859      	ldr	r1, [r3, #4]
 8008414:	460b      	mov	r3, r1
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	440b      	add	r3, r1
 800841a:	0099      	lsls	r1, r3, #2
 800841c:	440b      	add	r3, r1
 800841e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008422:	3301      	adds	r3, #1
 8008424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008428:	2b00      	cmp	r3, #0
 800842a:	bf0c      	ite	eq
 800842c:	2301      	moveq	r3, #1
 800842e:	2300      	movne	r3, #0
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <HAL_I2C_Init+0x196>
 8008436:	2301      	movs	r3, #1
 8008438:	e022      	b.n	8008480 <HAL_I2C_Init+0x1dc>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10e      	bne.n	8008460 <HAL_I2C_Init+0x1bc>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	1e58      	subs	r0, r3, #1
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6859      	ldr	r1, [r3, #4]
 800844a:	460b      	mov	r3, r1
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	440b      	add	r3, r1
 8008450:	fbb0 f3f3 	udiv	r3, r0, r3
 8008454:	3301      	adds	r3, #1
 8008456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800845a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800845e:	e00f      	b.n	8008480 <HAL_I2C_Init+0x1dc>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	1e58      	subs	r0, r3, #1
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6859      	ldr	r1, [r3, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	440b      	add	r3, r1
 800846e:	0099      	lsls	r1, r3, #2
 8008470:	440b      	add	r3, r1
 8008472:	fbb0 f3f3 	udiv	r3, r0, r3
 8008476:	3301      	adds	r3, #1
 8008478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800847c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008480:	6879      	ldr	r1, [r7, #4]
 8008482:	6809      	ldr	r1, [r1, #0]
 8008484:	4313      	orrs	r3, r2
 8008486:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	69da      	ldr	r2, [r3, #28]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	431a      	orrs	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80084ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	6911      	ldr	r1, [r2, #16]
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	68d2      	ldr	r2, [r2, #12]
 80084ba:	4311      	orrs	r1, r2
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	6812      	ldr	r2, [r2, #0]
 80084c0:	430b      	orrs	r3, r1
 80084c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	695a      	ldr	r2, [r3, #20]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	431a      	orrs	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f042 0201 	orr.w	r2, r2, #1
 80084ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2220      	movs	r2, #32
 80084fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	000186a0 	.word	0x000186a0
 800851c:	001e847f 	.word	0x001e847f
 8008520:	003d08ff 	.word	0x003d08ff
 8008524:	431bde83 	.word	0x431bde83
 8008528:	10624dd3 	.word	0x10624dd3

0800852c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b088      	sub	sp, #32
 8008530:	af02      	add	r7, sp, #8
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	4608      	mov	r0, r1
 8008536:	4611      	mov	r1, r2
 8008538:	461a      	mov	r2, r3
 800853a:	4603      	mov	r3, r0
 800853c:	817b      	strh	r3, [r7, #10]
 800853e:	460b      	mov	r3, r1
 8008540:	813b      	strh	r3, [r7, #8]
 8008542:	4613      	mov	r3, r2
 8008544:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008546:	f7fe fdeb 	bl	8007120 <HAL_GetTick>
 800854a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b20      	cmp	r3, #32
 8008556:	f040 80d9 	bne.w	800870c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	2319      	movs	r3, #25
 8008560:	2201      	movs	r2, #1
 8008562:	496d      	ldr	r1, [pc, #436]	; (8008718 <HAL_I2C_Mem_Write+0x1ec>)
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 fc7f 	bl	8008e68 <I2C_WaitOnFlagUntilTimeout>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d001      	beq.n	8008574 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008570:	2302      	movs	r3, #2
 8008572:	e0cc      	b.n	800870e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800857a:	2b01      	cmp	r3, #1
 800857c:	d101      	bne.n	8008582 <HAL_I2C_Mem_Write+0x56>
 800857e:	2302      	movs	r3, #2
 8008580:	e0c5      	b.n	800870e <HAL_I2C_Mem_Write+0x1e2>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0301 	and.w	r3, r3, #1
 8008594:	2b01      	cmp	r3, #1
 8008596:	d007      	beq.n	80085a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f042 0201 	orr.w	r2, r2, #1
 80085a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2221      	movs	r2, #33	; 0x21
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2240      	movs	r2, #64	; 0x40
 80085c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6a3a      	ldr	r2, [r7, #32]
 80085d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80085d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085de:	b29a      	uxth	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	4a4d      	ldr	r2, [pc, #308]	; (800871c <HAL_I2C_Mem_Write+0x1f0>)
 80085e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80085ea:	88f8      	ldrh	r0, [r7, #6]
 80085ec:	893a      	ldrh	r2, [r7, #8]
 80085ee:	8979      	ldrh	r1, [r7, #10]
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	9301      	str	r3, [sp, #4]
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	4603      	mov	r3, r0
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f000 fab6 	bl	8008b6c <I2C_RequestMemoryWrite>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d052      	beq.n	80086ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e081      	b.n	800870e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f000 fd00 	bl	8009014 <I2C_WaitOnTXEFlagUntilTimeout>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00d      	beq.n	8008636 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861e:	2b04      	cmp	r3, #4
 8008620:	d107      	bne.n	8008632 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008630:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e06b      	b.n	800870e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863a:	781a      	ldrb	r2, [r3, #0]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008646:	1c5a      	adds	r2, r3, #1
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008650:	3b01      	subs	r3, #1
 8008652:	b29a      	uxth	r2, r3
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800865c:	b29b      	uxth	r3, r3
 800865e:	3b01      	subs	r3, #1
 8008660:	b29a      	uxth	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	f003 0304 	and.w	r3, r3, #4
 8008670:	2b04      	cmp	r3, #4
 8008672:	d11b      	bne.n	80086ac <HAL_I2C_Mem_Write+0x180>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008678:	2b00      	cmp	r3, #0
 800867a:	d017      	beq.n	80086ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	781a      	ldrb	r2, [r3, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	1c5a      	adds	r2, r3, #1
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008696:	3b01      	subs	r3, #1
 8008698:	b29a      	uxth	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	3b01      	subs	r3, #1
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1aa      	bne.n	800860a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 fcec 	bl	8009096 <I2C_WaitOnBTFFlagUntilTimeout>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00d      	beq.n	80086e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	d107      	bne.n	80086dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e016      	b.n	800870e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2220      	movs	r2, #32
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	e000      	b.n	800870e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800870c:	2302      	movs	r3, #2
  }
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	00100002 	.word	0x00100002
 800871c:	ffff0000 	.word	0xffff0000

08008720 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b08c      	sub	sp, #48	; 0x30
 8008724:	af02      	add	r7, sp, #8
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	4608      	mov	r0, r1
 800872a:	4611      	mov	r1, r2
 800872c:	461a      	mov	r2, r3
 800872e:	4603      	mov	r3, r0
 8008730:	817b      	strh	r3, [r7, #10]
 8008732:	460b      	mov	r3, r1
 8008734:	813b      	strh	r3, [r7, #8]
 8008736:	4613      	mov	r3, r2
 8008738:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800873a:	f7fe fcf1 	bl	8007120 <HAL_GetTick>
 800873e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b20      	cmp	r3, #32
 800874a:	f040 8208 	bne.w	8008b5e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	2319      	movs	r3, #25
 8008754:	2201      	movs	r2, #1
 8008756:	497b      	ldr	r1, [pc, #492]	; (8008944 <HAL_I2C_Mem_Read+0x224>)
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 fb85 	bl	8008e68 <I2C_WaitOnFlagUntilTimeout>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008764:	2302      	movs	r3, #2
 8008766:	e1fb      	b.n	8008b60 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800876e:	2b01      	cmp	r3, #1
 8008770:	d101      	bne.n	8008776 <HAL_I2C_Mem_Read+0x56>
 8008772:	2302      	movs	r3, #2
 8008774:	e1f4      	b.n	8008b60 <HAL_I2C_Mem_Read+0x440>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b01      	cmp	r3, #1
 800878a:	d007      	beq.n	800879c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f042 0201 	orr.w	r2, r2, #1
 800879a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2222      	movs	r2, #34	; 0x22
 80087b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2240      	movs	r2, #64	; 0x40
 80087b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80087cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	4a5b      	ldr	r2, [pc, #364]	; (8008948 <HAL_I2C_Mem_Read+0x228>)
 80087dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80087de:	88f8      	ldrh	r0, [r7, #6]
 80087e0:	893a      	ldrh	r2, [r7, #8]
 80087e2:	8979      	ldrh	r1, [r7, #10]
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	9301      	str	r3, [sp, #4]
 80087e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	4603      	mov	r3, r0
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f000 fa52 	bl	8008c98 <I2C_RequestMemoryRead>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e1b0      	b.n	8008b60 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008802:	2b00      	cmp	r3, #0
 8008804:	d113      	bne.n	800882e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008806:	2300      	movs	r3, #0
 8008808:	623b      	str	r3, [r7, #32]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	623b      	str	r3, [r7, #32]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	623b      	str	r3, [r7, #32]
 800881a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	e184      	b.n	8008b38 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008832:	2b01      	cmp	r3, #1
 8008834:	d11b      	bne.n	800886e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008844:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008846:	2300      	movs	r3, #0
 8008848:	61fb      	str	r3, [r7, #28]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	61fb      	str	r3, [r7, #28]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	61fb      	str	r3, [r7, #28]
 800885a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	e164      	b.n	8008b38 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008872:	2b02      	cmp	r3, #2
 8008874:	d11b      	bne.n	80088ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008884:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008894:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008896:	2300      	movs	r3, #0
 8008898:	61bb      	str	r3, [r7, #24]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	61bb      	str	r3, [r7, #24]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	61bb      	str	r3, [r7, #24]
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	e144      	b.n	8008b38 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088ae:	2300      	movs	r3, #0
 80088b0:	617b      	str	r3, [r7, #20]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	617b      	str	r3, [r7, #20]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	617b      	str	r3, [r7, #20]
 80088c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80088c4:	e138      	b.n	8008b38 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	f200 80f1 	bhi.w	8008ab2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d123      	bne.n	8008920 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 fc1b 	bl	8009118 <I2C_WaitOnRXNEFlagUntilTimeout>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e139      	b.n	8008b60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	691a      	ldr	r2, [r3, #16]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f6:	b2d2      	uxtb	r2, r2
 80088f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008908:	3b01      	subs	r3, #1
 800890a:	b29a      	uxth	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008914:	b29b      	uxth	r3, r3
 8008916:	3b01      	subs	r3, #1
 8008918:	b29a      	uxth	r2, r3
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800891e:	e10b      	b.n	8008b38 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008924:	2b02      	cmp	r3, #2
 8008926:	d14e      	bne.n	80089c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892e:	2200      	movs	r2, #0
 8008930:	4906      	ldr	r1, [pc, #24]	; (800894c <HAL_I2C_Mem_Read+0x22c>)
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f000 fa98 	bl	8008e68 <I2C_WaitOnFlagUntilTimeout>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d008      	beq.n	8008950 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e10e      	b.n	8008b60 <HAL_I2C_Mem_Read+0x440>
 8008942:	bf00      	nop
 8008944:	00100002 	.word	0x00100002
 8008948:	ffff0000 	.word	0xffff0000
 800894c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800895e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	691a      	ldr	r2, [r3, #16]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	b2d2      	uxtb	r2, r2
 800896c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	1c5a      	adds	r2, r3, #1
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800897c:	3b01      	subs	r3, #1
 800897e:	b29a      	uxth	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008988:	b29b      	uxth	r3, r3
 800898a:	3b01      	subs	r3, #1
 800898c:	b29a      	uxth	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	691a      	ldr	r2, [r3, #16]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899c:	b2d2      	uxtb	r2, r2
 800899e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a4:	1c5a      	adds	r2, r3, #1
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ae:	3b01      	subs	r3, #1
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	3b01      	subs	r3, #1
 80089be:	b29a      	uxth	r2, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80089c4:	e0b8      	b.n	8008b38 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089cc:	2200      	movs	r2, #0
 80089ce:	4966      	ldr	r1, [pc, #408]	; (8008b68 <HAL_I2C_Mem_Read+0x448>)
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f000 fa49 	bl	8008e68 <I2C_WaitOnFlagUntilTimeout>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e0bf      	b.n	8008b60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	691a      	ldr	r2, [r3, #16]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fa:	b2d2      	uxtb	r2, r2
 80089fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a28:	2200      	movs	r2, #0
 8008a2a:	494f      	ldr	r1, [pc, #316]	; (8008b68 <HAL_I2C_Mem_Read+0x448>)
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f000 fa1b 	bl	8008e68 <I2C_WaitOnFlagUntilTimeout>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e091      	b.n	8008b60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	691a      	ldr	r2, [r3, #16]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	b2d2      	uxtb	r2, r2
 8008a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	1c5a      	adds	r2, r3, #1
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	3b01      	subs	r3, #1
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	691a      	ldr	r2, [r3, #16]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	b2d2      	uxtb	r2, r2
 8008a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a90:	1c5a      	adds	r2, r3, #1
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008ab0:	e042      	b.n	8008b38 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f000 fb2e 	bl	8009118 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e04c      	b.n	8008b60 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	691a      	ldr	r2, [r3, #16]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad0:	b2d2      	uxtb	r2, r2
 8008ad2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad8:	1c5a      	adds	r2, r3, #1
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	3b01      	subs	r3, #1
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	f003 0304 	and.w	r3, r3, #4
 8008b02:	2b04      	cmp	r3, #4
 8008b04:	d118      	bne.n	8008b38 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	691a      	ldr	r2, [r3, #16]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b10:	b2d2      	uxtb	r2, r2
 8008b12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	1c5a      	adds	r2, r3, #1
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b22:	3b01      	subs	r3, #1
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	3b01      	subs	r3, #1
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f47f aec2 	bne.w	80088c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	e000      	b.n	8008b60 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008b5e:	2302      	movs	r3, #2
  }
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3728      	adds	r7, #40	; 0x28
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	00010004 	.word	0x00010004

08008b6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b088      	sub	sp, #32
 8008b70:	af02      	add	r7, sp, #8
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	4608      	mov	r0, r1
 8008b76:	4611      	mov	r1, r2
 8008b78:	461a      	mov	r2, r3
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	817b      	strh	r3, [r7, #10]
 8008b7e:	460b      	mov	r3, r1
 8008b80:	813b      	strh	r3, [r7, #8]
 8008b82:	4613      	mov	r3, r2
 8008b84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	9300      	str	r3, [sp, #0]
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f000 f960 	bl	8008e68 <I2C_WaitOnFlagUntilTimeout>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00d      	beq.n	8008bca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bbc:	d103      	bne.n	8008bc6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e05f      	b.n	8008c8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008bca:	897b      	ldrh	r3, [r7, #10]
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	461a      	mov	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008bd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	6a3a      	ldr	r2, [r7, #32]
 8008bde:	492d      	ldr	r1, [pc, #180]	; (8008c94 <I2C_RequestMemoryWrite+0x128>)
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 f998 	bl	8008f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e04c      	b.n	8008c8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	617b      	str	r3, [r7, #20]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	617b      	str	r3, [r7, #20]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	617b      	str	r3, [r7, #20]
 8008c04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c08:	6a39      	ldr	r1, [r7, #32]
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 fa02 	bl	8009014 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00d      	beq.n	8008c32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1a:	2b04      	cmp	r3, #4
 8008c1c:	d107      	bne.n	8008c2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e02b      	b.n	8008c8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c32:	88fb      	ldrh	r3, [r7, #6]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d105      	bne.n	8008c44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c38:	893b      	ldrh	r3, [r7, #8]
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	611a      	str	r2, [r3, #16]
 8008c42:	e021      	b.n	8008c88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008c44:	893b      	ldrh	r3, [r7, #8]
 8008c46:	0a1b      	lsrs	r3, r3, #8
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c54:	6a39      	ldr	r1, [r7, #32]
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 f9dc 	bl	8009014 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00d      	beq.n	8008c7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	d107      	bne.n	8008c7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e005      	b.n	8008c8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c7e:	893b      	ldrh	r3, [r7, #8]
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3718      	adds	r7, #24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	00010002 	.word	0x00010002

08008c98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b088      	sub	sp, #32
 8008c9c:	af02      	add	r7, sp, #8
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	4608      	mov	r0, r1
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	817b      	strh	r3, [r7, #10]
 8008caa:	460b      	mov	r3, r1
 8008cac:	813b      	strh	r3, [r7, #8]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008cc0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f000 f8c2 	bl	8008e68 <I2C_WaitOnFlagUntilTimeout>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00d      	beq.n	8008d06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cf8:	d103      	bne.n	8008d02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008d02:	2303      	movs	r3, #3
 8008d04:	e0aa      	b.n	8008e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008d06:	897b      	ldrh	r3, [r7, #10]
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008d14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d18:	6a3a      	ldr	r2, [r7, #32]
 8008d1a:	4952      	ldr	r1, [pc, #328]	; (8008e64 <I2C_RequestMemoryRead+0x1cc>)
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f000 f8fa 	bl	8008f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e097      	b.n	8008e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	617b      	str	r3, [r7, #20]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	617b      	str	r3, [r7, #20]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	617b      	str	r3, [r7, #20]
 8008d40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d44:	6a39      	ldr	r1, [r7, #32]
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f000 f964 	bl	8009014 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00d      	beq.n	8008d6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d56:	2b04      	cmp	r3, #4
 8008d58:	d107      	bne.n	8008d6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e076      	b.n	8008e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d6e:	88fb      	ldrh	r3, [r7, #6]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d105      	bne.n	8008d80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008d74:	893b      	ldrh	r3, [r7, #8]
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	611a      	str	r2, [r3, #16]
 8008d7e:	e021      	b.n	8008dc4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008d80:	893b      	ldrh	r3, [r7, #8]
 8008d82:	0a1b      	lsrs	r3, r3, #8
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d90:	6a39      	ldr	r1, [r7, #32]
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f000 f93e 	bl	8009014 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00d      	beq.n	8008dba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da2:	2b04      	cmp	r3, #4
 8008da4:	d107      	bne.n	8008db6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008db4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e050      	b.n	8008e5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008dba:	893b      	ldrh	r3, [r7, #8]
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc6:	6a39      	ldr	r1, [r7, #32]
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 f923 	bl	8009014 <I2C_WaitOnTXEFlagUntilTimeout>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00d      	beq.n	8008df0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd8:	2b04      	cmp	r3, #4
 8008dda:	d107      	bne.n	8008dec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e035      	b.n	8008e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dfe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	6a3b      	ldr	r3, [r7, #32]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 f82b 	bl	8008e68 <I2C_WaitOnFlagUntilTimeout>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00d      	beq.n	8008e34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e26:	d103      	bne.n	8008e30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e013      	b.n	8008e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008e34:	897b      	ldrh	r3, [r7, #10]
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	f043 0301 	orr.w	r3, r3, #1
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	6a3a      	ldr	r2, [r7, #32]
 8008e48:	4906      	ldr	r1, [pc, #24]	; (8008e64 <I2C_RequestMemoryRead+0x1cc>)
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 f863 	bl	8008f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e000      	b.n	8008e5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3718      	adds	r7, #24
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	00010002 	.word	0x00010002

08008e68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	603b      	str	r3, [r7, #0]
 8008e74:	4613      	mov	r3, r2
 8008e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e78:	e025      	b.n	8008ec6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e80:	d021      	beq.n	8008ec6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e82:	f7fe f94d 	bl	8007120 <HAL_GetTick>
 8008e86:	4602      	mov	r2, r0
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	683a      	ldr	r2, [r7, #0]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d302      	bcc.n	8008e98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d116      	bne.n	8008ec6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2220      	movs	r2, #32
 8008ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb2:	f043 0220 	orr.w	r2, r3, #32
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e023      	b.n	8008f0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	0c1b      	lsrs	r3, r3, #16
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d10d      	bne.n	8008eec <I2C_WaitOnFlagUntilTimeout+0x84>
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	43da      	mvns	r2, r3
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	4013      	ands	r3, r2
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	bf0c      	ite	eq
 8008ee2:	2301      	moveq	r3, #1
 8008ee4:	2300      	movne	r3, #0
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	461a      	mov	r2, r3
 8008eea:	e00c      	b.n	8008f06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	699b      	ldr	r3, [r3, #24]
 8008ef2:	43da      	mvns	r2, r3
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	bf0c      	ite	eq
 8008efe:	2301      	moveq	r3, #1
 8008f00:	2300      	movne	r3, #0
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	461a      	mov	r2, r3
 8008f06:	79fb      	ldrb	r3, [r7, #7]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d0b6      	beq.n	8008e7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b084      	sub	sp, #16
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	60f8      	str	r0, [r7, #12]
 8008f1e:	60b9      	str	r1, [r7, #8]
 8008f20:	607a      	str	r2, [r7, #4]
 8008f22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008f24:	e051      	b.n	8008fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	695b      	ldr	r3, [r3, #20]
 8008f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f34:	d123      	bne.n	8008f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008f4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6a:	f043 0204 	orr.w	r2, r3, #4
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e046      	b.n	800900c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f84:	d021      	beq.n	8008fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f86:	f7fe f8cb 	bl	8007120 <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d302      	bcc.n	8008f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d116      	bne.n	8008fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2220      	movs	r2, #32
 8008fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb6:	f043 0220 	orr.w	r2, r3, #32
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e020      	b.n	800900c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	0c1b      	lsrs	r3, r3, #16
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d10c      	bne.n	8008fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	43da      	mvns	r2, r3
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	4013      	ands	r3, r2
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	bf14      	ite	ne
 8008fe6:	2301      	movne	r3, #1
 8008fe8:	2300      	moveq	r3, #0
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	e00b      	b.n	8009006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	43da      	mvns	r2, r3
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	bf14      	ite	ne
 8009000:	2301      	movne	r3, #1
 8009002:	2300      	moveq	r3, #0
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d18d      	bne.n	8008f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009020:	e02d      	b.n	800907e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f000 f8ce 	bl	80091c4 <I2C_IsAcknowledgeFailed>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e02d      	b.n	800908e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009038:	d021      	beq.n	800907e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800903a:	f7fe f871 	bl	8007120 <HAL_GetTick>
 800903e:	4602      	mov	r2, r0
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	429a      	cmp	r2, r3
 8009048:	d302      	bcc.n	8009050 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d116      	bne.n	800907e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2220      	movs	r2, #32
 800905a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906a:	f043 0220 	orr.w	r2, r3, #32
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e007      	b.n	800908e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009088:	2b80      	cmp	r3, #128	; 0x80
 800908a:	d1ca      	bne.n	8009022 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b084      	sub	sp, #16
 800909a:	af00      	add	r7, sp, #0
 800909c:	60f8      	str	r0, [r7, #12]
 800909e:	60b9      	str	r1, [r7, #8]
 80090a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80090a2:	e02d      	b.n	8009100 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f000 f88d 	bl	80091c4 <I2C_IsAcknowledgeFailed>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e02d      	b.n	8009110 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ba:	d021      	beq.n	8009100 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090bc:	f7fe f830 	bl	8007120 <HAL_GetTick>
 80090c0:	4602      	mov	r2, r0
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d302      	bcc.n	80090d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d116      	bne.n	8009100 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2220      	movs	r2, #32
 80090dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ec:	f043 0220 	orr.w	r2, r3, #32
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e007      	b.n	8009110 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	f003 0304 	and.w	r3, r3, #4
 800910a:	2b04      	cmp	r3, #4
 800910c:	d1ca      	bne.n	80090a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009124:	e042      	b.n	80091ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	f003 0310 	and.w	r3, r3, #16
 8009130:	2b10      	cmp	r3, #16
 8009132:	d119      	bne.n	8009168 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f06f 0210 	mvn.w	r2, #16
 800913c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2220      	movs	r2, #32
 8009148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e029      	b.n	80091bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009168:	f7fd ffda 	bl	8007120 <HAL_GetTick>
 800916c:	4602      	mov	r2, r0
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	429a      	cmp	r2, r3
 8009176:	d302      	bcc.n	800917e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d116      	bne.n	80091ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2220      	movs	r2, #32
 8009188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009198:	f043 0220 	orr.w	r2, r3, #32
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e007      	b.n	80091bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b6:	2b40      	cmp	r3, #64	; 0x40
 80091b8:	d1b5      	bne.n	8009126 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091da:	d11b      	bne.n	8009214 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80091e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2220      	movs	r2, #32
 80091f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009200:	f043 0204 	orr.w	r2, r3, #4
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e000      	b.n	8009216 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
	...

08009224 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800922a:	4b06      	ldr	r3, [pc, #24]	; (8009244 <HAL_PWR_EnableBkUpAccess+0x20>)
 800922c:	2201      	movs	r2, #1
 800922e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8009230:	4b05      	ldr	r3, [pc, #20]	; (8009248 <HAL_PWR_EnableBkUpAccess+0x24>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8009236:	687b      	ldr	r3, [r7, #4]
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	420e0020 	.word	0x420e0020
 8009248:	40007000 	.word	0x40007000

0800924c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8009252:	4b06      	ldr	r3, [pc, #24]	; (800926c <HAL_PWR_DisableBkUpAccess+0x20>)
 8009254:	2200      	movs	r2, #0
 8009256:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8009258:	4b05      	ldr	r3, [pc, #20]	; (8009270 <HAL_PWR_DisableBkUpAccess+0x24>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800925e:	687b      	ldr	r3, [r7, #4]
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	420e0020 	.word	0x420e0020
 8009270:	40007000 	.word	0x40007000

08009274 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e267      	b.n	8009756 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	2b00      	cmp	r3, #0
 8009290:	d075      	beq.n	800937e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009292:	4b88      	ldr	r3, [pc, #544]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	f003 030c 	and.w	r3, r3, #12
 800929a:	2b04      	cmp	r3, #4
 800929c:	d00c      	beq.n	80092b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800929e:	4b85      	ldr	r3, [pc, #532]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80092a6:	2b08      	cmp	r3, #8
 80092a8:	d112      	bne.n	80092d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80092aa:	4b82      	ldr	r3, [pc, #520]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092b6:	d10b      	bne.n	80092d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092b8:	4b7e      	ldr	r3, [pc, #504]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d05b      	beq.n	800937c <HAL_RCC_OscConfig+0x108>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d157      	bne.n	800937c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e242      	b.n	8009756 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092d8:	d106      	bne.n	80092e8 <HAL_RCC_OscConfig+0x74>
 80092da:	4b76      	ldr	r3, [pc, #472]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a75      	ldr	r2, [pc, #468]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 80092e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	e01d      	b.n	8009324 <HAL_RCC_OscConfig+0xb0>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092f0:	d10c      	bne.n	800930c <HAL_RCC_OscConfig+0x98>
 80092f2:	4b70      	ldr	r3, [pc, #448]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a6f      	ldr	r2, [pc, #444]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 80092f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092fc:	6013      	str	r3, [r2, #0]
 80092fe:	4b6d      	ldr	r3, [pc, #436]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a6c      	ldr	r2, [pc, #432]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 8009304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	e00b      	b.n	8009324 <HAL_RCC_OscConfig+0xb0>
 800930c:	4b69      	ldr	r3, [pc, #420]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a68      	ldr	r2, [pc, #416]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 8009312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009316:	6013      	str	r3, [r2, #0]
 8009318:	4b66      	ldr	r3, [pc, #408]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a65      	ldr	r2, [pc, #404]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 800931e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d013      	beq.n	8009354 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800932c:	f7fd fef8 	bl	8007120 <HAL_GetTick>
 8009330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009332:	e008      	b.n	8009346 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009334:	f7fd fef4 	bl	8007120 <HAL_GetTick>
 8009338:	4602      	mov	r2, r0
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	1ad3      	subs	r3, r2, r3
 800933e:	2b64      	cmp	r3, #100	; 0x64
 8009340:	d901      	bls.n	8009346 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009342:	2303      	movs	r3, #3
 8009344:	e207      	b.n	8009756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009346:	4b5b      	ldr	r3, [pc, #364]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0f0      	beq.n	8009334 <HAL_RCC_OscConfig+0xc0>
 8009352:	e014      	b.n	800937e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009354:	f7fd fee4 	bl	8007120 <HAL_GetTick>
 8009358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800935a:	e008      	b.n	800936e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800935c:	f7fd fee0 	bl	8007120 <HAL_GetTick>
 8009360:	4602      	mov	r2, r0
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	2b64      	cmp	r3, #100	; 0x64
 8009368:	d901      	bls.n	800936e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e1f3      	b.n	8009756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800936e:	4b51      	ldr	r3, [pc, #324]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1f0      	bne.n	800935c <HAL_RCC_OscConfig+0xe8>
 800937a:	e000      	b.n	800937e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800937c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 0302 	and.w	r3, r3, #2
 8009386:	2b00      	cmp	r3, #0
 8009388:	d063      	beq.n	8009452 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800938a:	4b4a      	ldr	r3, [pc, #296]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	f003 030c 	and.w	r3, r3, #12
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00b      	beq.n	80093ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009396:	4b47      	ldr	r3, [pc, #284]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800939e:	2b08      	cmp	r3, #8
 80093a0:	d11c      	bne.n	80093dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80093a2:	4b44      	ldr	r3, [pc, #272]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d116      	bne.n	80093dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093ae:	4b41      	ldr	r3, [pc, #260]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0302 	and.w	r3, r3, #2
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d005      	beq.n	80093c6 <HAL_RCC_OscConfig+0x152>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d001      	beq.n	80093c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e1c7      	b.n	8009756 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093c6:	4b3b      	ldr	r3, [pc, #236]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	00db      	lsls	r3, r3, #3
 80093d4:	4937      	ldr	r1, [pc, #220]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 80093d6:	4313      	orrs	r3, r2
 80093d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093da:	e03a      	b.n	8009452 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d020      	beq.n	8009426 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80093e4:	4b34      	ldr	r3, [pc, #208]	; (80094b8 <HAL_RCC_OscConfig+0x244>)
 80093e6:	2201      	movs	r2, #1
 80093e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ea:	f7fd fe99 	bl	8007120 <HAL_GetTick>
 80093ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093f0:	e008      	b.n	8009404 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093f2:	f7fd fe95 	bl	8007120 <HAL_GetTick>
 80093f6:	4602      	mov	r2, r0
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d901      	bls.n	8009404 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009400:	2303      	movs	r3, #3
 8009402:	e1a8      	b.n	8009756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009404:	4b2b      	ldr	r3, [pc, #172]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 0302 	and.w	r3, r3, #2
 800940c:	2b00      	cmp	r3, #0
 800940e:	d0f0      	beq.n	80093f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009410:	4b28      	ldr	r3, [pc, #160]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	00db      	lsls	r3, r3, #3
 800941e:	4925      	ldr	r1, [pc, #148]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 8009420:	4313      	orrs	r3, r2
 8009422:	600b      	str	r3, [r1, #0]
 8009424:	e015      	b.n	8009452 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009426:	4b24      	ldr	r3, [pc, #144]	; (80094b8 <HAL_RCC_OscConfig+0x244>)
 8009428:	2200      	movs	r2, #0
 800942a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800942c:	f7fd fe78 	bl	8007120 <HAL_GetTick>
 8009430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009432:	e008      	b.n	8009446 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009434:	f7fd fe74 	bl	8007120 <HAL_GetTick>
 8009438:	4602      	mov	r2, r0
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	2b02      	cmp	r3, #2
 8009440:	d901      	bls.n	8009446 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009442:	2303      	movs	r3, #3
 8009444:	e187      	b.n	8009756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009446:	4b1b      	ldr	r3, [pc, #108]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 0302 	and.w	r3, r3, #2
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1f0      	bne.n	8009434 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0308 	and.w	r3, r3, #8
 800945a:	2b00      	cmp	r3, #0
 800945c:	d036      	beq.n	80094cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d016      	beq.n	8009494 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009466:	4b15      	ldr	r3, [pc, #84]	; (80094bc <HAL_RCC_OscConfig+0x248>)
 8009468:	2201      	movs	r2, #1
 800946a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800946c:	f7fd fe58 	bl	8007120 <HAL_GetTick>
 8009470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009472:	e008      	b.n	8009486 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009474:	f7fd fe54 	bl	8007120 <HAL_GetTick>
 8009478:	4602      	mov	r2, r0
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	2b02      	cmp	r3, #2
 8009480:	d901      	bls.n	8009486 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009482:	2303      	movs	r3, #3
 8009484:	e167      	b.n	8009756 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009486:	4b0b      	ldr	r3, [pc, #44]	; (80094b4 <HAL_RCC_OscConfig+0x240>)
 8009488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800948a:	f003 0302 	and.w	r3, r3, #2
 800948e:	2b00      	cmp	r3, #0
 8009490:	d0f0      	beq.n	8009474 <HAL_RCC_OscConfig+0x200>
 8009492:	e01b      	b.n	80094cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009494:	4b09      	ldr	r3, [pc, #36]	; (80094bc <HAL_RCC_OscConfig+0x248>)
 8009496:	2200      	movs	r2, #0
 8009498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800949a:	f7fd fe41 	bl	8007120 <HAL_GetTick>
 800949e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094a0:	e00e      	b.n	80094c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094a2:	f7fd fe3d 	bl	8007120 <HAL_GetTick>
 80094a6:	4602      	mov	r2, r0
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d907      	bls.n	80094c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	e150      	b.n	8009756 <HAL_RCC_OscConfig+0x4e2>
 80094b4:	40023800 	.word	0x40023800
 80094b8:	42470000 	.word	0x42470000
 80094bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094c0:	4b88      	ldr	r3, [pc, #544]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 80094c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094c4:	f003 0302 	and.w	r3, r3, #2
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1ea      	bne.n	80094a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0304 	and.w	r3, r3, #4
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 8097 	beq.w	8009608 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094da:	2300      	movs	r3, #0
 80094dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094de:	4b81      	ldr	r3, [pc, #516]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 80094e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10f      	bne.n	800950a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094ea:	2300      	movs	r3, #0
 80094ec:	60bb      	str	r3, [r7, #8]
 80094ee:	4b7d      	ldr	r3, [pc, #500]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 80094f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f2:	4a7c      	ldr	r2, [pc, #496]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 80094f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094f8:	6413      	str	r3, [r2, #64]	; 0x40
 80094fa:	4b7a      	ldr	r3, [pc, #488]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 80094fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009502:	60bb      	str	r3, [r7, #8]
 8009504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009506:	2301      	movs	r3, #1
 8009508:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800950a:	4b77      	ldr	r3, [pc, #476]	; (80096e8 <HAL_RCC_OscConfig+0x474>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009512:	2b00      	cmp	r3, #0
 8009514:	d118      	bne.n	8009548 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009516:	4b74      	ldr	r3, [pc, #464]	; (80096e8 <HAL_RCC_OscConfig+0x474>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a73      	ldr	r2, [pc, #460]	; (80096e8 <HAL_RCC_OscConfig+0x474>)
 800951c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009522:	f7fd fdfd 	bl	8007120 <HAL_GetTick>
 8009526:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009528:	e008      	b.n	800953c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800952a:	f7fd fdf9 	bl	8007120 <HAL_GetTick>
 800952e:	4602      	mov	r2, r0
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	2b02      	cmp	r3, #2
 8009536:	d901      	bls.n	800953c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009538:	2303      	movs	r3, #3
 800953a:	e10c      	b.n	8009756 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800953c:	4b6a      	ldr	r3, [pc, #424]	; (80096e8 <HAL_RCC_OscConfig+0x474>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009544:	2b00      	cmp	r3, #0
 8009546:	d0f0      	beq.n	800952a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d106      	bne.n	800955e <HAL_RCC_OscConfig+0x2ea>
 8009550:	4b64      	ldr	r3, [pc, #400]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 8009552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009554:	4a63      	ldr	r2, [pc, #396]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 8009556:	f043 0301 	orr.w	r3, r3, #1
 800955a:	6713      	str	r3, [r2, #112]	; 0x70
 800955c:	e01c      	b.n	8009598 <HAL_RCC_OscConfig+0x324>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	2b05      	cmp	r3, #5
 8009564:	d10c      	bne.n	8009580 <HAL_RCC_OscConfig+0x30c>
 8009566:	4b5f      	ldr	r3, [pc, #380]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 8009568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800956a:	4a5e      	ldr	r2, [pc, #376]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 800956c:	f043 0304 	orr.w	r3, r3, #4
 8009570:	6713      	str	r3, [r2, #112]	; 0x70
 8009572:	4b5c      	ldr	r3, [pc, #368]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 8009574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009576:	4a5b      	ldr	r2, [pc, #364]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 8009578:	f043 0301 	orr.w	r3, r3, #1
 800957c:	6713      	str	r3, [r2, #112]	; 0x70
 800957e:	e00b      	b.n	8009598 <HAL_RCC_OscConfig+0x324>
 8009580:	4b58      	ldr	r3, [pc, #352]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 8009582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009584:	4a57      	ldr	r2, [pc, #348]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 8009586:	f023 0301 	bic.w	r3, r3, #1
 800958a:	6713      	str	r3, [r2, #112]	; 0x70
 800958c:	4b55      	ldr	r3, [pc, #340]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 800958e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009590:	4a54      	ldr	r2, [pc, #336]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 8009592:	f023 0304 	bic.w	r3, r3, #4
 8009596:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d015      	beq.n	80095cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095a0:	f7fd fdbe 	bl	8007120 <HAL_GetTick>
 80095a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095a6:	e00a      	b.n	80095be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095a8:	f7fd fdba 	bl	8007120 <HAL_GetTick>
 80095ac:	4602      	mov	r2, r0
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d901      	bls.n	80095be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80095ba:	2303      	movs	r3, #3
 80095bc:	e0cb      	b.n	8009756 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095be:	4b49      	ldr	r3, [pc, #292]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 80095c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095c2:	f003 0302 	and.w	r3, r3, #2
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d0ee      	beq.n	80095a8 <HAL_RCC_OscConfig+0x334>
 80095ca:	e014      	b.n	80095f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095cc:	f7fd fda8 	bl	8007120 <HAL_GetTick>
 80095d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095d2:	e00a      	b.n	80095ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095d4:	f7fd fda4 	bl	8007120 <HAL_GetTick>
 80095d8:	4602      	mov	r2, r0
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	f241 3288 	movw	r2, #5000	; 0x1388
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d901      	bls.n	80095ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80095e6:	2303      	movs	r3, #3
 80095e8:	e0b5      	b.n	8009756 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095ea:	4b3e      	ldr	r3, [pc, #248]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 80095ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ee:	f003 0302 	and.w	r3, r3, #2
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1ee      	bne.n	80095d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80095f6:	7dfb      	ldrb	r3, [r7, #23]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d105      	bne.n	8009608 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095fc:	4b39      	ldr	r3, [pc, #228]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 80095fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009600:	4a38      	ldr	r2, [pc, #224]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 8009602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009606:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	699b      	ldr	r3, [r3, #24]
 800960c:	2b00      	cmp	r3, #0
 800960e:	f000 80a1 	beq.w	8009754 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009612:	4b34      	ldr	r3, [pc, #208]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	f003 030c 	and.w	r3, r3, #12
 800961a:	2b08      	cmp	r3, #8
 800961c:	d05c      	beq.n	80096d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	2b02      	cmp	r3, #2
 8009624:	d141      	bne.n	80096aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009626:	4b31      	ldr	r3, [pc, #196]	; (80096ec <HAL_RCC_OscConfig+0x478>)
 8009628:	2200      	movs	r2, #0
 800962a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800962c:	f7fd fd78 	bl	8007120 <HAL_GetTick>
 8009630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009632:	e008      	b.n	8009646 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009634:	f7fd fd74 	bl	8007120 <HAL_GetTick>
 8009638:	4602      	mov	r2, r0
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	2b02      	cmp	r3, #2
 8009640:	d901      	bls.n	8009646 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009642:	2303      	movs	r3, #3
 8009644:	e087      	b.n	8009756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009646:	4b27      	ldr	r3, [pc, #156]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1f0      	bne.n	8009634 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	69da      	ldr	r2, [r3, #28]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	431a      	orrs	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009660:	019b      	lsls	r3, r3, #6
 8009662:	431a      	orrs	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009668:	085b      	lsrs	r3, r3, #1
 800966a:	3b01      	subs	r3, #1
 800966c:	041b      	lsls	r3, r3, #16
 800966e:	431a      	orrs	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009674:	061b      	lsls	r3, r3, #24
 8009676:	491b      	ldr	r1, [pc, #108]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 8009678:	4313      	orrs	r3, r2
 800967a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800967c:	4b1b      	ldr	r3, [pc, #108]	; (80096ec <HAL_RCC_OscConfig+0x478>)
 800967e:	2201      	movs	r2, #1
 8009680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009682:	f7fd fd4d 	bl	8007120 <HAL_GetTick>
 8009686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009688:	e008      	b.n	800969c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800968a:	f7fd fd49 	bl	8007120 <HAL_GetTick>
 800968e:	4602      	mov	r2, r0
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	2b02      	cmp	r3, #2
 8009696:	d901      	bls.n	800969c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009698:	2303      	movs	r3, #3
 800969a:	e05c      	b.n	8009756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800969c:	4b11      	ldr	r3, [pc, #68]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d0f0      	beq.n	800968a <HAL_RCC_OscConfig+0x416>
 80096a8:	e054      	b.n	8009754 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096aa:	4b10      	ldr	r3, [pc, #64]	; (80096ec <HAL_RCC_OscConfig+0x478>)
 80096ac:	2200      	movs	r2, #0
 80096ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096b0:	f7fd fd36 	bl	8007120 <HAL_GetTick>
 80096b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096b6:	e008      	b.n	80096ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096b8:	f7fd fd32 	bl	8007120 <HAL_GetTick>
 80096bc:	4602      	mov	r2, r0
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d901      	bls.n	80096ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80096c6:	2303      	movs	r3, #3
 80096c8:	e045      	b.n	8009756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096ca:	4b06      	ldr	r3, [pc, #24]	; (80096e4 <HAL_RCC_OscConfig+0x470>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1f0      	bne.n	80096b8 <HAL_RCC_OscConfig+0x444>
 80096d6:	e03d      	b.n	8009754 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d107      	bne.n	80096f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	e038      	b.n	8009756 <HAL_RCC_OscConfig+0x4e2>
 80096e4:	40023800 	.word	0x40023800
 80096e8:	40007000 	.word	0x40007000
 80096ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80096f0:	4b1b      	ldr	r3, [pc, #108]	; (8009760 <HAL_RCC_OscConfig+0x4ec>)
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d028      	beq.n	8009750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009708:	429a      	cmp	r2, r3
 800970a:	d121      	bne.n	8009750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009716:	429a      	cmp	r2, r3
 8009718:	d11a      	bne.n	8009750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009720:	4013      	ands	r3, r2
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009726:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009728:	4293      	cmp	r3, r2
 800972a:	d111      	bne.n	8009750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009736:	085b      	lsrs	r3, r3, #1
 8009738:	3b01      	subs	r3, #1
 800973a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800973c:	429a      	cmp	r2, r3
 800973e:	d107      	bne.n	8009750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800974c:	429a      	cmp	r2, r3
 800974e:	d001      	beq.n	8009754 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e000      	b.n	8009756 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3718      	adds	r7, #24
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	40023800 	.word	0x40023800

08009764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d101      	bne.n	8009778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	e0cc      	b.n	8009912 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009778:	4b68      	ldr	r3, [pc, #416]	; (800991c <HAL_RCC_ClockConfig+0x1b8>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0307 	and.w	r3, r3, #7
 8009780:	683a      	ldr	r2, [r7, #0]
 8009782:	429a      	cmp	r2, r3
 8009784:	d90c      	bls.n	80097a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009786:	4b65      	ldr	r3, [pc, #404]	; (800991c <HAL_RCC_ClockConfig+0x1b8>)
 8009788:	683a      	ldr	r2, [r7, #0]
 800978a:	b2d2      	uxtb	r2, r2
 800978c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800978e:	4b63      	ldr	r3, [pc, #396]	; (800991c <HAL_RCC_ClockConfig+0x1b8>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f003 0307 	and.w	r3, r3, #7
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	429a      	cmp	r2, r3
 800979a:	d001      	beq.n	80097a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	e0b8      	b.n	8009912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 0302 	and.w	r3, r3, #2
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d020      	beq.n	80097ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0304 	and.w	r3, r3, #4
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d005      	beq.n	80097c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80097b8:	4b59      	ldr	r3, [pc, #356]	; (8009920 <HAL_RCC_ClockConfig+0x1bc>)
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	4a58      	ldr	r2, [pc, #352]	; (8009920 <HAL_RCC_ClockConfig+0x1bc>)
 80097be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80097c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 0308 	and.w	r3, r3, #8
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d005      	beq.n	80097dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80097d0:	4b53      	ldr	r3, [pc, #332]	; (8009920 <HAL_RCC_ClockConfig+0x1bc>)
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	4a52      	ldr	r2, [pc, #328]	; (8009920 <HAL_RCC_ClockConfig+0x1bc>)
 80097d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80097da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097dc:	4b50      	ldr	r3, [pc, #320]	; (8009920 <HAL_RCC_ClockConfig+0x1bc>)
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	494d      	ldr	r1, [pc, #308]	; (8009920 <HAL_RCC_ClockConfig+0x1bc>)
 80097ea:	4313      	orrs	r3, r2
 80097ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d044      	beq.n	8009884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d107      	bne.n	8009812 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009802:	4b47      	ldr	r3, [pc, #284]	; (8009920 <HAL_RCC_ClockConfig+0x1bc>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800980a:	2b00      	cmp	r3, #0
 800980c:	d119      	bne.n	8009842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e07f      	b.n	8009912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	2b02      	cmp	r3, #2
 8009818:	d003      	beq.n	8009822 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800981e:	2b03      	cmp	r3, #3
 8009820:	d107      	bne.n	8009832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009822:	4b3f      	ldr	r3, [pc, #252]	; (8009920 <HAL_RCC_ClockConfig+0x1bc>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800982a:	2b00      	cmp	r3, #0
 800982c:	d109      	bne.n	8009842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e06f      	b.n	8009912 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009832:	4b3b      	ldr	r3, [pc, #236]	; (8009920 <HAL_RCC_ClockConfig+0x1bc>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f003 0302 	and.w	r3, r3, #2
 800983a:	2b00      	cmp	r3, #0
 800983c:	d101      	bne.n	8009842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	e067      	b.n	8009912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009842:	4b37      	ldr	r3, [pc, #220]	; (8009920 <HAL_RCC_ClockConfig+0x1bc>)
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	f023 0203 	bic.w	r2, r3, #3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	4934      	ldr	r1, [pc, #208]	; (8009920 <HAL_RCC_ClockConfig+0x1bc>)
 8009850:	4313      	orrs	r3, r2
 8009852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009854:	f7fd fc64 	bl	8007120 <HAL_GetTick>
 8009858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800985a:	e00a      	b.n	8009872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800985c:	f7fd fc60 	bl	8007120 <HAL_GetTick>
 8009860:	4602      	mov	r2, r0
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	1ad3      	subs	r3, r2, r3
 8009866:	f241 3288 	movw	r2, #5000	; 0x1388
 800986a:	4293      	cmp	r3, r2
 800986c:	d901      	bls.n	8009872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800986e:	2303      	movs	r3, #3
 8009870:	e04f      	b.n	8009912 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009872:	4b2b      	ldr	r3, [pc, #172]	; (8009920 <HAL_RCC_ClockConfig+0x1bc>)
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	f003 020c 	and.w	r2, r3, #12
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	429a      	cmp	r2, r3
 8009882:	d1eb      	bne.n	800985c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009884:	4b25      	ldr	r3, [pc, #148]	; (800991c <HAL_RCC_ClockConfig+0x1b8>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f003 0307 	and.w	r3, r3, #7
 800988c:	683a      	ldr	r2, [r7, #0]
 800988e:	429a      	cmp	r2, r3
 8009890:	d20c      	bcs.n	80098ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009892:	4b22      	ldr	r3, [pc, #136]	; (800991c <HAL_RCC_ClockConfig+0x1b8>)
 8009894:	683a      	ldr	r2, [r7, #0]
 8009896:	b2d2      	uxtb	r2, r2
 8009898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800989a:	4b20      	ldr	r3, [pc, #128]	; (800991c <HAL_RCC_ClockConfig+0x1b8>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 0307 	and.w	r3, r3, #7
 80098a2:	683a      	ldr	r2, [r7, #0]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d001      	beq.n	80098ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	e032      	b.n	8009912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 0304 	and.w	r3, r3, #4
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d008      	beq.n	80098ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80098b8:	4b19      	ldr	r3, [pc, #100]	; (8009920 <HAL_RCC_ClockConfig+0x1bc>)
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	4916      	ldr	r1, [pc, #88]	; (8009920 <HAL_RCC_ClockConfig+0x1bc>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 0308 	and.w	r3, r3, #8
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d009      	beq.n	80098ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80098d6:	4b12      	ldr	r3, [pc, #72]	; (8009920 <HAL_RCC_ClockConfig+0x1bc>)
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	00db      	lsls	r3, r3, #3
 80098e4:	490e      	ldr	r1, [pc, #56]	; (8009920 <HAL_RCC_ClockConfig+0x1bc>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80098ea:	f000 f821 	bl	8009930 <HAL_RCC_GetSysClockFreq>
 80098ee:	4602      	mov	r2, r0
 80098f0:	4b0b      	ldr	r3, [pc, #44]	; (8009920 <HAL_RCC_ClockConfig+0x1bc>)
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	091b      	lsrs	r3, r3, #4
 80098f6:	f003 030f 	and.w	r3, r3, #15
 80098fa:	490a      	ldr	r1, [pc, #40]	; (8009924 <HAL_RCC_ClockConfig+0x1c0>)
 80098fc:	5ccb      	ldrb	r3, [r1, r3]
 80098fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009902:	4a09      	ldr	r2, [pc, #36]	; (8009928 <HAL_RCC_ClockConfig+0x1c4>)
 8009904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009906:	4b09      	ldr	r3, [pc, #36]	; (800992c <HAL_RCC_ClockConfig+0x1c8>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4618      	mov	r0, r3
 800990c:	f7fd fbc4 	bl	8007098 <HAL_InitTick>

  return HAL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	40023c00 	.word	0x40023c00
 8009920:	40023800 	.word	0x40023800
 8009924:	08011838 	.word	0x08011838
 8009928:	20000148 	.word	0x20000148
 800992c:	2000014c 	.word	0x2000014c

08009930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009934:	b090      	sub	sp, #64	; 0x40
 8009936:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009938:	2300      	movs	r3, #0
 800993a:	637b      	str	r3, [r7, #52]	; 0x34
 800993c:	2300      	movs	r3, #0
 800993e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009940:	2300      	movs	r3, #0
 8009942:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8009944:	2300      	movs	r3, #0
 8009946:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009948:	4b59      	ldr	r3, [pc, #356]	; (8009ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	f003 030c 	and.w	r3, r3, #12
 8009950:	2b08      	cmp	r3, #8
 8009952:	d00d      	beq.n	8009970 <HAL_RCC_GetSysClockFreq+0x40>
 8009954:	2b08      	cmp	r3, #8
 8009956:	f200 80a1 	bhi.w	8009a9c <HAL_RCC_GetSysClockFreq+0x16c>
 800995a:	2b00      	cmp	r3, #0
 800995c:	d002      	beq.n	8009964 <HAL_RCC_GetSysClockFreq+0x34>
 800995e:	2b04      	cmp	r3, #4
 8009960:	d003      	beq.n	800996a <HAL_RCC_GetSysClockFreq+0x3a>
 8009962:	e09b      	b.n	8009a9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009964:	4b53      	ldr	r3, [pc, #332]	; (8009ab4 <HAL_RCC_GetSysClockFreq+0x184>)
 8009966:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8009968:	e09b      	b.n	8009aa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800996a:	4b53      	ldr	r3, [pc, #332]	; (8009ab8 <HAL_RCC_GetSysClockFreq+0x188>)
 800996c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800996e:	e098      	b.n	8009aa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009970:	4b4f      	ldr	r3, [pc, #316]	; (8009ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009978:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800997a:	4b4d      	ldr	r3, [pc, #308]	; (8009ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009982:	2b00      	cmp	r3, #0
 8009984:	d028      	beq.n	80099d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009986:	4b4a      	ldr	r3, [pc, #296]	; (8009ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	099b      	lsrs	r3, r3, #6
 800998c:	2200      	movs	r2, #0
 800998e:	623b      	str	r3, [r7, #32]
 8009990:	627a      	str	r2, [r7, #36]	; 0x24
 8009992:	6a3b      	ldr	r3, [r7, #32]
 8009994:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009998:	2100      	movs	r1, #0
 800999a:	4b47      	ldr	r3, [pc, #284]	; (8009ab8 <HAL_RCC_GetSysClockFreq+0x188>)
 800999c:	fb03 f201 	mul.w	r2, r3, r1
 80099a0:	2300      	movs	r3, #0
 80099a2:	fb00 f303 	mul.w	r3, r0, r3
 80099a6:	4413      	add	r3, r2
 80099a8:	4a43      	ldr	r2, [pc, #268]	; (8009ab8 <HAL_RCC_GetSysClockFreq+0x188>)
 80099aa:	fba0 1202 	umull	r1, r2, r0, r2
 80099ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099b0:	460a      	mov	r2, r1
 80099b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80099b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099b6:	4413      	add	r3, r2
 80099b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099bc:	2200      	movs	r2, #0
 80099be:	61bb      	str	r3, [r7, #24]
 80099c0:	61fa      	str	r2, [r7, #28]
 80099c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80099ca:	f7f7 f917 	bl	8000bfc <__aeabi_uldivmod>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	4613      	mov	r3, r2
 80099d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099d6:	e053      	b.n	8009a80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80099d8:	4b35      	ldr	r3, [pc, #212]	; (8009ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	099b      	lsrs	r3, r3, #6
 80099de:	2200      	movs	r2, #0
 80099e0:	613b      	str	r3, [r7, #16]
 80099e2:	617a      	str	r2, [r7, #20]
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80099ea:	f04f 0b00 	mov.w	fp, #0
 80099ee:	4652      	mov	r2, sl
 80099f0:	465b      	mov	r3, fp
 80099f2:	f04f 0000 	mov.w	r0, #0
 80099f6:	f04f 0100 	mov.w	r1, #0
 80099fa:	0159      	lsls	r1, r3, #5
 80099fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009a00:	0150      	lsls	r0, r2, #5
 8009a02:	4602      	mov	r2, r0
 8009a04:	460b      	mov	r3, r1
 8009a06:	ebb2 080a 	subs.w	r8, r2, sl
 8009a0a:	eb63 090b 	sbc.w	r9, r3, fp
 8009a0e:	f04f 0200 	mov.w	r2, #0
 8009a12:	f04f 0300 	mov.w	r3, #0
 8009a16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009a1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009a1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009a22:	ebb2 0408 	subs.w	r4, r2, r8
 8009a26:	eb63 0509 	sbc.w	r5, r3, r9
 8009a2a:	f04f 0200 	mov.w	r2, #0
 8009a2e:	f04f 0300 	mov.w	r3, #0
 8009a32:	00eb      	lsls	r3, r5, #3
 8009a34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a38:	00e2      	lsls	r2, r4, #3
 8009a3a:	4614      	mov	r4, r2
 8009a3c:	461d      	mov	r5, r3
 8009a3e:	eb14 030a 	adds.w	r3, r4, sl
 8009a42:	603b      	str	r3, [r7, #0]
 8009a44:	eb45 030b 	adc.w	r3, r5, fp
 8009a48:	607b      	str	r3, [r7, #4]
 8009a4a:	f04f 0200 	mov.w	r2, #0
 8009a4e:	f04f 0300 	mov.w	r3, #0
 8009a52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009a56:	4629      	mov	r1, r5
 8009a58:	028b      	lsls	r3, r1, #10
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009a60:	4621      	mov	r1, r4
 8009a62:	028a      	lsls	r2, r1, #10
 8009a64:	4610      	mov	r0, r2
 8009a66:	4619      	mov	r1, r3
 8009a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	60bb      	str	r3, [r7, #8]
 8009a6e:	60fa      	str	r2, [r7, #12]
 8009a70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a74:	f7f7 f8c2 	bl	8000bfc <__aeabi_uldivmod>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009a80:	4b0b      	ldr	r3, [pc, #44]	; (8009ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	0c1b      	lsrs	r3, r3, #16
 8009a86:	f003 0303 	and.w	r3, r3, #3
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	005b      	lsls	r3, r3, #1
 8009a8e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8009a90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009a9a:	e002      	b.n	8009aa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009a9c:	4b05      	ldr	r3, [pc, #20]	; (8009ab4 <HAL_RCC_GetSysClockFreq+0x184>)
 8009a9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3740      	adds	r7, #64	; 0x40
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009aae:	bf00      	nop
 8009ab0:	40023800 	.word	0x40023800
 8009ab4:	00f42400 	.word	0x00f42400
 8009ab8:	017d7840 	.word	0x017d7840

08009abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009abc:	b480      	push	{r7}
 8009abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ac0:	4b03      	ldr	r3, [pc, #12]	; (8009ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	20000148 	.word	0x20000148

08009ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009ad8:	f7ff fff0 	bl	8009abc <HAL_RCC_GetHCLKFreq>
 8009adc:	4602      	mov	r2, r0
 8009ade:	4b05      	ldr	r3, [pc, #20]	; (8009af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	0a9b      	lsrs	r3, r3, #10
 8009ae4:	f003 0307 	and.w	r3, r3, #7
 8009ae8:	4903      	ldr	r1, [pc, #12]	; (8009af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009aea:	5ccb      	ldrb	r3, [r1, r3]
 8009aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	40023800 	.word	0x40023800
 8009af8:	08011848 	.word	0x08011848

08009afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009b00:	f7ff ffdc 	bl	8009abc <HAL_RCC_GetHCLKFreq>
 8009b04:	4602      	mov	r2, r0
 8009b06:	4b05      	ldr	r3, [pc, #20]	; (8009b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	0b5b      	lsrs	r3, r3, #13
 8009b0c:	f003 0307 	and.w	r3, r3, #7
 8009b10:	4903      	ldr	r1, [pc, #12]	; (8009b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b12:	5ccb      	ldrb	r3, [r1, r3]
 8009b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	40023800 	.word	0x40023800
 8009b20:	08011848 	.word	0x08011848

08009b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d101      	bne.n	8009b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e041      	b.n	8009bba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d106      	bne.n	8009b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7fc ffaa 	bl	8006aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2202      	movs	r2, #2
 8009b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	3304      	adds	r3, #4
 8009b60:	4619      	mov	r1, r3
 8009b62:	4610      	mov	r0, r2
 8009b64:	f001 f842 	bl	800abec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b082      	sub	sp, #8
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d101      	bne.n	8009bd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e041      	b.n	8009c58 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d106      	bne.n	8009bee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f839 	bl	8009c60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4610      	mov	r0, r2
 8009c02:	f000 fff3 	bl	800abec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2201      	movs	r2, #1
 8009c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3708      	adds	r7, #8
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d109      	bne.n	8009c98 <HAL_TIM_PWM_Start+0x24>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	bf14      	ite	ne
 8009c90:	2301      	movne	r3, #1
 8009c92:	2300      	moveq	r3, #0
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	e022      	b.n	8009cde <HAL_TIM_PWM_Start+0x6a>
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	2b04      	cmp	r3, #4
 8009c9c:	d109      	bne.n	8009cb2 <HAL_TIM_PWM_Start+0x3e>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	bf14      	ite	ne
 8009caa:	2301      	movne	r3, #1
 8009cac:	2300      	moveq	r3, #0
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	e015      	b.n	8009cde <HAL_TIM_PWM_Start+0x6a>
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	2b08      	cmp	r3, #8
 8009cb6:	d109      	bne.n	8009ccc <HAL_TIM_PWM_Start+0x58>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	bf14      	ite	ne
 8009cc4:	2301      	movne	r3, #1
 8009cc6:	2300      	moveq	r3, #0
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	e008      	b.n	8009cde <HAL_TIM_PWM_Start+0x6a>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	bf14      	ite	ne
 8009cd8:	2301      	movne	r3, #1
 8009cda:	2300      	moveq	r3, #0
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e07c      	b.n	8009de0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d104      	bne.n	8009cf6 <HAL_TIM_PWM_Start+0x82>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2202      	movs	r2, #2
 8009cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cf4:	e013      	b.n	8009d1e <HAL_TIM_PWM_Start+0xaa>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	2b04      	cmp	r3, #4
 8009cfa:	d104      	bne.n	8009d06 <HAL_TIM_PWM_Start+0x92>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d04:	e00b      	b.n	8009d1e <HAL_TIM_PWM_Start+0xaa>
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	2b08      	cmp	r3, #8
 8009d0a:	d104      	bne.n	8009d16 <HAL_TIM_PWM_Start+0xa2>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2202      	movs	r2, #2
 8009d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d14:	e003      	b.n	8009d1e <HAL_TIM_PWM_Start+0xaa>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2202      	movs	r2, #2
 8009d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2201      	movs	r2, #1
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	4618      	mov	r0, r3
 8009d28:	f001 fb74 	bl	800b414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a2d      	ldr	r2, [pc, #180]	; (8009de8 <HAL_TIM_PWM_Start+0x174>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d004      	beq.n	8009d40 <HAL_TIM_PWM_Start+0xcc>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a2c      	ldr	r2, [pc, #176]	; (8009dec <HAL_TIM_PWM_Start+0x178>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d101      	bne.n	8009d44 <HAL_TIM_PWM_Start+0xd0>
 8009d40:	2301      	movs	r3, #1
 8009d42:	e000      	b.n	8009d46 <HAL_TIM_PWM_Start+0xd2>
 8009d44:	2300      	movs	r3, #0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d007      	beq.n	8009d5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a22      	ldr	r2, [pc, #136]	; (8009de8 <HAL_TIM_PWM_Start+0x174>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d022      	beq.n	8009daa <HAL_TIM_PWM_Start+0x136>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d6c:	d01d      	beq.n	8009daa <HAL_TIM_PWM_Start+0x136>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a1f      	ldr	r2, [pc, #124]	; (8009df0 <HAL_TIM_PWM_Start+0x17c>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d018      	beq.n	8009daa <HAL_TIM_PWM_Start+0x136>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a1d      	ldr	r2, [pc, #116]	; (8009df4 <HAL_TIM_PWM_Start+0x180>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d013      	beq.n	8009daa <HAL_TIM_PWM_Start+0x136>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a1c      	ldr	r2, [pc, #112]	; (8009df8 <HAL_TIM_PWM_Start+0x184>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d00e      	beq.n	8009daa <HAL_TIM_PWM_Start+0x136>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a16      	ldr	r2, [pc, #88]	; (8009dec <HAL_TIM_PWM_Start+0x178>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d009      	beq.n	8009daa <HAL_TIM_PWM_Start+0x136>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a18      	ldr	r2, [pc, #96]	; (8009dfc <HAL_TIM_PWM_Start+0x188>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d004      	beq.n	8009daa <HAL_TIM_PWM_Start+0x136>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a16      	ldr	r2, [pc, #88]	; (8009e00 <HAL_TIM_PWM_Start+0x18c>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d111      	bne.n	8009dce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	f003 0307 	and.w	r3, r3, #7
 8009db4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2b06      	cmp	r3, #6
 8009dba:	d010      	beq.n	8009dde <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f042 0201 	orr.w	r2, r2, #1
 8009dca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dcc:	e007      	b.n	8009dde <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f042 0201 	orr.w	r2, r2, #1
 8009ddc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	40010000 	.word	0x40010000
 8009dec:	40010400 	.word	0x40010400
 8009df0:	40000400 	.word	0x40000400
 8009df4:	40000800 	.word	0x40000800
 8009df8:	40000c00 	.word	0x40000c00
 8009dfc:	40014000 	.word	0x40014000
 8009e00:	40001800 	.word	0x40001800

08009e04 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d101      	bne.n	8009e16 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	e041      	b.n	8009e9a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d106      	bne.n	8009e30 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7fc ff70 	bl	8006d10 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2202      	movs	r2, #2
 8009e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3304      	adds	r3, #4
 8009e40:	4619      	mov	r1, r3
 8009e42:	4610      	mov	r0, r2
 8009e44:	f000 fed2 	bl	800abec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
	...

08009ea4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d104      	bne.n	8009ec2 <HAL_TIM_IC_Start_IT+0x1e>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	e013      	b.n	8009eea <HAL_TIM_IC_Start_IT+0x46>
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	2b04      	cmp	r3, #4
 8009ec6:	d104      	bne.n	8009ed2 <HAL_TIM_IC_Start_IT+0x2e>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	e00b      	b.n	8009eea <HAL_TIM_IC_Start_IT+0x46>
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	2b08      	cmp	r3, #8
 8009ed6:	d104      	bne.n	8009ee2 <HAL_TIM_IC_Start_IT+0x3e>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	e003      	b.n	8009eea <HAL_TIM_IC_Start_IT+0x46>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d104      	bne.n	8009efc <HAL_TIM_IC_Start_IT+0x58>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	e013      	b.n	8009f24 <HAL_TIM_IC_Start_IT+0x80>
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	2b04      	cmp	r3, #4
 8009f00:	d104      	bne.n	8009f0c <HAL_TIM_IC_Start_IT+0x68>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	e00b      	b.n	8009f24 <HAL_TIM_IC_Start_IT+0x80>
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	2b08      	cmp	r3, #8
 8009f10:	d104      	bne.n	8009f1c <HAL_TIM_IC_Start_IT+0x78>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	e003      	b.n	8009f24 <HAL_TIM_IC_Start_IT+0x80>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d102      	bne.n	8009f32 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009f2c:	7b7b      	ldrb	r3, [r7, #13]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d001      	beq.n	8009f36 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e0cc      	b.n	800a0d0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d104      	bne.n	8009f46 <HAL_TIM_IC_Start_IT+0xa2>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f44:	e013      	b.n	8009f6e <HAL_TIM_IC_Start_IT+0xca>
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b04      	cmp	r3, #4
 8009f4a:	d104      	bne.n	8009f56 <HAL_TIM_IC_Start_IT+0xb2>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2202      	movs	r2, #2
 8009f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f54:	e00b      	b.n	8009f6e <HAL_TIM_IC_Start_IT+0xca>
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2b08      	cmp	r3, #8
 8009f5a:	d104      	bne.n	8009f66 <HAL_TIM_IC_Start_IT+0xc2>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2202      	movs	r2, #2
 8009f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f64:	e003      	b.n	8009f6e <HAL_TIM_IC_Start_IT+0xca>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2202      	movs	r2, #2
 8009f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d104      	bne.n	8009f7e <HAL_TIM_IC_Start_IT+0xda>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f7c:	e013      	b.n	8009fa6 <HAL_TIM_IC_Start_IT+0x102>
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	2b04      	cmp	r3, #4
 8009f82:	d104      	bne.n	8009f8e <HAL_TIM_IC_Start_IT+0xea>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2202      	movs	r2, #2
 8009f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f8c:	e00b      	b.n	8009fa6 <HAL_TIM_IC_Start_IT+0x102>
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	2b08      	cmp	r3, #8
 8009f92:	d104      	bne.n	8009f9e <HAL_TIM_IC_Start_IT+0xfa>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2202      	movs	r2, #2
 8009f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f9c:	e003      	b.n	8009fa6 <HAL_TIM_IC_Start_IT+0x102>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2202      	movs	r2, #2
 8009fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2b0c      	cmp	r3, #12
 8009faa:	d841      	bhi.n	800a030 <HAL_TIM_IC_Start_IT+0x18c>
 8009fac:	a201      	add	r2, pc, #4	; (adr r2, 8009fb4 <HAL_TIM_IC_Start_IT+0x110>)
 8009fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb2:	bf00      	nop
 8009fb4:	08009fe9 	.word	0x08009fe9
 8009fb8:	0800a031 	.word	0x0800a031
 8009fbc:	0800a031 	.word	0x0800a031
 8009fc0:	0800a031 	.word	0x0800a031
 8009fc4:	08009ffb 	.word	0x08009ffb
 8009fc8:	0800a031 	.word	0x0800a031
 8009fcc:	0800a031 	.word	0x0800a031
 8009fd0:	0800a031 	.word	0x0800a031
 8009fd4:	0800a00d 	.word	0x0800a00d
 8009fd8:	0800a031 	.word	0x0800a031
 8009fdc:	0800a031 	.word	0x0800a031
 8009fe0:	0800a031 	.word	0x0800a031
 8009fe4:	0800a01f 	.word	0x0800a01f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68da      	ldr	r2, [r3, #12]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f042 0202 	orr.w	r2, r2, #2
 8009ff6:	60da      	str	r2, [r3, #12]
      break;
 8009ff8:	e01d      	b.n	800a036 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	68da      	ldr	r2, [r3, #12]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f042 0204 	orr.w	r2, r2, #4
 800a008:	60da      	str	r2, [r3, #12]
      break;
 800a00a:	e014      	b.n	800a036 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68da      	ldr	r2, [r3, #12]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f042 0208 	orr.w	r2, r2, #8
 800a01a:	60da      	str	r2, [r3, #12]
      break;
 800a01c:	e00b      	b.n	800a036 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68da      	ldr	r2, [r3, #12]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f042 0210 	orr.w	r2, r2, #16
 800a02c:	60da      	str	r2, [r3, #12]
      break;
 800a02e:	e002      	b.n	800a036 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	73fb      	strb	r3, [r7, #15]
      break;
 800a034:	bf00      	nop
  }

  if (status == HAL_OK)
 800a036:	7bfb      	ldrb	r3, [r7, #15]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d148      	bne.n	800a0ce <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2201      	movs	r2, #1
 800a042:	6839      	ldr	r1, [r7, #0]
 800a044:	4618      	mov	r0, r3
 800a046:	f001 f9e5 	bl	800b414 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a22      	ldr	r2, [pc, #136]	; (800a0d8 <HAL_TIM_IC_Start_IT+0x234>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d022      	beq.n	800a09a <HAL_TIM_IC_Start_IT+0x1f6>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a05c:	d01d      	beq.n	800a09a <HAL_TIM_IC_Start_IT+0x1f6>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a1e      	ldr	r2, [pc, #120]	; (800a0dc <HAL_TIM_IC_Start_IT+0x238>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d018      	beq.n	800a09a <HAL_TIM_IC_Start_IT+0x1f6>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a1c      	ldr	r2, [pc, #112]	; (800a0e0 <HAL_TIM_IC_Start_IT+0x23c>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d013      	beq.n	800a09a <HAL_TIM_IC_Start_IT+0x1f6>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a1b      	ldr	r2, [pc, #108]	; (800a0e4 <HAL_TIM_IC_Start_IT+0x240>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d00e      	beq.n	800a09a <HAL_TIM_IC_Start_IT+0x1f6>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a19      	ldr	r2, [pc, #100]	; (800a0e8 <HAL_TIM_IC_Start_IT+0x244>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d009      	beq.n	800a09a <HAL_TIM_IC_Start_IT+0x1f6>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a18      	ldr	r2, [pc, #96]	; (800a0ec <HAL_TIM_IC_Start_IT+0x248>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d004      	beq.n	800a09a <HAL_TIM_IC_Start_IT+0x1f6>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a16      	ldr	r2, [pc, #88]	; (800a0f0 <HAL_TIM_IC_Start_IT+0x24c>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d111      	bne.n	800a0be <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	f003 0307 	and.w	r3, r3, #7
 800a0a4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	2b06      	cmp	r3, #6
 800a0aa:	d010      	beq.n	800a0ce <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f042 0201 	orr.w	r2, r2, #1
 800a0ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0bc:	e007      	b.n	800a0ce <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f042 0201 	orr.w	r2, r2, #1
 800a0cc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800a0ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	40010000 	.word	0x40010000
 800a0dc:	40000400 	.word	0x40000400
 800a0e0:	40000800 	.word	0x40000800
 800a0e4:	40000c00 	.word	0x40000c00
 800a0e8:	40010400 	.word	0x40010400
 800a0ec:	40014000 	.word	0x40014000
 800a0f0:	40001800 	.word	0x40001800

0800a0f4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2b0c      	cmp	r3, #12
 800a106:	d841      	bhi.n	800a18c <HAL_TIM_IC_Stop_IT+0x98>
 800a108:	a201      	add	r2, pc, #4	; (adr r2, 800a110 <HAL_TIM_IC_Stop_IT+0x1c>)
 800a10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10e:	bf00      	nop
 800a110:	0800a145 	.word	0x0800a145
 800a114:	0800a18d 	.word	0x0800a18d
 800a118:	0800a18d 	.word	0x0800a18d
 800a11c:	0800a18d 	.word	0x0800a18d
 800a120:	0800a157 	.word	0x0800a157
 800a124:	0800a18d 	.word	0x0800a18d
 800a128:	0800a18d 	.word	0x0800a18d
 800a12c:	0800a18d 	.word	0x0800a18d
 800a130:	0800a169 	.word	0x0800a169
 800a134:	0800a18d 	.word	0x0800a18d
 800a138:	0800a18d 	.word	0x0800a18d
 800a13c:	0800a18d 	.word	0x0800a18d
 800a140:	0800a17b 	.word	0x0800a17b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68da      	ldr	r2, [r3, #12]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f022 0202 	bic.w	r2, r2, #2
 800a152:	60da      	str	r2, [r3, #12]
      break;
 800a154:	e01d      	b.n	800a192 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68da      	ldr	r2, [r3, #12]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f022 0204 	bic.w	r2, r2, #4
 800a164:	60da      	str	r2, [r3, #12]
      break;
 800a166:	e014      	b.n	800a192 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68da      	ldr	r2, [r3, #12]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f022 0208 	bic.w	r2, r2, #8
 800a176:	60da      	str	r2, [r3, #12]
      break;
 800a178:	e00b      	b.n	800a192 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68da      	ldr	r2, [r3, #12]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f022 0210 	bic.w	r2, r2, #16
 800a188:	60da      	str	r2, [r3, #12]
      break;
 800a18a:	e002      	b.n	800a192 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	73fb      	strb	r3, [r7, #15]
      break;
 800a190:	bf00      	nop
  }

  if (status == HAL_OK)
 800a192:	7bfb      	ldrb	r3, [r7, #15]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d156      	bne.n	800a246 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2200      	movs	r2, #0
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f001 f937 	bl	800b414 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	6a1a      	ldr	r2, [r3, #32]
 800a1ac:	f241 1311 	movw	r3, #4369	; 0x1111
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10f      	bne.n	800a1d6 <HAL_TIM_IC_Stop_IT+0xe2>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	6a1a      	ldr	r2, [r3, #32]
 800a1bc:	f240 4344 	movw	r3, #1092	; 0x444
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d107      	bne.n	800a1d6 <HAL_TIM_IC_Stop_IT+0xe2>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f022 0201 	bic.w	r2, r2, #1
 800a1d4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d104      	bne.n	800a1e6 <HAL_TIM_IC_Stop_IT+0xf2>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1e4:	e013      	b.n	800a20e <HAL_TIM_IC_Stop_IT+0x11a>
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	2b04      	cmp	r3, #4
 800a1ea:	d104      	bne.n	800a1f6 <HAL_TIM_IC_Stop_IT+0x102>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1f4:	e00b      	b.n	800a20e <HAL_TIM_IC_Stop_IT+0x11a>
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	2b08      	cmp	r3, #8
 800a1fa:	d104      	bne.n	800a206 <HAL_TIM_IC_Stop_IT+0x112>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a204:	e003      	b.n	800a20e <HAL_TIM_IC_Stop_IT+0x11a>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d104      	bne.n	800a21e <HAL_TIM_IC_Stop_IT+0x12a>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a21c:	e013      	b.n	800a246 <HAL_TIM_IC_Stop_IT+0x152>
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b04      	cmp	r3, #4
 800a222:	d104      	bne.n	800a22e <HAL_TIM_IC_Stop_IT+0x13a>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a22c:	e00b      	b.n	800a246 <HAL_TIM_IC_Stop_IT+0x152>
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	2b08      	cmp	r3, #8
 800a232:	d104      	bne.n	800a23e <HAL_TIM_IC_Stop_IT+0x14a>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a23c:	e003      	b.n	800a246 <HAL_TIM_IC_Stop_IT+0x152>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 800a246:	7bfb      	ldrb	r3, [r7, #15]
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3710      	adds	r7, #16
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d101      	bne.n	800a264 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e097      	b.n	800a394 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d106      	bne.n	800a27e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f7fc fcaf 	bl	8006bdc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2202      	movs	r2, #2
 800a282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	6812      	ldr	r2, [r2, #0]
 800a290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a294:	f023 0307 	bic.w	r3, r3, #7
 800a298:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	3304      	adds	r3, #4
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	4610      	mov	r0, r2
 800a2a6:	f000 fca1 	bl	800abec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	6a1b      	ldr	r3, [r3, #32]
 800a2c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	697a      	ldr	r2, [r7, #20]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2d2:	f023 0303 	bic.w	r3, r3, #3
 800a2d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	689a      	ldr	r2, [r3, #8]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	699b      	ldr	r3, [r3, #24]
 800a2e0:	021b      	lsls	r3, r3, #8
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	693a      	ldr	r2, [r7, #16]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a2f0:	f023 030c 	bic.w	r3, r3, #12
 800a2f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a2fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a300:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	68da      	ldr	r2, [r3, #12]
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	69db      	ldr	r3, [r3, #28]
 800a30a:	021b      	lsls	r3, r3, #8
 800a30c:	4313      	orrs	r3, r2
 800a30e:	693a      	ldr	r2, [r7, #16]
 800a310:	4313      	orrs	r3, r2
 800a312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	011a      	lsls	r2, r3, #4
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	031b      	lsls	r3, r3, #12
 800a320:	4313      	orrs	r3, r2
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	4313      	orrs	r3, r2
 800a326:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a32e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a336:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	685a      	ldr	r2, [r3, #4]
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	695b      	ldr	r3, [r3, #20]
 800a340:	011b      	lsls	r3, r3, #4
 800a342:	4313      	orrs	r3, r2
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	4313      	orrs	r3, r2
 800a348:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2201      	movs	r2, #1
 800a366:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2201      	movs	r2, #1
 800a376:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2201      	movs	r2, #1
 800a37e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2201      	movs	r2, #1
 800a386:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2201      	movs	r2, #1
 800a38e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3718      	adds	r7, #24
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a3b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3c4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d110      	bne.n	800a3ee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d102      	bne.n	800a3d8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a3d2:	7b7b      	ldrb	r3, [r7, #13]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d001      	beq.n	800a3dc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e069      	b.n	800a4b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2202      	movs	r2, #2
 800a3e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2202      	movs	r2, #2
 800a3e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3ec:	e031      	b.n	800a452 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	2b04      	cmp	r3, #4
 800a3f2:	d110      	bne.n	800a416 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a3f4:	7bbb      	ldrb	r3, [r7, #14]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d102      	bne.n	800a400 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a3fa:	7b3b      	ldrb	r3, [r7, #12]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d001      	beq.n	800a404 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	e055      	b.n	800a4b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2202      	movs	r2, #2
 800a408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2202      	movs	r2, #2
 800a410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a414:	e01d      	b.n	800a452 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a416:	7bfb      	ldrb	r3, [r7, #15]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d108      	bne.n	800a42e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a41c:	7bbb      	ldrb	r3, [r7, #14]
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d105      	bne.n	800a42e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a422:	7b7b      	ldrb	r3, [r7, #13]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d102      	bne.n	800a42e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a428:	7b3b      	ldrb	r3, [r7, #12]
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d001      	beq.n	800a432 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e03e      	b.n	800a4b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2202      	movs	r2, #2
 800a436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2202      	movs	r2, #2
 800a43e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2202      	movs	r2, #2
 800a446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2202      	movs	r2, #2
 800a44e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d003      	beq.n	800a460 <HAL_TIM_Encoder_Start+0xc4>
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	2b04      	cmp	r3, #4
 800a45c:	d008      	beq.n	800a470 <HAL_TIM_Encoder_Start+0xd4>
 800a45e:	e00f      	b.n	800a480 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2201      	movs	r2, #1
 800a466:	2100      	movs	r1, #0
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 ffd3 	bl	800b414 <TIM_CCxChannelCmd>
      break;
 800a46e:	e016      	b.n	800a49e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2201      	movs	r2, #1
 800a476:	2104      	movs	r1, #4
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 ffcb 	bl	800b414 <TIM_CCxChannelCmd>
      break;
 800a47e:	e00e      	b.n	800a49e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2201      	movs	r2, #1
 800a486:	2100      	movs	r1, #0
 800a488:	4618      	mov	r0, r3
 800a48a:	f000 ffc3 	bl	800b414 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2201      	movs	r2, #1
 800a494:	2104      	movs	r1, #4
 800a496:	4618      	mov	r0, r3
 800a498:	f000 ffbc 	bl	800b414 <TIM_CCxChannelCmd>
      break;
 800a49c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f042 0201 	orr.w	r2, r2, #1
 800a4ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	f003 0302 	and.w	r3, r3, #2
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	d122      	bne.n	800a514 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	f003 0302 	and.w	r3, r3, #2
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d11b      	bne.n	800a514 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f06f 0202 	mvn.w	r2, #2
 800a4e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	699b      	ldr	r3, [r3, #24]
 800a4f2:	f003 0303 	and.w	r3, r3, #3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d003      	beq.n	800a502 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f7fb fdc0 	bl	8006080 <HAL_TIM_IC_CaptureCallback>
 800a500:	e005      	b.n	800a50e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fb54 	bl	800abb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 fb5b 	bl	800abc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	f003 0304 	and.w	r3, r3, #4
 800a51e:	2b04      	cmp	r3, #4
 800a520:	d122      	bne.n	800a568 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	f003 0304 	and.w	r3, r3, #4
 800a52c:	2b04      	cmp	r3, #4
 800a52e:	d11b      	bne.n	800a568 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f06f 0204 	mvn.w	r2, #4
 800a538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2202      	movs	r2, #2
 800a53e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	699b      	ldr	r3, [r3, #24]
 800a546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d003      	beq.n	800a556 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f7fb fd96 	bl	8006080 <HAL_TIM_IC_CaptureCallback>
 800a554:	e005      	b.n	800a562 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 fb2a 	bl	800abb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fb31 	bl	800abc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	f003 0308 	and.w	r3, r3, #8
 800a572:	2b08      	cmp	r3, #8
 800a574:	d122      	bne.n	800a5bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	f003 0308 	and.w	r3, r3, #8
 800a580:	2b08      	cmp	r3, #8
 800a582:	d11b      	bne.n	800a5bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f06f 0208 	mvn.w	r2, #8
 800a58c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2204      	movs	r2, #4
 800a592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	69db      	ldr	r3, [r3, #28]
 800a59a:	f003 0303 	and.w	r3, r3, #3
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d003      	beq.n	800a5aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7fb fd6c 	bl	8006080 <HAL_TIM_IC_CaptureCallback>
 800a5a8:	e005      	b.n	800a5b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fb00 	bl	800abb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 fb07 	bl	800abc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	f003 0310 	and.w	r3, r3, #16
 800a5c6:	2b10      	cmp	r3, #16
 800a5c8:	d122      	bne.n	800a610 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	f003 0310 	and.w	r3, r3, #16
 800a5d4:	2b10      	cmp	r3, #16
 800a5d6:	d11b      	bne.n	800a610 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f06f 0210 	mvn.w	r2, #16
 800a5e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2208      	movs	r2, #8
 800a5e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	69db      	ldr	r3, [r3, #28]
 800a5ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d003      	beq.n	800a5fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7fb fd42 	bl	8006080 <HAL_TIM_IC_CaptureCallback>
 800a5fc:	e005      	b.n	800a60a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fad6 	bl	800abb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fadd 	bl	800abc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	f003 0301 	and.w	r3, r3, #1
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d10e      	bne.n	800a63c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	f003 0301 	and.w	r3, r3, #1
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d107      	bne.n	800a63c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f06f 0201 	mvn.w	r2, #1
 800a634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 fab0 	bl	800ab9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a646:	2b80      	cmp	r3, #128	; 0x80
 800a648:	d10e      	bne.n	800a668 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a654:	2b80      	cmp	r3, #128	; 0x80
 800a656:	d107      	bne.n	800a668 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 ffd4 	bl	800b610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a672:	2b40      	cmp	r3, #64	; 0x40
 800a674:	d10e      	bne.n	800a694 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a680:	2b40      	cmp	r3, #64	; 0x40
 800a682:	d107      	bne.n	800a694 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a68c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 faa2 	bl	800abd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	f003 0320 	and.w	r3, r3, #32
 800a69e:	2b20      	cmp	r3, #32
 800a6a0:	d10e      	bne.n	800a6c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f003 0320 	and.w	r3, r3, #32
 800a6ac:	2b20      	cmp	r3, #32
 800a6ae:	d107      	bne.n	800a6c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f06f 0220 	mvn.w	r2, #32
 800a6b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 ff9e 	bl	800b5fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6c0:	bf00      	nop
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d101      	bne.n	800a6e6 <HAL_TIM_IC_ConfigChannel+0x1e>
 800a6e2:	2302      	movs	r3, #2
 800a6e4:	e088      	b.n	800a7f8 <HAL_TIM_IC_ConfigChannel+0x130>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d11b      	bne.n	800a72c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6818      	ldr	r0, [r3, #0]
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	6819      	ldr	r1, [r3, #0]
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	685a      	ldr	r2, [r3, #4]
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	f000 fcc2 	bl	800b08c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	699a      	ldr	r2, [r3, #24]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f022 020c 	bic.w	r2, r2, #12
 800a716:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	6999      	ldr	r1, [r3, #24]
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	689a      	ldr	r2, [r3, #8]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	430a      	orrs	r2, r1
 800a728:	619a      	str	r2, [r3, #24]
 800a72a:	e060      	b.n	800a7ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b04      	cmp	r3, #4
 800a730:	d11c      	bne.n	800a76c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6818      	ldr	r0, [r3, #0]
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	6819      	ldr	r1, [r3, #0]
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	685a      	ldr	r2, [r3, #4]
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	f000 fd46 	bl	800b1d2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	699a      	ldr	r2, [r3, #24]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a754:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6999      	ldr	r1, [r3, #24]
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	021a      	lsls	r2, r3, #8
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	430a      	orrs	r2, r1
 800a768:	619a      	str	r2, [r3, #24]
 800a76a:	e040      	b.n	800a7ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b08      	cmp	r3, #8
 800a770:	d11b      	bne.n	800a7aa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	6818      	ldr	r0, [r3, #0]
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	6819      	ldr	r1, [r3, #0]
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	685a      	ldr	r2, [r3, #4]
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	f000 fd93 	bl	800b2ac <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	69da      	ldr	r2, [r3, #28]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f022 020c 	bic.w	r2, r2, #12
 800a794:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	69d9      	ldr	r1, [r3, #28]
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	689a      	ldr	r2, [r3, #8]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	430a      	orrs	r2, r1
 800a7a6:	61da      	str	r2, [r3, #28]
 800a7a8:	e021      	b.n	800a7ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b0c      	cmp	r3, #12
 800a7ae:	d11c      	bne.n	800a7ea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6818      	ldr	r0, [r3, #0]
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	6819      	ldr	r1, [r3, #0]
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	685a      	ldr	r2, [r3, #4]
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	f000 fdb0 	bl	800b324 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	69da      	ldr	r2, [r3, #28]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a7d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	69d9      	ldr	r1, [r3, #28]
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	021a      	lsls	r2, r3, #8
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	430a      	orrs	r2, r1
 800a7e6:	61da      	str	r2, [r3, #28]
 800a7e8:	e001      	b.n	800a7ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3718      	adds	r7, #24
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b086      	sub	sp, #24
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a80c:	2300      	movs	r3, #0
 800a80e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a816:	2b01      	cmp	r3, #1
 800a818:	d101      	bne.n	800a81e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a81a:	2302      	movs	r3, #2
 800a81c:	e0ae      	b.n	800a97c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2201      	movs	r2, #1
 800a822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2b0c      	cmp	r3, #12
 800a82a:	f200 809f 	bhi.w	800a96c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a82e:	a201      	add	r2, pc, #4	; (adr r2, 800a834 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a834:	0800a869 	.word	0x0800a869
 800a838:	0800a96d 	.word	0x0800a96d
 800a83c:	0800a96d 	.word	0x0800a96d
 800a840:	0800a96d 	.word	0x0800a96d
 800a844:	0800a8a9 	.word	0x0800a8a9
 800a848:	0800a96d 	.word	0x0800a96d
 800a84c:	0800a96d 	.word	0x0800a96d
 800a850:	0800a96d 	.word	0x0800a96d
 800a854:	0800a8eb 	.word	0x0800a8eb
 800a858:	0800a96d 	.word	0x0800a96d
 800a85c:	0800a96d 	.word	0x0800a96d
 800a860:	0800a96d 	.word	0x0800a96d
 800a864:	0800a92b 	.word	0x0800a92b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68b9      	ldr	r1, [r7, #8]
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 fa5c 	bl	800ad2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	699a      	ldr	r2, [r3, #24]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f042 0208 	orr.w	r2, r2, #8
 800a882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	699a      	ldr	r2, [r3, #24]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f022 0204 	bic.w	r2, r2, #4
 800a892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	6999      	ldr	r1, [r3, #24]
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	691a      	ldr	r2, [r3, #16]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	430a      	orrs	r2, r1
 800a8a4:	619a      	str	r2, [r3, #24]
      break;
 800a8a6:	e064      	b.n	800a972 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68b9      	ldr	r1, [r7, #8]
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f000 faac 	bl	800ae0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	699a      	ldr	r2, [r3, #24]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	699a      	ldr	r2, [r3, #24]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	6999      	ldr	r1, [r3, #24]
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	021a      	lsls	r2, r3, #8
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	430a      	orrs	r2, r1
 800a8e6:	619a      	str	r2, [r3, #24]
      break;
 800a8e8:	e043      	b.n	800a972 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68b9      	ldr	r1, [r7, #8]
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f000 fb01 	bl	800aef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	69da      	ldr	r2, [r3, #28]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f042 0208 	orr.w	r2, r2, #8
 800a904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	69da      	ldr	r2, [r3, #28]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f022 0204 	bic.w	r2, r2, #4
 800a914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	69d9      	ldr	r1, [r3, #28]
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	691a      	ldr	r2, [r3, #16]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	430a      	orrs	r2, r1
 800a926:	61da      	str	r2, [r3, #28]
      break;
 800a928:	e023      	b.n	800a972 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	68b9      	ldr	r1, [r7, #8]
 800a930:	4618      	mov	r0, r3
 800a932:	f000 fb55 	bl	800afe0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	69da      	ldr	r2, [r3, #28]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	69da      	ldr	r2, [r3, #28]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	69d9      	ldr	r1, [r3, #28]
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	021a      	lsls	r2, r3, #8
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	430a      	orrs	r2, r1
 800a968:	61da      	str	r2, [r3, #28]
      break;
 800a96a:	e002      	b.n	800a972 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a96c:	2301      	movs	r3, #1
 800a96e:	75fb      	strb	r3, [r7, #23]
      break;
 800a970:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a97a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3718      	adds	r7, #24
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d101      	bne.n	800a9a0 <HAL_TIM_ConfigClockSource+0x1c>
 800a99c:	2302      	movs	r3, #2
 800a99e:	e0b4      	b.n	800ab0a <HAL_TIM_ConfigClockSource+0x186>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a9be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68ba      	ldr	r2, [r7, #8]
 800a9ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9d8:	d03e      	beq.n	800aa58 <HAL_TIM_ConfigClockSource+0xd4>
 800a9da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9de:	f200 8087 	bhi.w	800aaf0 <HAL_TIM_ConfigClockSource+0x16c>
 800a9e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9e6:	f000 8086 	beq.w	800aaf6 <HAL_TIM_ConfigClockSource+0x172>
 800a9ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9ee:	d87f      	bhi.n	800aaf0 <HAL_TIM_ConfigClockSource+0x16c>
 800a9f0:	2b70      	cmp	r3, #112	; 0x70
 800a9f2:	d01a      	beq.n	800aa2a <HAL_TIM_ConfigClockSource+0xa6>
 800a9f4:	2b70      	cmp	r3, #112	; 0x70
 800a9f6:	d87b      	bhi.n	800aaf0 <HAL_TIM_ConfigClockSource+0x16c>
 800a9f8:	2b60      	cmp	r3, #96	; 0x60
 800a9fa:	d050      	beq.n	800aa9e <HAL_TIM_ConfigClockSource+0x11a>
 800a9fc:	2b60      	cmp	r3, #96	; 0x60
 800a9fe:	d877      	bhi.n	800aaf0 <HAL_TIM_ConfigClockSource+0x16c>
 800aa00:	2b50      	cmp	r3, #80	; 0x50
 800aa02:	d03c      	beq.n	800aa7e <HAL_TIM_ConfigClockSource+0xfa>
 800aa04:	2b50      	cmp	r3, #80	; 0x50
 800aa06:	d873      	bhi.n	800aaf0 <HAL_TIM_ConfigClockSource+0x16c>
 800aa08:	2b40      	cmp	r3, #64	; 0x40
 800aa0a:	d058      	beq.n	800aabe <HAL_TIM_ConfigClockSource+0x13a>
 800aa0c:	2b40      	cmp	r3, #64	; 0x40
 800aa0e:	d86f      	bhi.n	800aaf0 <HAL_TIM_ConfigClockSource+0x16c>
 800aa10:	2b30      	cmp	r3, #48	; 0x30
 800aa12:	d064      	beq.n	800aade <HAL_TIM_ConfigClockSource+0x15a>
 800aa14:	2b30      	cmp	r3, #48	; 0x30
 800aa16:	d86b      	bhi.n	800aaf0 <HAL_TIM_ConfigClockSource+0x16c>
 800aa18:	2b20      	cmp	r3, #32
 800aa1a:	d060      	beq.n	800aade <HAL_TIM_ConfigClockSource+0x15a>
 800aa1c:	2b20      	cmp	r3, #32
 800aa1e:	d867      	bhi.n	800aaf0 <HAL_TIM_ConfigClockSource+0x16c>
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d05c      	beq.n	800aade <HAL_TIM_ConfigClockSource+0x15a>
 800aa24:	2b10      	cmp	r3, #16
 800aa26:	d05a      	beq.n	800aade <HAL_TIM_ConfigClockSource+0x15a>
 800aa28:	e062      	b.n	800aaf0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6818      	ldr	r0, [r3, #0]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	6899      	ldr	r1, [r3, #8]
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	685a      	ldr	r2, [r3, #4]
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	f000 fccb 	bl	800b3d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aa4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68ba      	ldr	r2, [r7, #8]
 800aa54:	609a      	str	r2, [r3, #8]
      break;
 800aa56:	e04f      	b.n	800aaf8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6818      	ldr	r0, [r3, #0]
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	6899      	ldr	r1, [r3, #8]
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	685a      	ldr	r2, [r3, #4]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	f000 fcb4 	bl	800b3d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	689a      	ldr	r2, [r3, #8]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa7a:	609a      	str	r2, [r3, #8]
      break;
 800aa7c:	e03c      	b.n	800aaf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6818      	ldr	r0, [r3, #0]
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	6859      	ldr	r1, [r3, #4]
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	f000 fb72 	bl	800b174 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2150      	movs	r1, #80	; 0x50
 800aa96:	4618      	mov	r0, r3
 800aa98:	f000 fc81 	bl	800b39e <TIM_ITRx_SetConfig>
      break;
 800aa9c:	e02c      	b.n	800aaf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6818      	ldr	r0, [r3, #0]
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	6859      	ldr	r1, [r3, #4]
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	f000 fbce 	bl	800b24c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2160      	movs	r1, #96	; 0x60
 800aab6:	4618      	mov	r0, r3
 800aab8:	f000 fc71 	bl	800b39e <TIM_ITRx_SetConfig>
      break;
 800aabc:	e01c      	b.n	800aaf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6818      	ldr	r0, [r3, #0]
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	6859      	ldr	r1, [r3, #4]
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	461a      	mov	r2, r3
 800aacc:	f000 fb52 	bl	800b174 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2140      	movs	r1, #64	; 0x40
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 fc61 	bl	800b39e <TIM_ITRx_SetConfig>
      break;
 800aadc:	e00c      	b.n	800aaf8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4619      	mov	r1, r3
 800aae8:	4610      	mov	r0, r2
 800aaea:	f000 fc58 	bl	800b39e <TIM_ITRx_SetConfig>
      break;
 800aaee:	e003      	b.n	800aaf8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	73fb      	strb	r3, [r7, #15]
      break;
 800aaf4:	e000      	b.n	800aaf8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aaf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
	...

0800ab14 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	2b0c      	cmp	r3, #12
 800ab26:	d831      	bhi.n	800ab8c <HAL_TIM_ReadCapturedValue+0x78>
 800ab28:	a201      	add	r2, pc, #4	; (adr r2, 800ab30 <HAL_TIM_ReadCapturedValue+0x1c>)
 800ab2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab2e:	bf00      	nop
 800ab30:	0800ab65 	.word	0x0800ab65
 800ab34:	0800ab8d 	.word	0x0800ab8d
 800ab38:	0800ab8d 	.word	0x0800ab8d
 800ab3c:	0800ab8d 	.word	0x0800ab8d
 800ab40:	0800ab6f 	.word	0x0800ab6f
 800ab44:	0800ab8d 	.word	0x0800ab8d
 800ab48:	0800ab8d 	.word	0x0800ab8d
 800ab4c:	0800ab8d 	.word	0x0800ab8d
 800ab50:	0800ab79 	.word	0x0800ab79
 800ab54:	0800ab8d 	.word	0x0800ab8d
 800ab58:	0800ab8d 	.word	0x0800ab8d
 800ab5c:	0800ab8d 	.word	0x0800ab8d
 800ab60:	0800ab83 	.word	0x0800ab83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab6a:	60fb      	str	r3, [r7, #12]

      break;
 800ab6c:	e00f      	b.n	800ab8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab74:	60fb      	str	r3, [r7, #12]

      break;
 800ab76:	e00a      	b.n	800ab8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab7e:	60fb      	str	r3, [r7, #12]

      break;
 800ab80:	e005      	b.n	800ab8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab88:	60fb      	str	r3, [r7, #12]

      break;
 800ab8a:	e000      	b.n	800ab8e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800ab8c:	bf00      	nop
  }

  return tmpreg;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aba4:	bf00      	nop
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abb8:	bf00      	nop
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800abcc:	bf00      	nop
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800abe0:	bf00      	nop
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	4a40      	ldr	r2, [pc, #256]	; (800ad00 <TIM_Base_SetConfig+0x114>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d013      	beq.n	800ac2c <TIM_Base_SetConfig+0x40>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac0a:	d00f      	beq.n	800ac2c <TIM_Base_SetConfig+0x40>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a3d      	ldr	r2, [pc, #244]	; (800ad04 <TIM_Base_SetConfig+0x118>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d00b      	beq.n	800ac2c <TIM_Base_SetConfig+0x40>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4a3c      	ldr	r2, [pc, #240]	; (800ad08 <TIM_Base_SetConfig+0x11c>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d007      	beq.n	800ac2c <TIM_Base_SetConfig+0x40>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4a3b      	ldr	r2, [pc, #236]	; (800ad0c <TIM_Base_SetConfig+0x120>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d003      	beq.n	800ac2c <TIM_Base_SetConfig+0x40>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a3a      	ldr	r2, [pc, #232]	; (800ad10 <TIM_Base_SetConfig+0x124>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d108      	bne.n	800ac3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a2f      	ldr	r2, [pc, #188]	; (800ad00 <TIM_Base_SetConfig+0x114>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d02b      	beq.n	800ac9e <TIM_Base_SetConfig+0xb2>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac4c:	d027      	beq.n	800ac9e <TIM_Base_SetConfig+0xb2>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4a2c      	ldr	r2, [pc, #176]	; (800ad04 <TIM_Base_SetConfig+0x118>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d023      	beq.n	800ac9e <TIM_Base_SetConfig+0xb2>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	4a2b      	ldr	r2, [pc, #172]	; (800ad08 <TIM_Base_SetConfig+0x11c>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d01f      	beq.n	800ac9e <TIM_Base_SetConfig+0xb2>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a2a      	ldr	r2, [pc, #168]	; (800ad0c <TIM_Base_SetConfig+0x120>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d01b      	beq.n	800ac9e <TIM_Base_SetConfig+0xb2>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a29      	ldr	r2, [pc, #164]	; (800ad10 <TIM_Base_SetConfig+0x124>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d017      	beq.n	800ac9e <TIM_Base_SetConfig+0xb2>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	4a28      	ldr	r2, [pc, #160]	; (800ad14 <TIM_Base_SetConfig+0x128>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d013      	beq.n	800ac9e <TIM_Base_SetConfig+0xb2>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4a27      	ldr	r2, [pc, #156]	; (800ad18 <TIM_Base_SetConfig+0x12c>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d00f      	beq.n	800ac9e <TIM_Base_SetConfig+0xb2>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4a26      	ldr	r2, [pc, #152]	; (800ad1c <TIM_Base_SetConfig+0x130>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d00b      	beq.n	800ac9e <TIM_Base_SetConfig+0xb2>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	4a25      	ldr	r2, [pc, #148]	; (800ad20 <TIM_Base_SetConfig+0x134>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d007      	beq.n	800ac9e <TIM_Base_SetConfig+0xb2>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4a24      	ldr	r2, [pc, #144]	; (800ad24 <TIM_Base_SetConfig+0x138>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d003      	beq.n	800ac9e <TIM_Base_SetConfig+0xb2>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a23      	ldr	r2, [pc, #140]	; (800ad28 <TIM_Base_SetConfig+0x13c>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d108      	bne.n	800acb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	4313      	orrs	r3, r2
 800acae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	695b      	ldr	r3, [r3, #20]
 800acba:	4313      	orrs	r3, r2
 800acbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	689a      	ldr	r2, [r3, #8]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4a0a      	ldr	r2, [pc, #40]	; (800ad00 <TIM_Base_SetConfig+0x114>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d003      	beq.n	800ace4 <TIM_Base_SetConfig+0xf8>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a0c      	ldr	r2, [pc, #48]	; (800ad10 <TIM_Base_SetConfig+0x124>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d103      	bne.n	800acec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	691a      	ldr	r2, [r3, #16]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2201      	movs	r2, #1
 800acf0:	615a      	str	r2, [r3, #20]
}
 800acf2:	bf00      	nop
 800acf4:	3714      	adds	r7, #20
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	40010000 	.word	0x40010000
 800ad04:	40000400 	.word	0x40000400
 800ad08:	40000800 	.word	0x40000800
 800ad0c:	40000c00 	.word	0x40000c00
 800ad10:	40010400 	.word	0x40010400
 800ad14:	40014000 	.word	0x40014000
 800ad18:	40014400 	.word	0x40014400
 800ad1c:	40014800 	.word	0x40014800
 800ad20:	40001800 	.word	0x40001800
 800ad24:	40001c00 	.word	0x40001c00
 800ad28:	40002000 	.word	0x40002000

0800ad2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b087      	sub	sp, #28
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a1b      	ldr	r3, [r3, #32]
 800ad3a:	f023 0201 	bic.w	r2, r3, #1
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6a1b      	ldr	r3, [r3, #32]
 800ad46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	699b      	ldr	r3, [r3, #24]
 800ad52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f023 0303 	bic.w	r3, r3, #3
 800ad62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	f023 0302 	bic.w	r3, r3, #2
 800ad74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	697a      	ldr	r2, [r7, #20]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a20      	ldr	r2, [pc, #128]	; (800ae04 <TIM_OC1_SetConfig+0xd8>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d003      	beq.n	800ad90 <TIM_OC1_SetConfig+0x64>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4a1f      	ldr	r2, [pc, #124]	; (800ae08 <TIM_OC1_SetConfig+0xdc>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d10c      	bne.n	800adaa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	f023 0308 	bic.w	r3, r3, #8
 800ad96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	f023 0304 	bic.w	r3, r3, #4
 800ada8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a15      	ldr	r2, [pc, #84]	; (800ae04 <TIM_OC1_SetConfig+0xd8>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d003      	beq.n	800adba <TIM_OC1_SetConfig+0x8e>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a14      	ldr	r2, [pc, #80]	; (800ae08 <TIM_OC1_SetConfig+0xdc>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d111      	bne.n	800adde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800adc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800adc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	695b      	ldr	r3, [r3, #20]
 800adce:	693a      	ldr	r2, [r7, #16]
 800add0:	4313      	orrs	r3, r2
 800add2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	4313      	orrs	r3, r2
 800addc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	68fa      	ldr	r2, [r7, #12]
 800ade8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	685a      	ldr	r2, [r3, #4]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	621a      	str	r2, [r3, #32]
}
 800adf8:	bf00      	nop
 800adfa:	371c      	adds	r7, #28
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr
 800ae04:	40010000 	.word	0x40010000
 800ae08:	40010400 	.word	0x40010400

0800ae0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	f023 0210 	bic.w	r2, r3, #16
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	699b      	ldr	r3, [r3, #24]
 800ae32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	021b      	lsls	r3, r3, #8
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	f023 0320 	bic.w	r3, r3, #32
 800ae56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	011b      	lsls	r3, r3, #4
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	4313      	orrs	r3, r2
 800ae62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a22      	ldr	r2, [pc, #136]	; (800aef0 <TIM_OC2_SetConfig+0xe4>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d003      	beq.n	800ae74 <TIM_OC2_SetConfig+0x68>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a21      	ldr	r2, [pc, #132]	; (800aef4 <TIM_OC2_SetConfig+0xe8>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d10d      	bne.n	800ae90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	011b      	lsls	r3, r3, #4
 800ae82:	697a      	ldr	r2, [r7, #20]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4a17      	ldr	r2, [pc, #92]	; (800aef0 <TIM_OC2_SetConfig+0xe4>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d003      	beq.n	800aea0 <TIM_OC2_SetConfig+0x94>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	4a16      	ldr	r2, [pc, #88]	; (800aef4 <TIM_OC2_SetConfig+0xe8>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d113      	bne.n	800aec8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aea6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aeae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	695b      	ldr	r3, [r3, #20]
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	693a      	ldr	r2, [r7, #16]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	699b      	ldr	r3, [r3, #24]
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	693a      	ldr	r2, [r7, #16]
 800aec4:	4313      	orrs	r3, r2
 800aec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	685a      	ldr	r2, [r3, #4]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	697a      	ldr	r2, [r7, #20]
 800aee0:	621a      	str	r2, [r3, #32]
}
 800aee2:	bf00      	nop
 800aee4:	371c      	adds	r7, #28
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	40010000 	.word	0x40010000
 800aef4:	40010400 	.word	0x40010400

0800aef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a1b      	ldr	r3, [r3, #32]
 800af12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	69db      	ldr	r3, [r3, #28]
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f023 0303 	bic.w	r3, r3, #3
 800af2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	4313      	orrs	r3, r2
 800af38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	021b      	lsls	r3, r3, #8
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a21      	ldr	r2, [pc, #132]	; (800afd8 <TIM_OC3_SetConfig+0xe0>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d003      	beq.n	800af5e <TIM_OC3_SetConfig+0x66>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a20      	ldr	r2, [pc, #128]	; (800afdc <TIM_OC3_SetConfig+0xe4>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d10d      	bne.n	800af7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	021b      	lsls	r3, r3, #8
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	4313      	orrs	r3, r2
 800af70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4a16      	ldr	r2, [pc, #88]	; (800afd8 <TIM_OC3_SetConfig+0xe0>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d003      	beq.n	800af8a <TIM_OC3_SetConfig+0x92>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a15      	ldr	r2, [pc, #84]	; (800afdc <TIM_OC3_SetConfig+0xe4>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d113      	bne.n	800afb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	695b      	ldr	r3, [r3, #20]
 800af9e:	011b      	lsls	r3, r3, #4
 800afa0:	693a      	ldr	r2, [r7, #16]
 800afa2:	4313      	orrs	r3, r2
 800afa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	699b      	ldr	r3, [r3, #24]
 800afaa:	011b      	lsls	r3, r3, #4
 800afac:	693a      	ldr	r2, [r7, #16]
 800afae:	4313      	orrs	r3, r2
 800afb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	693a      	ldr	r2, [r7, #16]
 800afb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	685a      	ldr	r2, [r3, #4]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	697a      	ldr	r2, [r7, #20]
 800afca:	621a      	str	r2, [r3, #32]
}
 800afcc:	bf00      	nop
 800afce:	371c      	adds	r7, #28
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr
 800afd8:	40010000 	.word	0x40010000
 800afdc:	40010400 	.word	0x40010400

0800afe0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b087      	sub	sp, #28
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a1b      	ldr	r3, [r3, #32]
 800afee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6a1b      	ldr	r3, [r3, #32]
 800affa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	69db      	ldr	r3, [r3, #28]
 800b006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b00e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	021b      	lsls	r3, r3, #8
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	4313      	orrs	r3, r2
 800b022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b02a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	031b      	lsls	r3, r3, #12
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	4313      	orrs	r3, r2
 800b036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a12      	ldr	r2, [pc, #72]	; (800b084 <TIM_OC4_SetConfig+0xa4>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d003      	beq.n	800b048 <TIM_OC4_SetConfig+0x68>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a11      	ldr	r2, [pc, #68]	; (800b088 <TIM_OC4_SetConfig+0xa8>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d109      	bne.n	800b05c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b04e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	695b      	ldr	r3, [r3, #20]
 800b054:	019b      	lsls	r3, r3, #6
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	4313      	orrs	r3, r2
 800b05a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	697a      	ldr	r2, [r7, #20]
 800b060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	685a      	ldr	r2, [r3, #4]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	693a      	ldr	r2, [r7, #16]
 800b074:	621a      	str	r2, [r3, #32]
}
 800b076:	bf00      	nop
 800b078:	371c      	adds	r7, #28
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	40010000 	.word	0x40010000
 800b088:	40010400 	.word	0x40010400

0800b08c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b087      	sub	sp, #28
 800b090:	af00      	add	r7, sp, #0
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	607a      	str	r2, [r7, #4]
 800b098:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6a1b      	ldr	r3, [r3, #32]
 800b09e:	f023 0201 	bic.w	r2, r3, #1
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	699b      	ldr	r3, [r3, #24]
 800b0aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6a1b      	ldr	r3, [r3, #32]
 800b0b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	4a28      	ldr	r2, [pc, #160]	; (800b158 <TIM_TI1_SetConfig+0xcc>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d01b      	beq.n	800b0f2 <TIM_TI1_SetConfig+0x66>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0c0:	d017      	beq.n	800b0f2 <TIM_TI1_SetConfig+0x66>
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	4a25      	ldr	r2, [pc, #148]	; (800b15c <TIM_TI1_SetConfig+0xd0>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d013      	beq.n	800b0f2 <TIM_TI1_SetConfig+0x66>
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	4a24      	ldr	r2, [pc, #144]	; (800b160 <TIM_TI1_SetConfig+0xd4>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d00f      	beq.n	800b0f2 <TIM_TI1_SetConfig+0x66>
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	4a23      	ldr	r2, [pc, #140]	; (800b164 <TIM_TI1_SetConfig+0xd8>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d00b      	beq.n	800b0f2 <TIM_TI1_SetConfig+0x66>
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	4a22      	ldr	r2, [pc, #136]	; (800b168 <TIM_TI1_SetConfig+0xdc>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d007      	beq.n	800b0f2 <TIM_TI1_SetConfig+0x66>
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	4a21      	ldr	r2, [pc, #132]	; (800b16c <TIM_TI1_SetConfig+0xe0>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d003      	beq.n	800b0f2 <TIM_TI1_SetConfig+0x66>
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	4a20      	ldr	r2, [pc, #128]	; (800b170 <TIM_TI1_SetConfig+0xe4>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d101      	bne.n	800b0f6 <TIM_TI1_SetConfig+0x6a>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e000      	b.n	800b0f8 <TIM_TI1_SetConfig+0x6c>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d008      	beq.n	800b10e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	f023 0303 	bic.w	r3, r3, #3
 800b102:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b104:	697a      	ldr	r2, [r7, #20]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4313      	orrs	r3, r2
 800b10a:	617b      	str	r3, [r7, #20]
 800b10c:	e003      	b.n	800b116 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	f043 0301 	orr.w	r3, r3, #1
 800b114:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b11c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	011b      	lsls	r3, r3, #4
 800b122:	b2db      	uxtb	r3, r3
 800b124:	697a      	ldr	r2, [r7, #20]
 800b126:	4313      	orrs	r3, r2
 800b128:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	f023 030a 	bic.w	r3, r3, #10
 800b130:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	f003 030a 	and.w	r3, r3, #10
 800b138:	693a      	ldr	r2, [r7, #16]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	697a      	ldr	r2, [r7, #20]
 800b142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	693a      	ldr	r2, [r7, #16]
 800b148:	621a      	str	r2, [r3, #32]
}
 800b14a:	bf00      	nop
 800b14c:	371c      	adds	r7, #28
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	40010000 	.word	0x40010000
 800b15c:	40000400 	.word	0x40000400
 800b160:	40000800 	.word	0x40000800
 800b164:	40000c00 	.word	0x40000c00
 800b168:	40010400 	.word	0x40010400
 800b16c:	40014000 	.word	0x40014000
 800b170:	40001800 	.word	0x40001800

0800b174 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b174:	b480      	push	{r7}
 800b176:	b087      	sub	sp, #28
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6a1b      	ldr	r3, [r3, #32]
 800b184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6a1b      	ldr	r3, [r3, #32]
 800b18a:	f023 0201 	bic.w	r2, r3, #1
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	699b      	ldr	r3, [r3, #24]
 800b196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b19e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	011b      	lsls	r3, r3, #4
 800b1a4:	693a      	ldr	r2, [r7, #16]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	f023 030a 	bic.w	r3, r3, #10
 800b1b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	697a      	ldr	r2, [r7, #20]
 800b1c4:	621a      	str	r2, [r3, #32]
}
 800b1c6:	bf00      	nop
 800b1c8:	371c      	adds	r7, #28
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b1d2:	b480      	push	{r7}
 800b1d4:	b087      	sub	sp, #28
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	60f8      	str	r0, [r7, #12]
 800b1da:	60b9      	str	r1, [r7, #8]
 800b1dc:	607a      	str	r2, [r7, #4]
 800b1de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6a1b      	ldr	r3, [r3, #32]
 800b1e4:	f023 0210 	bic.w	r2, r3, #16
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	699b      	ldr	r3, [r3, #24]
 800b1f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6a1b      	ldr	r3, [r3, #32]
 800b1f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	021b      	lsls	r3, r3, #8
 800b204:	697a      	ldr	r2, [r7, #20]
 800b206:	4313      	orrs	r3, r2
 800b208:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b210:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	031b      	lsls	r3, r3, #12
 800b216:	b29b      	uxth	r3, r3
 800b218:	697a      	ldr	r2, [r7, #20]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b224:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	011b      	lsls	r3, r3, #4
 800b22a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	4313      	orrs	r3, r2
 800b232:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	697a      	ldr	r2, [r7, #20]
 800b238:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	621a      	str	r2, [r3, #32]
}
 800b240:	bf00      	nop
 800b242:	371c      	adds	r7, #28
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b087      	sub	sp, #28
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6a1b      	ldr	r3, [r3, #32]
 800b25c:	f023 0210 	bic.w	r2, r3, #16
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	699b      	ldr	r3, [r3, #24]
 800b268:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b276:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	031b      	lsls	r3, r3, #12
 800b27c:	697a      	ldr	r2, [r7, #20]
 800b27e:	4313      	orrs	r3, r2
 800b280:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b288:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	011b      	lsls	r3, r3, #4
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	4313      	orrs	r3, r2
 800b292:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	697a      	ldr	r2, [r7, #20]
 800b298:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	621a      	str	r2, [r3, #32]
}
 800b2a0:	bf00      	nop
 800b2a2:	371c      	adds	r7, #28
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b087      	sub	sp, #28
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
 800b2b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6a1b      	ldr	r3, [r3, #32]
 800b2be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	69db      	ldr	r3, [r3, #28]
 800b2ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6a1b      	ldr	r3, [r3, #32]
 800b2d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f023 0303 	bic.w	r3, r3, #3
 800b2d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b2da:	697a      	ldr	r2, [r7, #20]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	011b      	lsls	r3, r3, #4
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	697a      	ldr	r2, [r7, #20]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b2fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	021b      	lsls	r3, r3, #8
 800b302:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b306:	693a      	ldr	r2, [r7, #16]
 800b308:	4313      	orrs	r3, r2
 800b30a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	693a      	ldr	r2, [r7, #16]
 800b316:	621a      	str	r2, [r3, #32]
}
 800b318:	bf00      	nop
 800b31a:	371c      	adds	r7, #28
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b324:	b480      	push	{r7}
 800b326:	b087      	sub	sp, #28
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
 800b330:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	6a1b      	ldr	r3, [r3, #32]
 800b336:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	69db      	ldr	r3, [r3, #28]
 800b342:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6a1b      	ldr	r3, [r3, #32]
 800b348:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b350:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	021b      	lsls	r3, r3, #8
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	4313      	orrs	r3, r2
 800b35a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b362:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	031b      	lsls	r3, r3, #12
 800b368:	b29b      	uxth	r3, r3
 800b36a:	697a      	ldr	r2, [r7, #20]
 800b36c:	4313      	orrs	r3, r2
 800b36e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b376:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	031b      	lsls	r3, r3, #12
 800b37c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800b380:	693a      	ldr	r2, [r7, #16]
 800b382:	4313      	orrs	r3, r2
 800b384:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	697a      	ldr	r2, [r7, #20]
 800b38a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	693a      	ldr	r2, [r7, #16]
 800b390:	621a      	str	r2, [r3, #32]
}
 800b392:	bf00      	nop
 800b394:	371c      	adds	r7, #28
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b39e:	b480      	push	{r7}
 800b3a0:	b085      	sub	sp, #20
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
 800b3a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b3b6:	683a      	ldr	r2, [r7, #0]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	f043 0307 	orr.w	r3, r3, #7
 800b3c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	609a      	str	r2, [r3, #8]
}
 800b3c8:	bf00      	nop
 800b3ca:	3714      	adds	r7, #20
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b087      	sub	sp, #28
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
 800b3e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	021a      	lsls	r2, r3, #8
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	431a      	orrs	r2, r3
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	697a      	ldr	r2, [r7, #20]
 800b3fe:	4313      	orrs	r3, r2
 800b400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	697a      	ldr	r2, [r7, #20]
 800b406:	609a      	str	r2, [r3, #8]
}
 800b408:	bf00      	nop
 800b40a:	371c      	adds	r7, #28
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b414:	b480      	push	{r7}
 800b416:	b087      	sub	sp, #28
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	f003 031f 	and.w	r3, r3, #31
 800b426:	2201      	movs	r2, #1
 800b428:	fa02 f303 	lsl.w	r3, r2, r3
 800b42c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6a1a      	ldr	r2, [r3, #32]
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	43db      	mvns	r3, r3
 800b436:	401a      	ands	r2, r3
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6a1a      	ldr	r2, [r3, #32]
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	f003 031f 	and.w	r3, r3, #31
 800b446:	6879      	ldr	r1, [r7, #4]
 800b448:	fa01 f303 	lsl.w	r3, r1, r3
 800b44c:	431a      	orrs	r2, r3
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	621a      	str	r2, [r3, #32]
}
 800b452:	bf00      	nop
 800b454:	371c      	adds	r7, #28
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
	...

0800b460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b460:	b480      	push	{r7}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b470:	2b01      	cmp	r3, #1
 800b472:	d101      	bne.n	800b478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b474:	2302      	movs	r3, #2
 800b476:	e05a      	b.n	800b52e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2202      	movs	r2, #2
 800b484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b49e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a21      	ldr	r2, [pc, #132]	; (800b53c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d022      	beq.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4c4:	d01d      	beq.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a1d      	ldr	r2, [pc, #116]	; (800b540 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d018      	beq.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a1b      	ldr	r2, [pc, #108]	; (800b544 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d013      	beq.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a1a      	ldr	r2, [pc, #104]	; (800b548 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d00e      	beq.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a18      	ldr	r2, [pc, #96]	; (800b54c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d009      	beq.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a17      	ldr	r2, [pc, #92]	; (800b550 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d004      	beq.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a15      	ldr	r2, [pc, #84]	; (800b554 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d10c      	bne.n	800b51c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	4313      	orrs	r3, r2
 800b512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	68ba      	ldr	r2, [r7, #8]
 800b51a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3714      	adds	r7, #20
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	40010000 	.word	0x40010000
 800b540:	40000400 	.word	0x40000400
 800b544:	40000800 	.word	0x40000800
 800b548:	40000c00 	.word	0x40000c00
 800b54c:	40010400 	.word	0x40010400
 800b550:	40014000 	.word	0x40014000
 800b554:	40001800 	.word	0x40001800

0800b558 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b562:	2300      	movs	r3, #0
 800b564:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d101      	bne.n	800b574 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b570:	2302      	movs	r3, #2
 800b572:	e03d      	b.n	800b5f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2201      	movs	r2, #1
 800b578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	4313      	orrs	r3, r2
 800b588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	689b      	ldr	r3, [r3, #8]
 800b594:	4313      	orrs	r3, r2
 800b596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	695b      	ldr	r3, [r3, #20]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	69db      	ldr	r3, [r3, #28]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5ee:	2300      	movs	r3, #0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3714      	adds	r7, #20
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b618:	bf00      	nop
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d101      	bne.n	800b636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	e03f      	b.n	800b6b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d106      	bne.n	800b650 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f7fb fbea 	bl	8006e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2224      	movs	r2, #36	; 0x24
 800b654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	68da      	ldr	r2, [r3, #12]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b666:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 fddf 	bl	800c22c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	691a      	ldr	r2, [r3, #16]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b67c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	695a      	ldr	r2, [r3, #20]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b68c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68da      	ldr	r2, [r3, #12]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b69c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2220      	movs	r2, #32
 800b6a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2220      	movs	r2, #32
 800b6b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b08a      	sub	sp, #40	; 0x28
 800b6c2:	af02      	add	r7, sp, #8
 800b6c4:	60f8      	str	r0, [r7, #12]
 800b6c6:	60b9      	str	r1, [r7, #8]
 800b6c8:	603b      	str	r3, [r7, #0]
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	2b20      	cmp	r3, #32
 800b6dc:	d17c      	bne.n	800b7d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d002      	beq.n	800b6ea <HAL_UART_Transmit+0x2c>
 800b6e4:	88fb      	ldrh	r3, [r7, #6]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d101      	bne.n	800b6ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e075      	b.n	800b7da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d101      	bne.n	800b6fc <HAL_UART_Transmit+0x3e>
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	e06e      	b.n	800b7da <HAL_UART_Transmit+0x11c>
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2221      	movs	r2, #33	; 0x21
 800b70e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b712:	f7fb fd05 	bl	8007120 <HAL_GetTick>
 800b716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	88fa      	ldrh	r2, [r7, #6]
 800b71c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	88fa      	ldrh	r2, [r7, #6]
 800b722:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b72c:	d108      	bne.n	800b740 <HAL_UART_Transmit+0x82>
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d104      	bne.n	800b740 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b736:	2300      	movs	r3, #0
 800b738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	61bb      	str	r3, [r7, #24]
 800b73e:	e003      	b.n	800b748 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b744:	2300      	movs	r3, #0
 800b746:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b750:	e02a      	b.n	800b7a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	2200      	movs	r2, #0
 800b75a:	2180      	movs	r1, #128	; 0x80
 800b75c:	68f8      	ldr	r0, [r7, #12]
 800b75e:	f000 fb1f 	bl	800bda0 <UART_WaitOnFlagUntilTimeout>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d001      	beq.n	800b76c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b768:	2303      	movs	r3, #3
 800b76a:	e036      	b.n	800b7da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10b      	bne.n	800b78a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	881b      	ldrh	r3, [r3, #0]
 800b776:	461a      	mov	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b780:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	3302      	adds	r3, #2
 800b786:	61bb      	str	r3, [r7, #24]
 800b788:	e007      	b.n	800b79a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	781a      	ldrb	r2, [r3, #0]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	3301      	adds	r3, #1
 800b798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d1cf      	bne.n	800b752 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	9300      	str	r3, [sp, #0]
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	2140      	movs	r1, #64	; 0x40
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f000 faef 	bl	800bda0 <UART_WaitOnFlagUntilTimeout>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d001      	beq.n	800b7cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b7c8:	2303      	movs	r3, #3
 800b7ca:	e006      	b.n	800b7da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2220      	movs	r2, #32
 800b7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	e000      	b.n	800b7da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b7d8:	2302      	movs	r3, #2
  }
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3720      	adds	r7, #32
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b084      	sub	sp, #16
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	60f8      	str	r0, [r7, #12]
 800b7ea:	60b9      	str	r1, [r7, #8]
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	2b20      	cmp	r3, #32
 800b7fa:	d11d      	bne.n	800b838 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d002      	beq.n	800b808 <HAL_UART_Receive_IT+0x26>
 800b802:	88fb      	ldrh	r3, [r7, #6]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d101      	bne.n	800b80c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	e016      	b.n	800b83a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b812:	2b01      	cmp	r3, #1
 800b814:	d101      	bne.n	800b81a <HAL_UART_Receive_IT+0x38>
 800b816:	2302      	movs	r3, #2
 800b818:	e00f      	b.n	800b83a <HAL_UART_Receive_IT+0x58>
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2201      	movs	r2, #1
 800b81e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2200      	movs	r2, #0
 800b826:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b828:	88fb      	ldrh	r3, [r7, #6]
 800b82a:	461a      	mov	r2, r3
 800b82c:	68b9      	ldr	r1, [r7, #8]
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f000 fb24 	bl	800be7c <UART_Start_Receive_IT>
 800b834:	4603      	mov	r3, r0
 800b836:	e000      	b.n	800b83a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b838:	2302      	movs	r3, #2
  }
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
	...

0800b844 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b0ba      	sub	sp, #232	; 0xe8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	695b      	ldr	r3, [r3, #20]
 800b866:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b86a:	2300      	movs	r3, #0
 800b86c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b870:	2300      	movs	r3, #0
 800b872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b87a:	f003 030f 	and.w	r3, r3, #15
 800b87e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b882:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b886:	2b00      	cmp	r3, #0
 800b888:	d10f      	bne.n	800b8aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b88a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b88e:	f003 0320 	and.w	r3, r3, #32
 800b892:	2b00      	cmp	r3, #0
 800b894:	d009      	beq.n	800b8aa <HAL_UART_IRQHandler+0x66>
 800b896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b89a:	f003 0320 	and.w	r3, r3, #32
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d003      	beq.n	800b8aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 fc07 	bl	800c0b6 <UART_Receive_IT>
      return;
 800b8a8:	e256      	b.n	800bd58 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b8aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f000 80de 	beq.w	800ba70 <HAL_UART_IRQHandler+0x22c>
 800b8b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8b8:	f003 0301 	and.w	r3, r3, #1
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d106      	bne.n	800b8ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b8c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f000 80d1 	beq.w	800ba70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b8ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8d2:	f003 0301 	and.w	r3, r3, #1
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00b      	beq.n	800b8f2 <HAL_UART_IRQHandler+0xae>
 800b8da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d005      	beq.n	800b8f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ea:	f043 0201 	orr.w	r2, r3, #1
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b8f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8f6:	f003 0304 	and.w	r3, r3, #4
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00b      	beq.n	800b916 <HAL_UART_IRQHandler+0xd2>
 800b8fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b902:	f003 0301 	and.w	r3, r3, #1
 800b906:	2b00      	cmp	r3, #0
 800b908:	d005      	beq.n	800b916 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b90e:	f043 0202 	orr.w	r2, r3, #2
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b91a:	f003 0302 	and.w	r3, r3, #2
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00b      	beq.n	800b93a <HAL_UART_IRQHandler+0xf6>
 800b922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b926:	f003 0301 	and.w	r3, r3, #1
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d005      	beq.n	800b93a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b932:	f043 0204 	orr.w	r2, r3, #4
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b93a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b93e:	f003 0308 	and.w	r3, r3, #8
 800b942:	2b00      	cmp	r3, #0
 800b944:	d011      	beq.n	800b96a <HAL_UART_IRQHandler+0x126>
 800b946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b94a:	f003 0320 	and.w	r3, r3, #32
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d105      	bne.n	800b95e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b956:	f003 0301 	and.w	r3, r3, #1
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d005      	beq.n	800b96a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b962:	f043 0208 	orr.w	r2, r3, #8
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f000 81ed 	beq.w	800bd4e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b978:	f003 0320 	and.w	r3, r3, #32
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d008      	beq.n	800b992 <HAL_UART_IRQHandler+0x14e>
 800b980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b984:	f003 0320 	and.w	r3, r3, #32
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d002      	beq.n	800b992 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 fb92 	bl	800c0b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	695b      	ldr	r3, [r3, #20]
 800b998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b99c:	2b40      	cmp	r3, #64	; 0x40
 800b99e:	bf0c      	ite	eq
 800b9a0:	2301      	moveq	r3, #1
 800b9a2:	2300      	movne	r3, #0
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ae:	f003 0308 	and.w	r3, r3, #8
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d103      	bne.n	800b9be <HAL_UART_IRQHandler+0x17a>
 800b9b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d04f      	beq.n	800ba5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 fa9a 	bl	800bef8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	695b      	ldr	r3, [r3, #20]
 800b9ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ce:	2b40      	cmp	r3, #64	; 0x40
 800b9d0:	d141      	bne.n	800ba56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	3314      	adds	r3, #20
 800b9d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b9e0:	e853 3f00 	ldrex	r3, [r3]
 800b9e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b9e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b9ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	3314      	adds	r3, #20
 800b9fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b9fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ba02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ba0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ba0e:	e841 2300 	strex	r3, r2, [r1]
 800ba12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ba16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d1d9      	bne.n	800b9d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d013      	beq.n	800ba4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba2a:	4a7d      	ldr	r2, [pc, #500]	; (800bc20 <HAL_UART_IRQHandler+0x3dc>)
 800ba2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fc fa5d 	bl	8007ef2 <HAL_DMA_Abort_IT>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d016      	beq.n	800ba6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ba48:	4610      	mov	r0, r2
 800ba4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba4c:	e00e      	b.n	800ba6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f990 	bl	800bd74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba54:	e00a      	b.n	800ba6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 f98c 	bl	800bd74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba5c:	e006      	b.n	800ba6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 f988 	bl	800bd74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ba6a:	e170      	b.n	800bd4e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba6c:	bf00      	nop
    return;
 800ba6e:	e16e      	b.n	800bd4e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	f040 814a 	bne.w	800bd0e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ba7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba7e:	f003 0310 	and.w	r3, r3, #16
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f000 8143 	beq.w	800bd0e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ba88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba8c:	f003 0310 	and.w	r3, r3, #16
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f000 813c 	beq.w	800bd0e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ba96:	2300      	movs	r3, #0
 800ba98:	60bb      	str	r3, [r7, #8]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	60bb      	str	r3, [r7, #8]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	60bb      	str	r3, [r7, #8]
 800baaa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	695b      	ldr	r3, [r3, #20]
 800bab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bab6:	2b40      	cmp	r3, #64	; 0x40
 800bab8:	f040 80b4 	bne.w	800bc24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bac8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bacc:	2b00      	cmp	r3, #0
 800bace:	f000 8140 	beq.w	800bd52 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bad6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bada:	429a      	cmp	r2, r3
 800badc:	f080 8139 	bcs.w	800bd52 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bae6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baec:	69db      	ldr	r3, [r3, #28]
 800baee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baf2:	f000 8088 	beq.w	800bc06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	330c      	adds	r3, #12
 800bafc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bb04:	e853 3f00 	ldrex	r3, [r3]
 800bb08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bb0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bb10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	330c      	adds	r3, #12
 800bb1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bb22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bb26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bb2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bb32:	e841 2300 	strex	r3, r2, [r1]
 800bb36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bb3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d1d9      	bne.n	800baf6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	3314      	adds	r3, #20
 800bb48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb4c:	e853 3f00 	ldrex	r3, [r3]
 800bb50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bb52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb54:	f023 0301 	bic.w	r3, r3, #1
 800bb58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	3314      	adds	r3, #20
 800bb62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bb66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bb6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bb6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bb72:	e841 2300 	strex	r3, r2, [r1]
 800bb76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bb78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1e1      	bne.n	800bb42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	3314      	adds	r3, #20
 800bb84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb88:	e853 3f00 	ldrex	r3, [r3]
 800bb8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bb8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	3314      	adds	r3, #20
 800bb9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bba2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bba4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bba8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bbaa:	e841 2300 	strex	r3, r2, [r1]
 800bbae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bbb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d1e3      	bne.n	800bb7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2220      	movs	r2, #32
 800bbba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	330c      	adds	r3, #12
 800bbca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbce:	e853 3f00 	ldrex	r3, [r3]
 800bbd2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bbd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbd6:	f023 0310 	bic.w	r3, r3, #16
 800bbda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	330c      	adds	r3, #12
 800bbe4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bbe8:	65ba      	str	r2, [r7, #88]	; 0x58
 800bbea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bbee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bbf0:	e841 2300 	strex	r3, r2, [r1]
 800bbf4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bbf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d1e3      	bne.n	800bbc4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7fc f906 	bl	8007e12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	1ad3      	subs	r3, r2, r3
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	4619      	mov	r1, r3
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f8b6 	bl	800bd88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bc1c:	e099      	b.n	800bd52 <HAL_UART_IRQHandler+0x50e>
 800bc1e:	bf00      	nop
 800bc20:	0800bfbf 	.word	0x0800bfbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	f000 808b 	beq.w	800bd56 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800bc40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f000 8086 	beq.w	800bd56 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	330c      	adds	r3, #12
 800bc50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc54:	e853 3f00 	ldrex	r3, [r3]
 800bc58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	330c      	adds	r3, #12
 800bc6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bc6e:	647a      	str	r2, [r7, #68]	; 0x44
 800bc70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc76:	e841 2300 	strex	r3, r2, [r1]
 800bc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d1e3      	bne.n	800bc4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	3314      	adds	r3, #20
 800bc88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8c:	e853 3f00 	ldrex	r3, [r3]
 800bc90:	623b      	str	r3, [r7, #32]
   return(result);
 800bc92:	6a3b      	ldr	r3, [r7, #32]
 800bc94:	f023 0301 	bic.w	r3, r3, #1
 800bc98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	3314      	adds	r3, #20
 800bca2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bca6:	633a      	str	r2, [r7, #48]	; 0x30
 800bca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcae:	e841 2300 	strex	r3, r2, [r1]
 800bcb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d1e3      	bne.n	800bc82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2220      	movs	r2, #32
 800bcbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	330c      	adds	r3, #12
 800bcce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	e853 3f00 	ldrex	r3, [r3]
 800bcd6:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f023 0310 	bic.w	r3, r3, #16
 800bcde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	330c      	adds	r3, #12
 800bce8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bcec:	61fa      	str	r2, [r7, #28]
 800bcee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf0:	69b9      	ldr	r1, [r7, #24]
 800bcf2:	69fa      	ldr	r2, [r7, #28]
 800bcf4:	e841 2300 	strex	r3, r2, [r1]
 800bcf8:	617b      	str	r3, [r7, #20]
   return(result);
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d1e3      	bne.n	800bcc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bd00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd04:	4619      	mov	r1, r3
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 f83e 	bl	800bd88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd0c:	e023      	b.n	800bd56 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bd0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d009      	beq.n	800bd2e <HAL_UART_IRQHandler+0x4ea>
 800bd1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d003      	beq.n	800bd2e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 f95d 	bl	800bfe6 <UART_Transmit_IT>
    return;
 800bd2c:	e014      	b.n	800bd58 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bd2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00e      	beq.n	800bd58 <HAL_UART_IRQHandler+0x514>
 800bd3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d008      	beq.n	800bd58 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 f99d 	bl	800c086 <UART_EndTransmit_IT>
    return;
 800bd4c:	e004      	b.n	800bd58 <HAL_UART_IRQHandler+0x514>
    return;
 800bd4e:	bf00      	nop
 800bd50:	e002      	b.n	800bd58 <HAL_UART_IRQHandler+0x514>
      return;
 800bd52:	bf00      	nop
 800bd54:	e000      	b.n	800bd58 <HAL_UART_IRQHandler+0x514>
      return;
 800bd56:	bf00      	nop
  }
}
 800bd58:	37e8      	adds	r7, #232	; 0xe8
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop

0800bd60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bd68:	bf00      	nop
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bd7c:	bf00      	nop
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	460b      	mov	r3, r1
 800bd92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b090      	sub	sp, #64	; 0x40
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	603b      	str	r3, [r7, #0]
 800bdac:	4613      	mov	r3, r2
 800bdae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdb0:	e050      	b.n	800be54 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bdb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdb8:	d04c      	beq.n	800be54 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bdba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d007      	beq.n	800bdd0 <UART_WaitOnFlagUntilTimeout+0x30>
 800bdc0:	f7fb f9ae 	bl	8007120 <HAL_GetTick>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d241      	bcs.n	800be54 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	330c      	adds	r3, #12
 800bdd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdda:	e853 3f00 	ldrex	r3, [r3]
 800bdde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bde6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	330c      	adds	r3, #12
 800bdee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bdf0:	637a      	str	r2, [r7, #52]	; 0x34
 800bdf2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bdf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdf8:	e841 2300 	strex	r3, r2, [r1]
 800bdfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be00:	2b00      	cmp	r3, #0
 800be02:	d1e5      	bne.n	800bdd0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	3314      	adds	r3, #20
 800be0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	e853 3f00 	ldrex	r3, [r3]
 800be12:	613b      	str	r3, [r7, #16]
   return(result);
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	f023 0301 	bic.w	r3, r3, #1
 800be1a:	63bb      	str	r3, [r7, #56]	; 0x38
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	3314      	adds	r3, #20
 800be22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be24:	623a      	str	r2, [r7, #32]
 800be26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be28:	69f9      	ldr	r1, [r7, #28]
 800be2a:	6a3a      	ldr	r2, [r7, #32]
 800be2c:	e841 2300 	strex	r3, r2, [r1]
 800be30:	61bb      	str	r3, [r7, #24]
   return(result);
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1e5      	bne.n	800be04 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2220      	movs	r2, #32
 800be3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2220      	movs	r2, #32
 800be44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2200      	movs	r2, #0
 800be4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800be50:	2303      	movs	r3, #3
 800be52:	e00f      	b.n	800be74 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	4013      	ands	r3, r2
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	429a      	cmp	r2, r3
 800be62:	bf0c      	ite	eq
 800be64:	2301      	moveq	r3, #1
 800be66:	2300      	movne	r3, #0
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	461a      	mov	r2, r3
 800be6c:	79fb      	ldrb	r3, [r7, #7]
 800be6e:	429a      	cmp	r2, r3
 800be70:	d09f      	beq.n	800bdb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3740      	adds	r7, #64	; 0x40
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	4613      	mov	r3, r2
 800be88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	68ba      	ldr	r2, [r7, #8]
 800be8e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	88fa      	ldrh	r2, [r7, #6]
 800be94:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	88fa      	ldrh	r2, [r7, #6]
 800be9a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2200      	movs	r2, #0
 800bea0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2222      	movs	r2, #34	; 0x22
 800bea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	691b      	ldr	r3, [r3, #16]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d007      	beq.n	800beca <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68da      	ldr	r2, [r3, #12]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bec8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	695a      	ldr	r2, [r3, #20]
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f042 0201 	orr.w	r2, r2, #1
 800bed8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68da      	ldr	r2, [r3, #12]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f042 0220 	orr.w	r2, r2, #32
 800bee8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bef8:	b480      	push	{r7}
 800befa:	b095      	sub	sp, #84	; 0x54
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	330c      	adds	r3, #12
 800bf06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0a:	e853 3f00 	ldrex	r3, [r3]
 800bf0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	330c      	adds	r3, #12
 800bf1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf20:	643a      	str	r2, [r7, #64]	; 0x40
 800bf22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf28:	e841 2300 	strex	r3, r2, [r1]
 800bf2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d1e5      	bne.n	800bf00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	3314      	adds	r3, #20
 800bf3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf3c:	6a3b      	ldr	r3, [r7, #32]
 800bf3e:	e853 3f00 	ldrex	r3, [r3]
 800bf42:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	f023 0301 	bic.w	r3, r3, #1
 800bf4a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	3314      	adds	r3, #20
 800bf52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf54:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf5c:	e841 2300 	strex	r3, r2, [r1]
 800bf60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d1e5      	bne.n	800bf34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d119      	bne.n	800bfa4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	330c      	adds	r3, #12
 800bf76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	e853 3f00 	ldrex	r3, [r3]
 800bf7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	f023 0310 	bic.w	r3, r3, #16
 800bf86:	647b      	str	r3, [r7, #68]	; 0x44
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	330c      	adds	r3, #12
 800bf8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf90:	61ba      	str	r2, [r7, #24]
 800bf92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf94:	6979      	ldr	r1, [r7, #20]
 800bf96:	69ba      	ldr	r2, [r7, #24]
 800bf98:	e841 2300 	strex	r3, r2, [r1]
 800bf9c:	613b      	str	r3, [r7, #16]
   return(result);
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1e5      	bne.n	800bf70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2220      	movs	r2, #32
 800bfa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bfb2:	bf00      	nop
 800bfb4:	3754      	adds	r7, #84	; 0x54
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr

0800bfbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bfbe:	b580      	push	{r7, lr}
 800bfc0:	b084      	sub	sp, #16
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f7ff fecb 	bl	800bd74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfde:	bf00      	nop
 800bfe0:	3710      	adds	r7, #16
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bfe6:	b480      	push	{r7}
 800bfe8:	b085      	sub	sp, #20
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	2b21      	cmp	r3, #33	; 0x21
 800bff8:	d13e      	bne.n	800c078 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c002:	d114      	bne.n	800c02e <UART_Transmit_IT+0x48>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	691b      	ldr	r3, [r3, #16]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d110      	bne.n	800c02e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6a1b      	ldr	r3, [r3, #32]
 800c010:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	881b      	ldrh	r3, [r3, #0]
 800c016:	461a      	mov	r2, r3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c020:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a1b      	ldr	r3, [r3, #32]
 800c026:	1c9a      	adds	r2, r3, #2
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	621a      	str	r2, [r3, #32]
 800c02c:	e008      	b.n	800c040 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6a1b      	ldr	r3, [r3, #32]
 800c032:	1c59      	adds	r1, r3, #1
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	6211      	str	r1, [r2, #32]
 800c038:	781a      	ldrb	r2, [r3, #0]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c044:	b29b      	uxth	r3, r3
 800c046:	3b01      	subs	r3, #1
 800c048:	b29b      	uxth	r3, r3
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	4619      	mov	r1, r3
 800c04e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c050:	2b00      	cmp	r3, #0
 800c052:	d10f      	bne.n	800c074 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68da      	ldr	r2, [r3, #12]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c062:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	68da      	ldr	r2, [r3, #12]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c072:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c074:	2300      	movs	r3, #0
 800c076:	e000      	b.n	800c07a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c078:	2302      	movs	r3, #2
  }
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3714      	adds	r7, #20
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr

0800c086 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b082      	sub	sp, #8
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68da      	ldr	r2, [r3, #12]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c09c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2220      	movs	r2, #32
 800c0a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7ff fe5a 	bl	800bd60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c0ac:	2300      	movs	r3, #0
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3708      	adds	r7, #8
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b08c      	sub	sp, #48	; 0x30
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	2b22      	cmp	r3, #34	; 0x22
 800c0c8:	f040 80ab 	bne.w	800c222 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0d4:	d117      	bne.n	800c106 <UART_Receive_IT+0x50>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	691b      	ldr	r3, [r3, #16]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d113      	bne.n	800c106 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0fe:	1c9a      	adds	r2, r3, #2
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	629a      	str	r2, [r3, #40]	; 0x28
 800c104:	e026      	b.n	800c154 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c10a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c10c:	2300      	movs	r3, #0
 800c10e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c118:	d007      	beq.n	800c12a <UART_Receive_IT+0x74>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10a      	bne.n	800c138 <UART_Receive_IT+0x82>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d106      	bne.n	800c138 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	b2da      	uxtb	r2, r3
 800c132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c134:	701a      	strb	r2, [r3, #0]
 800c136:	e008      	b.n	800c14a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c144:	b2da      	uxtb	r2, r3
 800c146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c148:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c14e:	1c5a      	adds	r2, r3, #1
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c158:	b29b      	uxth	r3, r3
 800c15a:	3b01      	subs	r3, #1
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	4619      	mov	r1, r3
 800c162:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c164:	2b00      	cmp	r3, #0
 800c166:	d15a      	bne.n	800c21e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	68da      	ldr	r2, [r3, #12]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f022 0220 	bic.w	r2, r2, #32
 800c176:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	68da      	ldr	r2, [r3, #12]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	695a      	ldr	r2, [r3, #20]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f022 0201 	bic.w	r2, r2, #1
 800c196:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2220      	movs	r2, #32
 800c19c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d135      	bne.n	800c214 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	330c      	adds	r3, #12
 800c1b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	e853 3f00 	ldrex	r3, [r3]
 800c1bc:	613b      	str	r3, [r7, #16]
   return(result);
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	f023 0310 	bic.w	r3, r3, #16
 800c1c4:	627b      	str	r3, [r7, #36]	; 0x24
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	330c      	adds	r3, #12
 800c1cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1ce:	623a      	str	r2, [r7, #32]
 800c1d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d2:	69f9      	ldr	r1, [r7, #28]
 800c1d4:	6a3a      	ldr	r2, [r7, #32]
 800c1d6:	e841 2300 	strex	r3, r2, [r1]
 800c1da:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d1e5      	bne.n	800c1ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f003 0310 	and.w	r3, r3, #16
 800c1ec:	2b10      	cmp	r3, #16
 800c1ee:	d10a      	bne.n	800c206 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	60fb      	str	r3, [r7, #12]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	60fb      	str	r3, [r7, #12]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	60fb      	str	r3, [r7, #12]
 800c204:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c20a:	4619      	mov	r1, r3
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f7ff fdbb 	bl	800bd88 <HAL_UARTEx_RxEventCallback>
 800c212:	e002      	b.n	800c21a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f7f5 fd4f 	bl	8001cb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c21a:	2300      	movs	r3, #0
 800c21c:	e002      	b.n	800c224 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c21e:	2300      	movs	r3, #0
 800c220:	e000      	b.n	800c224 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c222:	2302      	movs	r3, #2
  }
}
 800c224:	4618      	mov	r0, r3
 800c226:	3730      	adds	r7, #48	; 0x30
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c22c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c230:	b0c0      	sub	sp, #256	; 0x100
 800c232:	af00      	add	r7, sp, #0
 800c234:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	691b      	ldr	r3, [r3, #16]
 800c240:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c248:	68d9      	ldr	r1, [r3, #12]
 800c24a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	ea40 0301 	orr.w	r3, r0, r1
 800c254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c25a:	689a      	ldr	r2, [r3, #8]
 800c25c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c260:	691b      	ldr	r3, [r3, #16]
 800c262:	431a      	orrs	r2, r3
 800c264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c268:	695b      	ldr	r3, [r3, #20]
 800c26a:	431a      	orrs	r2, r3
 800c26c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c270:	69db      	ldr	r3, [r3, #28]
 800c272:	4313      	orrs	r3, r2
 800c274:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c284:	f021 010c 	bic.w	r1, r1, #12
 800c288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c292:	430b      	orrs	r3, r1
 800c294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	695b      	ldr	r3, [r3, #20]
 800c29e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c2a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2a6:	6999      	ldr	r1, [r3, #24]
 800c2a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	ea40 0301 	orr.w	r3, r0, r1
 800c2b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c2b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	4b8f      	ldr	r3, [pc, #572]	; (800c4f8 <UART_SetConfig+0x2cc>)
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d005      	beq.n	800c2cc <UART_SetConfig+0xa0>
 800c2c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	4b8d      	ldr	r3, [pc, #564]	; (800c4fc <UART_SetConfig+0x2d0>)
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d104      	bne.n	800c2d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c2cc:	f7fd fc16 	bl	8009afc <HAL_RCC_GetPCLK2Freq>
 800c2d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c2d4:	e003      	b.n	800c2de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c2d6:	f7fd fbfd 	bl	8009ad4 <HAL_RCC_GetPCLK1Freq>
 800c2da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c2de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2e2:	69db      	ldr	r3, [r3, #28]
 800c2e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2e8:	f040 810c 	bne.w	800c504 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c2ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c2f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c2fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c2fe:	4622      	mov	r2, r4
 800c300:	462b      	mov	r3, r5
 800c302:	1891      	adds	r1, r2, r2
 800c304:	65b9      	str	r1, [r7, #88]	; 0x58
 800c306:	415b      	adcs	r3, r3
 800c308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c30a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c30e:	4621      	mov	r1, r4
 800c310:	eb12 0801 	adds.w	r8, r2, r1
 800c314:	4629      	mov	r1, r5
 800c316:	eb43 0901 	adc.w	r9, r3, r1
 800c31a:	f04f 0200 	mov.w	r2, #0
 800c31e:	f04f 0300 	mov.w	r3, #0
 800c322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c32a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c32e:	4690      	mov	r8, r2
 800c330:	4699      	mov	r9, r3
 800c332:	4623      	mov	r3, r4
 800c334:	eb18 0303 	adds.w	r3, r8, r3
 800c338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c33c:	462b      	mov	r3, r5
 800c33e:	eb49 0303 	adc.w	r3, r9, r3
 800c342:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	2200      	movs	r2, #0
 800c34e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c352:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c356:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c35a:	460b      	mov	r3, r1
 800c35c:	18db      	adds	r3, r3, r3
 800c35e:	653b      	str	r3, [r7, #80]	; 0x50
 800c360:	4613      	mov	r3, r2
 800c362:	eb42 0303 	adc.w	r3, r2, r3
 800c366:	657b      	str	r3, [r7, #84]	; 0x54
 800c368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c36c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c370:	f7f4 fc44 	bl	8000bfc <__aeabi_uldivmod>
 800c374:	4602      	mov	r2, r0
 800c376:	460b      	mov	r3, r1
 800c378:	4b61      	ldr	r3, [pc, #388]	; (800c500 <UART_SetConfig+0x2d4>)
 800c37a:	fba3 2302 	umull	r2, r3, r3, r2
 800c37e:	095b      	lsrs	r3, r3, #5
 800c380:	011c      	lsls	r4, r3, #4
 800c382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c386:	2200      	movs	r2, #0
 800c388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c38c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c390:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c394:	4642      	mov	r2, r8
 800c396:	464b      	mov	r3, r9
 800c398:	1891      	adds	r1, r2, r2
 800c39a:	64b9      	str	r1, [r7, #72]	; 0x48
 800c39c:	415b      	adcs	r3, r3
 800c39e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c3a4:	4641      	mov	r1, r8
 800c3a6:	eb12 0a01 	adds.w	sl, r2, r1
 800c3aa:	4649      	mov	r1, r9
 800c3ac:	eb43 0b01 	adc.w	fp, r3, r1
 800c3b0:	f04f 0200 	mov.w	r2, #0
 800c3b4:	f04f 0300 	mov.w	r3, #0
 800c3b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c3bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c3c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c3c4:	4692      	mov	sl, r2
 800c3c6:	469b      	mov	fp, r3
 800c3c8:	4643      	mov	r3, r8
 800c3ca:	eb1a 0303 	adds.w	r3, sl, r3
 800c3ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c3d2:	464b      	mov	r3, r9
 800c3d4:	eb4b 0303 	adc.w	r3, fp, r3
 800c3d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c3dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c3e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c3ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	18db      	adds	r3, r3, r3
 800c3f4:	643b      	str	r3, [r7, #64]	; 0x40
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	eb42 0303 	adc.w	r3, r2, r3
 800c3fc:	647b      	str	r3, [r7, #68]	; 0x44
 800c3fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c402:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c406:	f7f4 fbf9 	bl	8000bfc <__aeabi_uldivmod>
 800c40a:	4602      	mov	r2, r0
 800c40c:	460b      	mov	r3, r1
 800c40e:	4611      	mov	r1, r2
 800c410:	4b3b      	ldr	r3, [pc, #236]	; (800c500 <UART_SetConfig+0x2d4>)
 800c412:	fba3 2301 	umull	r2, r3, r3, r1
 800c416:	095b      	lsrs	r3, r3, #5
 800c418:	2264      	movs	r2, #100	; 0x64
 800c41a:	fb02 f303 	mul.w	r3, r2, r3
 800c41e:	1acb      	subs	r3, r1, r3
 800c420:	00db      	lsls	r3, r3, #3
 800c422:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c426:	4b36      	ldr	r3, [pc, #216]	; (800c500 <UART_SetConfig+0x2d4>)
 800c428:	fba3 2302 	umull	r2, r3, r3, r2
 800c42c:	095b      	lsrs	r3, r3, #5
 800c42e:	005b      	lsls	r3, r3, #1
 800c430:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c434:	441c      	add	r4, r3
 800c436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c43a:	2200      	movs	r2, #0
 800c43c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c440:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c444:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c448:	4642      	mov	r2, r8
 800c44a:	464b      	mov	r3, r9
 800c44c:	1891      	adds	r1, r2, r2
 800c44e:	63b9      	str	r1, [r7, #56]	; 0x38
 800c450:	415b      	adcs	r3, r3
 800c452:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c458:	4641      	mov	r1, r8
 800c45a:	1851      	adds	r1, r2, r1
 800c45c:	6339      	str	r1, [r7, #48]	; 0x30
 800c45e:	4649      	mov	r1, r9
 800c460:	414b      	adcs	r3, r1
 800c462:	637b      	str	r3, [r7, #52]	; 0x34
 800c464:	f04f 0200 	mov.w	r2, #0
 800c468:	f04f 0300 	mov.w	r3, #0
 800c46c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c470:	4659      	mov	r1, fp
 800c472:	00cb      	lsls	r3, r1, #3
 800c474:	4651      	mov	r1, sl
 800c476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c47a:	4651      	mov	r1, sl
 800c47c:	00ca      	lsls	r2, r1, #3
 800c47e:	4610      	mov	r0, r2
 800c480:	4619      	mov	r1, r3
 800c482:	4603      	mov	r3, r0
 800c484:	4642      	mov	r2, r8
 800c486:	189b      	adds	r3, r3, r2
 800c488:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c48c:	464b      	mov	r3, r9
 800c48e:	460a      	mov	r2, r1
 800c490:	eb42 0303 	adc.w	r3, r2, r3
 800c494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c4a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c4a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	18db      	adds	r3, r3, r3
 800c4b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	eb42 0303 	adc.w	r3, r2, r3
 800c4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c4be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c4c2:	f7f4 fb9b 	bl	8000bfc <__aeabi_uldivmod>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	4b0d      	ldr	r3, [pc, #52]	; (800c500 <UART_SetConfig+0x2d4>)
 800c4cc:	fba3 1302 	umull	r1, r3, r3, r2
 800c4d0:	095b      	lsrs	r3, r3, #5
 800c4d2:	2164      	movs	r1, #100	; 0x64
 800c4d4:	fb01 f303 	mul.w	r3, r1, r3
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	00db      	lsls	r3, r3, #3
 800c4dc:	3332      	adds	r3, #50	; 0x32
 800c4de:	4a08      	ldr	r2, [pc, #32]	; (800c500 <UART_SetConfig+0x2d4>)
 800c4e0:	fba2 2303 	umull	r2, r3, r2, r3
 800c4e4:	095b      	lsrs	r3, r3, #5
 800c4e6:	f003 0207 	and.w	r2, r3, #7
 800c4ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4422      	add	r2, r4
 800c4f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c4f4:	e106      	b.n	800c704 <UART_SetConfig+0x4d8>
 800c4f6:	bf00      	nop
 800c4f8:	40011000 	.word	0x40011000
 800c4fc:	40011400 	.word	0x40011400
 800c500:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c508:	2200      	movs	r2, #0
 800c50a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c50e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c512:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c516:	4642      	mov	r2, r8
 800c518:	464b      	mov	r3, r9
 800c51a:	1891      	adds	r1, r2, r2
 800c51c:	6239      	str	r1, [r7, #32]
 800c51e:	415b      	adcs	r3, r3
 800c520:	627b      	str	r3, [r7, #36]	; 0x24
 800c522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c526:	4641      	mov	r1, r8
 800c528:	1854      	adds	r4, r2, r1
 800c52a:	4649      	mov	r1, r9
 800c52c:	eb43 0501 	adc.w	r5, r3, r1
 800c530:	f04f 0200 	mov.w	r2, #0
 800c534:	f04f 0300 	mov.w	r3, #0
 800c538:	00eb      	lsls	r3, r5, #3
 800c53a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c53e:	00e2      	lsls	r2, r4, #3
 800c540:	4614      	mov	r4, r2
 800c542:	461d      	mov	r5, r3
 800c544:	4643      	mov	r3, r8
 800c546:	18e3      	adds	r3, r4, r3
 800c548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c54c:	464b      	mov	r3, r9
 800c54e:	eb45 0303 	adc.w	r3, r5, r3
 800c552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	2200      	movs	r2, #0
 800c55e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c562:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c566:	f04f 0200 	mov.w	r2, #0
 800c56a:	f04f 0300 	mov.w	r3, #0
 800c56e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c572:	4629      	mov	r1, r5
 800c574:	008b      	lsls	r3, r1, #2
 800c576:	4621      	mov	r1, r4
 800c578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c57c:	4621      	mov	r1, r4
 800c57e:	008a      	lsls	r2, r1, #2
 800c580:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c584:	f7f4 fb3a 	bl	8000bfc <__aeabi_uldivmod>
 800c588:	4602      	mov	r2, r0
 800c58a:	460b      	mov	r3, r1
 800c58c:	4b60      	ldr	r3, [pc, #384]	; (800c710 <UART_SetConfig+0x4e4>)
 800c58e:	fba3 2302 	umull	r2, r3, r3, r2
 800c592:	095b      	lsrs	r3, r3, #5
 800c594:	011c      	lsls	r4, r3, #4
 800c596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c59a:	2200      	movs	r2, #0
 800c59c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c5a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c5a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c5a8:	4642      	mov	r2, r8
 800c5aa:	464b      	mov	r3, r9
 800c5ac:	1891      	adds	r1, r2, r2
 800c5ae:	61b9      	str	r1, [r7, #24]
 800c5b0:	415b      	adcs	r3, r3
 800c5b2:	61fb      	str	r3, [r7, #28]
 800c5b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c5b8:	4641      	mov	r1, r8
 800c5ba:	1851      	adds	r1, r2, r1
 800c5bc:	6139      	str	r1, [r7, #16]
 800c5be:	4649      	mov	r1, r9
 800c5c0:	414b      	adcs	r3, r1
 800c5c2:	617b      	str	r3, [r7, #20]
 800c5c4:	f04f 0200 	mov.w	r2, #0
 800c5c8:	f04f 0300 	mov.w	r3, #0
 800c5cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c5d0:	4659      	mov	r1, fp
 800c5d2:	00cb      	lsls	r3, r1, #3
 800c5d4:	4651      	mov	r1, sl
 800c5d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c5da:	4651      	mov	r1, sl
 800c5dc:	00ca      	lsls	r2, r1, #3
 800c5de:	4610      	mov	r0, r2
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	4642      	mov	r2, r8
 800c5e6:	189b      	adds	r3, r3, r2
 800c5e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c5ec:	464b      	mov	r3, r9
 800c5ee:	460a      	mov	r2, r1
 800c5f0:	eb42 0303 	adc.w	r3, r2, r3
 800c5f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	67bb      	str	r3, [r7, #120]	; 0x78
 800c602:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c604:	f04f 0200 	mov.w	r2, #0
 800c608:	f04f 0300 	mov.w	r3, #0
 800c60c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c610:	4649      	mov	r1, r9
 800c612:	008b      	lsls	r3, r1, #2
 800c614:	4641      	mov	r1, r8
 800c616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c61a:	4641      	mov	r1, r8
 800c61c:	008a      	lsls	r2, r1, #2
 800c61e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c622:	f7f4 faeb 	bl	8000bfc <__aeabi_uldivmod>
 800c626:	4602      	mov	r2, r0
 800c628:	460b      	mov	r3, r1
 800c62a:	4611      	mov	r1, r2
 800c62c:	4b38      	ldr	r3, [pc, #224]	; (800c710 <UART_SetConfig+0x4e4>)
 800c62e:	fba3 2301 	umull	r2, r3, r3, r1
 800c632:	095b      	lsrs	r3, r3, #5
 800c634:	2264      	movs	r2, #100	; 0x64
 800c636:	fb02 f303 	mul.w	r3, r2, r3
 800c63a:	1acb      	subs	r3, r1, r3
 800c63c:	011b      	lsls	r3, r3, #4
 800c63e:	3332      	adds	r3, #50	; 0x32
 800c640:	4a33      	ldr	r2, [pc, #204]	; (800c710 <UART_SetConfig+0x4e4>)
 800c642:	fba2 2303 	umull	r2, r3, r2, r3
 800c646:	095b      	lsrs	r3, r3, #5
 800c648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c64c:	441c      	add	r4, r3
 800c64e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c652:	2200      	movs	r2, #0
 800c654:	673b      	str	r3, [r7, #112]	; 0x70
 800c656:	677a      	str	r2, [r7, #116]	; 0x74
 800c658:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c65c:	4642      	mov	r2, r8
 800c65e:	464b      	mov	r3, r9
 800c660:	1891      	adds	r1, r2, r2
 800c662:	60b9      	str	r1, [r7, #8]
 800c664:	415b      	adcs	r3, r3
 800c666:	60fb      	str	r3, [r7, #12]
 800c668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c66c:	4641      	mov	r1, r8
 800c66e:	1851      	adds	r1, r2, r1
 800c670:	6039      	str	r1, [r7, #0]
 800c672:	4649      	mov	r1, r9
 800c674:	414b      	adcs	r3, r1
 800c676:	607b      	str	r3, [r7, #4]
 800c678:	f04f 0200 	mov.w	r2, #0
 800c67c:	f04f 0300 	mov.w	r3, #0
 800c680:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c684:	4659      	mov	r1, fp
 800c686:	00cb      	lsls	r3, r1, #3
 800c688:	4651      	mov	r1, sl
 800c68a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c68e:	4651      	mov	r1, sl
 800c690:	00ca      	lsls	r2, r1, #3
 800c692:	4610      	mov	r0, r2
 800c694:	4619      	mov	r1, r3
 800c696:	4603      	mov	r3, r0
 800c698:	4642      	mov	r2, r8
 800c69a:	189b      	adds	r3, r3, r2
 800c69c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c69e:	464b      	mov	r3, r9
 800c6a0:	460a      	mov	r2, r1
 800c6a2:	eb42 0303 	adc.w	r3, r2, r3
 800c6a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c6a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	663b      	str	r3, [r7, #96]	; 0x60
 800c6b2:	667a      	str	r2, [r7, #100]	; 0x64
 800c6b4:	f04f 0200 	mov.w	r2, #0
 800c6b8:	f04f 0300 	mov.w	r3, #0
 800c6bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c6c0:	4649      	mov	r1, r9
 800c6c2:	008b      	lsls	r3, r1, #2
 800c6c4:	4641      	mov	r1, r8
 800c6c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c6ca:	4641      	mov	r1, r8
 800c6cc:	008a      	lsls	r2, r1, #2
 800c6ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c6d2:	f7f4 fa93 	bl	8000bfc <__aeabi_uldivmod>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	460b      	mov	r3, r1
 800c6da:	4b0d      	ldr	r3, [pc, #52]	; (800c710 <UART_SetConfig+0x4e4>)
 800c6dc:	fba3 1302 	umull	r1, r3, r3, r2
 800c6e0:	095b      	lsrs	r3, r3, #5
 800c6e2:	2164      	movs	r1, #100	; 0x64
 800c6e4:	fb01 f303 	mul.w	r3, r1, r3
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	011b      	lsls	r3, r3, #4
 800c6ec:	3332      	adds	r3, #50	; 0x32
 800c6ee:	4a08      	ldr	r2, [pc, #32]	; (800c710 <UART_SetConfig+0x4e4>)
 800c6f0:	fba2 2303 	umull	r2, r3, r2, r3
 800c6f4:	095b      	lsrs	r3, r3, #5
 800c6f6:	f003 020f 	and.w	r2, r3, #15
 800c6fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4422      	add	r2, r4
 800c702:	609a      	str	r2, [r3, #8]
}
 800c704:	bf00      	nop
 800c706:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c70a:	46bd      	mov	sp, r7
 800c70c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c710:	51eb851f 	.word	0x51eb851f

0800c714 <__NVIC_SetPriority>:
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	4603      	mov	r3, r0
 800c71c:	6039      	str	r1, [r7, #0]
 800c71e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c724:	2b00      	cmp	r3, #0
 800c726:	db0a      	blt.n	800c73e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	b2da      	uxtb	r2, r3
 800c72c:	490c      	ldr	r1, [pc, #48]	; (800c760 <__NVIC_SetPriority+0x4c>)
 800c72e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c732:	0112      	lsls	r2, r2, #4
 800c734:	b2d2      	uxtb	r2, r2
 800c736:	440b      	add	r3, r1
 800c738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c73c:	e00a      	b.n	800c754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	b2da      	uxtb	r2, r3
 800c742:	4908      	ldr	r1, [pc, #32]	; (800c764 <__NVIC_SetPriority+0x50>)
 800c744:	79fb      	ldrb	r3, [r7, #7]
 800c746:	f003 030f 	and.w	r3, r3, #15
 800c74a:	3b04      	subs	r3, #4
 800c74c:	0112      	lsls	r2, r2, #4
 800c74e:	b2d2      	uxtb	r2, r2
 800c750:	440b      	add	r3, r1
 800c752:	761a      	strb	r2, [r3, #24]
}
 800c754:	bf00      	nop
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	e000e100 	.word	0xe000e100
 800c764:	e000ed00 	.word	0xe000ed00

0800c768 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c768:	b580      	push	{r7, lr}
 800c76a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c76c:	2100      	movs	r1, #0
 800c76e:	f06f 0004 	mvn.w	r0, #4
 800c772:	f7ff ffcf 	bl	800c714 <__NVIC_SetPriority>
#endif
}
 800c776:	bf00      	nop
 800c778:	bd80      	pop	{r7, pc}
	...

0800c77c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c77c:	b480      	push	{r7}
 800c77e:	b083      	sub	sp, #12
 800c780:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c782:	f3ef 8305 	mrs	r3, IPSR
 800c786:	603b      	str	r3, [r7, #0]
  return(result);
 800c788:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d003      	beq.n	800c796 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c78e:	f06f 0305 	mvn.w	r3, #5
 800c792:	607b      	str	r3, [r7, #4]
 800c794:	e00c      	b.n	800c7b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c796:	4b0a      	ldr	r3, [pc, #40]	; (800c7c0 <osKernelInitialize+0x44>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d105      	bne.n	800c7aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c79e:	4b08      	ldr	r3, [pc, #32]	; (800c7c0 <osKernelInitialize+0x44>)
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	607b      	str	r3, [r7, #4]
 800c7a8:	e002      	b.n	800c7b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c7b0:	687b      	ldr	r3, [r7, #4]
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	370c      	adds	r7, #12
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr
 800c7be:	bf00      	nop
 800c7c0:	20000a04 	.word	0x20000a04

0800c7c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7ca:	f3ef 8305 	mrs	r3, IPSR
 800c7ce:	603b      	str	r3, [r7, #0]
  return(result);
 800c7d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d003      	beq.n	800c7de <osKernelStart+0x1a>
    stat = osErrorISR;
 800c7d6:	f06f 0305 	mvn.w	r3, #5
 800c7da:	607b      	str	r3, [r7, #4]
 800c7dc:	e010      	b.n	800c800 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c7de:	4b0b      	ldr	r3, [pc, #44]	; (800c80c <osKernelStart+0x48>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	d109      	bne.n	800c7fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c7e6:	f7ff ffbf 	bl	800c768 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c7ea:	4b08      	ldr	r3, [pc, #32]	; (800c80c <osKernelStart+0x48>)
 800c7ec:	2202      	movs	r2, #2
 800c7ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c7f0:	f001 f8dc 	bl	800d9ac <vTaskStartScheduler>
      stat = osOK;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	607b      	str	r3, [r7, #4]
 800c7f8:	e002      	b.n	800c800 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c7fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c800:	687b      	ldr	r3, [r7, #4]
}
 800c802:	4618      	mov	r0, r3
 800c804:	3708      	adds	r7, #8
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	20000a04 	.word	0x20000a04

0800c810 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c810:	b580      	push	{r7, lr}
 800c812:	b08e      	sub	sp, #56	; 0x38
 800c814:	af04      	add	r7, sp, #16
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c81c:	2300      	movs	r3, #0
 800c81e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c820:	f3ef 8305 	mrs	r3, IPSR
 800c824:	617b      	str	r3, [r7, #20]
  return(result);
 800c826:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d17e      	bne.n	800c92a <osThreadNew+0x11a>
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d07b      	beq.n	800c92a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c832:	2380      	movs	r3, #128	; 0x80
 800c834:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c836:	2318      	movs	r3, #24
 800c838:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c83a:	2300      	movs	r3, #0
 800c83c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c83e:	f04f 33ff 	mov.w	r3, #4294967295
 800c842:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d045      	beq.n	800c8d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d002      	beq.n	800c858 <osThreadNew+0x48>
        name = attr->name;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	699b      	ldr	r3, [r3, #24]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d002      	beq.n	800c866 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	699b      	ldr	r3, [r3, #24]
 800c864:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d008      	beq.n	800c87e <osThreadNew+0x6e>
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	2b38      	cmp	r3, #56	; 0x38
 800c870:	d805      	bhi.n	800c87e <osThreadNew+0x6e>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	f003 0301 	and.w	r3, r3, #1
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d001      	beq.n	800c882 <osThreadNew+0x72>
        return (NULL);
 800c87e:	2300      	movs	r3, #0
 800c880:	e054      	b.n	800c92c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	695b      	ldr	r3, [r3, #20]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d003      	beq.n	800c892 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	695b      	ldr	r3, [r3, #20]
 800c88e:	089b      	lsrs	r3, r3, #2
 800c890:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	689b      	ldr	r3, [r3, #8]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00e      	beq.n	800c8b8 <osThreadNew+0xa8>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	2b5b      	cmp	r3, #91	; 0x5b
 800c8a0:	d90a      	bls.n	800c8b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d006      	beq.n	800c8b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	695b      	ldr	r3, [r3, #20]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d002      	beq.n	800c8b8 <osThreadNew+0xa8>
        mem = 1;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	61bb      	str	r3, [r7, #24]
 800c8b6:	e010      	b.n	800c8da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d10c      	bne.n	800c8da <osThreadNew+0xca>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d108      	bne.n	800c8da <osThreadNew+0xca>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	691b      	ldr	r3, [r3, #16]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d104      	bne.n	800c8da <osThreadNew+0xca>
          mem = 0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	61bb      	str	r3, [r7, #24]
 800c8d4:	e001      	b.n	800c8da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d110      	bne.n	800c902 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c8e8:	9202      	str	r2, [sp, #8]
 800c8ea:	9301      	str	r3, [sp, #4]
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	9300      	str	r3, [sp, #0]
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	6a3a      	ldr	r2, [r7, #32]
 800c8f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c8f6:	68f8      	ldr	r0, [r7, #12]
 800c8f8:	f000 fe0c 	bl	800d514 <xTaskCreateStatic>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	613b      	str	r3, [r7, #16]
 800c900:	e013      	b.n	800c92a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c902:	69bb      	ldr	r3, [r7, #24]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d110      	bne.n	800c92a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c908:	6a3b      	ldr	r3, [r7, #32]
 800c90a:	b29a      	uxth	r2, r3
 800c90c:	f107 0310 	add.w	r3, r7, #16
 800c910:	9301      	str	r3, [sp, #4]
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	9300      	str	r3, [sp, #0]
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f000 fe57 	bl	800d5ce <xTaskCreate>
 800c920:	4603      	mov	r3, r0
 800c922:	2b01      	cmp	r3, #1
 800c924:	d001      	beq.n	800c92a <osThreadNew+0x11a>
            hTask = NULL;
 800c926:	2300      	movs	r3, #0
 800c928:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c92a:	693b      	ldr	r3, [r7, #16]
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3728      	adds	r7, #40	; 0x28
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c93c:	f3ef 8305 	mrs	r3, IPSR
 800c940:	60bb      	str	r3, [r7, #8]
  return(result);
 800c942:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c944:	2b00      	cmp	r3, #0
 800c946:	d003      	beq.n	800c950 <osDelay+0x1c>
    stat = osErrorISR;
 800c948:	f06f 0305 	mvn.w	r3, #5
 800c94c:	60fb      	str	r3, [r7, #12]
 800c94e:	e007      	b.n	800c960 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c950:	2300      	movs	r3, #0
 800c952:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d002      	beq.n	800c960 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 ff7c 	bl	800d858 <vTaskDelay>
    }
  }

  return (stat);
 800c960:	68fb      	ldr	r3, [r7, #12]
}
 800c962:	4618      	mov	r0, r3
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
	...

0800c96c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c96c:	b480      	push	{r7}
 800c96e:	b085      	sub	sp, #20
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	4a07      	ldr	r2, [pc, #28]	; (800c998 <vApplicationGetIdleTaskMemory+0x2c>)
 800c97c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	4a06      	ldr	r2, [pc, #24]	; (800c99c <vApplicationGetIdleTaskMemory+0x30>)
 800c982:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2280      	movs	r2, #128	; 0x80
 800c988:	601a      	str	r2, [r3, #0]
}
 800c98a:	bf00      	nop
 800c98c:	3714      	adds	r7, #20
 800c98e:	46bd      	mov	sp, r7
 800c990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c994:	4770      	bx	lr
 800c996:	bf00      	nop
 800c998:	20000a08 	.word	0x20000a08
 800c99c:	20000a64 	.word	0x20000a64

0800c9a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	4a07      	ldr	r2, [pc, #28]	; (800c9cc <vApplicationGetTimerTaskMemory+0x2c>)
 800c9b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	4a06      	ldr	r2, [pc, #24]	; (800c9d0 <vApplicationGetTimerTaskMemory+0x30>)
 800c9b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c9be:	601a      	str	r2, [r3, #0]
}
 800c9c0:	bf00      	nop
 800c9c2:	3714      	adds	r7, #20
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr
 800c9cc:	20000c64 	.word	0x20000c64
 800c9d0:	20000cc0 	.word	0x20000cc0

0800c9d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f103 0208 	add.w	r2, r3, #8
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f103 0208 	add.w	r2, r3, #8
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f103 0208 	add.w	r2, r3, #8
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2200      	movs	r2, #0
 800ca06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ca08:	bf00      	nop
 800ca0a:	370c      	adds	r7, #12
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ca22:	bf00      	nop
 800ca24:	370c      	adds	r7, #12
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr

0800ca2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca2e:	b480      	push	{r7}
 800ca30:	b085      	sub	sp, #20
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
 800ca36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	68fa      	ldr	r2, [r7, #12]
 800ca42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	689a      	ldr	r2, [r3, #8]
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	683a      	ldr	r2, [r7, #0]
 800ca52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	683a      	ldr	r2, [r7, #0]
 800ca58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	1c5a      	adds	r2, r3, #1
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	601a      	str	r2, [r3, #0]
}
 800ca6a:	bf00      	nop
 800ca6c:	3714      	adds	r7, #20
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr

0800ca76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca76:	b480      	push	{r7}
 800ca78:	b085      	sub	sp, #20
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
 800ca7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca8c:	d103      	bne.n	800ca96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	691b      	ldr	r3, [r3, #16]
 800ca92:	60fb      	str	r3, [r7, #12]
 800ca94:	e00c      	b.n	800cab0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	3308      	adds	r3, #8
 800ca9a:	60fb      	str	r3, [r7, #12]
 800ca9c:	e002      	b.n	800caa4 <vListInsert+0x2e>
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	60fb      	str	r3, [r7, #12]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	68ba      	ldr	r2, [r7, #8]
 800caac:	429a      	cmp	r2, r3
 800caae:	d2f6      	bcs.n	800ca9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	685a      	ldr	r2, [r3, #4]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	683a      	ldr	r2, [r7, #0]
 800cabe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	68fa      	ldr	r2, [r7, #12]
 800cac4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	683a      	ldr	r2, [r7, #0]
 800caca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	1c5a      	adds	r2, r3, #1
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	601a      	str	r2, [r3, #0]
}
 800cadc:	bf00      	nop
 800cade:	3714      	adds	r7, #20
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	691b      	ldr	r3, [r3, #16]
 800caf4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	6892      	ldr	r2, [r2, #8]
 800cafe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	689b      	ldr	r3, [r3, #8]
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	6852      	ldr	r2, [r2, #4]
 800cb08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d103      	bne.n	800cb1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	689a      	ldr	r2, [r3, #8]
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	1e5a      	subs	r2, r3, #1
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3714      	adds	r7, #20
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr

0800cb3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d10a      	bne.n	800cb66 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cb62:	bf00      	nop
 800cb64:	e7fe      	b.n	800cb64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cb66:	f002 f8c5 	bl	800ecf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb72:	68f9      	ldr	r1, [r7, #12]
 800cb74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb76:	fb01 f303 	mul.w	r3, r1, r3
 800cb7a:	441a      	add	r2, r3
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2200      	movs	r2, #0
 800cb84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb96:	3b01      	subs	r3, #1
 800cb98:	68f9      	ldr	r1, [r7, #12]
 800cb9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb9c:	fb01 f303 	mul.w	r3, r1, r3
 800cba0:	441a      	add	r2, r3
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	22ff      	movs	r2, #255	; 0xff
 800cbaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	22ff      	movs	r2, #255	; 0xff
 800cbb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d114      	bne.n	800cbe6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	691b      	ldr	r3, [r3, #16]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d01a      	beq.n	800cbfa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	3310      	adds	r3, #16
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f001 f979 	bl	800dec0 <xTaskRemoveFromEventList>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d012      	beq.n	800cbfa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cbd4:	4b0c      	ldr	r3, [pc, #48]	; (800cc08 <xQueueGenericReset+0xcc>)
 800cbd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbda:	601a      	str	r2, [r3, #0]
 800cbdc:	f3bf 8f4f 	dsb	sy
 800cbe0:	f3bf 8f6f 	isb	sy
 800cbe4:	e009      	b.n	800cbfa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	3310      	adds	r3, #16
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7ff fef2 	bl	800c9d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	3324      	adds	r3, #36	; 0x24
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7ff feed 	bl	800c9d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cbfa:	f002 f8ab 	bl	800ed54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cbfe:	2301      	movs	r3, #1
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3710      	adds	r7, #16
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	e000ed04 	.word	0xe000ed04

0800cc0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b08e      	sub	sp, #56	; 0x38
 800cc10:	af02      	add	r7, sp, #8
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
 800cc18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d10a      	bne.n	800cc36 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc24:	f383 8811 	msr	BASEPRI, r3
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc32:	bf00      	nop
 800cc34:	e7fe      	b.n	800cc34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d10a      	bne.n	800cc52 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc40:	f383 8811 	msr	BASEPRI, r3
 800cc44:	f3bf 8f6f 	isb	sy
 800cc48:	f3bf 8f4f 	dsb	sy
 800cc4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc4e:	bf00      	nop
 800cc50:	e7fe      	b.n	800cc50 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d002      	beq.n	800cc5e <xQueueGenericCreateStatic+0x52>
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d001      	beq.n	800cc62 <xQueueGenericCreateStatic+0x56>
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e000      	b.n	800cc64 <xQueueGenericCreateStatic+0x58>
 800cc62:	2300      	movs	r3, #0
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d10a      	bne.n	800cc7e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6c:	f383 8811 	msr	BASEPRI, r3
 800cc70:	f3bf 8f6f 	isb	sy
 800cc74:	f3bf 8f4f 	dsb	sy
 800cc78:	623b      	str	r3, [r7, #32]
}
 800cc7a:	bf00      	nop
 800cc7c:	e7fe      	b.n	800cc7c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d102      	bne.n	800cc8a <xQueueGenericCreateStatic+0x7e>
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d101      	bne.n	800cc8e <xQueueGenericCreateStatic+0x82>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e000      	b.n	800cc90 <xQueueGenericCreateStatic+0x84>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10a      	bne.n	800ccaa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc98:	f383 8811 	msr	BASEPRI, r3
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	61fb      	str	r3, [r7, #28]
}
 800cca6:	bf00      	nop
 800cca8:	e7fe      	b.n	800cca8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ccaa:	2350      	movs	r3, #80	; 0x50
 800ccac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	2b50      	cmp	r3, #80	; 0x50
 800ccb2:	d00a      	beq.n	800ccca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ccb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb8:	f383 8811 	msr	BASEPRI, r3
 800ccbc:	f3bf 8f6f 	isb	sy
 800ccc0:	f3bf 8f4f 	dsb	sy
 800ccc4:	61bb      	str	r3, [r7, #24]
}
 800ccc6:	bf00      	nop
 800ccc8:	e7fe      	b.n	800ccc8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ccca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ccd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00d      	beq.n	800ccf2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ccd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd8:	2201      	movs	r2, #1
 800ccda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ccde:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce4:	9300      	str	r3, [sp, #0]
 800cce6:	4613      	mov	r3, r2
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	68b9      	ldr	r1, [r7, #8]
 800ccec:	68f8      	ldr	r0, [r7, #12]
 800ccee:	f000 f805 	bl	800ccfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ccf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3730      	adds	r7, #48	; 0x30
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
 800cd08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d103      	bne.n	800cd18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	69ba      	ldr	r2, [r7, #24]
 800cd14:	601a      	str	r2, [r3, #0]
 800cd16:	e002      	b.n	800cd1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cd18:	69bb      	ldr	r3, [r7, #24]
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	68fa      	ldr	r2, [r7, #12]
 800cd22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cd24:	69bb      	ldr	r3, [r7, #24]
 800cd26:	68ba      	ldr	r2, [r7, #8]
 800cd28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cd2a:	2101      	movs	r1, #1
 800cd2c:	69b8      	ldr	r0, [r7, #24]
 800cd2e:	f7ff ff05 	bl	800cb3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	78fa      	ldrb	r2, [r7, #3]
 800cd36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cd3a:	bf00      	nop
 800cd3c:	3710      	adds	r7, #16
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
	...

0800cd44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b08e      	sub	sp, #56	; 0x38
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	607a      	str	r2, [r7, #4]
 800cd50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd52:	2300      	movs	r3, #0
 800cd54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d10a      	bne.n	800cd76 <xQueueGenericSend+0x32>
	__asm volatile
 800cd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd72:	bf00      	nop
 800cd74:	e7fe      	b.n	800cd74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d103      	bne.n	800cd84 <xQueueGenericSend+0x40>
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d101      	bne.n	800cd88 <xQueueGenericSend+0x44>
 800cd84:	2301      	movs	r3, #1
 800cd86:	e000      	b.n	800cd8a <xQueueGenericSend+0x46>
 800cd88:	2300      	movs	r3, #0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d10a      	bne.n	800cda4 <xQueueGenericSend+0x60>
	__asm volatile
 800cd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd92:	f383 8811 	msr	BASEPRI, r3
 800cd96:	f3bf 8f6f 	isb	sy
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cda0:	bf00      	nop
 800cda2:	e7fe      	b.n	800cda2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	2b02      	cmp	r3, #2
 800cda8:	d103      	bne.n	800cdb2 <xQueueGenericSend+0x6e>
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d101      	bne.n	800cdb6 <xQueueGenericSend+0x72>
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e000      	b.n	800cdb8 <xQueueGenericSend+0x74>
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d10a      	bne.n	800cdd2 <xQueueGenericSend+0x8e>
	__asm volatile
 800cdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc0:	f383 8811 	msr	BASEPRI, r3
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	623b      	str	r3, [r7, #32]
}
 800cdce:	bf00      	nop
 800cdd0:	e7fe      	b.n	800cdd0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cdd2:	f001 fa33 	bl	800e23c <xTaskGetSchedulerState>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d102      	bne.n	800cde2 <xQueueGenericSend+0x9e>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d101      	bne.n	800cde6 <xQueueGenericSend+0xa2>
 800cde2:	2301      	movs	r3, #1
 800cde4:	e000      	b.n	800cde8 <xQueueGenericSend+0xa4>
 800cde6:	2300      	movs	r3, #0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10a      	bne.n	800ce02 <xQueueGenericSend+0xbe>
	__asm volatile
 800cdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf0:	f383 8811 	msr	BASEPRI, r3
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	61fb      	str	r3, [r7, #28]
}
 800cdfe:	bf00      	nop
 800ce00:	e7fe      	b.n	800ce00 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce02:	f001 ff77 	bl	800ecf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d302      	bcc.n	800ce18 <xQueueGenericSend+0xd4>
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d129      	bne.n	800ce6c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce18:	683a      	ldr	r2, [r7, #0]
 800ce1a:	68b9      	ldr	r1, [r7, #8]
 800ce1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce1e:	f000 fa0b 	bl	800d238 <prvCopyDataToQueue>
 800ce22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d010      	beq.n	800ce4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2e:	3324      	adds	r3, #36	; 0x24
 800ce30:	4618      	mov	r0, r3
 800ce32:	f001 f845 	bl	800dec0 <xTaskRemoveFromEventList>
 800ce36:	4603      	mov	r3, r0
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d013      	beq.n	800ce64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce3c:	4b3f      	ldr	r3, [pc, #252]	; (800cf3c <xQueueGenericSend+0x1f8>)
 800ce3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce42:	601a      	str	r2, [r3, #0]
 800ce44:	f3bf 8f4f 	dsb	sy
 800ce48:	f3bf 8f6f 	isb	sy
 800ce4c:	e00a      	b.n	800ce64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d007      	beq.n	800ce64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ce54:	4b39      	ldr	r3, [pc, #228]	; (800cf3c <xQueueGenericSend+0x1f8>)
 800ce56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce5a:	601a      	str	r2, [r3, #0]
 800ce5c:	f3bf 8f4f 	dsb	sy
 800ce60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ce64:	f001 ff76 	bl	800ed54 <vPortExitCritical>
				return pdPASS;
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e063      	b.n	800cf34 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d103      	bne.n	800ce7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce72:	f001 ff6f 	bl	800ed54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ce76:	2300      	movs	r3, #0
 800ce78:	e05c      	b.n	800cf34 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d106      	bne.n	800ce8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce80:	f107 0314 	add.w	r3, r7, #20
 800ce84:	4618      	mov	r0, r3
 800ce86:	f001 f87f 	bl	800df88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce8e:	f001 ff61 	bl	800ed54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce92:	f000 fdf1 	bl	800da78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce96:	f001 ff2d 	bl	800ecf4 <vPortEnterCritical>
 800ce9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cea0:	b25b      	sxtb	r3, r3
 800cea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cea6:	d103      	bne.n	800ceb0 <xQueueGenericSend+0x16c>
 800cea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceaa:	2200      	movs	r2, #0
 800ceac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ceb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ceb6:	b25b      	sxtb	r3, r3
 800ceb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cebc:	d103      	bne.n	800cec6 <xQueueGenericSend+0x182>
 800cebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec0:	2200      	movs	r2, #0
 800cec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cec6:	f001 ff45 	bl	800ed54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ceca:	1d3a      	adds	r2, r7, #4
 800cecc:	f107 0314 	add.w	r3, r7, #20
 800ced0:	4611      	mov	r1, r2
 800ced2:	4618      	mov	r0, r3
 800ced4:	f001 f86e 	bl	800dfb4 <xTaskCheckForTimeOut>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d124      	bne.n	800cf28 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cede:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cee0:	f000 faa2 	bl	800d428 <prvIsQueueFull>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d018      	beq.n	800cf1c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ceea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceec:	3310      	adds	r3, #16
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	4611      	mov	r1, r2
 800cef2:	4618      	mov	r0, r3
 800cef4:	f000 ff94 	bl	800de20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cefa:	f000 fa2d 	bl	800d358 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cefe:	f000 fdc9 	bl	800da94 <xTaskResumeAll>
 800cf02:	4603      	mov	r3, r0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f47f af7c 	bne.w	800ce02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cf0a:	4b0c      	ldr	r3, [pc, #48]	; (800cf3c <xQueueGenericSend+0x1f8>)
 800cf0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf10:	601a      	str	r2, [r3, #0]
 800cf12:	f3bf 8f4f 	dsb	sy
 800cf16:	f3bf 8f6f 	isb	sy
 800cf1a:	e772      	b.n	800ce02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf1e:	f000 fa1b 	bl	800d358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf22:	f000 fdb7 	bl	800da94 <xTaskResumeAll>
 800cf26:	e76c      	b.n	800ce02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf2a:	f000 fa15 	bl	800d358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf2e:	f000 fdb1 	bl	800da94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cf32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3738      	adds	r7, #56	; 0x38
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	e000ed04 	.word	0xe000ed04

0800cf40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b090      	sub	sp, #64	; 0x40
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	607a      	str	r2, [r7, #4]
 800cf4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cf52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d10a      	bne.n	800cf6e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5c:	f383 8811 	msr	BASEPRI, r3
 800cf60:	f3bf 8f6f 	isb	sy
 800cf64:	f3bf 8f4f 	dsb	sy
 800cf68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf6a:	bf00      	nop
 800cf6c:	e7fe      	b.n	800cf6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d103      	bne.n	800cf7c <xQueueGenericSendFromISR+0x3c>
 800cf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d101      	bne.n	800cf80 <xQueueGenericSendFromISR+0x40>
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	e000      	b.n	800cf82 <xQueueGenericSendFromISR+0x42>
 800cf80:	2300      	movs	r3, #0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d10a      	bne.n	800cf9c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cf86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8a:	f383 8811 	msr	BASEPRI, r3
 800cf8e:	f3bf 8f6f 	isb	sy
 800cf92:	f3bf 8f4f 	dsb	sy
 800cf96:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf98:	bf00      	nop
 800cf9a:	e7fe      	b.n	800cf9a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	2b02      	cmp	r3, #2
 800cfa0:	d103      	bne.n	800cfaa <xQueueGenericSendFromISR+0x6a>
 800cfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	d101      	bne.n	800cfae <xQueueGenericSendFromISR+0x6e>
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e000      	b.n	800cfb0 <xQueueGenericSendFromISR+0x70>
 800cfae:	2300      	movs	r3, #0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d10a      	bne.n	800cfca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb8:	f383 8811 	msr	BASEPRI, r3
 800cfbc:	f3bf 8f6f 	isb	sy
 800cfc0:	f3bf 8f4f 	dsb	sy
 800cfc4:	623b      	str	r3, [r7, #32]
}
 800cfc6:	bf00      	nop
 800cfc8:	e7fe      	b.n	800cfc8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cfca:	f001 ff75 	bl	800eeb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cfce:	f3ef 8211 	mrs	r2, BASEPRI
 800cfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd6:	f383 8811 	msr	BASEPRI, r3
 800cfda:	f3bf 8f6f 	isb	sy
 800cfde:	f3bf 8f4f 	dsb	sy
 800cfe2:	61fa      	str	r2, [r7, #28]
 800cfe4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cfe6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cfe8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d302      	bcc.n	800cffc <xQueueGenericSendFromISR+0xbc>
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	2b02      	cmp	r3, #2
 800cffa:	d12f      	bne.n	800d05c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d00a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d00c:	683a      	ldr	r2, [r7, #0]
 800d00e:	68b9      	ldr	r1, [r7, #8]
 800d010:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d012:	f000 f911 	bl	800d238 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d016:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d01e:	d112      	bne.n	800d046 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d024:	2b00      	cmp	r3, #0
 800d026:	d016      	beq.n	800d056 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02a:	3324      	adds	r3, #36	; 0x24
 800d02c:	4618      	mov	r0, r3
 800d02e:	f000 ff47 	bl	800dec0 <xTaskRemoveFromEventList>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	d00e      	beq.n	800d056 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00b      	beq.n	800d056 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2201      	movs	r2, #1
 800d042:	601a      	str	r2, [r3, #0]
 800d044:	e007      	b.n	800d056 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d046:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d04a:	3301      	adds	r3, #1
 800d04c:	b2db      	uxtb	r3, r3
 800d04e:	b25a      	sxtb	r2, r3
 800d050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d056:	2301      	movs	r3, #1
 800d058:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d05a:	e001      	b.n	800d060 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d05c:	2300      	movs	r3, #0
 800d05e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d062:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d06a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3740      	adds	r7, #64	; 0x40
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
	...

0800d078 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b08c      	sub	sp, #48	; 0x30
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d084:	2300      	movs	r3, #0
 800d086:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d10a      	bne.n	800d0a8 <xQueueReceive+0x30>
	__asm volatile
 800d092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d096:	f383 8811 	msr	BASEPRI, r3
 800d09a:	f3bf 8f6f 	isb	sy
 800d09e:	f3bf 8f4f 	dsb	sy
 800d0a2:	623b      	str	r3, [r7, #32]
}
 800d0a4:	bf00      	nop
 800d0a6:	e7fe      	b.n	800d0a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d103      	bne.n	800d0b6 <xQueueReceive+0x3e>
 800d0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d101      	bne.n	800d0ba <xQueueReceive+0x42>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e000      	b.n	800d0bc <xQueueReceive+0x44>
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d10a      	bne.n	800d0d6 <xQueueReceive+0x5e>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	61fb      	str	r3, [r7, #28]
}
 800d0d2:	bf00      	nop
 800d0d4:	e7fe      	b.n	800d0d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0d6:	f001 f8b1 	bl	800e23c <xTaskGetSchedulerState>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d102      	bne.n	800d0e6 <xQueueReceive+0x6e>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d101      	bne.n	800d0ea <xQueueReceive+0x72>
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	e000      	b.n	800d0ec <xQueueReceive+0x74>
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10a      	bne.n	800d106 <xQueueReceive+0x8e>
	__asm volatile
 800d0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f4:	f383 8811 	msr	BASEPRI, r3
 800d0f8:	f3bf 8f6f 	isb	sy
 800d0fc:	f3bf 8f4f 	dsb	sy
 800d100:	61bb      	str	r3, [r7, #24]
}
 800d102:	bf00      	nop
 800d104:	e7fe      	b.n	800d104 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d106:	f001 fdf5 	bl	800ecf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d10e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d112:	2b00      	cmp	r3, #0
 800d114:	d01f      	beq.n	800d156 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d116:	68b9      	ldr	r1, [r7, #8]
 800d118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d11a:	f000 f8f7 	bl	800d30c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d120:	1e5a      	subs	r2, r3, #1
 800d122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d124:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d128:	691b      	ldr	r3, [r3, #16]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00f      	beq.n	800d14e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d130:	3310      	adds	r3, #16
 800d132:	4618      	mov	r0, r3
 800d134:	f000 fec4 	bl	800dec0 <xTaskRemoveFromEventList>
 800d138:	4603      	mov	r3, r0
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d007      	beq.n	800d14e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d13e:	4b3d      	ldr	r3, [pc, #244]	; (800d234 <xQueueReceive+0x1bc>)
 800d140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d144:	601a      	str	r2, [r3, #0]
 800d146:	f3bf 8f4f 	dsb	sy
 800d14a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d14e:	f001 fe01 	bl	800ed54 <vPortExitCritical>
				return pdPASS;
 800d152:	2301      	movs	r3, #1
 800d154:	e069      	b.n	800d22a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d103      	bne.n	800d164 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d15c:	f001 fdfa 	bl	800ed54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d160:	2300      	movs	r3, #0
 800d162:	e062      	b.n	800d22a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d166:	2b00      	cmp	r3, #0
 800d168:	d106      	bne.n	800d178 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d16a:	f107 0310 	add.w	r3, r7, #16
 800d16e:	4618      	mov	r0, r3
 800d170:	f000 ff0a 	bl	800df88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d174:	2301      	movs	r3, #1
 800d176:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d178:	f001 fdec 	bl	800ed54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d17c:	f000 fc7c 	bl	800da78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d180:	f001 fdb8 	bl	800ecf4 <vPortEnterCritical>
 800d184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d18a:	b25b      	sxtb	r3, r3
 800d18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d190:	d103      	bne.n	800d19a <xQueueReceive+0x122>
 800d192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d194:	2200      	movs	r2, #0
 800d196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1a0:	b25b      	sxtb	r3, r3
 800d1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a6:	d103      	bne.n	800d1b0 <xQueueReceive+0x138>
 800d1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1b0:	f001 fdd0 	bl	800ed54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1b4:	1d3a      	adds	r2, r7, #4
 800d1b6:	f107 0310 	add.w	r3, r7, #16
 800d1ba:	4611      	mov	r1, r2
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f000 fef9 	bl	800dfb4 <xTaskCheckForTimeOut>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d123      	bne.n	800d210 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1ca:	f000 f917 	bl	800d3fc <prvIsQueueEmpty>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d017      	beq.n	800d204 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d6:	3324      	adds	r3, #36	; 0x24
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	4611      	mov	r1, r2
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f000 fe1f 	bl	800de20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1e4:	f000 f8b8 	bl	800d358 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1e8:	f000 fc54 	bl	800da94 <xTaskResumeAll>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d189      	bne.n	800d106 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d1f2:	4b10      	ldr	r3, [pc, #64]	; (800d234 <xQueueReceive+0x1bc>)
 800d1f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1f8:	601a      	str	r2, [r3, #0]
 800d1fa:	f3bf 8f4f 	dsb	sy
 800d1fe:	f3bf 8f6f 	isb	sy
 800d202:	e780      	b.n	800d106 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d206:	f000 f8a7 	bl	800d358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d20a:	f000 fc43 	bl	800da94 <xTaskResumeAll>
 800d20e:	e77a      	b.n	800d106 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d212:	f000 f8a1 	bl	800d358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d216:	f000 fc3d 	bl	800da94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d21a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d21c:	f000 f8ee 	bl	800d3fc <prvIsQueueEmpty>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	f43f af6f 	beq.w	800d106 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d228:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3730      	adds	r7, #48	; 0x30
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	e000ed04 	.word	0xe000ed04

0800d238 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b086      	sub	sp, #24
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d244:	2300      	movs	r3, #0
 800d246:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d24c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d252:	2b00      	cmp	r3, #0
 800d254:	d10d      	bne.n	800d272 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d14d      	bne.n	800d2fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	689b      	ldr	r3, [r3, #8]
 800d262:	4618      	mov	r0, r3
 800d264:	f001 f808 	bl	800e278 <xTaskPriorityDisinherit>
 800d268:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2200      	movs	r2, #0
 800d26e:	609a      	str	r2, [r3, #8]
 800d270:	e043      	b.n	800d2fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d119      	bne.n	800d2ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6858      	ldr	r0, [r3, #4]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d280:	461a      	mov	r2, r3
 800d282:	68b9      	ldr	r1, [r7, #8]
 800d284:	f002 f95a 	bl	800f53c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	685a      	ldr	r2, [r3, #4]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d290:	441a      	add	r2, r3
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	685a      	ldr	r2, [r3, #4]
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d32b      	bcc.n	800d2fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	605a      	str	r2, [r3, #4]
 800d2aa:	e026      	b.n	800d2fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	68d8      	ldr	r0, [r3, #12]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	68b9      	ldr	r1, [r7, #8]
 800d2b8:	f002 f940 	bl	800f53c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	68da      	ldr	r2, [r3, #12]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c4:	425b      	negs	r3, r3
 800d2c6:	441a      	add	r2, r3
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	68da      	ldr	r2, [r3, #12]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d207      	bcs.n	800d2e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	689a      	ldr	r2, [r3, #8]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e0:	425b      	negs	r3, r3
 800d2e2:	441a      	add	r2, r3
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2b02      	cmp	r3, #2
 800d2ec:	d105      	bne.n	800d2fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d002      	beq.n	800d2fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	3b01      	subs	r3, #1
 800d2f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	1c5a      	adds	r2, r3, #1
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d302:	697b      	ldr	r3, [r7, #20]
}
 800d304:	4618      	mov	r0, r3
 800d306:	3718      	adds	r7, #24
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d018      	beq.n	800d350 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	68da      	ldr	r2, [r3, #12]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d326:	441a      	add	r2, r3
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	68da      	ldr	r2, [r3, #12]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	429a      	cmp	r2, r3
 800d336:	d303      	bcc.n	800d340 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	68d9      	ldr	r1, [r3, #12]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d348:	461a      	mov	r2, r3
 800d34a:	6838      	ldr	r0, [r7, #0]
 800d34c:	f002 f8f6 	bl	800f53c <memcpy>
	}
}
 800d350:	bf00      	nop
 800d352:	3708      	adds	r7, #8
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d360:	f001 fcc8 	bl	800ecf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d36a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d36c:	e011      	b.n	800d392 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d372:	2b00      	cmp	r3, #0
 800d374:	d012      	beq.n	800d39c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	3324      	adds	r3, #36	; 0x24
 800d37a:	4618      	mov	r0, r3
 800d37c:	f000 fda0 	bl	800dec0 <xTaskRemoveFromEventList>
 800d380:	4603      	mov	r3, r0
 800d382:	2b00      	cmp	r3, #0
 800d384:	d001      	beq.n	800d38a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d386:	f000 fe77 	bl	800e078 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d38a:	7bfb      	ldrb	r3, [r7, #15]
 800d38c:	3b01      	subs	r3, #1
 800d38e:	b2db      	uxtb	r3, r3
 800d390:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d396:	2b00      	cmp	r3, #0
 800d398:	dce9      	bgt.n	800d36e <prvUnlockQueue+0x16>
 800d39a:	e000      	b.n	800d39e <prvUnlockQueue+0x46>
					break;
 800d39c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	22ff      	movs	r2, #255	; 0xff
 800d3a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d3a6:	f001 fcd5 	bl	800ed54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d3aa:	f001 fca3 	bl	800ecf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3b6:	e011      	b.n	800d3dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	691b      	ldr	r3, [r3, #16]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d012      	beq.n	800d3e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	3310      	adds	r3, #16
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f000 fd7b 	bl	800dec0 <xTaskRemoveFromEventList>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d001      	beq.n	800d3d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d3d0:	f000 fe52 	bl	800e078 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d3d4:	7bbb      	ldrb	r3, [r7, #14]
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	dce9      	bgt.n	800d3b8 <prvUnlockQueue+0x60>
 800d3e4:	e000      	b.n	800d3e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d3e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	22ff      	movs	r2, #255	; 0xff
 800d3ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d3f0:	f001 fcb0 	bl	800ed54 <vPortExitCritical>
}
 800d3f4:	bf00      	nop
 800d3f6:	3710      	adds	r7, #16
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d404:	f001 fc76 	bl	800ecf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d102      	bne.n	800d416 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d410:	2301      	movs	r3, #1
 800d412:	60fb      	str	r3, [r7, #12]
 800d414:	e001      	b.n	800d41a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d416:	2300      	movs	r3, #0
 800d418:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d41a:	f001 fc9b 	bl	800ed54 <vPortExitCritical>

	return xReturn;
 800d41e:	68fb      	ldr	r3, [r7, #12]
}
 800d420:	4618      	mov	r0, r3
 800d422:	3710      	adds	r7, #16
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d430:	f001 fc60 	bl	800ecf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d102      	bne.n	800d446 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d440:	2301      	movs	r3, #1
 800d442:	60fb      	str	r3, [r7, #12]
 800d444:	e001      	b.n	800d44a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d446:	2300      	movs	r3, #0
 800d448:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d44a:	f001 fc83 	bl	800ed54 <vPortExitCritical>

	return xReturn;
 800d44e:	68fb      	ldr	r3, [r7, #12]
}
 800d450:	4618      	mov	r0, r3
 800d452:	3710      	adds	r7, #16
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d458:	b480      	push	{r7}
 800d45a:	b085      	sub	sp, #20
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d462:	2300      	movs	r3, #0
 800d464:	60fb      	str	r3, [r7, #12]
 800d466:	e014      	b.n	800d492 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d468:	4a0f      	ldr	r2, [pc, #60]	; (800d4a8 <vQueueAddToRegistry+0x50>)
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d10b      	bne.n	800d48c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d474:	490c      	ldr	r1, [pc, #48]	; (800d4a8 <vQueueAddToRegistry+0x50>)
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	683a      	ldr	r2, [r7, #0]
 800d47a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d47e:	4a0a      	ldr	r2, [pc, #40]	; (800d4a8 <vQueueAddToRegistry+0x50>)
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	00db      	lsls	r3, r3, #3
 800d484:	4413      	add	r3, r2
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d48a:	e006      	b.n	800d49a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	3301      	adds	r3, #1
 800d490:	60fb      	str	r3, [r7, #12]
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2b07      	cmp	r3, #7
 800d496:	d9e7      	bls.n	800d468 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d498:	bf00      	nop
 800d49a:	bf00      	nop
 800d49c:	3714      	adds	r7, #20
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	200010c0 	.word	0x200010c0

0800d4ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d4bc:	f001 fc1a 	bl	800ecf4 <vPortEnterCritical>
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4c6:	b25b      	sxtb	r3, r3
 800d4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4cc:	d103      	bne.n	800d4d6 <vQueueWaitForMessageRestricted+0x2a>
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4dc:	b25b      	sxtb	r3, r3
 800d4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e2:	d103      	bne.n	800d4ec <vQueueWaitForMessageRestricted+0x40>
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4ec:	f001 fc32 	bl	800ed54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d106      	bne.n	800d506 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	3324      	adds	r3, #36	; 0x24
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	68b9      	ldr	r1, [r7, #8]
 800d500:	4618      	mov	r0, r3
 800d502:	f000 fcb1 	bl	800de68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d506:	6978      	ldr	r0, [r7, #20]
 800d508:	f7ff ff26 	bl	800d358 <prvUnlockQueue>
	}
 800d50c:	bf00      	nop
 800d50e:	3718      	adds	r7, #24
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d514:	b580      	push	{r7, lr}
 800d516:	b08e      	sub	sp, #56	; 0x38
 800d518:	af04      	add	r7, sp, #16
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	607a      	str	r2, [r7, #4]
 800d520:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d524:	2b00      	cmp	r3, #0
 800d526:	d10a      	bne.n	800d53e <xTaskCreateStatic+0x2a>
	__asm volatile
 800d528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52c:	f383 8811 	msr	BASEPRI, r3
 800d530:	f3bf 8f6f 	isb	sy
 800d534:	f3bf 8f4f 	dsb	sy
 800d538:	623b      	str	r3, [r7, #32]
}
 800d53a:	bf00      	nop
 800d53c:	e7fe      	b.n	800d53c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d540:	2b00      	cmp	r3, #0
 800d542:	d10a      	bne.n	800d55a <xTaskCreateStatic+0x46>
	__asm volatile
 800d544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d548:	f383 8811 	msr	BASEPRI, r3
 800d54c:	f3bf 8f6f 	isb	sy
 800d550:	f3bf 8f4f 	dsb	sy
 800d554:	61fb      	str	r3, [r7, #28]
}
 800d556:	bf00      	nop
 800d558:	e7fe      	b.n	800d558 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d55a:	235c      	movs	r3, #92	; 0x5c
 800d55c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	2b5c      	cmp	r3, #92	; 0x5c
 800d562:	d00a      	beq.n	800d57a <xTaskCreateStatic+0x66>
	__asm volatile
 800d564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d568:	f383 8811 	msr	BASEPRI, r3
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	f3bf 8f4f 	dsb	sy
 800d574:	61bb      	str	r3, [r7, #24]
}
 800d576:	bf00      	nop
 800d578:	e7fe      	b.n	800d578 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d57a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d01e      	beq.n	800d5c0 <xTaskCreateStatic+0xac>
 800d582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d584:	2b00      	cmp	r3, #0
 800d586:	d01b      	beq.n	800d5c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d590:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d594:	2202      	movs	r2, #2
 800d596:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d59a:	2300      	movs	r3, #0
 800d59c:	9303      	str	r3, [sp, #12]
 800d59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a0:	9302      	str	r3, [sp, #8]
 800d5a2:	f107 0314 	add.w	r3, r7, #20
 800d5a6:	9301      	str	r3, [sp, #4]
 800d5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5aa:	9300      	str	r3, [sp, #0]
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	68b9      	ldr	r1, [r7, #8]
 800d5b2:	68f8      	ldr	r0, [r7, #12]
 800d5b4:	f000 f850 	bl	800d658 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d5b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5ba:	f000 f8dd 	bl	800d778 <prvAddNewTaskToReadyList>
 800d5be:	e001      	b.n	800d5c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d5c4:	697b      	ldr	r3, [r7, #20]
	}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3728      	adds	r7, #40	; 0x28
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	b08c      	sub	sp, #48	; 0x30
 800d5d2:	af04      	add	r7, sp, #16
 800d5d4:	60f8      	str	r0, [r7, #12]
 800d5d6:	60b9      	str	r1, [r7, #8]
 800d5d8:	603b      	str	r3, [r7, #0]
 800d5da:	4613      	mov	r3, r2
 800d5dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d5de:	88fb      	ldrh	r3, [r7, #6]
 800d5e0:	009b      	lsls	r3, r3, #2
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f001 fca8 	bl	800ef38 <pvPortMalloc>
 800d5e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d00e      	beq.n	800d60e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d5f0:	205c      	movs	r0, #92	; 0x5c
 800d5f2:	f001 fca1 	bl	800ef38 <pvPortMalloc>
 800d5f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d003      	beq.n	800d606 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	697a      	ldr	r2, [r7, #20]
 800d602:	631a      	str	r2, [r3, #48]	; 0x30
 800d604:	e005      	b.n	800d612 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d606:	6978      	ldr	r0, [r7, #20]
 800d608:	f001 fd62 	bl	800f0d0 <vPortFree>
 800d60c:	e001      	b.n	800d612 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d60e:	2300      	movs	r3, #0
 800d610:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d017      	beq.n	800d648 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d618:	69fb      	ldr	r3, [r7, #28]
 800d61a:	2200      	movs	r2, #0
 800d61c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d620:	88fa      	ldrh	r2, [r7, #6]
 800d622:	2300      	movs	r3, #0
 800d624:	9303      	str	r3, [sp, #12]
 800d626:	69fb      	ldr	r3, [r7, #28]
 800d628:	9302      	str	r3, [sp, #8]
 800d62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62c:	9301      	str	r3, [sp, #4]
 800d62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d630:	9300      	str	r3, [sp, #0]
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	68b9      	ldr	r1, [r7, #8]
 800d636:	68f8      	ldr	r0, [r7, #12]
 800d638:	f000 f80e 	bl	800d658 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d63c:	69f8      	ldr	r0, [r7, #28]
 800d63e:	f000 f89b 	bl	800d778 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d642:	2301      	movs	r3, #1
 800d644:	61bb      	str	r3, [r7, #24]
 800d646:	e002      	b.n	800d64e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d648:	f04f 33ff 	mov.w	r3, #4294967295
 800d64c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d64e:	69bb      	ldr	r3, [r7, #24]
	}
 800d650:	4618      	mov	r0, r3
 800d652:	3720      	adds	r7, #32
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b088      	sub	sp, #32
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	607a      	str	r2, [r7, #4]
 800d664:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d668:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	009b      	lsls	r3, r3, #2
 800d66e:	461a      	mov	r2, r3
 800d670:	21a5      	movs	r1, #165	; 0xa5
 800d672:	f001 ff2f 	bl	800f4d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d680:	3b01      	subs	r3, #1
 800d682:	009b      	lsls	r3, r3, #2
 800d684:	4413      	add	r3, r2
 800d686:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d688:	69bb      	ldr	r3, [r7, #24]
 800d68a:	f023 0307 	bic.w	r3, r3, #7
 800d68e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d690:	69bb      	ldr	r3, [r7, #24]
 800d692:	f003 0307 	and.w	r3, r3, #7
 800d696:	2b00      	cmp	r3, #0
 800d698:	d00a      	beq.n	800d6b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d69e:	f383 8811 	msr	BASEPRI, r3
 800d6a2:	f3bf 8f6f 	isb	sy
 800d6a6:	f3bf 8f4f 	dsb	sy
 800d6aa:	617b      	str	r3, [r7, #20]
}
 800d6ac:	bf00      	nop
 800d6ae:	e7fe      	b.n	800d6ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d01f      	beq.n	800d6f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	61fb      	str	r3, [r7, #28]
 800d6ba:	e012      	b.n	800d6e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d6bc:	68ba      	ldr	r2, [r7, #8]
 800d6be:	69fb      	ldr	r3, [r7, #28]
 800d6c0:	4413      	add	r3, r2
 800d6c2:	7819      	ldrb	r1, [r3, #0]
 800d6c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	3334      	adds	r3, #52	; 0x34
 800d6cc:	460a      	mov	r2, r1
 800d6ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d6d0:	68ba      	ldr	r2, [r7, #8]
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d006      	beq.n	800d6ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	61fb      	str	r3, [r7, #28]
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	2b0f      	cmp	r3, #15
 800d6e6:	d9e9      	bls.n	800d6bc <prvInitialiseNewTask+0x64>
 800d6e8:	e000      	b.n	800d6ec <prvInitialiseNewTask+0x94>
			{
				break;
 800d6ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d6f4:	e003      	b.n	800d6fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d700:	2b37      	cmp	r3, #55	; 0x37
 800d702:	d901      	bls.n	800d708 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d704:	2337      	movs	r3, #55	; 0x37
 800d706:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d70c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d712:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d716:	2200      	movs	r2, #0
 800d718:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71c:	3304      	adds	r3, #4
 800d71e:	4618      	mov	r0, r3
 800d720:	f7ff f978 	bl	800ca14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d726:	3318      	adds	r3, #24
 800d728:	4618      	mov	r0, r3
 800d72a:	f7ff f973 	bl	800ca14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d732:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d736:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d742:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d746:	2200      	movs	r2, #0
 800d748:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74c:	2200      	movs	r2, #0
 800d74e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d752:	683a      	ldr	r2, [r7, #0]
 800d754:	68f9      	ldr	r1, [r7, #12]
 800d756:	69b8      	ldr	r0, [r7, #24]
 800d758:	f001 f99e 	bl	800ea98 <pxPortInitialiseStack>
 800d75c:	4602      	mov	r2, r0
 800d75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d760:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d764:	2b00      	cmp	r3, #0
 800d766:	d002      	beq.n	800d76e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d76c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d76e:	bf00      	nop
 800d770:	3720      	adds	r7, #32
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
	...

0800d778 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d780:	f001 fab8 	bl	800ecf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d784:	4b2d      	ldr	r3, [pc, #180]	; (800d83c <prvAddNewTaskToReadyList+0xc4>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	3301      	adds	r3, #1
 800d78a:	4a2c      	ldr	r2, [pc, #176]	; (800d83c <prvAddNewTaskToReadyList+0xc4>)
 800d78c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d78e:	4b2c      	ldr	r3, [pc, #176]	; (800d840 <prvAddNewTaskToReadyList+0xc8>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d109      	bne.n	800d7aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d796:	4a2a      	ldr	r2, [pc, #168]	; (800d840 <prvAddNewTaskToReadyList+0xc8>)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d79c:	4b27      	ldr	r3, [pc, #156]	; (800d83c <prvAddNewTaskToReadyList+0xc4>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	d110      	bne.n	800d7c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d7a4:	f000 fc8c 	bl	800e0c0 <prvInitialiseTaskLists>
 800d7a8:	e00d      	b.n	800d7c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d7aa:	4b26      	ldr	r3, [pc, #152]	; (800d844 <prvAddNewTaskToReadyList+0xcc>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d109      	bne.n	800d7c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d7b2:	4b23      	ldr	r3, [pc, #140]	; (800d840 <prvAddNewTaskToReadyList+0xc8>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d802      	bhi.n	800d7c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d7c0:	4a1f      	ldr	r2, [pc, #124]	; (800d840 <prvAddNewTaskToReadyList+0xc8>)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d7c6:	4b20      	ldr	r3, [pc, #128]	; (800d848 <prvAddNewTaskToReadyList+0xd0>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	4a1e      	ldr	r2, [pc, #120]	; (800d848 <prvAddNewTaskToReadyList+0xd0>)
 800d7ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d7d0:	4b1d      	ldr	r3, [pc, #116]	; (800d848 <prvAddNewTaskToReadyList+0xd0>)
 800d7d2:	681a      	ldr	r2, [r3, #0]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7dc:	4b1b      	ldr	r3, [pc, #108]	; (800d84c <prvAddNewTaskToReadyList+0xd4>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d903      	bls.n	800d7ec <prvAddNewTaskToReadyList+0x74>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e8:	4a18      	ldr	r2, [pc, #96]	; (800d84c <prvAddNewTaskToReadyList+0xd4>)
 800d7ea:	6013      	str	r3, [r2, #0]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f0:	4613      	mov	r3, r2
 800d7f2:	009b      	lsls	r3, r3, #2
 800d7f4:	4413      	add	r3, r2
 800d7f6:	009b      	lsls	r3, r3, #2
 800d7f8:	4a15      	ldr	r2, [pc, #84]	; (800d850 <prvAddNewTaskToReadyList+0xd8>)
 800d7fa:	441a      	add	r2, r3
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	3304      	adds	r3, #4
 800d800:	4619      	mov	r1, r3
 800d802:	4610      	mov	r0, r2
 800d804:	f7ff f913 	bl	800ca2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d808:	f001 faa4 	bl	800ed54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d80c:	4b0d      	ldr	r3, [pc, #52]	; (800d844 <prvAddNewTaskToReadyList+0xcc>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d00e      	beq.n	800d832 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d814:	4b0a      	ldr	r3, [pc, #40]	; (800d840 <prvAddNewTaskToReadyList+0xc8>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81e:	429a      	cmp	r2, r3
 800d820:	d207      	bcs.n	800d832 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d822:	4b0c      	ldr	r3, [pc, #48]	; (800d854 <prvAddNewTaskToReadyList+0xdc>)
 800d824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d828:	601a      	str	r2, [r3, #0]
 800d82a:	f3bf 8f4f 	dsb	sy
 800d82e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d832:	bf00      	nop
 800d834:	3708      	adds	r7, #8
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	200015d4 	.word	0x200015d4
 800d840:	20001100 	.word	0x20001100
 800d844:	200015e0 	.word	0x200015e0
 800d848:	200015f0 	.word	0x200015f0
 800d84c:	200015dc 	.word	0x200015dc
 800d850:	20001104 	.word	0x20001104
 800d854:	e000ed04 	.word	0xe000ed04

0800d858 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d860:	2300      	movs	r3, #0
 800d862:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d017      	beq.n	800d89a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d86a:	4b13      	ldr	r3, [pc, #76]	; (800d8b8 <vTaskDelay+0x60>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d00a      	beq.n	800d888 <vTaskDelay+0x30>
	__asm volatile
 800d872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d876:	f383 8811 	msr	BASEPRI, r3
 800d87a:	f3bf 8f6f 	isb	sy
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	60bb      	str	r3, [r7, #8]
}
 800d884:	bf00      	nop
 800d886:	e7fe      	b.n	800d886 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d888:	f000 f8f6 	bl	800da78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d88c:	2100      	movs	r1, #0
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 fd60 	bl	800e354 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d894:	f000 f8fe 	bl	800da94 <xTaskResumeAll>
 800d898:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d107      	bne.n	800d8b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d8a0:	4b06      	ldr	r3, [pc, #24]	; (800d8bc <vTaskDelay+0x64>)
 800d8a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8a6:	601a      	str	r2, [r3, #0]
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d8b0:	bf00      	nop
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	200015fc 	.word	0x200015fc
 800d8bc:	e000ed04 	.word	0xe000ed04

0800d8c0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d8c8:	f001 fa14 	bl	800ecf4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d102      	bne.n	800d8d8 <vTaskSuspend+0x18>
 800d8d2:	4b30      	ldr	r3, [pc, #192]	; (800d994 <vTaskSuspend+0xd4>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	e000      	b.n	800d8da <vTaskSuspend+0x1a>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	3304      	adds	r3, #4
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7ff f901 	bl	800cae8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d004      	beq.n	800d8f8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	3318      	adds	r3, #24
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7ff f8f8 	bl	800cae8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	3304      	adds	r3, #4
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	4826      	ldr	r0, [pc, #152]	; (800d998 <vTaskSuspend+0xd8>)
 800d900:	f7ff f895 	bl	800ca2e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d103      	bne.n	800d918 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2200      	movs	r2, #0
 800d914:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800d918:	f001 fa1c 	bl	800ed54 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800d91c:	4b1f      	ldr	r3, [pc, #124]	; (800d99c <vTaskSuspend+0xdc>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d005      	beq.n	800d930 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800d924:	f001 f9e6 	bl	800ecf4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800d928:	f000 fc68 	bl	800e1fc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800d92c:	f001 fa12 	bl	800ed54 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800d930:	4b18      	ldr	r3, [pc, #96]	; (800d994 <vTaskSuspend+0xd4>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	68fa      	ldr	r2, [r7, #12]
 800d936:	429a      	cmp	r2, r3
 800d938:	d127      	bne.n	800d98a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800d93a:	4b18      	ldr	r3, [pc, #96]	; (800d99c <vTaskSuspend+0xdc>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d017      	beq.n	800d972 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800d942:	4b17      	ldr	r3, [pc, #92]	; (800d9a0 <vTaskSuspend+0xe0>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00a      	beq.n	800d960 <vTaskSuspend+0xa0>
	__asm volatile
 800d94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d94e:	f383 8811 	msr	BASEPRI, r3
 800d952:	f3bf 8f6f 	isb	sy
 800d956:	f3bf 8f4f 	dsb	sy
 800d95a:	60bb      	str	r3, [r7, #8]
}
 800d95c:	bf00      	nop
 800d95e:	e7fe      	b.n	800d95e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800d960:	4b10      	ldr	r3, [pc, #64]	; (800d9a4 <vTaskSuspend+0xe4>)
 800d962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d966:	601a      	str	r2, [r3, #0]
 800d968:	f3bf 8f4f 	dsb	sy
 800d96c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d970:	e00b      	b.n	800d98a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800d972:	4b09      	ldr	r3, [pc, #36]	; (800d998 <vTaskSuspend+0xd8>)
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	4b0c      	ldr	r3, [pc, #48]	; (800d9a8 <vTaskSuspend+0xe8>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d103      	bne.n	800d986 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800d97e:	4b05      	ldr	r3, [pc, #20]	; (800d994 <vTaskSuspend+0xd4>)
 800d980:	2200      	movs	r2, #0
 800d982:	601a      	str	r2, [r3, #0]
	}
 800d984:	e001      	b.n	800d98a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800d986:	f000 f9ed 	bl	800dd64 <vTaskSwitchContext>
	}
 800d98a:	bf00      	nop
 800d98c:	3710      	adds	r7, #16
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	20001100 	.word	0x20001100
 800d998:	200015c0 	.word	0x200015c0
 800d99c:	200015e0 	.word	0x200015e0
 800d9a0:	200015fc 	.word	0x200015fc
 800d9a4:	e000ed04 	.word	0xe000ed04
 800d9a8:	200015d4 	.word	0x200015d4

0800d9ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b08a      	sub	sp, #40	; 0x28
 800d9b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d9ba:	463a      	mov	r2, r7
 800d9bc:	1d39      	adds	r1, r7, #4
 800d9be:	f107 0308 	add.w	r3, r7, #8
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7fe ffd2 	bl	800c96c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d9c8:	6839      	ldr	r1, [r7, #0]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	68ba      	ldr	r2, [r7, #8]
 800d9ce:	9202      	str	r2, [sp, #8]
 800d9d0:	9301      	str	r3, [sp, #4]
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	9300      	str	r3, [sp, #0]
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	460a      	mov	r2, r1
 800d9da:	4921      	ldr	r1, [pc, #132]	; (800da60 <vTaskStartScheduler+0xb4>)
 800d9dc:	4821      	ldr	r0, [pc, #132]	; (800da64 <vTaskStartScheduler+0xb8>)
 800d9de:	f7ff fd99 	bl	800d514 <xTaskCreateStatic>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	4a20      	ldr	r2, [pc, #128]	; (800da68 <vTaskStartScheduler+0xbc>)
 800d9e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d9e8:	4b1f      	ldr	r3, [pc, #124]	; (800da68 <vTaskStartScheduler+0xbc>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d002      	beq.n	800d9f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	617b      	str	r3, [r7, #20]
 800d9f4:	e001      	b.n	800d9fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d102      	bne.n	800da06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800da00:	f000 fcfc 	bl	800e3fc <xTimerCreateTimerTask>
 800da04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d116      	bne.n	800da3a <vTaskStartScheduler+0x8e>
	__asm volatile
 800da0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	613b      	str	r3, [r7, #16]
}
 800da1e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800da20:	4b12      	ldr	r3, [pc, #72]	; (800da6c <vTaskStartScheduler+0xc0>)
 800da22:	f04f 32ff 	mov.w	r2, #4294967295
 800da26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800da28:	4b11      	ldr	r3, [pc, #68]	; (800da70 <vTaskStartScheduler+0xc4>)
 800da2a:	2201      	movs	r2, #1
 800da2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800da2e:	4b11      	ldr	r3, [pc, #68]	; (800da74 <vTaskStartScheduler+0xc8>)
 800da30:	2200      	movs	r2, #0
 800da32:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800da34:	f001 f8bc 	bl	800ebb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800da38:	e00e      	b.n	800da58 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da40:	d10a      	bne.n	800da58 <vTaskStartScheduler+0xac>
	__asm volatile
 800da42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da46:	f383 8811 	msr	BASEPRI, r3
 800da4a:	f3bf 8f6f 	isb	sy
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	60fb      	str	r3, [r7, #12]
}
 800da54:	bf00      	nop
 800da56:	e7fe      	b.n	800da56 <vTaskStartScheduler+0xaa>
}
 800da58:	bf00      	nop
 800da5a:	3718      	adds	r7, #24
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	08010ba0 	.word	0x08010ba0
 800da64:	0800e091 	.word	0x0800e091
 800da68:	200015f8 	.word	0x200015f8
 800da6c:	200015f4 	.word	0x200015f4
 800da70:	200015e0 	.word	0x200015e0
 800da74:	200015d8 	.word	0x200015d8

0800da78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800da78:	b480      	push	{r7}
 800da7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800da7c:	4b04      	ldr	r3, [pc, #16]	; (800da90 <vTaskSuspendAll+0x18>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	3301      	adds	r3, #1
 800da82:	4a03      	ldr	r2, [pc, #12]	; (800da90 <vTaskSuspendAll+0x18>)
 800da84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800da86:	bf00      	nop
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr
 800da90:	200015fc 	.word	0x200015fc

0800da94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800da9a:	2300      	movs	r3, #0
 800da9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800da9e:	2300      	movs	r3, #0
 800daa0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800daa2:	4b42      	ldr	r3, [pc, #264]	; (800dbac <xTaskResumeAll+0x118>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d10a      	bne.n	800dac0 <xTaskResumeAll+0x2c>
	__asm volatile
 800daaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daae:	f383 8811 	msr	BASEPRI, r3
 800dab2:	f3bf 8f6f 	isb	sy
 800dab6:	f3bf 8f4f 	dsb	sy
 800daba:	603b      	str	r3, [r7, #0]
}
 800dabc:	bf00      	nop
 800dabe:	e7fe      	b.n	800dabe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dac0:	f001 f918 	bl	800ecf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dac4:	4b39      	ldr	r3, [pc, #228]	; (800dbac <xTaskResumeAll+0x118>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	3b01      	subs	r3, #1
 800daca:	4a38      	ldr	r2, [pc, #224]	; (800dbac <xTaskResumeAll+0x118>)
 800dacc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dace:	4b37      	ldr	r3, [pc, #220]	; (800dbac <xTaskResumeAll+0x118>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d162      	bne.n	800db9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dad6:	4b36      	ldr	r3, [pc, #216]	; (800dbb0 <xTaskResumeAll+0x11c>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d05e      	beq.n	800db9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dade:	e02f      	b.n	800db40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dae0:	4b34      	ldr	r3, [pc, #208]	; (800dbb4 <xTaskResumeAll+0x120>)
 800dae2:	68db      	ldr	r3, [r3, #12]
 800dae4:	68db      	ldr	r3, [r3, #12]
 800dae6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	3318      	adds	r3, #24
 800daec:	4618      	mov	r0, r3
 800daee:	f7fe fffb 	bl	800cae8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	3304      	adds	r3, #4
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7fe fff6 	bl	800cae8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db00:	4b2d      	ldr	r3, [pc, #180]	; (800dbb8 <xTaskResumeAll+0x124>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	429a      	cmp	r2, r3
 800db06:	d903      	bls.n	800db10 <xTaskResumeAll+0x7c>
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db0c:	4a2a      	ldr	r2, [pc, #168]	; (800dbb8 <xTaskResumeAll+0x124>)
 800db0e:	6013      	str	r3, [r2, #0]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db14:	4613      	mov	r3, r2
 800db16:	009b      	lsls	r3, r3, #2
 800db18:	4413      	add	r3, r2
 800db1a:	009b      	lsls	r3, r3, #2
 800db1c:	4a27      	ldr	r2, [pc, #156]	; (800dbbc <xTaskResumeAll+0x128>)
 800db1e:	441a      	add	r2, r3
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	3304      	adds	r3, #4
 800db24:	4619      	mov	r1, r3
 800db26:	4610      	mov	r0, r2
 800db28:	f7fe ff81 	bl	800ca2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db30:	4b23      	ldr	r3, [pc, #140]	; (800dbc0 <xTaskResumeAll+0x12c>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db36:	429a      	cmp	r2, r3
 800db38:	d302      	bcc.n	800db40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800db3a:	4b22      	ldr	r3, [pc, #136]	; (800dbc4 <xTaskResumeAll+0x130>)
 800db3c:	2201      	movs	r2, #1
 800db3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db40:	4b1c      	ldr	r3, [pc, #112]	; (800dbb4 <xTaskResumeAll+0x120>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d1cb      	bne.n	800dae0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d001      	beq.n	800db52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800db4e:	f000 fb55 	bl	800e1fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800db52:	4b1d      	ldr	r3, [pc, #116]	; (800dbc8 <xTaskResumeAll+0x134>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d010      	beq.n	800db80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800db5e:	f000 f847 	bl	800dbf0 <xTaskIncrementTick>
 800db62:	4603      	mov	r3, r0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d002      	beq.n	800db6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800db68:	4b16      	ldr	r3, [pc, #88]	; (800dbc4 <xTaskResumeAll+0x130>)
 800db6a:	2201      	movs	r2, #1
 800db6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	3b01      	subs	r3, #1
 800db72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d1f1      	bne.n	800db5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800db7a:	4b13      	ldr	r3, [pc, #76]	; (800dbc8 <xTaskResumeAll+0x134>)
 800db7c:	2200      	movs	r2, #0
 800db7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800db80:	4b10      	ldr	r3, [pc, #64]	; (800dbc4 <xTaskResumeAll+0x130>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d009      	beq.n	800db9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800db88:	2301      	movs	r3, #1
 800db8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800db8c:	4b0f      	ldr	r3, [pc, #60]	; (800dbcc <xTaskResumeAll+0x138>)
 800db8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db92:	601a      	str	r2, [r3, #0]
 800db94:	f3bf 8f4f 	dsb	sy
 800db98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db9c:	f001 f8da 	bl	800ed54 <vPortExitCritical>

	return xAlreadyYielded;
 800dba0:	68bb      	ldr	r3, [r7, #8]
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3710      	adds	r7, #16
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	200015fc 	.word	0x200015fc
 800dbb0:	200015d4 	.word	0x200015d4
 800dbb4:	20001594 	.word	0x20001594
 800dbb8:	200015dc 	.word	0x200015dc
 800dbbc:	20001104 	.word	0x20001104
 800dbc0:	20001100 	.word	0x20001100
 800dbc4:	200015e8 	.word	0x200015e8
 800dbc8:	200015e4 	.word	0x200015e4
 800dbcc:	e000ed04 	.word	0xe000ed04

0800dbd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dbd6:	4b05      	ldr	r3, [pc, #20]	; (800dbec <xTaskGetTickCount+0x1c>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dbdc:	687b      	ldr	r3, [r7, #4]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	370c      	adds	r7, #12
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop
 800dbec:	200015d8 	.word	0x200015d8

0800dbf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b086      	sub	sp, #24
 800dbf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbfa:	4b4f      	ldr	r3, [pc, #316]	; (800dd38 <xTaskIncrementTick+0x148>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	f040 808f 	bne.w	800dd22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dc04:	4b4d      	ldr	r3, [pc, #308]	; (800dd3c <xTaskIncrementTick+0x14c>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	3301      	adds	r3, #1
 800dc0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dc0c:	4a4b      	ldr	r2, [pc, #300]	; (800dd3c <xTaskIncrementTick+0x14c>)
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d120      	bne.n	800dc5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dc18:	4b49      	ldr	r3, [pc, #292]	; (800dd40 <xTaskIncrementTick+0x150>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d00a      	beq.n	800dc38 <xTaskIncrementTick+0x48>
	__asm volatile
 800dc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc26:	f383 8811 	msr	BASEPRI, r3
 800dc2a:	f3bf 8f6f 	isb	sy
 800dc2e:	f3bf 8f4f 	dsb	sy
 800dc32:	603b      	str	r3, [r7, #0]
}
 800dc34:	bf00      	nop
 800dc36:	e7fe      	b.n	800dc36 <xTaskIncrementTick+0x46>
 800dc38:	4b41      	ldr	r3, [pc, #260]	; (800dd40 <xTaskIncrementTick+0x150>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	60fb      	str	r3, [r7, #12]
 800dc3e:	4b41      	ldr	r3, [pc, #260]	; (800dd44 <xTaskIncrementTick+0x154>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	4a3f      	ldr	r2, [pc, #252]	; (800dd40 <xTaskIncrementTick+0x150>)
 800dc44:	6013      	str	r3, [r2, #0]
 800dc46:	4a3f      	ldr	r2, [pc, #252]	; (800dd44 <xTaskIncrementTick+0x154>)
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6013      	str	r3, [r2, #0]
 800dc4c:	4b3e      	ldr	r3, [pc, #248]	; (800dd48 <xTaskIncrementTick+0x158>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	3301      	adds	r3, #1
 800dc52:	4a3d      	ldr	r2, [pc, #244]	; (800dd48 <xTaskIncrementTick+0x158>)
 800dc54:	6013      	str	r3, [r2, #0]
 800dc56:	f000 fad1 	bl	800e1fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dc5a:	4b3c      	ldr	r3, [pc, #240]	; (800dd4c <xTaskIncrementTick+0x15c>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	693a      	ldr	r2, [r7, #16]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d349      	bcc.n	800dcf8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc64:	4b36      	ldr	r3, [pc, #216]	; (800dd40 <xTaskIncrementTick+0x150>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d104      	bne.n	800dc78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc6e:	4b37      	ldr	r3, [pc, #220]	; (800dd4c <xTaskIncrementTick+0x15c>)
 800dc70:	f04f 32ff 	mov.w	r2, #4294967295
 800dc74:	601a      	str	r2, [r3, #0]
					break;
 800dc76:	e03f      	b.n	800dcf8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc78:	4b31      	ldr	r3, [pc, #196]	; (800dd40 <xTaskIncrementTick+0x150>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	68db      	ldr	r3, [r3, #12]
 800dc7e:	68db      	ldr	r3, [r3, #12]
 800dc80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dc88:	693a      	ldr	r2, [r7, #16]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d203      	bcs.n	800dc98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dc90:	4a2e      	ldr	r2, [pc, #184]	; (800dd4c <xTaskIncrementTick+0x15c>)
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dc96:	e02f      	b.n	800dcf8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	3304      	adds	r3, #4
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f7fe ff23 	bl	800cae8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d004      	beq.n	800dcb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	3318      	adds	r3, #24
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7fe ff1a 	bl	800cae8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcb8:	4b25      	ldr	r3, [pc, #148]	; (800dd50 <xTaskIncrementTick+0x160>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d903      	bls.n	800dcc8 <xTaskIncrementTick+0xd8>
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc4:	4a22      	ldr	r2, [pc, #136]	; (800dd50 <xTaskIncrementTick+0x160>)
 800dcc6:	6013      	str	r3, [r2, #0]
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dccc:	4613      	mov	r3, r2
 800dcce:	009b      	lsls	r3, r3, #2
 800dcd0:	4413      	add	r3, r2
 800dcd2:	009b      	lsls	r3, r3, #2
 800dcd4:	4a1f      	ldr	r2, [pc, #124]	; (800dd54 <xTaskIncrementTick+0x164>)
 800dcd6:	441a      	add	r2, r3
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	3304      	adds	r3, #4
 800dcdc:	4619      	mov	r1, r3
 800dcde:	4610      	mov	r0, r2
 800dce0:	f7fe fea5 	bl	800ca2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dce8:	4b1b      	ldr	r3, [pc, #108]	; (800dd58 <xTaskIncrementTick+0x168>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d3b8      	bcc.n	800dc64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dcf6:	e7b5      	b.n	800dc64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dcf8:	4b17      	ldr	r3, [pc, #92]	; (800dd58 <xTaskIncrementTick+0x168>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcfe:	4915      	ldr	r1, [pc, #84]	; (800dd54 <xTaskIncrementTick+0x164>)
 800dd00:	4613      	mov	r3, r2
 800dd02:	009b      	lsls	r3, r3, #2
 800dd04:	4413      	add	r3, r2
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	440b      	add	r3, r1
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d901      	bls.n	800dd14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dd10:	2301      	movs	r3, #1
 800dd12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dd14:	4b11      	ldr	r3, [pc, #68]	; (800dd5c <xTaskIncrementTick+0x16c>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d007      	beq.n	800dd2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	617b      	str	r3, [r7, #20]
 800dd20:	e004      	b.n	800dd2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dd22:	4b0f      	ldr	r3, [pc, #60]	; (800dd60 <xTaskIncrementTick+0x170>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	3301      	adds	r3, #1
 800dd28:	4a0d      	ldr	r2, [pc, #52]	; (800dd60 <xTaskIncrementTick+0x170>)
 800dd2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dd2c:	697b      	ldr	r3, [r7, #20]
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3718      	adds	r7, #24
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	bf00      	nop
 800dd38:	200015fc 	.word	0x200015fc
 800dd3c:	200015d8 	.word	0x200015d8
 800dd40:	2000158c 	.word	0x2000158c
 800dd44:	20001590 	.word	0x20001590
 800dd48:	200015ec 	.word	0x200015ec
 800dd4c:	200015f4 	.word	0x200015f4
 800dd50:	200015dc 	.word	0x200015dc
 800dd54:	20001104 	.word	0x20001104
 800dd58:	20001100 	.word	0x20001100
 800dd5c:	200015e8 	.word	0x200015e8
 800dd60:	200015e4 	.word	0x200015e4

0800dd64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dd64:	b480      	push	{r7}
 800dd66:	b085      	sub	sp, #20
 800dd68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dd6a:	4b28      	ldr	r3, [pc, #160]	; (800de0c <vTaskSwitchContext+0xa8>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d003      	beq.n	800dd7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dd72:	4b27      	ldr	r3, [pc, #156]	; (800de10 <vTaskSwitchContext+0xac>)
 800dd74:	2201      	movs	r2, #1
 800dd76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dd78:	e041      	b.n	800ddfe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800dd7a:	4b25      	ldr	r3, [pc, #148]	; (800de10 <vTaskSwitchContext+0xac>)
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd80:	4b24      	ldr	r3, [pc, #144]	; (800de14 <vTaskSwitchContext+0xb0>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	60fb      	str	r3, [r7, #12]
 800dd86:	e010      	b.n	800ddaa <vTaskSwitchContext+0x46>
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d10a      	bne.n	800dda4 <vTaskSwitchContext+0x40>
	__asm volatile
 800dd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd92:	f383 8811 	msr	BASEPRI, r3
 800dd96:	f3bf 8f6f 	isb	sy
 800dd9a:	f3bf 8f4f 	dsb	sy
 800dd9e:	607b      	str	r3, [r7, #4]
}
 800dda0:	bf00      	nop
 800dda2:	e7fe      	b.n	800dda2 <vTaskSwitchContext+0x3e>
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	3b01      	subs	r3, #1
 800dda8:	60fb      	str	r3, [r7, #12]
 800ddaa:	491b      	ldr	r1, [pc, #108]	; (800de18 <vTaskSwitchContext+0xb4>)
 800ddac:	68fa      	ldr	r2, [r7, #12]
 800ddae:	4613      	mov	r3, r2
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	4413      	add	r3, r2
 800ddb4:	009b      	lsls	r3, r3, #2
 800ddb6:	440b      	add	r3, r1
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d0e4      	beq.n	800dd88 <vTaskSwitchContext+0x24>
 800ddbe:	68fa      	ldr	r2, [r7, #12]
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	009b      	lsls	r3, r3, #2
 800ddc4:	4413      	add	r3, r2
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	4a13      	ldr	r2, [pc, #76]	; (800de18 <vTaskSwitchContext+0xb4>)
 800ddca:	4413      	add	r3, r2
 800ddcc:	60bb      	str	r3, [r7, #8]
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	685a      	ldr	r2, [r3, #4]
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	605a      	str	r2, [r3, #4]
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	685a      	ldr	r2, [r3, #4]
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	3308      	adds	r3, #8
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d104      	bne.n	800ddee <vTaskSwitchContext+0x8a>
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	685a      	ldr	r2, [r3, #4]
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	605a      	str	r2, [r3, #4]
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	68db      	ldr	r3, [r3, #12]
 800ddf4:	4a09      	ldr	r2, [pc, #36]	; (800de1c <vTaskSwitchContext+0xb8>)
 800ddf6:	6013      	str	r3, [r2, #0]
 800ddf8:	4a06      	ldr	r2, [pc, #24]	; (800de14 <vTaskSwitchContext+0xb0>)
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	6013      	str	r3, [r2, #0]
}
 800ddfe:	bf00      	nop
 800de00:	3714      	adds	r7, #20
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr
 800de0a:	bf00      	nop
 800de0c:	200015fc 	.word	0x200015fc
 800de10:	200015e8 	.word	0x200015e8
 800de14:	200015dc 	.word	0x200015dc
 800de18:	20001104 	.word	0x20001104
 800de1c:	20001100 	.word	0x20001100

0800de20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d10a      	bne.n	800de46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800de30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de34:	f383 8811 	msr	BASEPRI, r3
 800de38:	f3bf 8f6f 	isb	sy
 800de3c:	f3bf 8f4f 	dsb	sy
 800de40:	60fb      	str	r3, [r7, #12]
}
 800de42:	bf00      	nop
 800de44:	e7fe      	b.n	800de44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de46:	4b07      	ldr	r3, [pc, #28]	; (800de64 <vTaskPlaceOnEventList+0x44>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	3318      	adds	r3, #24
 800de4c:	4619      	mov	r1, r3
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7fe fe11 	bl	800ca76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800de54:	2101      	movs	r1, #1
 800de56:	6838      	ldr	r0, [r7, #0]
 800de58:	f000 fa7c 	bl	800e354 <prvAddCurrentTaskToDelayedList>
}
 800de5c:	bf00      	nop
 800de5e:	3710      	adds	r7, #16
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	20001100 	.word	0x20001100

0800de68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b086      	sub	sp, #24
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	60b9      	str	r1, [r7, #8]
 800de72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d10a      	bne.n	800de90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800de7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de7e:	f383 8811 	msr	BASEPRI, r3
 800de82:	f3bf 8f6f 	isb	sy
 800de86:	f3bf 8f4f 	dsb	sy
 800de8a:	617b      	str	r3, [r7, #20]
}
 800de8c:	bf00      	nop
 800de8e:	e7fe      	b.n	800de8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de90:	4b0a      	ldr	r3, [pc, #40]	; (800debc <vTaskPlaceOnEventListRestricted+0x54>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	3318      	adds	r3, #24
 800de96:	4619      	mov	r1, r3
 800de98:	68f8      	ldr	r0, [r7, #12]
 800de9a:	f7fe fdc8 	bl	800ca2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d002      	beq.n	800deaa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dea4:	f04f 33ff 	mov.w	r3, #4294967295
 800dea8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800deaa:	6879      	ldr	r1, [r7, #4]
 800deac:	68b8      	ldr	r0, [r7, #8]
 800deae:	f000 fa51 	bl	800e354 <prvAddCurrentTaskToDelayedList>
	}
 800deb2:	bf00      	nop
 800deb4:	3718      	adds	r7, #24
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop
 800debc:	20001100 	.word	0x20001100

0800dec0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b086      	sub	sp, #24
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	68db      	ldr	r3, [r3, #12]
 800decc:	68db      	ldr	r3, [r3, #12]
 800dece:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d10a      	bne.n	800deec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ded6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deda:	f383 8811 	msr	BASEPRI, r3
 800dede:	f3bf 8f6f 	isb	sy
 800dee2:	f3bf 8f4f 	dsb	sy
 800dee6:	60fb      	str	r3, [r7, #12]
}
 800dee8:	bf00      	nop
 800deea:	e7fe      	b.n	800deea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	3318      	adds	r3, #24
 800def0:	4618      	mov	r0, r3
 800def2:	f7fe fdf9 	bl	800cae8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800def6:	4b1e      	ldr	r3, [pc, #120]	; (800df70 <xTaskRemoveFromEventList+0xb0>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d11d      	bne.n	800df3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	3304      	adds	r3, #4
 800df02:	4618      	mov	r0, r3
 800df04:	f7fe fdf0 	bl	800cae8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df0c:	4b19      	ldr	r3, [pc, #100]	; (800df74 <xTaskRemoveFromEventList+0xb4>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	429a      	cmp	r2, r3
 800df12:	d903      	bls.n	800df1c <xTaskRemoveFromEventList+0x5c>
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df18:	4a16      	ldr	r2, [pc, #88]	; (800df74 <xTaskRemoveFromEventList+0xb4>)
 800df1a:	6013      	str	r3, [r2, #0]
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df20:	4613      	mov	r3, r2
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	4413      	add	r3, r2
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	4a13      	ldr	r2, [pc, #76]	; (800df78 <xTaskRemoveFromEventList+0xb8>)
 800df2a:	441a      	add	r2, r3
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	3304      	adds	r3, #4
 800df30:	4619      	mov	r1, r3
 800df32:	4610      	mov	r0, r2
 800df34:	f7fe fd7b 	bl	800ca2e <vListInsertEnd>
 800df38:	e005      	b.n	800df46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	3318      	adds	r3, #24
 800df3e:	4619      	mov	r1, r3
 800df40:	480e      	ldr	r0, [pc, #56]	; (800df7c <xTaskRemoveFromEventList+0xbc>)
 800df42:	f7fe fd74 	bl	800ca2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df4a:	4b0d      	ldr	r3, [pc, #52]	; (800df80 <xTaskRemoveFromEventList+0xc0>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df50:	429a      	cmp	r2, r3
 800df52:	d905      	bls.n	800df60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800df54:	2301      	movs	r3, #1
 800df56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800df58:	4b0a      	ldr	r3, [pc, #40]	; (800df84 <xTaskRemoveFromEventList+0xc4>)
 800df5a:	2201      	movs	r2, #1
 800df5c:	601a      	str	r2, [r3, #0]
 800df5e:	e001      	b.n	800df64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800df60:	2300      	movs	r3, #0
 800df62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800df64:	697b      	ldr	r3, [r7, #20]
}
 800df66:	4618      	mov	r0, r3
 800df68:	3718      	adds	r7, #24
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	bf00      	nop
 800df70:	200015fc 	.word	0x200015fc
 800df74:	200015dc 	.word	0x200015dc
 800df78:	20001104 	.word	0x20001104
 800df7c:	20001594 	.word	0x20001594
 800df80:	20001100 	.word	0x20001100
 800df84:	200015e8 	.word	0x200015e8

0800df88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800df88:	b480      	push	{r7}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800df90:	4b06      	ldr	r3, [pc, #24]	; (800dfac <vTaskInternalSetTimeOutState+0x24>)
 800df92:	681a      	ldr	r2, [r3, #0]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800df98:	4b05      	ldr	r3, [pc, #20]	; (800dfb0 <vTaskInternalSetTimeOutState+0x28>)
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	605a      	str	r2, [r3, #4]
}
 800dfa0:	bf00      	nop
 800dfa2:	370c      	adds	r7, #12
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr
 800dfac:	200015ec 	.word	0x200015ec
 800dfb0:	200015d8 	.word	0x200015d8

0800dfb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b088      	sub	sp, #32
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d10a      	bne.n	800dfda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc8:	f383 8811 	msr	BASEPRI, r3
 800dfcc:	f3bf 8f6f 	isb	sy
 800dfd0:	f3bf 8f4f 	dsb	sy
 800dfd4:	613b      	str	r3, [r7, #16]
}
 800dfd6:	bf00      	nop
 800dfd8:	e7fe      	b.n	800dfd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d10a      	bne.n	800dff6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe4:	f383 8811 	msr	BASEPRI, r3
 800dfe8:	f3bf 8f6f 	isb	sy
 800dfec:	f3bf 8f4f 	dsb	sy
 800dff0:	60fb      	str	r3, [r7, #12]
}
 800dff2:	bf00      	nop
 800dff4:	e7fe      	b.n	800dff4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dff6:	f000 fe7d 	bl	800ecf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dffa:	4b1d      	ldr	r3, [pc, #116]	; (800e070 <xTaskCheckForTimeOut+0xbc>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	69ba      	ldr	r2, [r7, #24]
 800e006:	1ad3      	subs	r3, r2, r3
 800e008:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e012:	d102      	bne.n	800e01a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e014:	2300      	movs	r3, #0
 800e016:	61fb      	str	r3, [r7, #28]
 800e018:	e023      	b.n	800e062 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681a      	ldr	r2, [r3, #0]
 800e01e:	4b15      	ldr	r3, [pc, #84]	; (800e074 <xTaskCheckForTimeOut+0xc0>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	429a      	cmp	r2, r3
 800e024:	d007      	beq.n	800e036 <xTaskCheckForTimeOut+0x82>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	69ba      	ldr	r2, [r7, #24]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d302      	bcc.n	800e036 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e030:	2301      	movs	r3, #1
 800e032:	61fb      	str	r3, [r7, #28]
 800e034:	e015      	b.n	800e062 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	697a      	ldr	r2, [r7, #20]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d20b      	bcs.n	800e058 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	681a      	ldr	r2, [r3, #0]
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	1ad2      	subs	r2, r2, r3
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f7ff ff9b 	bl	800df88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e052:	2300      	movs	r3, #0
 800e054:	61fb      	str	r3, [r7, #28]
 800e056:	e004      	b.n	800e062 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	2200      	movs	r2, #0
 800e05c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e05e:	2301      	movs	r3, #1
 800e060:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e062:	f000 fe77 	bl	800ed54 <vPortExitCritical>

	return xReturn;
 800e066:	69fb      	ldr	r3, [r7, #28]
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3720      	adds	r7, #32
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	200015d8 	.word	0x200015d8
 800e074:	200015ec 	.word	0x200015ec

0800e078 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e078:	b480      	push	{r7}
 800e07a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e07c:	4b03      	ldr	r3, [pc, #12]	; (800e08c <vTaskMissedYield+0x14>)
 800e07e:	2201      	movs	r2, #1
 800e080:	601a      	str	r2, [r3, #0]
}
 800e082:	bf00      	nop
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr
 800e08c:	200015e8 	.word	0x200015e8

0800e090 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e098:	f000 f852 	bl	800e140 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e09c:	4b06      	ldr	r3, [pc, #24]	; (800e0b8 <prvIdleTask+0x28>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d9f9      	bls.n	800e098 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e0a4:	4b05      	ldr	r3, [pc, #20]	; (800e0bc <prvIdleTask+0x2c>)
 800e0a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0aa:	601a      	str	r2, [r3, #0]
 800e0ac:	f3bf 8f4f 	dsb	sy
 800e0b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e0b4:	e7f0      	b.n	800e098 <prvIdleTask+0x8>
 800e0b6:	bf00      	nop
 800e0b8:	20001104 	.word	0x20001104
 800e0bc:	e000ed04 	.word	0xe000ed04

0800e0c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	607b      	str	r3, [r7, #4]
 800e0ca:	e00c      	b.n	800e0e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	4613      	mov	r3, r2
 800e0d0:	009b      	lsls	r3, r3, #2
 800e0d2:	4413      	add	r3, r2
 800e0d4:	009b      	lsls	r3, r3, #2
 800e0d6:	4a12      	ldr	r2, [pc, #72]	; (800e120 <prvInitialiseTaskLists+0x60>)
 800e0d8:	4413      	add	r3, r2
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7fe fc7a 	bl	800c9d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	607b      	str	r3, [r7, #4]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2b37      	cmp	r3, #55	; 0x37
 800e0ea:	d9ef      	bls.n	800e0cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e0ec:	480d      	ldr	r0, [pc, #52]	; (800e124 <prvInitialiseTaskLists+0x64>)
 800e0ee:	f7fe fc71 	bl	800c9d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e0f2:	480d      	ldr	r0, [pc, #52]	; (800e128 <prvInitialiseTaskLists+0x68>)
 800e0f4:	f7fe fc6e 	bl	800c9d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e0f8:	480c      	ldr	r0, [pc, #48]	; (800e12c <prvInitialiseTaskLists+0x6c>)
 800e0fa:	f7fe fc6b 	bl	800c9d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e0fe:	480c      	ldr	r0, [pc, #48]	; (800e130 <prvInitialiseTaskLists+0x70>)
 800e100:	f7fe fc68 	bl	800c9d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e104:	480b      	ldr	r0, [pc, #44]	; (800e134 <prvInitialiseTaskLists+0x74>)
 800e106:	f7fe fc65 	bl	800c9d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e10a:	4b0b      	ldr	r3, [pc, #44]	; (800e138 <prvInitialiseTaskLists+0x78>)
 800e10c:	4a05      	ldr	r2, [pc, #20]	; (800e124 <prvInitialiseTaskLists+0x64>)
 800e10e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e110:	4b0a      	ldr	r3, [pc, #40]	; (800e13c <prvInitialiseTaskLists+0x7c>)
 800e112:	4a05      	ldr	r2, [pc, #20]	; (800e128 <prvInitialiseTaskLists+0x68>)
 800e114:	601a      	str	r2, [r3, #0]
}
 800e116:	bf00      	nop
 800e118:	3708      	adds	r7, #8
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	20001104 	.word	0x20001104
 800e124:	20001564 	.word	0x20001564
 800e128:	20001578 	.word	0x20001578
 800e12c:	20001594 	.word	0x20001594
 800e130:	200015a8 	.word	0x200015a8
 800e134:	200015c0 	.word	0x200015c0
 800e138:	2000158c 	.word	0x2000158c
 800e13c:	20001590 	.word	0x20001590

0800e140 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e146:	e019      	b.n	800e17c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e148:	f000 fdd4 	bl	800ecf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e14c:	4b10      	ldr	r3, [pc, #64]	; (800e190 <prvCheckTasksWaitingTermination+0x50>)
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	68db      	ldr	r3, [r3, #12]
 800e152:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	3304      	adds	r3, #4
 800e158:	4618      	mov	r0, r3
 800e15a:	f7fe fcc5 	bl	800cae8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e15e:	4b0d      	ldr	r3, [pc, #52]	; (800e194 <prvCheckTasksWaitingTermination+0x54>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	3b01      	subs	r3, #1
 800e164:	4a0b      	ldr	r2, [pc, #44]	; (800e194 <prvCheckTasksWaitingTermination+0x54>)
 800e166:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e168:	4b0b      	ldr	r3, [pc, #44]	; (800e198 <prvCheckTasksWaitingTermination+0x58>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	3b01      	subs	r3, #1
 800e16e:	4a0a      	ldr	r2, [pc, #40]	; (800e198 <prvCheckTasksWaitingTermination+0x58>)
 800e170:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e172:	f000 fdef 	bl	800ed54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 f810 	bl	800e19c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e17c:	4b06      	ldr	r3, [pc, #24]	; (800e198 <prvCheckTasksWaitingTermination+0x58>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d1e1      	bne.n	800e148 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e184:	bf00      	nop
 800e186:	bf00      	nop
 800e188:	3708      	adds	r7, #8
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	200015a8 	.word	0x200015a8
 800e194:	200015d4 	.word	0x200015d4
 800e198:	200015bc 	.word	0x200015bc

0800e19c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d108      	bne.n	800e1c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f000 ff8c 	bl	800f0d0 <vPortFree>
				vPortFree( pxTCB );
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f000 ff89 	bl	800f0d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e1be:	e018      	b.n	800e1f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d103      	bne.n	800e1d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f000 ff80 	bl	800f0d0 <vPortFree>
	}
 800e1d0:	e00f      	b.n	800e1f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e1d8:	2b02      	cmp	r3, #2
 800e1da:	d00a      	beq.n	800e1f2 <prvDeleteTCB+0x56>
	__asm volatile
 800e1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e0:	f383 8811 	msr	BASEPRI, r3
 800e1e4:	f3bf 8f6f 	isb	sy
 800e1e8:	f3bf 8f4f 	dsb	sy
 800e1ec:	60fb      	str	r3, [r7, #12]
}
 800e1ee:	bf00      	nop
 800e1f0:	e7fe      	b.n	800e1f0 <prvDeleteTCB+0x54>
	}
 800e1f2:	bf00      	nop
 800e1f4:	3710      	adds	r7, #16
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
	...

0800e1fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b083      	sub	sp, #12
 800e200:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e202:	4b0c      	ldr	r3, [pc, #48]	; (800e234 <prvResetNextTaskUnblockTime+0x38>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d104      	bne.n	800e216 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e20c:	4b0a      	ldr	r3, [pc, #40]	; (800e238 <prvResetNextTaskUnblockTime+0x3c>)
 800e20e:	f04f 32ff 	mov.w	r2, #4294967295
 800e212:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e214:	e008      	b.n	800e228 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e216:	4b07      	ldr	r3, [pc, #28]	; (800e234 <prvResetNextTaskUnblockTime+0x38>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	68db      	ldr	r3, [r3, #12]
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	685b      	ldr	r3, [r3, #4]
 800e224:	4a04      	ldr	r2, [pc, #16]	; (800e238 <prvResetNextTaskUnblockTime+0x3c>)
 800e226:	6013      	str	r3, [r2, #0]
}
 800e228:	bf00      	nop
 800e22a:	370c      	adds	r7, #12
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr
 800e234:	2000158c 	.word	0x2000158c
 800e238:	200015f4 	.word	0x200015f4

0800e23c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e242:	4b0b      	ldr	r3, [pc, #44]	; (800e270 <xTaskGetSchedulerState+0x34>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d102      	bne.n	800e250 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e24a:	2301      	movs	r3, #1
 800e24c:	607b      	str	r3, [r7, #4]
 800e24e:	e008      	b.n	800e262 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e250:	4b08      	ldr	r3, [pc, #32]	; (800e274 <xTaskGetSchedulerState+0x38>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d102      	bne.n	800e25e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e258:	2302      	movs	r3, #2
 800e25a:	607b      	str	r3, [r7, #4]
 800e25c:	e001      	b.n	800e262 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e25e:	2300      	movs	r3, #0
 800e260:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e262:	687b      	ldr	r3, [r7, #4]
	}
 800e264:	4618      	mov	r0, r3
 800e266:	370c      	adds	r7, #12
 800e268:	46bd      	mov	sp, r7
 800e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26e:	4770      	bx	lr
 800e270:	200015e0 	.word	0x200015e0
 800e274:	200015fc 	.word	0x200015fc

0800e278 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b086      	sub	sp, #24
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e284:	2300      	movs	r3, #0
 800e286:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d056      	beq.n	800e33c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e28e:	4b2e      	ldr	r3, [pc, #184]	; (800e348 <xTaskPriorityDisinherit+0xd0>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	693a      	ldr	r2, [r7, #16]
 800e294:	429a      	cmp	r2, r3
 800e296:	d00a      	beq.n	800e2ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29c:	f383 8811 	msr	BASEPRI, r3
 800e2a0:	f3bf 8f6f 	isb	sy
 800e2a4:	f3bf 8f4f 	dsb	sy
 800e2a8:	60fb      	str	r3, [r7, #12]
}
 800e2aa:	bf00      	nop
 800e2ac:	e7fe      	b.n	800e2ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d10a      	bne.n	800e2cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ba:	f383 8811 	msr	BASEPRI, r3
 800e2be:	f3bf 8f6f 	isb	sy
 800e2c2:	f3bf 8f4f 	dsb	sy
 800e2c6:	60bb      	str	r3, [r7, #8]
}
 800e2c8:	bf00      	nop
 800e2ca:	e7fe      	b.n	800e2ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2d0:	1e5a      	subs	r2, r3, #1
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	d02c      	beq.n	800e33c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d128      	bne.n	800e33c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	3304      	adds	r3, #4
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7fe fbfa 	bl	800cae8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e300:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e30c:	4b0f      	ldr	r3, [pc, #60]	; (800e34c <xTaskPriorityDisinherit+0xd4>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	429a      	cmp	r2, r3
 800e312:	d903      	bls.n	800e31c <xTaskPriorityDisinherit+0xa4>
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e318:	4a0c      	ldr	r2, [pc, #48]	; (800e34c <xTaskPriorityDisinherit+0xd4>)
 800e31a:	6013      	str	r3, [r2, #0]
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e320:	4613      	mov	r3, r2
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	4413      	add	r3, r2
 800e326:	009b      	lsls	r3, r3, #2
 800e328:	4a09      	ldr	r2, [pc, #36]	; (800e350 <xTaskPriorityDisinherit+0xd8>)
 800e32a:	441a      	add	r2, r3
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	3304      	adds	r3, #4
 800e330:	4619      	mov	r1, r3
 800e332:	4610      	mov	r0, r2
 800e334:	f7fe fb7b 	bl	800ca2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e338:	2301      	movs	r3, #1
 800e33a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e33c:	697b      	ldr	r3, [r7, #20]
	}
 800e33e:	4618      	mov	r0, r3
 800e340:	3718      	adds	r7, #24
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	20001100 	.word	0x20001100
 800e34c:	200015dc 	.word	0x200015dc
 800e350:	20001104 	.word	0x20001104

0800e354 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b084      	sub	sp, #16
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e35e:	4b21      	ldr	r3, [pc, #132]	; (800e3e4 <prvAddCurrentTaskToDelayedList+0x90>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e364:	4b20      	ldr	r3, [pc, #128]	; (800e3e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	3304      	adds	r3, #4
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7fe fbbc 	bl	800cae8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e376:	d10a      	bne.n	800e38e <prvAddCurrentTaskToDelayedList+0x3a>
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d007      	beq.n	800e38e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e37e:	4b1a      	ldr	r3, [pc, #104]	; (800e3e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	3304      	adds	r3, #4
 800e384:	4619      	mov	r1, r3
 800e386:	4819      	ldr	r0, [pc, #100]	; (800e3ec <prvAddCurrentTaskToDelayedList+0x98>)
 800e388:	f7fe fb51 	bl	800ca2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e38c:	e026      	b.n	800e3dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e38e:	68fa      	ldr	r2, [r7, #12]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	4413      	add	r3, r2
 800e394:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e396:	4b14      	ldr	r3, [pc, #80]	; (800e3e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	68ba      	ldr	r2, [r7, #8]
 800e39c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e39e:	68ba      	ldr	r2, [r7, #8]
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d209      	bcs.n	800e3ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3a6:	4b12      	ldr	r3, [pc, #72]	; (800e3f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	4b0f      	ldr	r3, [pc, #60]	; (800e3e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	3304      	adds	r3, #4
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	4610      	mov	r0, r2
 800e3b4:	f7fe fb5f 	bl	800ca76 <vListInsert>
}
 800e3b8:	e010      	b.n	800e3dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3ba:	4b0e      	ldr	r3, [pc, #56]	; (800e3f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e3bc:	681a      	ldr	r2, [r3, #0]
 800e3be:	4b0a      	ldr	r3, [pc, #40]	; (800e3e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	3304      	adds	r3, #4
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	4610      	mov	r0, r2
 800e3c8:	f7fe fb55 	bl	800ca76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e3cc:	4b0a      	ldr	r3, [pc, #40]	; (800e3f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	68ba      	ldr	r2, [r7, #8]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d202      	bcs.n	800e3dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e3d6:	4a08      	ldr	r2, [pc, #32]	; (800e3f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	6013      	str	r3, [r2, #0]
}
 800e3dc:	bf00      	nop
 800e3de:	3710      	adds	r7, #16
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}
 800e3e4:	200015d8 	.word	0x200015d8
 800e3e8:	20001100 	.word	0x20001100
 800e3ec:	200015c0 	.word	0x200015c0
 800e3f0:	20001590 	.word	0x20001590
 800e3f4:	2000158c 	.word	0x2000158c
 800e3f8:	200015f4 	.word	0x200015f4

0800e3fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b08a      	sub	sp, #40	; 0x28
 800e400:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e402:	2300      	movs	r3, #0
 800e404:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e406:	f000 fb07 	bl	800ea18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e40a:	4b1c      	ldr	r3, [pc, #112]	; (800e47c <xTimerCreateTimerTask+0x80>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d021      	beq.n	800e456 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e412:	2300      	movs	r3, #0
 800e414:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e416:	2300      	movs	r3, #0
 800e418:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e41a:	1d3a      	adds	r2, r7, #4
 800e41c:	f107 0108 	add.w	r1, r7, #8
 800e420:	f107 030c 	add.w	r3, r7, #12
 800e424:	4618      	mov	r0, r3
 800e426:	f7fe fabb 	bl	800c9a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e42a:	6879      	ldr	r1, [r7, #4]
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	68fa      	ldr	r2, [r7, #12]
 800e430:	9202      	str	r2, [sp, #8]
 800e432:	9301      	str	r3, [sp, #4]
 800e434:	2302      	movs	r3, #2
 800e436:	9300      	str	r3, [sp, #0]
 800e438:	2300      	movs	r3, #0
 800e43a:	460a      	mov	r2, r1
 800e43c:	4910      	ldr	r1, [pc, #64]	; (800e480 <xTimerCreateTimerTask+0x84>)
 800e43e:	4811      	ldr	r0, [pc, #68]	; (800e484 <xTimerCreateTimerTask+0x88>)
 800e440:	f7ff f868 	bl	800d514 <xTaskCreateStatic>
 800e444:	4603      	mov	r3, r0
 800e446:	4a10      	ldr	r2, [pc, #64]	; (800e488 <xTimerCreateTimerTask+0x8c>)
 800e448:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e44a:	4b0f      	ldr	r3, [pc, #60]	; (800e488 <xTimerCreateTimerTask+0x8c>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d001      	beq.n	800e456 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e452:	2301      	movs	r3, #1
 800e454:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d10a      	bne.n	800e472 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e460:	f383 8811 	msr	BASEPRI, r3
 800e464:	f3bf 8f6f 	isb	sy
 800e468:	f3bf 8f4f 	dsb	sy
 800e46c:	613b      	str	r3, [r7, #16]
}
 800e46e:	bf00      	nop
 800e470:	e7fe      	b.n	800e470 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e472:	697b      	ldr	r3, [r7, #20]
}
 800e474:	4618      	mov	r0, r3
 800e476:	3718      	adds	r7, #24
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	20001630 	.word	0x20001630
 800e480:	08010ba8 	.word	0x08010ba8
 800e484:	0800e5c1 	.word	0x0800e5c1
 800e488:	20001634 	.word	0x20001634

0800e48c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b08a      	sub	sp, #40	; 0x28
 800e490:	af00      	add	r7, sp, #0
 800e492:	60f8      	str	r0, [r7, #12]
 800e494:	60b9      	str	r1, [r7, #8]
 800e496:	607a      	str	r2, [r7, #4]
 800e498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e49a:	2300      	movs	r3, #0
 800e49c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d10a      	bne.n	800e4ba <xTimerGenericCommand+0x2e>
	__asm volatile
 800e4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a8:	f383 8811 	msr	BASEPRI, r3
 800e4ac:	f3bf 8f6f 	isb	sy
 800e4b0:	f3bf 8f4f 	dsb	sy
 800e4b4:	623b      	str	r3, [r7, #32]
}
 800e4b6:	bf00      	nop
 800e4b8:	e7fe      	b.n	800e4b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e4ba:	4b1a      	ldr	r3, [pc, #104]	; (800e524 <xTimerGenericCommand+0x98>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d02a      	beq.n	800e518 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	2b05      	cmp	r3, #5
 800e4d2:	dc18      	bgt.n	800e506 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e4d4:	f7ff feb2 	bl	800e23c <xTaskGetSchedulerState>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2b02      	cmp	r3, #2
 800e4dc:	d109      	bne.n	800e4f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e4de:	4b11      	ldr	r3, [pc, #68]	; (800e524 <xTimerGenericCommand+0x98>)
 800e4e0:	6818      	ldr	r0, [r3, #0]
 800e4e2:	f107 0110 	add.w	r1, r7, #16
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4ea:	f7fe fc2b 	bl	800cd44 <xQueueGenericSend>
 800e4ee:	6278      	str	r0, [r7, #36]	; 0x24
 800e4f0:	e012      	b.n	800e518 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e4f2:	4b0c      	ldr	r3, [pc, #48]	; (800e524 <xTimerGenericCommand+0x98>)
 800e4f4:	6818      	ldr	r0, [r3, #0]
 800e4f6:	f107 0110 	add.w	r1, r7, #16
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	f7fe fc21 	bl	800cd44 <xQueueGenericSend>
 800e502:	6278      	str	r0, [r7, #36]	; 0x24
 800e504:	e008      	b.n	800e518 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e506:	4b07      	ldr	r3, [pc, #28]	; (800e524 <xTimerGenericCommand+0x98>)
 800e508:	6818      	ldr	r0, [r3, #0]
 800e50a:	f107 0110 	add.w	r1, r7, #16
 800e50e:	2300      	movs	r3, #0
 800e510:	683a      	ldr	r2, [r7, #0]
 800e512:	f7fe fd15 	bl	800cf40 <xQueueGenericSendFromISR>
 800e516:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3728      	adds	r7, #40	; 0x28
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
 800e522:	bf00      	nop
 800e524:	20001630 	.word	0x20001630

0800e528 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b088      	sub	sp, #32
 800e52c:	af02      	add	r7, sp, #8
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e532:	4b22      	ldr	r3, [pc, #136]	; (800e5bc <prvProcessExpiredTimer+0x94>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	68db      	ldr	r3, [r3, #12]
 800e538:	68db      	ldr	r3, [r3, #12]
 800e53a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	3304      	adds	r3, #4
 800e540:	4618      	mov	r0, r3
 800e542:	f7fe fad1 	bl	800cae8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e54c:	f003 0304 	and.w	r3, r3, #4
 800e550:	2b00      	cmp	r3, #0
 800e552:	d022      	beq.n	800e59a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	699a      	ldr	r2, [r3, #24]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	18d1      	adds	r1, r2, r3
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	683a      	ldr	r2, [r7, #0]
 800e560:	6978      	ldr	r0, [r7, #20]
 800e562:	f000 f8d1 	bl	800e708 <prvInsertTimerInActiveList>
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d01f      	beq.n	800e5ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e56c:	2300      	movs	r3, #0
 800e56e:	9300      	str	r3, [sp, #0]
 800e570:	2300      	movs	r3, #0
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	2100      	movs	r1, #0
 800e576:	6978      	ldr	r0, [r7, #20]
 800e578:	f7ff ff88 	bl	800e48c <xTimerGenericCommand>
 800e57c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d113      	bne.n	800e5ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e588:	f383 8811 	msr	BASEPRI, r3
 800e58c:	f3bf 8f6f 	isb	sy
 800e590:	f3bf 8f4f 	dsb	sy
 800e594:	60fb      	str	r3, [r7, #12]
}
 800e596:	bf00      	nop
 800e598:	e7fe      	b.n	800e598 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5a0:	f023 0301 	bic.w	r3, r3, #1
 800e5a4:	b2da      	uxtb	r2, r3
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	6a1b      	ldr	r3, [r3, #32]
 800e5b0:	6978      	ldr	r0, [r7, #20]
 800e5b2:	4798      	blx	r3
}
 800e5b4:	bf00      	nop
 800e5b6:	3718      	adds	r7, #24
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	20001628 	.word	0x20001628

0800e5c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e5c8:	f107 0308 	add.w	r3, r7, #8
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f000 f857 	bl	800e680 <prvGetNextExpireTime>
 800e5d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	68f8      	ldr	r0, [r7, #12]
 800e5da:	f000 f803 	bl	800e5e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e5de:	f000 f8d5 	bl	800e78c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e5e2:	e7f1      	b.n	800e5c8 <prvTimerTask+0x8>

0800e5e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b084      	sub	sp, #16
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e5ee:	f7ff fa43 	bl	800da78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e5f2:	f107 0308 	add.w	r3, r7, #8
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f000 f866 	bl	800e6c8 <prvSampleTimeNow>
 800e5fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d130      	bne.n	800e666 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d10a      	bne.n	800e620 <prvProcessTimerOrBlockTask+0x3c>
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	429a      	cmp	r2, r3
 800e610:	d806      	bhi.n	800e620 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e612:	f7ff fa3f 	bl	800da94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e616:	68f9      	ldr	r1, [r7, #12]
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f7ff ff85 	bl	800e528 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e61e:	e024      	b.n	800e66a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d008      	beq.n	800e638 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e626:	4b13      	ldr	r3, [pc, #76]	; (800e674 <prvProcessTimerOrBlockTask+0x90>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d101      	bne.n	800e634 <prvProcessTimerOrBlockTask+0x50>
 800e630:	2301      	movs	r3, #1
 800e632:	e000      	b.n	800e636 <prvProcessTimerOrBlockTask+0x52>
 800e634:	2300      	movs	r3, #0
 800e636:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e638:	4b0f      	ldr	r3, [pc, #60]	; (800e678 <prvProcessTimerOrBlockTask+0x94>)
 800e63a:	6818      	ldr	r0, [r3, #0]
 800e63c:	687a      	ldr	r2, [r7, #4]
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	1ad3      	subs	r3, r2, r3
 800e642:	683a      	ldr	r2, [r7, #0]
 800e644:	4619      	mov	r1, r3
 800e646:	f7fe ff31 	bl	800d4ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e64a:	f7ff fa23 	bl	800da94 <xTaskResumeAll>
 800e64e:	4603      	mov	r3, r0
 800e650:	2b00      	cmp	r3, #0
 800e652:	d10a      	bne.n	800e66a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e654:	4b09      	ldr	r3, [pc, #36]	; (800e67c <prvProcessTimerOrBlockTask+0x98>)
 800e656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e65a:	601a      	str	r2, [r3, #0]
 800e65c:	f3bf 8f4f 	dsb	sy
 800e660:	f3bf 8f6f 	isb	sy
}
 800e664:	e001      	b.n	800e66a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e666:	f7ff fa15 	bl	800da94 <xTaskResumeAll>
}
 800e66a:	bf00      	nop
 800e66c:	3710      	adds	r7, #16
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	2000162c 	.word	0x2000162c
 800e678:	20001630 	.word	0x20001630
 800e67c:	e000ed04 	.word	0xe000ed04

0800e680 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e680:	b480      	push	{r7}
 800e682:	b085      	sub	sp, #20
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e688:	4b0e      	ldr	r3, [pc, #56]	; (800e6c4 <prvGetNextExpireTime+0x44>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d101      	bne.n	800e696 <prvGetNextExpireTime+0x16>
 800e692:	2201      	movs	r2, #1
 800e694:	e000      	b.n	800e698 <prvGetNextExpireTime+0x18>
 800e696:	2200      	movs	r2, #0
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d105      	bne.n	800e6b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e6a4:	4b07      	ldr	r3, [pc, #28]	; (800e6c4 <prvGetNextExpireTime+0x44>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	68db      	ldr	r3, [r3, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	60fb      	str	r3, [r7, #12]
 800e6ae:	e001      	b.n	800e6b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3714      	adds	r7, #20
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c0:	4770      	bx	lr
 800e6c2:	bf00      	nop
 800e6c4:	20001628 	.word	0x20001628

0800e6c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e6d0:	f7ff fa7e 	bl	800dbd0 <xTaskGetTickCount>
 800e6d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e6d6:	4b0b      	ldr	r3, [pc, #44]	; (800e704 <prvSampleTimeNow+0x3c>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	68fa      	ldr	r2, [r7, #12]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d205      	bcs.n	800e6ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e6e0:	f000 f936 	bl	800e950 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	601a      	str	r2, [r3, #0]
 800e6ea:	e002      	b.n	800e6f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e6f2:	4a04      	ldr	r2, [pc, #16]	; (800e704 <prvSampleTimeNow+0x3c>)
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3710      	adds	r7, #16
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
 800e702:	bf00      	nop
 800e704:	20001638 	.word	0x20001638

0800e708 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b086      	sub	sp, #24
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	60f8      	str	r0, [r7, #12]
 800e710:	60b9      	str	r1, [r7, #8]
 800e712:	607a      	str	r2, [r7, #4]
 800e714:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e716:	2300      	movs	r3, #0
 800e718:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	68ba      	ldr	r2, [r7, #8]
 800e71e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	68fa      	ldr	r2, [r7, #12]
 800e724:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e726:	68ba      	ldr	r2, [r7, #8]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d812      	bhi.n	800e754 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e72e:	687a      	ldr	r2, [r7, #4]
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	1ad2      	subs	r2, r2, r3
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	699b      	ldr	r3, [r3, #24]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d302      	bcc.n	800e742 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e73c:	2301      	movs	r3, #1
 800e73e:	617b      	str	r3, [r7, #20]
 800e740:	e01b      	b.n	800e77a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e742:	4b10      	ldr	r3, [pc, #64]	; (800e784 <prvInsertTimerInActiveList+0x7c>)
 800e744:	681a      	ldr	r2, [r3, #0]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	3304      	adds	r3, #4
 800e74a:	4619      	mov	r1, r3
 800e74c:	4610      	mov	r0, r2
 800e74e:	f7fe f992 	bl	800ca76 <vListInsert>
 800e752:	e012      	b.n	800e77a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	429a      	cmp	r2, r3
 800e75a:	d206      	bcs.n	800e76a <prvInsertTimerInActiveList+0x62>
 800e75c:	68ba      	ldr	r2, [r7, #8]
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	429a      	cmp	r2, r3
 800e762:	d302      	bcc.n	800e76a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e764:	2301      	movs	r3, #1
 800e766:	617b      	str	r3, [r7, #20]
 800e768:	e007      	b.n	800e77a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e76a:	4b07      	ldr	r3, [pc, #28]	; (800e788 <prvInsertTimerInActiveList+0x80>)
 800e76c:	681a      	ldr	r2, [r3, #0]
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	3304      	adds	r3, #4
 800e772:	4619      	mov	r1, r3
 800e774:	4610      	mov	r0, r2
 800e776:	f7fe f97e 	bl	800ca76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e77a:	697b      	ldr	r3, [r7, #20]
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3718      	adds	r7, #24
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}
 800e784:	2000162c 	.word	0x2000162c
 800e788:	20001628 	.word	0x20001628

0800e78c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b08e      	sub	sp, #56	; 0x38
 800e790:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e792:	e0ca      	b.n	800e92a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2b00      	cmp	r3, #0
 800e798:	da18      	bge.n	800e7cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e79a:	1d3b      	adds	r3, r7, #4
 800e79c:	3304      	adds	r3, #4
 800e79e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d10a      	bne.n	800e7bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7aa:	f383 8811 	msr	BASEPRI, r3
 800e7ae:	f3bf 8f6f 	isb	sy
 800e7b2:	f3bf 8f4f 	dsb	sy
 800e7b6:	61fb      	str	r3, [r7, #28]
}
 800e7b8:	bf00      	nop
 800e7ba:	e7fe      	b.n	800e7ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7c2:	6850      	ldr	r0, [r2, #4]
 800e7c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7c6:	6892      	ldr	r2, [r2, #8]
 800e7c8:	4611      	mov	r1, r2
 800e7ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	f2c0 80ab 	blt.w	800e92a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7da:	695b      	ldr	r3, [r3, #20]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d004      	beq.n	800e7ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e2:	3304      	adds	r3, #4
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7fe f97f 	bl	800cae8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e7ea:	463b      	mov	r3, r7
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7ff ff6b 	bl	800e6c8 <prvSampleTimeNow>
 800e7f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2b09      	cmp	r3, #9
 800e7f8:	f200 8096 	bhi.w	800e928 <prvProcessReceivedCommands+0x19c>
 800e7fc:	a201      	add	r2, pc, #4	; (adr r2, 800e804 <prvProcessReceivedCommands+0x78>)
 800e7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e802:	bf00      	nop
 800e804:	0800e82d 	.word	0x0800e82d
 800e808:	0800e82d 	.word	0x0800e82d
 800e80c:	0800e82d 	.word	0x0800e82d
 800e810:	0800e8a1 	.word	0x0800e8a1
 800e814:	0800e8b5 	.word	0x0800e8b5
 800e818:	0800e8ff 	.word	0x0800e8ff
 800e81c:	0800e82d 	.word	0x0800e82d
 800e820:	0800e82d 	.word	0x0800e82d
 800e824:	0800e8a1 	.word	0x0800e8a1
 800e828:	0800e8b5 	.word	0x0800e8b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e832:	f043 0301 	orr.w	r3, r3, #1
 800e836:	b2da      	uxtb	r2, r3
 800e838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e83e:	68ba      	ldr	r2, [r7, #8]
 800e840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e842:	699b      	ldr	r3, [r3, #24]
 800e844:	18d1      	adds	r1, r2, r3
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e84a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e84c:	f7ff ff5c 	bl	800e708 <prvInsertTimerInActiveList>
 800e850:	4603      	mov	r3, r0
 800e852:	2b00      	cmp	r3, #0
 800e854:	d069      	beq.n	800e92a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e858:	6a1b      	ldr	r3, [r3, #32]
 800e85a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e85c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e864:	f003 0304 	and.w	r3, r3, #4
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d05e      	beq.n	800e92a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e86c:	68ba      	ldr	r2, [r7, #8]
 800e86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e870:	699b      	ldr	r3, [r3, #24]
 800e872:	441a      	add	r2, r3
 800e874:	2300      	movs	r3, #0
 800e876:	9300      	str	r3, [sp, #0]
 800e878:	2300      	movs	r3, #0
 800e87a:	2100      	movs	r1, #0
 800e87c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e87e:	f7ff fe05 	bl	800e48c <xTimerGenericCommand>
 800e882:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e884:	6a3b      	ldr	r3, [r7, #32]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d14f      	bne.n	800e92a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88e:	f383 8811 	msr	BASEPRI, r3
 800e892:	f3bf 8f6f 	isb	sy
 800e896:	f3bf 8f4f 	dsb	sy
 800e89a:	61bb      	str	r3, [r7, #24]
}
 800e89c:	bf00      	nop
 800e89e:	e7fe      	b.n	800e89e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8a6:	f023 0301 	bic.w	r3, r3, #1
 800e8aa:	b2da      	uxtb	r2, r3
 800e8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e8b2:	e03a      	b.n	800e92a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8ba:	f043 0301 	orr.w	r3, r3, #1
 800e8be:	b2da      	uxtb	r2, r3
 800e8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e8c6:	68ba      	ldr	r2, [r7, #8]
 800e8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ce:	699b      	ldr	r3, [r3, #24]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d10a      	bne.n	800e8ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d8:	f383 8811 	msr	BASEPRI, r3
 800e8dc:	f3bf 8f6f 	isb	sy
 800e8e0:	f3bf 8f4f 	dsb	sy
 800e8e4:	617b      	str	r3, [r7, #20]
}
 800e8e6:	bf00      	nop
 800e8e8:	e7fe      	b.n	800e8e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ec:	699a      	ldr	r2, [r3, #24]
 800e8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f0:	18d1      	adds	r1, r2, r3
 800e8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8f8:	f7ff ff06 	bl	800e708 <prvInsertTimerInActiveList>
					break;
 800e8fc:	e015      	b.n	800e92a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e904:	f003 0302 	and.w	r3, r3, #2
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d103      	bne.n	800e914 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e90c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e90e:	f000 fbdf 	bl	800f0d0 <vPortFree>
 800e912:	e00a      	b.n	800e92a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e916:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e91a:	f023 0301 	bic.w	r3, r3, #1
 800e91e:	b2da      	uxtb	r2, r3
 800e920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e922:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e926:	e000      	b.n	800e92a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e928:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e92a:	4b08      	ldr	r3, [pc, #32]	; (800e94c <prvProcessReceivedCommands+0x1c0>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	1d39      	adds	r1, r7, #4
 800e930:	2200      	movs	r2, #0
 800e932:	4618      	mov	r0, r3
 800e934:	f7fe fba0 	bl	800d078 <xQueueReceive>
 800e938:	4603      	mov	r3, r0
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	f47f af2a 	bne.w	800e794 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e940:	bf00      	nop
 800e942:	bf00      	nop
 800e944:	3730      	adds	r7, #48	; 0x30
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	20001630 	.word	0x20001630

0800e950 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b088      	sub	sp, #32
 800e954:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e956:	e048      	b.n	800e9ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e958:	4b2d      	ldr	r3, [pc, #180]	; (800ea10 <prvSwitchTimerLists+0xc0>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	68db      	ldr	r3, [r3, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e962:	4b2b      	ldr	r3, [pc, #172]	; (800ea10 <prvSwitchTimerLists+0xc0>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	68db      	ldr	r3, [r3, #12]
 800e968:	68db      	ldr	r3, [r3, #12]
 800e96a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	3304      	adds	r3, #4
 800e970:	4618      	mov	r0, r3
 800e972:	f7fe f8b9 	bl	800cae8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	6a1b      	ldr	r3, [r3, #32]
 800e97a:	68f8      	ldr	r0, [r7, #12]
 800e97c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e984:	f003 0304 	and.w	r3, r3, #4
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d02e      	beq.n	800e9ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	699b      	ldr	r3, [r3, #24]
 800e990:	693a      	ldr	r2, [r7, #16]
 800e992:	4413      	add	r3, r2
 800e994:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e996:	68ba      	ldr	r2, [r7, #8]
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d90e      	bls.n	800e9bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	68ba      	ldr	r2, [r7, #8]
 800e9a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	68fa      	ldr	r2, [r7, #12]
 800e9a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e9aa:	4b19      	ldr	r3, [pc, #100]	; (800ea10 <prvSwitchTimerLists+0xc0>)
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	3304      	adds	r3, #4
 800e9b2:	4619      	mov	r1, r3
 800e9b4:	4610      	mov	r0, r2
 800e9b6:	f7fe f85e 	bl	800ca76 <vListInsert>
 800e9ba:	e016      	b.n	800e9ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e9bc:	2300      	movs	r3, #0
 800e9be:	9300      	str	r3, [sp, #0]
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	693a      	ldr	r2, [r7, #16]
 800e9c4:	2100      	movs	r1, #0
 800e9c6:	68f8      	ldr	r0, [r7, #12]
 800e9c8:	f7ff fd60 	bl	800e48c <xTimerGenericCommand>
 800e9cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d10a      	bne.n	800e9ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d8:	f383 8811 	msr	BASEPRI, r3
 800e9dc:	f3bf 8f6f 	isb	sy
 800e9e0:	f3bf 8f4f 	dsb	sy
 800e9e4:	603b      	str	r3, [r7, #0]
}
 800e9e6:	bf00      	nop
 800e9e8:	e7fe      	b.n	800e9e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e9ea:	4b09      	ldr	r3, [pc, #36]	; (800ea10 <prvSwitchTimerLists+0xc0>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d1b1      	bne.n	800e958 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e9f4:	4b06      	ldr	r3, [pc, #24]	; (800ea10 <prvSwitchTimerLists+0xc0>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e9fa:	4b06      	ldr	r3, [pc, #24]	; (800ea14 <prvSwitchTimerLists+0xc4>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4a04      	ldr	r2, [pc, #16]	; (800ea10 <prvSwitchTimerLists+0xc0>)
 800ea00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ea02:	4a04      	ldr	r2, [pc, #16]	; (800ea14 <prvSwitchTimerLists+0xc4>)
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	6013      	str	r3, [r2, #0]
}
 800ea08:	bf00      	nop
 800ea0a:	3718      	adds	r7, #24
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}
 800ea10:	20001628 	.word	0x20001628
 800ea14:	2000162c 	.word	0x2000162c

0800ea18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ea1e:	f000 f969 	bl	800ecf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ea22:	4b15      	ldr	r3, [pc, #84]	; (800ea78 <prvCheckForValidListAndQueue+0x60>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d120      	bne.n	800ea6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ea2a:	4814      	ldr	r0, [pc, #80]	; (800ea7c <prvCheckForValidListAndQueue+0x64>)
 800ea2c:	f7fd ffd2 	bl	800c9d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ea30:	4813      	ldr	r0, [pc, #76]	; (800ea80 <prvCheckForValidListAndQueue+0x68>)
 800ea32:	f7fd ffcf 	bl	800c9d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ea36:	4b13      	ldr	r3, [pc, #76]	; (800ea84 <prvCheckForValidListAndQueue+0x6c>)
 800ea38:	4a10      	ldr	r2, [pc, #64]	; (800ea7c <prvCheckForValidListAndQueue+0x64>)
 800ea3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ea3c:	4b12      	ldr	r3, [pc, #72]	; (800ea88 <prvCheckForValidListAndQueue+0x70>)
 800ea3e:	4a10      	ldr	r2, [pc, #64]	; (800ea80 <prvCheckForValidListAndQueue+0x68>)
 800ea40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ea42:	2300      	movs	r3, #0
 800ea44:	9300      	str	r3, [sp, #0]
 800ea46:	4b11      	ldr	r3, [pc, #68]	; (800ea8c <prvCheckForValidListAndQueue+0x74>)
 800ea48:	4a11      	ldr	r2, [pc, #68]	; (800ea90 <prvCheckForValidListAndQueue+0x78>)
 800ea4a:	2110      	movs	r1, #16
 800ea4c:	200a      	movs	r0, #10
 800ea4e:	f7fe f8dd 	bl	800cc0c <xQueueGenericCreateStatic>
 800ea52:	4603      	mov	r3, r0
 800ea54:	4a08      	ldr	r2, [pc, #32]	; (800ea78 <prvCheckForValidListAndQueue+0x60>)
 800ea56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ea58:	4b07      	ldr	r3, [pc, #28]	; (800ea78 <prvCheckForValidListAndQueue+0x60>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d005      	beq.n	800ea6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ea60:	4b05      	ldr	r3, [pc, #20]	; (800ea78 <prvCheckForValidListAndQueue+0x60>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	490b      	ldr	r1, [pc, #44]	; (800ea94 <prvCheckForValidListAndQueue+0x7c>)
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fe fcf6 	bl	800d458 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea6c:	f000 f972 	bl	800ed54 <vPortExitCritical>
}
 800ea70:	bf00      	nop
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	20001630 	.word	0x20001630
 800ea7c:	20001600 	.word	0x20001600
 800ea80:	20001614 	.word	0x20001614
 800ea84:	20001628 	.word	0x20001628
 800ea88:	2000162c 	.word	0x2000162c
 800ea8c:	200016dc 	.word	0x200016dc
 800ea90:	2000163c 	.word	0x2000163c
 800ea94:	08010bb0 	.word	0x08010bb0

0800ea98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b085      	sub	sp, #20
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	60b9      	str	r1, [r7, #8]
 800eaa2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	3b04      	subs	r3, #4
 800eaa8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	3b04      	subs	r3, #4
 800eab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	f023 0201 	bic.w	r2, r3, #1
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	3b04      	subs	r3, #4
 800eac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eac8:	4a0c      	ldr	r2, [pc, #48]	; (800eafc <pxPortInitialiseStack+0x64>)
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	3b14      	subs	r3, #20
 800ead2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ead4:	687a      	ldr	r2, [r7, #4]
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	3b04      	subs	r3, #4
 800eade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f06f 0202 	mvn.w	r2, #2
 800eae6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	3b20      	subs	r3, #32
 800eaec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eaee:	68fb      	ldr	r3, [r7, #12]
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3714      	adds	r7, #20
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr
 800eafc:	0800eb01 	.word	0x0800eb01

0800eb00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eb00:	b480      	push	{r7}
 800eb02:	b085      	sub	sp, #20
 800eb04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eb06:	2300      	movs	r3, #0
 800eb08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eb0a:	4b12      	ldr	r3, [pc, #72]	; (800eb54 <prvTaskExitError+0x54>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb12:	d00a      	beq.n	800eb2a <prvTaskExitError+0x2a>
	__asm volatile
 800eb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb18:	f383 8811 	msr	BASEPRI, r3
 800eb1c:	f3bf 8f6f 	isb	sy
 800eb20:	f3bf 8f4f 	dsb	sy
 800eb24:	60fb      	str	r3, [r7, #12]
}
 800eb26:	bf00      	nop
 800eb28:	e7fe      	b.n	800eb28 <prvTaskExitError+0x28>
	__asm volatile
 800eb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb2e:	f383 8811 	msr	BASEPRI, r3
 800eb32:	f3bf 8f6f 	isb	sy
 800eb36:	f3bf 8f4f 	dsb	sy
 800eb3a:	60bb      	str	r3, [r7, #8]
}
 800eb3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eb3e:	bf00      	nop
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d0fc      	beq.n	800eb40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eb46:	bf00      	nop
 800eb48:	bf00      	nop
 800eb4a:	3714      	adds	r7, #20
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr
 800eb54:	20000154 	.word	0x20000154
	...

0800eb60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eb60:	4b07      	ldr	r3, [pc, #28]	; (800eb80 <pxCurrentTCBConst2>)
 800eb62:	6819      	ldr	r1, [r3, #0]
 800eb64:	6808      	ldr	r0, [r1, #0]
 800eb66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb6a:	f380 8809 	msr	PSP, r0
 800eb6e:	f3bf 8f6f 	isb	sy
 800eb72:	f04f 0000 	mov.w	r0, #0
 800eb76:	f380 8811 	msr	BASEPRI, r0
 800eb7a:	4770      	bx	lr
 800eb7c:	f3af 8000 	nop.w

0800eb80 <pxCurrentTCBConst2>:
 800eb80:	20001100 	.word	0x20001100
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eb84:	bf00      	nop
 800eb86:	bf00      	nop

0800eb88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eb88:	4808      	ldr	r0, [pc, #32]	; (800ebac <prvPortStartFirstTask+0x24>)
 800eb8a:	6800      	ldr	r0, [r0, #0]
 800eb8c:	6800      	ldr	r0, [r0, #0]
 800eb8e:	f380 8808 	msr	MSP, r0
 800eb92:	f04f 0000 	mov.w	r0, #0
 800eb96:	f380 8814 	msr	CONTROL, r0
 800eb9a:	b662      	cpsie	i
 800eb9c:	b661      	cpsie	f
 800eb9e:	f3bf 8f4f 	dsb	sy
 800eba2:	f3bf 8f6f 	isb	sy
 800eba6:	df00      	svc	0
 800eba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ebaa:	bf00      	nop
 800ebac:	e000ed08 	.word	0xe000ed08

0800ebb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b086      	sub	sp, #24
 800ebb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ebb6:	4b46      	ldr	r3, [pc, #280]	; (800ecd0 <xPortStartScheduler+0x120>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	4a46      	ldr	r2, [pc, #280]	; (800ecd4 <xPortStartScheduler+0x124>)
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	d10a      	bne.n	800ebd6 <xPortStartScheduler+0x26>
	__asm volatile
 800ebc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc4:	f383 8811 	msr	BASEPRI, r3
 800ebc8:	f3bf 8f6f 	isb	sy
 800ebcc:	f3bf 8f4f 	dsb	sy
 800ebd0:	613b      	str	r3, [r7, #16]
}
 800ebd2:	bf00      	nop
 800ebd4:	e7fe      	b.n	800ebd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ebd6:	4b3e      	ldr	r3, [pc, #248]	; (800ecd0 <xPortStartScheduler+0x120>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	4a3f      	ldr	r2, [pc, #252]	; (800ecd8 <xPortStartScheduler+0x128>)
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d10a      	bne.n	800ebf6 <xPortStartScheduler+0x46>
	__asm volatile
 800ebe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe4:	f383 8811 	msr	BASEPRI, r3
 800ebe8:	f3bf 8f6f 	isb	sy
 800ebec:	f3bf 8f4f 	dsb	sy
 800ebf0:	60fb      	str	r3, [r7, #12]
}
 800ebf2:	bf00      	nop
 800ebf4:	e7fe      	b.n	800ebf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ebf6:	4b39      	ldr	r3, [pc, #228]	; (800ecdc <xPortStartScheduler+0x12c>)
 800ebf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	781b      	ldrb	r3, [r3, #0]
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	22ff      	movs	r2, #255	; 0xff
 800ec06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ec10:	78fb      	ldrb	r3, [r7, #3]
 800ec12:	b2db      	uxtb	r3, r3
 800ec14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ec18:	b2da      	uxtb	r2, r3
 800ec1a:	4b31      	ldr	r3, [pc, #196]	; (800ece0 <xPortStartScheduler+0x130>)
 800ec1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ec1e:	4b31      	ldr	r3, [pc, #196]	; (800ece4 <xPortStartScheduler+0x134>)
 800ec20:	2207      	movs	r2, #7
 800ec22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec24:	e009      	b.n	800ec3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ec26:	4b2f      	ldr	r3, [pc, #188]	; (800ece4 <xPortStartScheduler+0x134>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	3b01      	subs	r3, #1
 800ec2c:	4a2d      	ldr	r2, [pc, #180]	; (800ece4 <xPortStartScheduler+0x134>)
 800ec2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ec30:	78fb      	ldrb	r3, [r7, #3]
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	005b      	lsls	r3, r3, #1
 800ec36:	b2db      	uxtb	r3, r3
 800ec38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec3a:	78fb      	ldrb	r3, [r7, #3]
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec42:	2b80      	cmp	r3, #128	; 0x80
 800ec44:	d0ef      	beq.n	800ec26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ec46:	4b27      	ldr	r3, [pc, #156]	; (800ece4 <xPortStartScheduler+0x134>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f1c3 0307 	rsb	r3, r3, #7
 800ec4e:	2b04      	cmp	r3, #4
 800ec50:	d00a      	beq.n	800ec68 <xPortStartScheduler+0xb8>
	__asm volatile
 800ec52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec56:	f383 8811 	msr	BASEPRI, r3
 800ec5a:	f3bf 8f6f 	isb	sy
 800ec5e:	f3bf 8f4f 	dsb	sy
 800ec62:	60bb      	str	r3, [r7, #8]
}
 800ec64:	bf00      	nop
 800ec66:	e7fe      	b.n	800ec66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ec68:	4b1e      	ldr	r3, [pc, #120]	; (800ece4 <xPortStartScheduler+0x134>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	021b      	lsls	r3, r3, #8
 800ec6e:	4a1d      	ldr	r2, [pc, #116]	; (800ece4 <xPortStartScheduler+0x134>)
 800ec70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ec72:	4b1c      	ldr	r3, [pc, #112]	; (800ece4 <xPortStartScheduler+0x134>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ec7a:	4a1a      	ldr	r2, [pc, #104]	; (800ece4 <xPortStartScheduler+0x134>)
 800ec7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	b2da      	uxtb	r2, r3
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ec86:	4b18      	ldr	r3, [pc, #96]	; (800ece8 <xPortStartScheduler+0x138>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4a17      	ldr	r2, [pc, #92]	; (800ece8 <xPortStartScheduler+0x138>)
 800ec8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ec90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ec92:	4b15      	ldr	r3, [pc, #84]	; (800ece8 <xPortStartScheduler+0x138>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	4a14      	ldr	r2, [pc, #80]	; (800ece8 <xPortStartScheduler+0x138>)
 800ec98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ec9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ec9e:	f000 f8dd 	bl	800ee5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eca2:	4b12      	ldr	r3, [pc, #72]	; (800ecec <xPortStartScheduler+0x13c>)
 800eca4:	2200      	movs	r2, #0
 800eca6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eca8:	f000 f8fc 	bl	800eea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ecac:	4b10      	ldr	r3, [pc, #64]	; (800ecf0 <xPortStartScheduler+0x140>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	4a0f      	ldr	r2, [pc, #60]	; (800ecf0 <xPortStartScheduler+0x140>)
 800ecb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ecb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ecb8:	f7ff ff66 	bl	800eb88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ecbc:	f7ff f852 	bl	800dd64 <vTaskSwitchContext>
	prvTaskExitError();
 800ecc0:	f7ff ff1e 	bl	800eb00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ecc4:	2300      	movs	r3, #0
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3718      	adds	r7, #24
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	e000ed00 	.word	0xe000ed00
 800ecd4:	410fc271 	.word	0x410fc271
 800ecd8:	410fc270 	.word	0x410fc270
 800ecdc:	e000e400 	.word	0xe000e400
 800ece0:	2000172c 	.word	0x2000172c
 800ece4:	20001730 	.word	0x20001730
 800ece8:	e000ed20 	.word	0xe000ed20
 800ecec:	20000154 	.word	0x20000154
 800ecf0:	e000ef34 	.word	0xe000ef34

0800ecf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
	__asm volatile
 800ecfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecfe:	f383 8811 	msr	BASEPRI, r3
 800ed02:	f3bf 8f6f 	isb	sy
 800ed06:	f3bf 8f4f 	dsb	sy
 800ed0a:	607b      	str	r3, [r7, #4]
}
 800ed0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ed0e:	4b0f      	ldr	r3, [pc, #60]	; (800ed4c <vPortEnterCritical+0x58>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	3301      	adds	r3, #1
 800ed14:	4a0d      	ldr	r2, [pc, #52]	; (800ed4c <vPortEnterCritical+0x58>)
 800ed16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ed18:	4b0c      	ldr	r3, [pc, #48]	; (800ed4c <vPortEnterCritical+0x58>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	d10f      	bne.n	800ed40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ed20:	4b0b      	ldr	r3, [pc, #44]	; (800ed50 <vPortEnterCritical+0x5c>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d00a      	beq.n	800ed40 <vPortEnterCritical+0x4c>
	__asm volatile
 800ed2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed2e:	f383 8811 	msr	BASEPRI, r3
 800ed32:	f3bf 8f6f 	isb	sy
 800ed36:	f3bf 8f4f 	dsb	sy
 800ed3a:	603b      	str	r3, [r7, #0]
}
 800ed3c:	bf00      	nop
 800ed3e:	e7fe      	b.n	800ed3e <vPortEnterCritical+0x4a>
	}
}
 800ed40:	bf00      	nop
 800ed42:	370c      	adds	r7, #12
 800ed44:	46bd      	mov	sp, r7
 800ed46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4a:	4770      	bx	lr
 800ed4c:	20000154 	.word	0x20000154
 800ed50:	e000ed04 	.word	0xe000ed04

0800ed54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ed54:	b480      	push	{r7}
 800ed56:	b083      	sub	sp, #12
 800ed58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ed5a:	4b12      	ldr	r3, [pc, #72]	; (800eda4 <vPortExitCritical+0x50>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d10a      	bne.n	800ed78 <vPortExitCritical+0x24>
	__asm volatile
 800ed62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed66:	f383 8811 	msr	BASEPRI, r3
 800ed6a:	f3bf 8f6f 	isb	sy
 800ed6e:	f3bf 8f4f 	dsb	sy
 800ed72:	607b      	str	r3, [r7, #4]
}
 800ed74:	bf00      	nop
 800ed76:	e7fe      	b.n	800ed76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ed78:	4b0a      	ldr	r3, [pc, #40]	; (800eda4 <vPortExitCritical+0x50>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	3b01      	subs	r3, #1
 800ed7e:	4a09      	ldr	r2, [pc, #36]	; (800eda4 <vPortExitCritical+0x50>)
 800ed80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ed82:	4b08      	ldr	r3, [pc, #32]	; (800eda4 <vPortExitCritical+0x50>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d105      	bne.n	800ed96 <vPortExitCritical+0x42>
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	f383 8811 	msr	BASEPRI, r3
}
 800ed94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ed96:	bf00      	nop
 800ed98:	370c      	adds	r7, #12
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda0:	4770      	bx	lr
 800eda2:	bf00      	nop
 800eda4:	20000154 	.word	0x20000154
	...

0800edb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800edb0:	f3ef 8009 	mrs	r0, PSP
 800edb4:	f3bf 8f6f 	isb	sy
 800edb8:	4b15      	ldr	r3, [pc, #84]	; (800ee10 <pxCurrentTCBConst>)
 800edba:	681a      	ldr	r2, [r3, #0]
 800edbc:	f01e 0f10 	tst.w	lr, #16
 800edc0:	bf08      	it	eq
 800edc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800edc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edca:	6010      	str	r0, [r2, #0]
 800edcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800edd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800edd4:	f380 8811 	msr	BASEPRI, r0
 800edd8:	f3bf 8f4f 	dsb	sy
 800eddc:	f3bf 8f6f 	isb	sy
 800ede0:	f7fe ffc0 	bl	800dd64 <vTaskSwitchContext>
 800ede4:	f04f 0000 	mov.w	r0, #0
 800ede8:	f380 8811 	msr	BASEPRI, r0
 800edec:	bc09      	pop	{r0, r3}
 800edee:	6819      	ldr	r1, [r3, #0]
 800edf0:	6808      	ldr	r0, [r1, #0]
 800edf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf6:	f01e 0f10 	tst.w	lr, #16
 800edfa:	bf08      	it	eq
 800edfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ee00:	f380 8809 	msr	PSP, r0
 800ee04:	f3bf 8f6f 	isb	sy
 800ee08:	4770      	bx	lr
 800ee0a:	bf00      	nop
 800ee0c:	f3af 8000 	nop.w

0800ee10 <pxCurrentTCBConst>:
 800ee10:	20001100 	.word	0x20001100
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ee14:	bf00      	nop
 800ee16:	bf00      	nop

0800ee18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b082      	sub	sp, #8
 800ee1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ee1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee22:	f383 8811 	msr	BASEPRI, r3
 800ee26:	f3bf 8f6f 	isb	sy
 800ee2a:	f3bf 8f4f 	dsb	sy
 800ee2e:	607b      	str	r3, [r7, #4]
}
 800ee30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ee32:	f7fe fedd 	bl	800dbf0 <xTaskIncrementTick>
 800ee36:	4603      	mov	r3, r0
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d003      	beq.n	800ee44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ee3c:	4b06      	ldr	r3, [pc, #24]	; (800ee58 <xPortSysTickHandler+0x40>)
 800ee3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee42:	601a      	str	r2, [r3, #0]
 800ee44:	2300      	movs	r3, #0
 800ee46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	f383 8811 	msr	BASEPRI, r3
}
 800ee4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ee50:	bf00      	nop
 800ee52:	3708      	adds	r7, #8
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}
 800ee58:	e000ed04 	.word	0xe000ed04

0800ee5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ee60:	4b0b      	ldr	r3, [pc, #44]	; (800ee90 <vPortSetupTimerInterrupt+0x34>)
 800ee62:	2200      	movs	r2, #0
 800ee64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ee66:	4b0b      	ldr	r3, [pc, #44]	; (800ee94 <vPortSetupTimerInterrupt+0x38>)
 800ee68:	2200      	movs	r2, #0
 800ee6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ee6c:	4b0a      	ldr	r3, [pc, #40]	; (800ee98 <vPortSetupTimerInterrupt+0x3c>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4a0a      	ldr	r2, [pc, #40]	; (800ee9c <vPortSetupTimerInterrupt+0x40>)
 800ee72:	fba2 2303 	umull	r2, r3, r2, r3
 800ee76:	099b      	lsrs	r3, r3, #6
 800ee78:	4a09      	ldr	r2, [pc, #36]	; (800eea0 <vPortSetupTimerInterrupt+0x44>)
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ee7e:	4b04      	ldr	r3, [pc, #16]	; (800ee90 <vPortSetupTimerInterrupt+0x34>)
 800ee80:	2207      	movs	r2, #7
 800ee82:	601a      	str	r2, [r3, #0]
}
 800ee84:	bf00      	nop
 800ee86:	46bd      	mov	sp, r7
 800ee88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8c:	4770      	bx	lr
 800ee8e:	bf00      	nop
 800ee90:	e000e010 	.word	0xe000e010
 800ee94:	e000e018 	.word	0xe000e018
 800ee98:	20000148 	.word	0x20000148
 800ee9c:	10624dd3 	.word	0x10624dd3
 800eea0:	e000e014 	.word	0xe000e014

0800eea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eeb4 <vPortEnableVFP+0x10>
 800eea8:	6801      	ldr	r1, [r0, #0]
 800eeaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eeae:	6001      	str	r1, [r0, #0]
 800eeb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eeb2:	bf00      	nop
 800eeb4:	e000ed88 	.word	0xe000ed88

0800eeb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eeb8:	b480      	push	{r7}
 800eeba:	b085      	sub	sp, #20
 800eebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eebe:	f3ef 8305 	mrs	r3, IPSR
 800eec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2b0f      	cmp	r3, #15
 800eec8:	d914      	bls.n	800eef4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eeca:	4a17      	ldr	r2, [pc, #92]	; (800ef28 <vPortValidateInterruptPriority+0x70>)
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	4413      	add	r3, r2
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eed4:	4b15      	ldr	r3, [pc, #84]	; (800ef2c <vPortValidateInterruptPriority+0x74>)
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	7afa      	ldrb	r2, [r7, #11]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d20a      	bcs.n	800eef4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800eede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee2:	f383 8811 	msr	BASEPRI, r3
 800eee6:	f3bf 8f6f 	isb	sy
 800eeea:	f3bf 8f4f 	dsb	sy
 800eeee:	607b      	str	r3, [r7, #4]
}
 800eef0:	bf00      	nop
 800eef2:	e7fe      	b.n	800eef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eef4:	4b0e      	ldr	r3, [pc, #56]	; (800ef30 <vPortValidateInterruptPriority+0x78>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eefc:	4b0d      	ldr	r3, [pc, #52]	; (800ef34 <vPortValidateInterruptPriority+0x7c>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d90a      	bls.n	800ef1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ef04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef08:	f383 8811 	msr	BASEPRI, r3
 800ef0c:	f3bf 8f6f 	isb	sy
 800ef10:	f3bf 8f4f 	dsb	sy
 800ef14:	603b      	str	r3, [r7, #0]
}
 800ef16:	bf00      	nop
 800ef18:	e7fe      	b.n	800ef18 <vPortValidateInterruptPriority+0x60>
	}
 800ef1a:	bf00      	nop
 800ef1c:	3714      	adds	r7, #20
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef24:	4770      	bx	lr
 800ef26:	bf00      	nop
 800ef28:	e000e3f0 	.word	0xe000e3f0
 800ef2c:	2000172c 	.word	0x2000172c
 800ef30:	e000ed0c 	.word	0xe000ed0c
 800ef34:	20001730 	.word	0x20001730

0800ef38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b08a      	sub	sp, #40	; 0x28
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ef40:	2300      	movs	r3, #0
 800ef42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ef44:	f7fe fd98 	bl	800da78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ef48:	4b5b      	ldr	r3, [pc, #364]	; (800f0b8 <pvPortMalloc+0x180>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d101      	bne.n	800ef54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ef50:	f000 f920 	bl	800f194 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ef54:	4b59      	ldr	r3, [pc, #356]	; (800f0bc <pvPortMalloc+0x184>)
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	4013      	ands	r3, r2
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	f040 8093 	bne.w	800f088 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d01d      	beq.n	800efa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ef68:	2208      	movs	r2, #8
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	4413      	add	r3, r2
 800ef6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f003 0307 	and.w	r3, r3, #7
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d014      	beq.n	800efa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f023 0307 	bic.w	r3, r3, #7
 800ef80:	3308      	adds	r3, #8
 800ef82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f003 0307 	and.w	r3, r3, #7
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d00a      	beq.n	800efa4 <pvPortMalloc+0x6c>
	__asm volatile
 800ef8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef92:	f383 8811 	msr	BASEPRI, r3
 800ef96:	f3bf 8f6f 	isb	sy
 800ef9a:	f3bf 8f4f 	dsb	sy
 800ef9e:	617b      	str	r3, [r7, #20]
}
 800efa0:	bf00      	nop
 800efa2:	e7fe      	b.n	800efa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d06e      	beq.n	800f088 <pvPortMalloc+0x150>
 800efaa:	4b45      	ldr	r3, [pc, #276]	; (800f0c0 <pvPortMalloc+0x188>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	687a      	ldr	r2, [r7, #4]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d869      	bhi.n	800f088 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800efb4:	4b43      	ldr	r3, [pc, #268]	; (800f0c4 <pvPortMalloc+0x18c>)
 800efb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800efb8:	4b42      	ldr	r3, [pc, #264]	; (800f0c4 <pvPortMalloc+0x18c>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800efbe:	e004      	b.n	800efca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800efc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800efc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800efca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	687a      	ldr	r2, [r7, #4]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d903      	bls.n	800efdc <pvPortMalloc+0xa4>
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d1f1      	bne.n	800efc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800efdc:	4b36      	ldr	r3, [pc, #216]	; (800f0b8 <pvPortMalloc+0x180>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d050      	beq.n	800f088 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800efe6:	6a3b      	ldr	r3, [r7, #32]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2208      	movs	r2, #8
 800efec:	4413      	add	r3, r2
 800efee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff2:	681a      	ldr	r2, [r3, #0]
 800eff4:	6a3b      	ldr	r3, [r7, #32]
 800eff6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effa:	685a      	ldr	r2, [r3, #4]
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	1ad2      	subs	r2, r2, r3
 800f000:	2308      	movs	r3, #8
 800f002:	005b      	lsls	r3, r3, #1
 800f004:	429a      	cmp	r2, r3
 800f006:	d91f      	bls.n	800f048 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	4413      	add	r3, r2
 800f00e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f010:	69bb      	ldr	r3, [r7, #24]
 800f012:	f003 0307 	and.w	r3, r3, #7
 800f016:	2b00      	cmp	r3, #0
 800f018:	d00a      	beq.n	800f030 <pvPortMalloc+0xf8>
	__asm volatile
 800f01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f01e:	f383 8811 	msr	BASEPRI, r3
 800f022:	f3bf 8f6f 	isb	sy
 800f026:	f3bf 8f4f 	dsb	sy
 800f02a:	613b      	str	r3, [r7, #16]
}
 800f02c:	bf00      	nop
 800f02e:	e7fe      	b.n	800f02e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f032:	685a      	ldr	r2, [r3, #4]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	1ad2      	subs	r2, r2, r3
 800f038:	69bb      	ldr	r3, [r7, #24]
 800f03a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03e:	687a      	ldr	r2, [r7, #4]
 800f040:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f042:	69b8      	ldr	r0, [r7, #24]
 800f044:	f000 f908 	bl	800f258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f048:	4b1d      	ldr	r3, [pc, #116]	; (800f0c0 <pvPortMalloc+0x188>)
 800f04a:	681a      	ldr	r2, [r3, #0]
 800f04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	1ad3      	subs	r3, r2, r3
 800f052:	4a1b      	ldr	r2, [pc, #108]	; (800f0c0 <pvPortMalloc+0x188>)
 800f054:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f056:	4b1a      	ldr	r3, [pc, #104]	; (800f0c0 <pvPortMalloc+0x188>)
 800f058:	681a      	ldr	r2, [r3, #0]
 800f05a:	4b1b      	ldr	r3, [pc, #108]	; (800f0c8 <pvPortMalloc+0x190>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	429a      	cmp	r2, r3
 800f060:	d203      	bcs.n	800f06a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f062:	4b17      	ldr	r3, [pc, #92]	; (800f0c0 <pvPortMalloc+0x188>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	4a18      	ldr	r2, [pc, #96]	; (800f0c8 <pvPortMalloc+0x190>)
 800f068:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06c:	685a      	ldr	r2, [r3, #4]
 800f06e:	4b13      	ldr	r3, [pc, #76]	; (800f0bc <pvPortMalloc+0x184>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	431a      	orrs	r2, r3
 800f074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f076:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07a:	2200      	movs	r2, #0
 800f07c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f07e:	4b13      	ldr	r3, [pc, #76]	; (800f0cc <pvPortMalloc+0x194>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	3301      	adds	r3, #1
 800f084:	4a11      	ldr	r2, [pc, #68]	; (800f0cc <pvPortMalloc+0x194>)
 800f086:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f088:	f7fe fd04 	bl	800da94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f08c:	69fb      	ldr	r3, [r7, #28]
 800f08e:	f003 0307 	and.w	r3, r3, #7
 800f092:	2b00      	cmp	r3, #0
 800f094:	d00a      	beq.n	800f0ac <pvPortMalloc+0x174>
	__asm volatile
 800f096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f09a:	f383 8811 	msr	BASEPRI, r3
 800f09e:	f3bf 8f6f 	isb	sy
 800f0a2:	f3bf 8f4f 	dsb	sy
 800f0a6:	60fb      	str	r3, [r7, #12]
}
 800f0a8:	bf00      	nop
 800f0aa:	e7fe      	b.n	800f0aa <pvPortMalloc+0x172>
	return pvReturn;
 800f0ac:	69fb      	ldr	r3, [r7, #28]
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3728      	adds	r7, #40	; 0x28
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	2000533c 	.word	0x2000533c
 800f0bc:	20005350 	.word	0x20005350
 800f0c0:	20005340 	.word	0x20005340
 800f0c4:	20005334 	.word	0x20005334
 800f0c8:	20005344 	.word	0x20005344
 800f0cc:	20005348 	.word	0x20005348

0800f0d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b086      	sub	sp, #24
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d04d      	beq.n	800f17e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f0e2:	2308      	movs	r3, #8
 800f0e4:	425b      	negs	r3, r3
 800f0e6:	697a      	ldr	r2, [r7, #20]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	685a      	ldr	r2, [r3, #4]
 800f0f4:	4b24      	ldr	r3, [pc, #144]	; (800f188 <vPortFree+0xb8>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	4013      	ands	r3, r2
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d10a      	bne.n	800f114 <vPortFree+0x44>
	__asm volatile
 800f0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f102:	f383 8811 	msr	BASEPRI, r3
 800f106:	f3bf 8f6f 	isb	sy
 800f10a:	f3bf 8f4f 	dsb	sy
 800f10e:	60fb      	str	r3, [r7, #12]
}
 800f110:	bf00      	nop
 800f112:	e7fe      	b.n	800f112 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d00a      	beq.n	800f132 <vPortFree+0x62>
	__asm volatile
 800f11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f120:	f383 8811 	msr	BASEPRI, r3
 800f124:	f3bf 8f6f 	isb	sy
 800f128:	f3bf 8f4f 	dsb	sy
 800f12c:	60bb      	str	r3, [r7, #8]
}
 800f12e:	bf00      	nop
 800f130:	e7fe      	b.n	800f130 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	685a      	ldr	r2, [r3, #4]
 800f136:	4b14      	ldr	r3, [pc, #80]	; (800f188 <vPortFree+0xb8>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4013      	ands	r3, r2
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d01e      	beq.n	800f17e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d11a      	bne.n	800f17e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	685a      	ldr	r2, [r3, #4]
 800f14c:	4b0e      	ldr	r3, [pc, #56]	; (800f188 <vPortFree+0xb8>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	43db      	mvns	r3, r3
 800f152:	401a      	ands	r2, r3
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f158:	f7fe fc8e 	bl	800da78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	685a      	ldr	r2, [r3, #4]
 800f160:	4b0a      	ldr	r3, [pc, #40]	; (800f18c <vPortFree+0xbc>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	4413      	add	r3, r2
 800f166:	4a09      	ldr	r2, [pc, #36]	; (800f18c <vPortFree+0xbc>)
 800f168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f16a:	6938      	ldr	r0, [r7, #16]
 800f16c:	f000 f874 	bl	800f258 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f170:	4b07      	ldr	r3, [pc, #28]	; (800f190 <vPortFree+0xc0>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	3301      	adds	r3, #1
 800f176:	4a06      	ldr	r2, [pc, #24]	; (800f190 <vPortFree+0xc0>)
 800f178:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f17a:	f7fe fc8b 	bl	800da94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f17e:	bf00      	nop
 800f180:	3718      	adds	r7, #24
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}
 800f186:	bf00      	nop
 800f188:	20005350 	.word	0x20005350
 800f18c:	20005340 	.word	0x20005340
 800f190:	2000534c 	.word	0x2000534c

0800f194 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f194:	b480      	push	{r7}
 800f196:	b085      	sub	sp, #20
 800f198:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f19a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f19e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f1a0:	4b27      	ldr	r3, [pc, #156]	; (800f240 <prvHeapInit+0xac>)
 800f1a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f003 0307 	and.w	r3, r3, #7
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d00c      	beq.n	800f1c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	3307      	adds	r3, #7
 800f1b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	f023 0307 	bic.w	r3, r3, #7
 800f1ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f1bc:	68ba      	ldr	r2, [r7, #8]
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	1ad3      	subs	r3, r2, r3
 800f1c2:	4a1f      	ldr	r2, [pc, #124]	; (800f240 <prvHeapInit+0xac>)
 800f1c4:	4413      	add	r3, r2
 800f1c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f1cc:	4a1d      	ldr	r2, [pc, #116]	; (800f244 <prvHeapInit+0xb0>)
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f1d2:	4b1c      	ldr	r3, [pc, #112]	; (800f244 <prvHeapInit+0xb0>)
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	68ba      	ldr	r2, [r7, #8]
 800f1dc:	4413      	add	r3, r2
 800f1de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f1e0:	2208      	movs	r2, #8
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	1a9b      	subs	r3, r3, r2
 800f1e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f023 0307 	bic.w	r3, r3, #7
 800f1ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	4a15      	ldr	r2, [pc, #84]	; (800f248 <prvHeapInit+0xb4>)
 800f1f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f1f6:	4b14      	ldr	r3, [pc, #80]	; (800f248 <prvHeapInit+0xb4>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f1fe:	4b12      	ldr	r3, [pc, #72]	; (800f248 <prvHeapInit+0xb4>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	2200      	movs	r2, #0
 800f204:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	68fa      	ldr	r2, [r7, #12]
 800f20e:	1ad2      	subs	r2, r2, r3
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f214:	4b0c      	ldr	r3, [pc, #48]	; (800f248 <prvHeapInit+0xb4>)
 800f216:	681a      	ldr	r2, [r3, #0]
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	4a0a      	ldr	r2, [pc, #40]	; (800f24c <prvHeapInit+0xb8>)
 800f222:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	4a09      	ldr	r2, [pc, #36]	; (800f250 <prvHeapInit+0xbc>)
 800f22a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f22c:	4b09      	ldr	r3, [pc, #36]	; (800f254 <prvHeapInit+0xc0>)
 800f22e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f232:	601a      	str	r2, [r3, #0]
}
 800f234:	bf00      	nop
 800f236:	3714      	adds	r7, #20
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr
 800f240:	20001734 	.word	0x20001734
 800f244:	20005334 	.word	0x20005334
 800f248:	2000533c 	.word	0x2000533c
 800f24c:	20005344 	.word	0x20005344
 800f250:	20005340 	.word	0x20005340
 800f254:	20005350 	.word	0x20005350

0800f258 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f258:	b480      	push	{r7}
 800f25a:	b085      	sub	sp, #20
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f260:	4b28      	ldr	r3, [pc, #160]	; (800f304 <prvInsertBlockIntoFreeList+0xac>)
 800f262:	60fb      	str	r3, [r7, #12]
 800f264:	e002      	b.n	800f26c <prvInsertBlockIntoFreeList+0x14>
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	60fb      	str	r3, [r7, #12]
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	687a      	ldr	r2, [r7, #4]
 800f272:	429a      	cmp	r2, r3
 800f274:	d8f7      	bhi.n	800f266 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	68ba      	ldr	r2, [r7, #8]
 800f280:	4413      	add	r3, r2
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	429a      	cmp	r2, r3
 800f286:	d108      	bne.n	800f29a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	685a      	ldr	r2, [r3, #4]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	441a      	add	r2, r3
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	68ba      	ldr	r2, [r7, #8]
 800f2a4:	441a      	add	r2, r3
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d118      	bne.n	800f2e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681a      	ldr	r2, [r3, #0]
 800f2b2:	4b15      	ldr	r3, [pc, #84]	; (800f308 <prvInsertBlockIntoFreeList+0xb0>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d00d      	beq.n	800f2d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	685a      	ldr	r2, [r3, #4]
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	441a      	add	r2, r3
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	681a      	ldr	r2, [r3, #0]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	601a      	str	r2, [r3, #0]
 800f2d4:	e008      	b.n	800f2e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f2d6:	4b0c      	ldr	r3, [pc, #48]	; (800f308 <prvInsertBlockIntoFreeList+0xb0>)
 800f2d8:	681a      	ldr	r2, [r3, #0]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	601a      	str	r2, [r3, #0]
 800f2de:	e003      	b.n	800f2e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	681a      	ldr	r2, [r3, #0]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f2e8:	68fa      	ldr	r2, [r7, #12]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d002      	beq.n	800f2f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	687a      	ldr	r2, [r7, #4]
 800f2f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f2f6:	bf00      	nop
 800f2f8:	3714      	adds	r7, #20
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr
 800f302:	bf00      	nop
 800f304:	20005334 	.word	0x20005334
 800f308:	2000533c 	.word	0x2000533c

0800f30c <atoi>:
 800f30c:	220a      	movs	r2, #10
 800f30e:	2100      	movs	r1, #0
 800f310:	f000 b882 	b.w	800f418 <strtol>

0800f314 <_strtol_l.constprop.0>:
 800f314:	2b01      	cmp	r3, #1
 800f316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f31a:	d001      	beq.n	800f320 <_strtol_l.constprop.0+0xc>
 800f31c:	2b24      	cmp	r3, #36	; 0x24
 800f31e:	d906      	bls.n	800f32e <_strtol_l.constprop.0+0x1a>
 800f320:	f000 f8e0 	bl	800f4e4 <__errno>
 800f324:	2316      	movs	r3, #22
 800f326:	6003      	str	r3, [r0, #0]
 800f328:	2000      	movs	r0, #0
 800f32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f32e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f414 <_strtol_l.constprop.0+0x100>
 800f332:	460d      	mov	r5, r1
 800f334:	462e      	mov	r6, r5
 800f336:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f33a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800f33e:	f017 0708 	ands.w	r7, r7, #8
 800f342:	d1f7      	bne.n	800f334 <_strtol_l.constprop.0+0x20>
 800f344:	2c2d      	cmp	r4, #45	; 0x2d
 800f346:	d132      	bne.n	800f3ae <_strtol_l.constprop.0+0x9a>
 800f348:	782c      	ldrb	r4, [r5, #0]
 800f34a:	2701      	movs	r7, #1
 800f34c:	1cb5      	adds	r5, r6, #2
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d05b      	beq.n	800f40a <_strtol_l.constprop.0+0xf6>
 800f352:	2b10      	cmp	r3, #16
 800f354:	d109      	bne.n	800f36a <_strtol_l.constprop.0+0x56>
 800f356:	2c30      	cmp	r4, #48	; 0x30
 800f358:	d107      	bne.n	800f36a <_strtol_l.constprop.0+0x56>
 800f35a:	782c      	ldrb	r4, [r5, #0]
 800f35c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f360:	2c58      	cmp	r4, #88	; 0x58
 800f362:	d14d      	bne.n	800f400 <_strtol_l.constprop.0+0xec>
 800f364:	786c      	ldrb	r4, [r5, #1]
 800f366:	2310      	movs	r3, #16
 800f368:	3502      	adds	r5, #2
 800f36a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f36e:	f108 38ff 	add.w	r8, r8, #4294967295
 800f372:	f04f 0e00 	mov.w	lr, #0
 800f376:	fbb8 f9f3 	udiv	r9, r8, r3
 800f37a:	4676      	mov	r6, lr
 800f37c:	fb03 8a19 	mls	sl, r3, r9, r8
 800f380:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f384:	f1bc 0f09 	cmp.w	ip, #9
 800f388:	d816      	bhi.n	800f3b8 <_strtol_l.constprop.0+0xa4>
 800f38a:	4664      	mov	r4, ip
 800f38c:	42a3      	cmp	r3, r4
 800f38e:	dd24      	ble.n	800f3da <_strtol_l.constprop.0+0xc6>
 800f390:	f1be 3fff 	cmp.w	lr, #4294967295
 800f394:	d008      	beq.n	800f3a8 <_strtol_l.constprop.0+0x94>
 800f396:	45b1      	cmp	r9, r6
 800f398:	d31c      	bcc.n	800f3d4 <_strtol_l.constprop.0+0xc0>
 800f39a:	d101      	bne.n	800f3a0 <_strtol_l.constprop.0+0x8c>
 800f39c:	45a2      	cmp	sl, r4
 800f39e:	db19      	blt.n	800f3d4 <_strtol_l.constprop.0+0xc0>
 800f3a0:	fb06 4603 	mla	r6, r6, r3, r4
 800f3a4:	f04f 0e01 	mov.w	lr, #1
 800f3a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f3ac:	e7e8      	b.n	800f380 <_strtol_l.constprop.0+0x6c>
 800f3ae:	2c2b      	cmp	r4, #43	; 0x2b
 800f3b0:	bf04      	itt	eq
 800f3b2:	782c      	ldrbeq	r4, [r5, #0]
 800f3b4:	1cb5      	addeq	r5, r6, #2
 800f3b6:	e7ca      	b.n	800f34e <_strtol_l.constprop.0+0x3a>
 800f3b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f3bc:	f1bc 0f19 	cmp.w	ip, #25
 800f3c0:	d801      	bhi.n	800f3c6 <_strtol_l.constprop.0+0xb2>
 800f3c2:	3c37      	subs	r4, #55	; 0x37
 800f3c4:	e7e2      	b.n	800f38c <_strtol_l.constprop.0+0x78>
 800f3c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f3ca:	f1bc 0f19 	cmp.w	ip, #25
 800f3ce:	d804      	bhi.n	800f3da <_strtol_l.constprop.0+0xc6>
 800f3d0:	3c57      	subs	r4, #87	; 0x57
 800f3d2:	e7db      	b.n	800f38c <_strtol_l.constprop.0+0x78>
 800f3d4:	f04f 3eff 	mov.w	lr, #4294967295
 800f3d8:	e7e6      	b.n	800f3a8 <_strtol_l.constprop.0+0x94>
 800f3da:	f1be 3fff 	cmp.w	lr, #4294967295
 800f3de:	d105      	bne.n	800f3ec <_strtol_l.constprop.0+0xd8>
 800f3e0:	2322      	movs	r3, #34	; 0x22
 800f3e2:	6003      	str	r3, [r0, #0]
 800f3e4:	4646      	mov	r6, r8
 800f3e6:	b942      	cbnz	r2, 800f3fa <_strtol_l.constprop.0+0xe6>
 800f3e8:	4630      	mov	r0, r6
 800f3ea:	e79e      	b.n	800f32a <_strtol_l.constprop.0+0x16>
 800f3ec:	b107      	cbz	r7, 800f3f0 <_strtol_l.constprop.0+0xdc>
 800f3ee:	4276      	negs	r6, r6
 800f3f0:	2a00      	cmp	r2, #0
 800f3f2:	d0f9      	beq.n	800f3e8 <_strtol_l.constprop.0+0xd4>
 800f3f4:	f1be 0f00 	cmp.w	lr, #0
 800f3f8:	d000      	beq.n	800f3fc <_strtol_l.constprop.0+0xe8>
 800f3fa:	1e69      	subs	r1, r5, #1
 800f3fc:	6011      	str	r1, [r2, #0]
 800f3fe:	e7f3      	b.n	800f3e8 <_strtol_l.constprop.0+0xd4>
 800f400:	2430      	movs	r4, #48	; 0x30
 800f402:	2b00      	cmp	r3, #0
 800f404:	d1b1      	bne.n	800f36a <_strtol_l.constprop.0+0x56>
 800f406:	2308      	movs	r3, #8
 800f408:	e7af      	b.n	800f36a <_strtol_l.constprop.0+0x56>
 800f40a:	2c30      	cmp	r4, #48	; 0x30
 800f40c:	d0a5      	beq.n	800f35a <_strtol_l.constprop.0+0x46>
 800f40e:	230a      	movs	r3, #10
 800f410:	e7ab      	b.n	800f36a <_strtol_l.constprop.0+0x56>
 800f412:	bf00      	nop
 800f414:	08011851 	.word	0x08011851

0800f418 <strtol>:
 800f418:	4613      	mov	r3, r2
 800f41a:	460a      	mov	r2, r1
 800f41c:	4601      	mov	r1, r0
 800f41e:	4802      	ldr	r0, [pc, #8]	; (800f428 <strtol+0x10>)
 800f420:	6800      	ldr	r0, [r0, #0]
 800f422:	f7ff bf77 	b.w	800f314 <_strtol_l.constprop.0>
 800f426:	bf00      	nop
 800f428:	200001a4 	.word	0x200001a4

0800f42c <sniprintf>:
 800f42c:	b40c      	push	{r2, r3}
 800f42e:	b530      	push	{r4, r5, lr}
 800f430:	4b17      	ldr	r3, [pc, #92]	; (800f490 <sniprintf+0x64>)
 800f432:	1e0c      	subs	r4, r1, #0
 800f434:	681d      	ldr	r5, [r3, #0]
 800f436:	b09d      	sub	sp, #116	; 0x74
 800f438:	da08      	bge.n	800f44c <sniprintf+0x20>
 800f43a:	238b      	movs	r3, #139	; 0x8b
 800f43c:	602b      	str	r3, [r5, #0]
 800f43e:	f04f 30ff 	mov.w	r0, #4294967295
 800f442:	b01d      	add	sp, #116	; 0x74
 800f444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f448:	b002      	add	sp, #8
 800f44a:	4770      	bx	lr
 800f44c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f450:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f454:	bf14      	ite	ne
 800f456:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f45a:	4623      	moveq	r3, r4
 800f45c:	9304      	str	r3, [sp, #16]
 800f45e:	9307      	str	r3, [sp, #28]
 800f460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f464:	9002      	str	r0, [sp, #8]
 800f466:	9006      	str	r0, [sp, #24]
 800f468:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f46c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f46e:	ab21      	add	r3, sp, #132	; 0x84
 800f470:	a902      	add	r1, sp, #8
 800f472:	4628      	mov	r0, r5
 800f474:	9301      	str	r3, [sp, #4]
 800f476:	f000 f9c1 	bl	800f7fc <_svfiprintf_r>
 800f47a:	1c43      	adds	r3, r0, #1
 800f47c:	bfbc      	itt	lt
 800f47e:	238b      	movlt	r3, #139	; 0x8b
 800f480:	602b      	strlt	r3, [r5, #0]
 800f482:	2c00      	cmp	r4, #0
 800f484:	d0dd      	beq.n	800f442 <sniprintf+0x16>
 800f486:	9b02      	ldr	r3, [sp, #8]
 800f488:	2200      	movs	r2, #0
 800f48a:	701a      	strb	r2, [r3, #0]
 800f48c:	e7d9      	b.n	800f442 <sniprintf+0x16>
 800f48e:	bf00      	nop
 800f490:	200001a4 	.word	0x200001a4

0800f494 <siprintf>:
 800f494:	b40e      	push	{r1, r2, r3}
 800f496:	b500      	push	{lr}
 800f498:	b09c      	sub	sp, #112	; 0x70
 800f49a:	ab1d      	add	r3, sp, #116	; 0x74
 800f49c:	9002      	str	r0, [sp, #8]
 800f49e:	9006      	str	r0, [sp, #24]
 800f4a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f4a4:	4809      	ldr	r0, [pc, #36]	; (800f4cc <siprintf+0x38>)
 800f4a6:	9107      	str	r1, [sp, #28]
 800f4a8:	9104      	str	r1, [sp, #16]
 800f4aa:	4909      	ldr	r1, [pc, #36]	; (800f4d0 <siprintf+0x3c>)
 800f4ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4b0:	9105      	str	r1, [sp, #20]
 800f4b2:	6800      	ldr	r0, [r0, #0]
 800f4b4:	9301      	str	r3, [sp, #4]
 800f4b6:	a902      	add	r1, sp, #8
 800f4b8:	f000 f9a0 	bl	800f7fc <_svfiprintf_r>
 800f4bc:	9b02      	ldr	r3, [sp, #8]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	701a      	strb	r2, [r3, #0]
 800f4c2:	b01c      	add	sp, #112	; 0x70
 800f4c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4c8:	b003      	add	sp, #12
 800f4ca:	4770      	bx	lr
 800f4cc:	200001a4 	.word	0x200001a4
 800f4d0:	ffff0208 	.word	0xffff0208

0800f4d4 <memset>:
 800f4d4:	4402      	add	r2, r0
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	4293      	cmp	r3, r2
 800f4da:	d100      	bne.n	800f4de <memset+0xa>
 800f4dc:	4770      	bx	lr
 800f4de:	f803 1b01 	strb.w	r1, [r3], #1
 800f4e2:	e7f9      	b.n	800f4d8 <memset+0x4>

0800f4e4 <__errno>:
 800f4e4:	4b01      	ldr	r3, [pc, #4]	; (800f4ec <__errno+0x8>)
 800f4e6:	6818      	ldr	r0, [r3, #0]
 800f4e8:	4770      	bx	lr
 800f4ea:	bf00      	nop
 800f4ec:	200001a4 	.word	0x200001a4

0800f4f0 <__libc_init_array>:
 800f4f0:	b570      	push	{r4, r5, r6, lr}
 800f4f2:	4d0d      	ldr	r5, [pc, #52]	; (800f528 <__libc_init_array+0x38>)
 800f4f4:	4c0d      	ldr	r4, [pc, #52]	; (800f52c <__libc_init_array+0x3c>)
 800f4f6:	1b64      	subs	r4, r4, r5
 800f4f8:	10a4      	asrs	r4, r4, #2
 800f4fa:	2600      	movs	r6, #0
 800f4fc:	42a6      	cmp	r6, r4
 800f4fe:	d109      	bne.n	800f514 <__libc_init_array+0x24>
 800f500:	4d0b      	ldr	r5, [pc, #44]	; (800f530 <__libc_init_array+0x40>)
 800f502:	4c0c      	ldr	r4, [pc, #48]	; (800f534 <__libc_init_array+0x44>)
 800f504:	f001 faba 	bl	8010a7c <_init>
 800f508:	1b64      	subs	r4, r4, r5
 800f50a:	10a4      	asrs	r4, r4, #2
 800f50c:	2600      	movs	r6, #0
 800f50e:	42a6      	cmp	r6, r4
 800f510:	d105      	bne.n	800f51e <__libc_init_array+0x2e>
 800f512:	bd70      	pop	{r4, r5, r6, pc}
 800f514:	f855 3b04 	ldr.w	r3, [r5], #4
 800f518:	4798      	blx	r3
 800f51a:	3601      	adds	r6, #1
 800f51c:	e7ee      	b.n	800f4fc <__libc_init_array+0xc>
 800f51e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f522:	4798      	blx	r3
 800f524:	3601      	adds	r6, #1
 800f526:	e7f2      	b.n	800f50e <__libc_init_array+0x1e>
 800f528:	08011d7c 	.word	0x08011d7c
 800f52c:	08011d7c 	.word	0x08011d7c
 800f530:	08011d7c 	.word	0x08011d7c
 800f534:	08011d80 	.word	0x08011d80

0800f538 <__retarget_lock_acquire_recursive>:
 800f538:	4770      	bx	lr

0800f53a <__retarget_lock_release_recursive>:
 800f53a:	4770      	bx	lr

0800f53c <memcpy>:
 800f53c:	440a      	add	r2, r1
 800f53e:	4291      	cmp	r1, r2
 800f540:	f100 33ff 	add.w	r3, r0, #4294967295
 800f544:	d100      	bne.n	800f548 <memcpy+0xc>
 800f546:	4770      	bx	lr
 800f548:	b510      	push	{r4, lr}
 800f54a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f54e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f552:	4291      	cmp	r1, r2
 800f554:	d1f9      	bne.n	800f54a <memcpy+0xe>
 800f556:	bd10      	pop	{r4, pc}

0800f558 <_free_r>:
 800f558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f55a:	2900      	cmp	r1, #0
 800f55c:	d044      	beq.n	800f5e8 <_free_r+0x90>
 800f55e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f562:	9001      	str	r0, [sp, #4]
 800f564:	2b00      	cmp	r3, #0
 800f566:	f1a1 0404 	sub.w	r4, r1, #4
 800f56a:	bfb8      	it	lt
 800f56c:	18e4      	addlt	r4, r4, r3
 800f56e:	f000 f8df 	bl	800f730 <__malloc_lock>
 800f572:	4a1e      	ldr	r2, [pc, #120]	; (800f5ec <_free_r+0x94>)
 800f574:	9801      	ldr	r0, [sp, #4]
 800f576:	6813      	ldr	r3, [r2, #0]
 800f578:	b933      	cbnz	r3, 800f588 <_free_r+0x30>
 800f57a:	6063      	str	r3, [r4, #4]
 800f57c:	6014      	str	r4, [r2, #0]
 800f57e:	b003      	add	sp, #12
 800f580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f584:	f000 b8da 	b.w	800f73c <__malloc_unlock>
 800f588:	42a3      	cmp	r3, r4
 800f58a:	d908      	bls.n	800f59e <_free_r+0x46>
 800f58c:	6825      	ldr	r5, [r4, #0]
 800f58e:	1961      	adds	r1, r4, r5
 800f590:	428b      	cmp	r3, r1
 800f592:	bf01      	itttt	eq
 800f594:	6819      	ldreq	r1, [r3, #0]
 800f596:	685b      	ldreq	r3, [r3, #4]
 800f598:	1949      	addeq	r1, r1, r5
 800f59a:	6021      	streq	r1, [r4, #0]
 800f59c:	e7ed      	b.n	800f57a <_free_r+0x22>
 800f59e:	461a      	mov	r2, r3
 800f5a0:	685b      	ldr	r3, [r3, #4]
 800f5a2:	b10b      	cbz	r3, 800f5a8 <_free_r+0x50>
 800f5a4:	42a3      	cmp	r3, r4
 800f5a6:	d9fa      	bls.n	800f59e <_free_r+0x46>
 800f5a8:	6811      	ldr	r1, [r2, #0]
 800f5aa:	1855      	adds	r5, r2, r1
 800f5ac:	42a5      	cmp	r5, r4
 800f5ae:	d10b      	bne.n	800f5c8 <_free_r+0x70>
 800f5b0:	6824      	ldr	r4, [r4, #0]
 800f5b2:	4421      	add	r1, r4
 800f5b4:	1854      	adds	r4, r2, r1
 800f5b6:	42a3      	cmp	r3, r4
 800f5b8:	6011      	str	r1, [r2, #0]
 800f5ba:	d1e0      	bne.n	800f57e <_free_r+0x26>
 800f5bc:	681c      	ldr	r4, [r3, #0]
 800f5be:	685b      	ldr	r3, [r3, #4]
 800f5c0:	6053      	str	r3, [r2, #4]
 800f5c2:	440c      	add	r4, r1
 800f5c4:	6014      	str	r4, [r2, #0]
 800f5c6:	e7da      	b.n	800f57e <_free_r+0x26>
 800f5c8:	d902      	bls.n	800f5d0 <_free_r+0x78>
 800f5ca:	230c      	movs	r3, #12
 800f5cc:	6003      	str	r3, [r0, #0]
 800f5ce:	e7d6      	b.n	800f57e <_free_r+0x26>
 800f5d0:	6825      	ldr	r5, [r4, #0]
 800f5d2:	1961      	adds	r1, r4, r5
 800f5d4:	428b      	cmp	r3, r1
 800f5d6:	bf04      	itt	eq
 800f5d8:	6819      	ldreq	r1, [r3, #0]
 800f5da:	685b      	ldreq	r3, [r3, #4]
 800f5dc:	6063      	str	r3, [r4, #4]
 800f5de:	bf04      	itt	eq
 800f5e0:	1949      	addeq	r1, r1, r5
 800f5e2:	6021      	streq	r1, [r4, #0]
 800f5e4:	6054      	str	r4, [r2, #4]
 800f5e6:	e7ca      	b.n	800f57e <_free_r+0x26>
 800f5e8:	b003      	add	sp, #12
 800f5ea:	bd30      	pop	{r4, r5, pc}
 800f5ec:	20005494 	.word	0x20005494

0800f5f0 <sbrk_aligned>:
 800f5f0:	b570      	push	{r4, r5, r6, lr}
 800f5f2:	4e0e      	ldr	r6, [pc, #56]	; (800f62c <sbrk_aligned+0x3c>)
 800f5f4:	460c      	mov	r4, r1
 800f5f6:	6831      	ldr	r1, [r6, #0]
 800f5f8:	4605      	mov	r5, r0
 800f5fa:	b911      	cbnz	r1, 800f602 <sbrk_aligned+0x12>
 800f5fc:	f000 fba6 	bl	800fd4c <_sbrk_r>
 800f600:	6030      	str	r0, [r6, #0]
 800f602:	4621      	mov	r1, r4
 800f604:	4628      	mov	r0, r5
 800f606:	f000 fba1 	bl	800fd4c <_sbrk_r>
 800f60a:	1c43      	adds	r3, r0, #1
 800f60c:	d00a      	beq.n	800f624 <sbrk_aligned+0x34>
 800f60e:	1cc4      	adds	r4, r0, #3
 800f610:	f024 0403 	bic.w	r4, r4, #3
 800f614:	42a0      	cmp	r0, r4
 800f616:	d007      	beq.n	800f628 <sbrk_aligned+0x38>
 800f618:	1a21      	subs	r1, r4, r0
 800f61a:	4628      	mov	r0, r5
 800f61c:	f000 fb96 	bl	800fd4c <_sbrk_r>
 800f620:	3001      	adds	r0, #1
 800f622:	d101      	bne.n	800f628 <sbrk_aligned+0x38>
 800f624:	f04f 34ff 	mov.w	r4, #4294967295
 800f628:	4620      	mov	r0, r4
 800f62a:	bd70      	pop	{r4, r5, r6, pc}
 800f62c:	20005498 	.word	0x20005498

0800f630 <_malloc_r>:
 800f630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f634:	1ccd      	adds	r5, r1, #3
 800f636:	f025 0503 	bic.w	r5, r5, #3
 800f63a:	3508      	adds	r5, #8
 800f63c:	2d0c      	cmp	r5, #12
 800f63e:	bf38      	it	cc
 800f640:	250c      	movcc	r5, #12
 800f642:	2d00      	cmp	r5, #0
 800f644:	4607      	mov	r7, r0
 800f646:	db01      	blt.n	800f64c <_malloc_r+0x1c>
 800f648:	42a9      	cmp	r1, r5
 800f64a:	d905      	bls.n	800f658 <_malloc_r+0x28>
 800f64c:	230c      	movs	r3, #12
 800f64e:	603b      	str	r3, [r7, #0]
 800f650:	2600      	movs	r6, #0
 800f652:	4630      	mov	r0, r6
 800f654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f658:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f72c <_malloc_r+0xfc>
 800f65c:	f000 f868 	bl	800f730 <__malloc_lock>
 800f660:	f8d8 3000 	ldr.w	r3, [r8]
 800f664:	461c      	mov	r4, r3
 800f666:	bb5c      	cbnz	r4, 800f6c0 <_malloc_r+0x90>
 800f668:	4629      	mov	r1, r5
 800f66a:	4638      	mov	r0, r7
 800f66c:	f7ff ffc0 	bl	800f5f0 <sbrk_aligned>
 800f670:	1c43      	adds	r3, r0, #1
 800f672:	4604      	mov	r4, r0
 800f674:	d155      	bne.n	800f722 <_malloc_r+0xf2>
 800f676:	f8d8 4000 	ldr.w	r4, [r8]
 800f67a:	4626      	mov	r6, r4
 800f67c:	2e00      	cmp	r6, #0
 800f67e:	d145      	bne.n	800f70c <_malloc_r+0xdc>
 800f680:	2c00      	cmp	r4, #0
 800f682:	d048      	beq.n	800f716 <_malloc_r+0xe6>
 800f684:	6823      	ldr	r3, [r4, #0]
 800f686:	4631      	mov	r1, r6
 800f688:	4638      	mov	r0, r7
 800f68a:	eb04 0903 	add.w	r9, r4, r3
 800f68e:	f000 fb5d 	bl	800fd4c <_sbrk_r>
 800f692:	4581      	cmp	r9, r0
 800f694:	d13f      	bne.n	800f716 <_malloc_r+0xe6>
 800f696:	6821      	ldr	r1, [r4, #0]
 800f698:	1a6d      	subs	r5, r5, r1
 800f69a:	4629      	mov	r1, r5
 800f69c:	4638      	mov	r0, r7
 800f69e:	f7ff ffa7 	bl	800f5f0 <sbrk_aligned>
 800f6a2:	3001      	adds	r0, #1
 800f6a4:	d037      	beq.n	800f716 <_malloc_r+0xe6>
 800f6a6:	6823      	ldr	r3, [r4, #0]
 800f6a8:	442b      	add	r3, r5
 800f6aa:	6023      	str	r3, [r4, #0]
 800f6ac:	f8d8 3000 	ldr.w	r3, [r8]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d038      	beq.n	800f726 <_malloc_r+0xf6>
 800f6b4:	685a      	ldr	r2, [r3, #4]
 800f6b6:	42a2      	cmp	r2, r4
 800f6b8:	d12b      	bne.n	800f712 <_malloc_r+0xe2>
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	605a      	str	r2, [r3, #4]
 800f6be:	e00f      	b.n	800f6e0 <_malloc_r+0xb0>
 800f6c0:	6822      	ldr	r2, [r4, #0]
 800f6c2:	1b52      	subs	r2, r2, r5
 800f6c4:	d41f      	bmi.n	800f706 <_malloc_r+0xd6>
 800f6c6:	2a0b      	cmp	r2, #11
 800f6c8:	d917      	bls.n	800f6fa <_malloc_r+0xca>
 800f6ca:	1961      	adds	r1, r4, r5
 800f6cc:	42a3      	cmp	r3, r4
 800f6ce:	6025      	str	r5, [r4, #0]
 800f6d0:	bf18      	it	ne
 800f6d2:	6059      	strne	r1, [r3, #4]
 800f6d4:	6863      	ldr	r3, [r4, #4]
 800f6d6:	bf08      	it	eq
 800f6d8:	f8c8 1000 	streq.w	r1, [r8]
 800f6dc:	5162      	str	r2, [r4, r5]
 800f6de:	604b      	str	r3, [r1, #4]
 800f6e0:	4638      	mov	r0, r7
 800f6e2:	f104 060b 	add.w	r6, r4, #11
 800f6e6:	f000 f829 	bl	800f73c <__malloc_unlock>
 800f6ea:	f026 0607 	bic.w	r6, r6, #7
 800f6ee:	1d23      	adds	r3, r4, #4
 800f6f0:	1af2      	subs	r2, r6, r3
 800f6f2:	d0ae      	beq.n	800f652 <_malloc_r+0x22>
 800f6f4:	1b9b      	subs	r3, r3, r6
 800f6f6:	50a3      	str	r3, [r4, r2]
 800f6f8:	e7ab      	b.n	800f652 <_malloc_r+0x22>
 800f6fa:	42a3      	cmp	r3, r4
 800f6fc:	6862      	ldr	r2, [r4, #4]
 800f6fe:	d1dd      	bne.n	800f6bc <_malloc_r+0x8c>
 800f700:	f8c8 2000 	str.w	r2, [r8]
 800f704:	e7ec      	b.n	800f6e0 <_malloc_r+0xb0>
 800f706:	4623      	mov	r3, r4
 800f708:	6864      	ldr	r4, [r4, #4]
 800f70a:	e7ac      	b.n	800f666 <_malloc_r+0x36>
 800f70c:	4634      	mov	r4, r6
 800f70e:	6876      	ldr	r6, [r6, #4]
 800f710:	e7b4      	b.n	800f67c <_malloc_r+0x4c>
 800f712:	4613      	mov	r3, r2
 800f714:	e7cc      	b.n	800f6b0 <_malloc_r+0x80>
 800f716:	230c      	movs	r3, #12
 800f718:	603b      	str	r3, [r7, #0]
 800f71a:	4638      	mov	r0, r7
 800f71c:	f000 f80e 	bl	800f73c <__malloc_unlock>
 800f720:	e797      	b.n	800f652 <_malloc_r+0x22>
 800f722:	6025      	str	r5, [r4, #0]
 800f724:	e7dc      	b.n	800f6e0 <_malloc_r+0xb0>
 800f726:	605b      	str	r3, [r3, #4]
 800f728:	deff      	udf	#255	; 0xff
 800f72a:	bf00      	nop
 800f72c:	20005494 	.word	0x20005494

0800f730 <__malloc_lock>:
 800f730:	4801      	ldr	r0, [pc, #4]	; (800f738 <__malloc_lock+0x8>)
 800f732:	f7ff bf01 	b.w	800f538 <__retarget_lock_acquire_recursive>
 800f736:	bf00      	nop
 800f738:	20005490 	.word	0x20005490

0800f73c <__malloc_unlock>:
 800f73c:	4801      	ldr	r0, [pc, #4]	; (800f744 <__malloc_unlock+0x8>)
 800f73e:	f7ff befc 	b.w	800f53a <__retarget_lock_release_recursive>
 800f742:	bf00      	nop
 800f744:	20005490 	.word	0x20005490

0800f748 <__ssputs_r>:
 800f748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f74c:	688e      	ldr	r6, [r1, #8]
 800f74e:	461f      	mov	r7, r3
 800f750:	42be      	cmp	r6, r7
 800f752:	680b      	ldr	r3, [r1, #0]
 800f754:	4682      	mov	sl, r0
 800f756:	460c      	mov	r4, r1
 800f758:	4690      	mov	r8, r2
 800f75a:	d82c      	bhi.n	800f7b6 <__ssputs_r+0x6e>
 800f75c:	898a      	ldrh	r2, [r1, #12]
 800f75e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f762:	d026      	beq.n	800f7b2 <__ssputs_r+0x6a>
 800f764:	6965      	ldr	r5, [r4, #20]
 800f766:	6909      	ldr	r1, [r1, #16]
 800f768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f76c:	eba3 0901 	sub.w	r9, r3, r1
 800f770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f774:	1c7b      	adds	r3, r7, #1
 800f776:	444b      	add	r3, r9
 800f778:	106d      	asrs	r5, r5, #1
 800f77a:	429d      	cmp	r5, r3
 800f77c:	bf38      	it	cc
 800f77e:	461d      	movcc	r5, r3
 800f780:	0553      	lsls	r3, r2, #21
 800f782:	d527      	bpl.n	800f7d4 <__ssputs_r+0x8c>
 800f784:	4629      	mov	r1, r5
 800f786:	f7ff ff53 	bl	800f630 <_malloc_r>
 800f78a:	4606      	mov	r6, r0
 800f78c:	b360      	cbz	r0, 800f7e8 <__ssputs_r+0xa0>
 800f78e:	6921      	ldr	r1, [r4, #16]
 800f790:	464a      	mov	r2, r9
 800f792:	f7ff fed3 	bl	800f53c <memcpy>
 800f796:	89a3      	ldrh	r3, [r4, #12]
 800f798:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7a0:	81a3      	strh	r3, [r4, #12]
 800f7a2:	6126      	str	r6, [r4, #16]
 800f7a4:	6165      	str	r5, [r4, #20]
 800f7a6:	444e      	add	r6, r9
 800f7a8:	eba5 0509 	sub.w	r5, r5, r9
 800f7ac:	6026      	str	r6, [r4, #0]
 800f7ae:	60a5      	str	r5, [r4, #8]
 800f7b0:	463e      	mov	r6, r7
 800f7b2:	42be      	cmp	r6, r7
 800f7b4:	d900      	bls.n	800f7b8 <__ssputs_r+0x70>
 800f7b6:	463e      	mov	r6, r7
 800f7b8:	6820      	ldr	r0, [r4, #0]
 800f7ba:	4632      	mov	r2, r6
 800f7bc:	4641      	mov	r1, r8
 800f7be:	f000 faab 	bl	800fd18 <memmove>
 800f7c2:	68a3      	ldr	r3, [r4, #8]
 800f7c4:	1b9b      	subs	r3, r3, r6
 800f7c6:	60a3      	str	r3, [r4, #8]
 800f7c8:	6823      	ldr	r3, [r4, #0]
 800f7ca:	4433      	add	r3, r6
 800f7cc:	6023      	str	r3, [r4, #0]
 800f7ce:	2000      	movs	r0, #0
 800f7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7d4:	462a      	mov	r2, r5
 800f7d6:	f000 fac9 	bl	800fd6c <_realloc_r>
 800f7da:	4606      	mov	r6, r0
 800f7dc:	2800      	cmp	r0, #0
 800f7de:	d1e0      	bne.n	800f7a2 <__ssputs_r+0x5a>
 800f7e0:	6921      	ldr	r1, [r4, #16]
 800f7e2:	4650      	mov	r0, sl
 800f7e4:	f7ff feb8 	bl	800f558 <_free_r>
 800f7e8:	230c      	movs	r3, #12
 800f7ea:	f8ca 3000 	str.w	r3, [sl]
 800f7ee:	89a3      	ldrh	r3, [r4, #12]
 800f7f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7f4:	81a3      	strh	r3, [r4, #12]
 800f7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f7fa:	e7e9      	b.n	800f7d0 <__ssputs_r+0x88>

0800f7fc <_svfiprintf_r>:
 800f7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f800:	4698      	mov	r8, r3
 800f802:	898b      	ldrh	r3, [r1, #12]
 800f804:	061b      	lsls	r3, r3, #24
 800f806:	b09d      	sub	sp, #116	; 0x74
 800f808:	4607      	mov	r7, r0
 800f80a:	460d      	mov	r5, r1
 800f80c:	4614      	mov	r4, r2
 800f80e:	d50e      	bpl.n	800f82e <_svfiprintf_r+0x32>
 800f810:	690b      	ldr	r3, [r1, #16]
 800f812:	b963      	cbnz	r3, 800f82e <_svfiprintf_r+0x32>
 800f814:	2140      	movs	r1, #64	; 0x40
 800f816:	f7ff ff0b 	bl	800f630 <_malloc_r>
 800f81a:	6028      	str	r0, [r5, #0]
 800f81c:	6128      	str	r0, [r5, #16]
 800f81e:	b920      	cbnz	r0, 800f82a <_svfiprintf_r+0x2e>
 800f820:	230c      	movs	r3, #12
 800f822:	603b      	str	r3, [r7, #0]
 800f824:	f04f 30ff 	mov.w	r0, #4294967295
 800f828:	e0d0      	b.n	800f9cc <_svfiprintf_r+0x1d0>
 800f82a:	2340      	movs	r3, #64	; 0x40
 800f82c:	616b      	str	r3, [r5, #20]
 800f82e:	2300      	movs	r3, #0
 800f830:	9309      	str	r3, [sp, #36]	; 0x24
 800f832:	2320      	movs	r3, #32
 800f834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f838:	f8cd 800c 	str.w	r8, [sp, #12]
 800f83c:	2330      	movs	r3, #48	; 0x30
 800f83e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f9e4 <_svfiprintf_r+0x1e8>
 800f842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f846:	f04f 0901 	mov.w	r9, #1
 800f84a:	4623      	mov	r3, r4
 800f84c:	469a      	mov	sl, r3
 800f84e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f852:	b10a      	cbz	r2, 800f858 <_svfiprintf_r+0x5c>
 800f854:	2a25      	cmp	r2, #37	; 0x25
 800f856:	d1f9      	bne.n	800f84c <_svfiprintf_r+0x50>
 800f858:	ebba 0b04 	subs.w	fp, sl, r4
 800f85c:	d00b      	beq.n	800f876 <_svfiprintf_r+0x7a>
 800f85e:	465b      	mov	r3, fp
 800f860:	4622      	mov	r2, r4
 800f862:	4629      	mov	r1, r5
 800f864:	4638      	mov	r0, r7
 800f866:	f7ff ff6f 	bl	800f748 <__ssputs_r>
 800f86a:	3001      	adds	r0, #1
 800f86c:	f000 80a9 	beq.w	800f9c2 <_svfiprintf_r+0x1c6>
 800f870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f872:	445a      	add	r2, fp
 800f874:	9209      	str	r2, [sp, #36]	; 0x24
 800f876:	f89a 3000 	ldrb.w	r3, [sl]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	f000 80a1 	beq.w	800f9c2 <_svfiprintf_r+0x1c6>
 800f880:	2300      	movs	r3, #0
 800f882:	f04f 32ff 	mov.w	r2, #4294967295
 800f886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f88a:	f10a 0a01 	add.w	sl, sl, #1
 800f88e:	9304      	str	r3, [sp, #16]
 800f890:	9307      	str	r3, [sp, #28]
 800f892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f896:	931a      	str	r3, [sp, #104]	; 0x68
 800f898:	4654      	mov	r4, sl
 800f89a:	2205      	movs	r2, #5
 800f89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8a0:	4850      	ldr	r0, [pc, #320]	; (800f9e4 <_svfiprintf_r+0x1e8>)
 800f8a2:	f7f0 fc95 	bl	80001d0 <memchr>
 800f8a6:	9a04      	ldr	r2, [sp, #16]
 800f8a8:	b9d8      	cbnz	r0, 800f8e2 <_svfiprintf_r+0xe6>
 800f8aa:	06d0      	lsls	r0, r2, #27
 800f8ac:	bf44      	itt	mi
 800f8ae:	2320      	movmi	r3, #32
 800f8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8b4:	0711      	lsls	r1, r2, #28
 800f8b6:	bf44      	itt	mi
 800f8b8:	232b      	movmi	r3, #43	; 0x2b
 800f8ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8be:	f89a 3000 	ldrb.w	r3, [sl]
 800f8c2:	2b2a      	cmp	r3, #42	; 0x2a
 800f8c4:	d015      	beq.n	800f8f2 <_svfiprintf_r+0xf6>
 800f8c6:	9a07      	ldr	r2, [sp, #28]
 800f8c8:	4654      	mov	r4, sl
 800f8ca:	2000      	movs	r0, #0
 800f8cc:	f04f 0c0a 	mov.w	ip, #10
 800f8d0:	4621      	mov	r1, r4
 800f8d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8d6:	3b30      	subs	r3, #48	; 0x30
 800f8d8:	2b09      	cmp	r3, #9
 800f8da:	d94d      	bls.n	800f978 <_svfiprintf_r+0x17c>
 800f8dc:	b1b0      	cbz	r0, 800f90c <_svfiprintf_r+0x110>
 800f8de:	9207      	str	r2, [sp, #28]
 800f8e0:	e014      	b.n	800f90c <_svfiprintf_r+0x110>
 800f8e2:	eba0 0308 	sub.w	r3, r0, r8
 800f8e6:	fa09 f303 	lsl.w	r3, r9, r3
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	9304      	str	r3, [sp, #16]
 800f8ee:	46a2      	mov	sl, r4
 800f8f0:	e7d2      	b.n	800f898 <_svfiprintf_r+0x9c>
 800f8f2:	9b03      	ldr	r3, [sp, #12]
 800f8f4:	1d19      	adds	r1, r3, #4
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	9103      	str	r1, [sp, #12]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	bfbb      	ittet	lt
 800f8fe:	425b      	neglt	r3, r3
 800f900:	f042 0202 	orrlt.w	r2, r2, #2
 800f904:	9307      	strge	r3, [sp, #28]
 800f906:	9307      	strlt	r3, [sp, #28]
 800f908:	bfb8      	it	lt
 800f90a:	9204      	strlt	r2, [sp, #16]
 800f90c:	7823      	ldrb	r3, [r4, #0]
 800f90e:	2b2e      	cmp	r3, #46	; 0x2e
 800f910:	d10c      	bne.n	800f92c <_svfiprintf_r+0x130>
 800f912:	7863      	ldrb	r3, [r4, #1]
 800f914:	2b2a      	cmp	r3, #42	; 0x2a
 800f916:	d134      	bne.n	800f982 <_svfiprintf_r+0x186>
 800f918:	9b03      	ldr	r3, [sp, #12]
 800f91a:	1d1a      	adds	r2, r3, #4
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	9203      	str	r2, [sp, #12]
 800f920:	2b00      	cmp	r3, #0
 800f922:	bfb8      	it	lt
 800f924:	f04f 33ff 	movlt.w	r3, #4294967295
 800f928:	3402      	adds	r4, #2
 800f92a:	9305      	str	r3, [sp, #20]
 800f92c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f9f4 <_svfiprintf_r+0x1f8>
 800f930:	7821      	ldrb	r1, [r4, #0]
 800f932:	2203      	movs	r2, #3
 800f934:	4650      	mov	r0, sl
 800f936:	f7f0 fc4b 	bl	80001d0 <memchr>
 800f93a:	b138      	cbz	r0, 800f94c <_svfiprintf_r+0x150>
 800f93c:	9b04      	ldr	r3, [sp, #16]
 800f93e:	eba0 000a 	sub.w	r0, r0, sl
 800f942:	2240      	movs	r2, #64	; 0x40
 800f944:	4082      	lsls	r2, r0
 800f946:	4313      	orrs	r3, r2
 800f948:	3401      	adds	r4, #1
 800f94a:	9304      	str	r3, [sp, #16]
 800f94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f950:	4825      	ldr	r0, [pc, #148]	; (800f9e8 <_svfiprintf_r+0x1ec>)
 800f952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f956:	2206      	movs	r2, #6
 800f958:	f7f0 fc3a 	bl	80001d0 <memchr>
 800f95c:	2800      	cmp	r0, #0
 800f95e:	d038      	beq.n	800f9d2 <_svfiprintf_r+0x1d6>
 800f960:	4b22      	ldr	r3, [pc, #136]	; (800f9ec <_svfiprintf_r+0x1f0>)
 800f962:	bb1b      	cbnz	r3, 800f9ac <_svfiprintf_r+0x1b0>
 800f964:	9b03      	ldr	r3, [sp, #12]
 800f966:	3307      	adds	r3, #7
 800f968:	f023 0307 	bic.w	r3, r3, #7
 800f96c:	3308      	adds	r3, #8
 800f96e:	9303      	str	r3, [sp, #12]
 800f970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f972:	4433      	add	r3, r6
 800f974:	9309      	str	r3, [sp, #36]	; 0x24
 800f976:	e768      	b.n	800f84a <_svfiprintf_r+0x4e>
 800f978:	fb0c 3202 	mla	r2, ip, r2, r3
 800f97c:	460c      	mov	r4, r1
 800f97e:	2001      	movs	r0, #1
 800f980:	e7a6      	b.n	800f8d0 <_svfiprintf_r+0xd4>
 800f982:	2300      	movs	r3, #0
 800f984:	3401      	adds	r4, #1
 800f986:	9305      	str	r3, [sp, #20]
 800f988:	4619      	mov	r1, r3
 800f98a:	f04f 0c0a 	mov.w	ip, #10
 800f98e:	4620      	mov	r0, r4
 800f990:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f994:	3a30      	subs	r2, #48	; 0x30
 800f996:	2a09      	cmp	r2, #9
 800f998:	d903      	bls.n	800f9a2 <_svfiprintf_r+0x1a6>
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d0c6      	beq.n	800f92c <_svfiprintf_r+0x130>
 800f99e:	9105      	str	r1, [sp, #20]
 800f9a0:	e7c4      	b.n	800f92c <_svfiprintf_r+0x130>
 800f9a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9a6:	4604      	mov	r4, r0
 800f9a8:	2301      	movs	r3, #1
 800f9aa:	e7f0      	b.n	800f98e <_svfiprintf_r+0x192>
 800f9ac:	ab03      	add	r3, sp, #12
 800f9ae:	9300      	str	r3, [sp, #0]
 800f9b0:	462a      	mov	r2, r5
 800f9b2:	4b0f      	ldr	r3, [pc, #60]	; (800f9f0 <_svfiprintf_r+0x1f4>)
 800f9b4:	a904      	add	r1, sp, #16
 800f9b6:	4638      	mov	r0, r7
 800f9b8:	f3af 8000 	nop.w
 800f9bc:	1c42      	adds	r2, r0, #1
 800f9be:	4606      	mov	r6, r0
 800f9c0:	d1d6      	bne.n	800f970 <_svfiprintf_r+0x174>
 800f9c2:	89ab      	ldrh	r3, [r5, #12]
 800f9c4:	065b      	lsls	r3, r3, #25
 800f9c6:	f53f af2d 	bmi.w	800f824 <_svfiprintf_r+0x28>
 800f9ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9cc:	b01d      	add	sp, #116	; 0x74
 800f9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9d2:	ab03      	add	r3, sp, #12
 800f9d4:	9300      	str	r3, [sp, #0]
 800f9d6:	462a      	mov	r2, r5
 800f9d8:	4b05      	ldr	r3, [pc, #20]	; (800f9f0 <_svfiprintf_r+0x1f4>)
 800f9da:	a904      	add	r1, sp, #16
 800f9dc:	4638      	mov	r0, r7
 800f9de:	f000 f879 	bl	800fad4 <_printf_i>
 800f9e2:	e7eb      	b.n	800f9bc <_svfiprintf_r+0x1c0>
 800f9e4:	08011951 	.word	0x08011951
 800f9e8:	0801195b 	.word	0x0801195b
 800f9ec:	00000000 	.word	0x00000000
 800f9f0:	0800f749 	.word	0x0800f749
 800f9f4:	08011957 	.word	0x08011957

0800f9f8 <_printf_common>:
 800f9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9fc:	4616      	mov	r6, r2
 800f9fe:	4699      	mov	r9, r3
 800fa00:	688a      	ldr	r2, [r1, #8]
 800fa02:	690b      	ldr	r3, [r1, #16]
 800fa04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa08:	4293      	cmp	r3, r2
 800fa0a:	bfb8      	it	lt
 800fa0c:	4613      	movlt	r3, r2
 800fa0e:	6033      	str	r3, [r6, #0]
 800fa10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa14:	4607      	mov	r7, r0
 800fa16:	460c      	mov	r4, r1
 800fa18:	b10a      	cbz	r2, 800fa1e <_printf_common+0x26>
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	6033      	str	r3, [r6, #0]
 800fa1e:	6823      	ldr	r3, [r4, #0]
 800fa20:	0699      	lsls	r1, r3, #26
 800fa22:	bf42      	ittt	mi
 800fa24:	6833      	ldrmi	r3, [r6, #0]
 800fa26:	3302      	addmi	r3, #2
 800fa28:	6033      	strmi	r3, [r6, #0]
 800fa2a:	6825      	ldr	r5, [r4, #0]
 800fa2c:	f015 0506 	ands.w	r5, r5, #6
 800fa30:	d106      	bne.n	800fa40 <_printf_common+0x48>
 800fa32:	f104 0a19 	add.w	sl, r4, #25
 800fa36:	68e3      	ldr	r3, [r4, #12]
 800fa38:	6832      	ldr	r2, [r6, #0]
 800fa3a:	1a9b      	subs	r3, r3, r2
 800fa3c:	42ab      	cmp	r3, r5
 800fa3e:	dc26      	bgt.n	800fa8e <_printf_common+0x96>
 800fa40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fa44:	1e13      	subs	r3, r2, #0
 800fa46:	6822      	ldr	r2, [r4, #0]
 800fa48:	bf18      	it	ne
 800fa4a:	2301      	movne	r3, #1
 800fa4c:	0692      	lsls	r2, r2, #26
 800fa4e:	d42b      	bmi.n	800faa8 <_printf_common+0xb0>
 800fa50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa54:	4649      	mov	r1, r9
 800fa56:	4638      	mov	r0, r7
 800fa58:	47c0      	blx	r8
 800fa5a:	3001      	adds	r0, #1
 800fa5c:	d01e      	beq.n	800fa9c <_printf_common+0xa4>
 800fa5e:	6823      	ldr	r3, [r4, #0]
 800fa60:	6922      	ldr	r2, [r4, #16]
 800fa62:	f003 0306 	and.w	r3, r3, #6
 800fa66:	2b04      	cmp	r3, #4
 800fa68:	bf02      	ittt	eq
 800fa6a:	68e5      	ldreq	r5, [r4, #12]
 800fa6c:	6833      	ldreq	r3, [r6, #0]
 800fa6e:	1aed      	subeq	r5, r5, r3
 800fa70:	68a3      	ldr	r3, [r4, #8]
 800fa72:	bf0c      	ite	eq
 800fa74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa78:	2500      	movne	r5, #0
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	bfc4      	itt	gt
 800fa7e:	1a9b      	subgt	r3, r3, r2
 800fa80:	18ed      	addgt	r5, r5, r3
 800fa82:	2600      	movs	r6, #0
 800fa84:	341a      	adds	r4, #26
 800fa86:	42b5      	cmp	r5, r6
 800fa88:	d11a      	bne.n	800fac0 <_printf_common+0xc8>
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	e008      	b.n	800faa0 <_printf_common+0xa8>
 800fa8e:	2301      	movs	r3, #1
 800fa90:	4652      	mov	r2, sl
 800fa92:	4649      	mov	r1, r9
 800fa94:	4638      	mov	r0, r7
 800fa96:	47c0      	blx	r8
 800fa98:	3001      	adds	r0, #1
 800fa9a:	d103      	bne.n	800faa4 <_printf_common+0xac>
 800fa9c:	f04f 30ff 	mov.w	r0, #4294967295
 800faa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faa4:	3501      	adds	r5, #1
 800faa6:	e7c6      	b.n	800fa36 <_printf_common+0x3e>
 800faa8:	18e1      	adds	r1, r4, r3
 800faaa:	1c5a      	adds	r2, r3, #1
 800faac:	2030      	movs	r0, #48	; 0x30
 800faae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fab2:	4422      	add	r2, r4
 800fab4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fab8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fabc:	3302      	adds	r3, #2
 800fabe:	e7c7      	b.n	800fa50 <_printf_common+0x58>
 800fac0:	2301      	movs	r3, #1
 800fac2:	4622      	mov	r2, r4
 800fac4:	4649      	mov	r1, r9
 800fac6:	4638      	mov	r0, r7
 800fac8:	47c0      	blx	r8
 800faca:	3001      	adds	r0, #1
 800facc:	d0e6      	beq.n	800fa9c <_printf_common+0xa4>
 800face:	3601      	adds	r6, #1
 800fad0:	e7d9      	b.n	800fa86 <_printf_common+0x8e>
	...

0800fad4 <_printf_i>:
 800fad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fad8:	7e0f      	ldrb	r7, [r1, #24]
 800fada:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fadc:	2f78      	cmp	r7, #120	; 0x78
 800fade:	4691      	mov	r9, r2
 800fae0:	4680      	mov	r8, r0
 800fae2:	460c      	mov	r4, r1
 800fae4:	469a      	mov	sl, r3
 800fae6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800faea:	d807      	bhi.n	800fafc <_printf_i+0x28>
 800faec:	2f62      	cmp	r7, #98	; 0x62
 800faee:	d80a      	bhi.n	800fb06 <_printf_i+0x32>
 800faf0:	2f00      	cmp	r7, #0
 800faf2:	f000 80d4 	beq.w	800fc9e <_printf_i+0x1ca>
 800faf6:	2f58      	cmp	r7, #88	; 0x58
 800faf8:	f000 80c0 	beq.w	800fc7c <_printf_i+0x1a8>
 800fafc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fb04:	e03a      	b.n	800fb7c <_printf_i+0xa8>
 800fb06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fb0a:	2b15      	cmp	r3, #21
 800fb0c:	d8f6      	bhi.n	800fafc <_printf_i+0x28>
 800fb0e:	a101      	add	r1, pc, #4	; (adr r1, 800fb14 <_printf_i+0x40>)
 800fb10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb14:	0800fb6d 	.word	0x0800fb6d
 800fb18:	0800fb81 	.word	0x0800fb81
 800fb1c:	0800fafd 	.word	0x0800fafd
 800fb20:	0800fafd 	.word	0x0800fafd
 800fb24:	0800fafd 	.word	0x0800fafd
 800fb28:	0800fafd 	.word	0x0800fafd
 800fb2c:	0800fb81 	.word	0x0800fb81
 800fb30:	0800fafd 	.word	0x0800fafd
 800fb34:	0800fafd 	.word	0x0800fafd
 800fb38:	0800fafd 	.word	0x0800fafd
 800fb3c:	0800fafd 	.word	0x0800fafd
 800fb40:	0800fc85 	.word	0x0800fc85
 800fb44:	0800fbad 	.word	0x0800fbad
 800fb48:	0800fc3f 	.word	0x0800fc3f
 800fb4c:	0800fafd 	.word	0x0800fafd
 800fb50:	0800fafd 	.word	0x0800fafd
 800fb54:	0800fca7 	.word	0x0800fca7
 800fb58:	0800fafd 	.word	0x0800fafd
 800fb5c:	0800fbad 	.word	0x0800fbad
 800fb60:	0800fafd 	.word	0x0800fafd
 800fb64:	0800fafd 	.word	0x0800fafd
 800fb68:	0800fc47 	.word	0x0800fc47
 800fb6c:	682b      	ldr	r3, [r5, #0]
 800fb6e:	1d1a      	adds	r2, r3, #4
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	602a      	str	r2, [r5, #0]
 800fb74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	e09f      	b.n	800fcc0 <_printf_i+0x1ec>
 800fb80:	6820      	ldr	r0, [r4, #0]
 800fb82:	682b      	ldr	r3, [r5, #0]
 800fb84:	0607      	lsls	r7, r0, #24
 800fb86:	f103 0104 	add.w	r1, r3, #4
 800fb8a:	6029      	str	r1, [r5, #0]
 800fb8c:	d501      	bpl.n	800fb92 <_printf_i+0xbe>
 800fb8e:	681e      	ldr	r6, [r3, #0]
 800fb90:	e003      	b.n	800fb9a <_printf_i+0xc6>
 800fb92:	0646      	lsls	r6, r0, #25
 800fb94:	d5fb      	bpl.n	800fb8e <_printf_i+0xba>
 800fb96:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fb9a:	2e00      	cmp	r6, #0
 800fb9c:	da03      	bge.n	800fba6 <_printf_i+0xd2>
 800fb9e:	232d      	movs	r3, #45	; 0x2d
 800fba0:	4276      	negs	r6, r6
 800fba2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fba6:	485a      	ldr	r0, [pc, #360]	; (800fd10 <_printf_i+0x23c>)
 800fba8:	230a      	movs	r3, #10
 800fbaa:	e012      	b.n	800fbd2 <_printf_i+0xfe>
 800fbac:	682b      	ldr	r3, [r5, #0]
 800fbae:	6820      	ldr	r0, [r4, #0]
 800fbb0:	1d19      	adds	r1, r3, #4
 800fbb2:	6029      	str	r1, [r5, #0]
 800fbb4:	0605      	lsls	r5, r0, #24
 800fbb6:	d501      	bpl.n	800fbbc <_printf_i+0xe8>
 800fbb8:	681e      	ldr	r6, [r3, #0]
 800fbba:	e002      	b.n	800fbc2 <_printf_i+0xee>
 800fbbc:	0641      	lsls	r1, r0, #25
 800fbbe:	d5fb      	bpl.n	800fbb8 <_printf_i+0xe4>
 800fbc0:	881e      	ldrh	r6, [r3, #0]
 800fbc2:	4853      	ldr	r0, [pc, #332]	; (800fd10 <_printf_i+0x23c>)
 800fbc4:	2f6f      	cmp	r7, #111	; 0x6f
 800fbc6:	bf0c      	ite	eq
 800fbc8:	2308      	moveq	r3, #8
 800fbca:	230a      	movne	r3, #10
 800fbcc:	2100      	movs	r1, #0
 800fbce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fbd2:	6865      	ldr	r5, [r4, #4]
 800fbd4:	60a5      	str	r5, [r4, #8]
 800fbd6:	2d00      	cmp	r5, #0
 800fbd8:	bfa2      	ittt	ge
 800fbda:	6821      	ldrge	r1, [r4, #0]
 800fbdc:	f021 0104 	bicge.w	r1, r1, #4
 800fbe0:	6021      	strge	r1, [r4, #0]
 800fbe2:	b90e      	cbnz	r6, 800fbe8 <_printf_i+0x114>
 800fbe4:	2d00      	cmp	r5, #0
 800fbe6:	d04b      	beq.n	800fc80 <_printf_i+0x1ac>
 800fbe8:	4615      	mov	r5, r2
 800fbea:	fbb6 f1f3 	udiv	r1, r6, r3
 800fbee:	fb03 6711 	mls	r7, r3, r1, r6
 800fbf2:	5dc7      	ldrb	r7, [r0, r7]
 800fbf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fbf8:	4637      	mov	r7, r6
 800fbfa:	42bb      	cmp	r3, r7
 800fbfc:	460e      	mov	r6, r1
 800fbfe:	d9f4      	bls.n	800fbea <_printf_i+0x116>
 800fc00:	2b08      	cmp	r3, #8
 800fc02:	d10b      	bne.n	800fc1c <_printf_i+0x148>
 800fc04:	6823      	ldr	r3, [r4, #0]
 800fc06:	07de      	lsls	r6, r3, #31
 800fc08:	d508      	bpl.n	800fc1c <_printf_i+0x148>
 800fc0a:	6923      	ldr	r3, [r4, #16]
 800fc0c:	6861      	ldr	r1, [r4, #4]
 800fc0e:	4299      	cmp	r1, r3
 800fc10:	bfde      	ittt	le
 800fc12:	2330      	movle	r3, #48	; 0x30
 800fc14:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fc18:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fc1c:	1b52      	subs	r2, r2, r5
 800fc1e:	6122      	str	r2, [r4, #16]
 800fc20:	f8cd a000 	str.w	sl, [sp]
 800fc24:	464b      	mov	r3, r9
 800fc26:	aa03      	add	r2, sp, #12
 800fc28:	4621      	mov	r1, r4
 800fc2a:	4640      	mov	r0, r8
 800fc2c:	f7ff fee4 	bl	800f9f8 <_printf_common>
 800fc30:	3001      	adds	r0, #1
 800fc32:	d14a      	bne.n	800fcca <_printf_i+0x1f6>
 800fc34:	f04f 30ff 	mov.w	r0, #4294967295
 800fc38:	b004      	add	sp, #16
 800fc3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc3e:	6823      	ldr	r3, [r4, #0]
 800fc40:	f043 0320 	orr.w	r3, r3, #32
 800fc44:	6023      	str	r3, [r4, #0]
 800fc46:	4833      	ldr	r0, [pc, #204]	; (800fd14 <_printf_i+0x240>)
 800fc48:	2778      	movs	r7, #120	; 0x78
 800fc4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fc4e:	6823      	ldr	r3, [r4, #0]
 800fc50:	6829      	ldr	r1, [r5, #0]
 800fc52:	061f      	lsls	r7, r3, #24
 800fc54:	f851 6b04 	ldr.w	r6, [r1], #4
 800fc58:	d402      	bmi.n	800fc60 <_printf_i+0x18c>
 800fc5a:	065f      	lsls	r7, r3, #25
 800fc5c:	bf48      	it	mi
 800fc5e:	b2b6      	uxthmi	r6, r6
 800fc60:	07df      	lsls	r7, r3, #31
 800fc62:	bf48      	it	mi
 800fc64:	f043 0320 	orrmi.w	r3, r3, #32
 800fc68:	6029      	str	r1, [r5, #0]
 800fc6a:	bf48      	it	mi
 800fc6c:	6023      	strmi	r3, [r4, #0]
 800fc6e:	b91e      	cbnz	r6, 800fc78 <_printf_i+0x1a4>
 800fc70:	6823      	ldr	r3, [r4, #0]
 800fc72:	f023 0320 	bic.w	r3, r3, #32
 800fc76:	6023      	str	r3, [r4, #0]
 800fc78:	2310      	movs	r3, #16
 800fc7a:	e7a7      	b.n	800fbcc <_printf_i+0xf8>
 800fc7c:	4824      	ldr	r0, [pc, #144]	; (800fd10 <_printf_i+0x23c>)
 800fc7e:	e7e4      	b.n	800fc4a <_printf_i+0x176>
 800fc80:	4615      	mov	r5, r2
 800fc82:	e7bd      	b.n	800fc00 <_printf_i+0x12c>
 800fc84:	682b      	ldr	r3, [r5, #0]
 800fc86:	6826      	ldr	r6, [r4, #0]
 800fc88:	6961      	ldr	r1, [r4, #20]
 800fc8a:	1d18      	adds	r0, r3, #4
 800fc8c:	6028      	str	r0, [r5, #0]
 800fc8e:	0635      	lsls	r5, r6, #24
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	d501      	bpl.n	800fc98 <_printf_i+0x1c4>
 800fc94:	6019      	str	r1, [r3, #0]
 800fc96:	e002      	b.n	800fc9e <_printf_i+0x1ca>
 800fc98:	0670      	lsls	r0, r6, #25
 800fc9a:	d5fb      	bpl.n	800fc94 <_printf_i+0x1c0>
 800fc9c:	8019      	strh	r1, [r3, #0]
 800fc9e:	2300      	movs	r3, #0
 800fca0:	6123      	str	r3, [r4, #16]
 800fca2:	4615      	mov	r5, r2
 800fca4:	e7bc      	b.n	800fc20 <_printf_i+0x14c>
 800fca6:	682b      	ldr	r3, [r5, #0]
 800fca8:	1d1a      	adds	r2, r3, #4
 800fcaa:	602a      	str	r2, [r5, #0]
 800fcac:	681d      	ldr	r5, [r3, #0]
 800fcae:	6862      	ldr	r2, [r4, #4]
 800fcb0:	2100      	movs	r1, #0
 800fcb2:	4628      	mov	r0, r5
 800fcb4:	f7f0 fa8c 	bl	80001d0 <memchr>
 800fcb8:	b108      	cbz	r0, 800fcbe <_printf_i+0x1ea>
 800fcba:	1b40      	subs	r0, r0, r5
 800fcbc:	6060      	str	r0, [r4, #4]
 800fcbe:	6863      	ldr	r3, [r4, #4]
 800fcc0:	6123      	str	r3, [r4, #16]
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcc8:	e7aa      	b.n	800fc20 <_printf_i+0x14c>
 800fcca:	6923      	ldr	r3, [r4, #16]
 800fccc:	462a      	mov	r2, r5
 800fcce:	4649      	mov	r1, r9
 800fcd0:	4640      	mov	r0, r8
 800fcd2:	47d0      	blx	sl
 800fcd4:	3001      	adds	r0, #1
 800fcd6:	d0ad      	beq.n	800fc34 <_printf_i+0x160>
 800fcd8:	6823      	ldr	r3, [r4, #0]
 800fcda:	079b      	lsls	r3, r3, #30
 800fcdc:	d413      	bmi.n	800fd06 <_printf_i+0x232>
 800fcde:	68e0      	ldr	r0, [r4, #12]
 800fce0:	9b03      	ldr	r3, [sp, #12]
 800fce2:	4298      	cmp	r0, r3
 800fce4:	bfb8      	it	lt
 800fce6:	4618      	movlt	r0, r3
 800fce8:	e7a6      	b.n	800fc38 <_printf_i+0x164>
 800fcea:	2301      	movs	r3, #1
 800fcec:	4632      	mov	r2, r6
 800fcee:	4649      	mov	r1, r9
 800fcf0:	4640      	mov	r0, r8
 800fcf2:	47d0      	blx	sl
 800fcf4:	3001      	adds	r0, #1
 800fcf6:	d09d      	beq.n	800fc34 <_printf_i+0x160>
 800fcf8:	3501      	adds	r5, #1
 800fcfa:	68e3      	ldr	r3, [r4, #12]
 800fcfc:	9903      	ldr	r1, [sp, #12]
 800fcfe:	1a5b      	subs	r3, r3, r1
 800fd00:	42ab      	cmp	r3, r5
 800fd02:	dcf2      	bgt.n	800fcea <_printf_i+0x216>
 800fd04:	e7eb      	b.n	800fcde <_printf_i+0x20a>
 800fd06:	2500      	movs	r5, #0
 800fd08:	f104 0619 	add.w	r6, r4, #25
 800fd0c:	e7f5      	b.n	800fcfa <_printf_i+0x226>
 800fd0e:	bf00      	nop
 800fd10:	08011962 	.word	0x08011962
 800fd14:	08011973 	.word	0x08011973

0800fd18 <memmove>:
 800fd18:	4288      	cmp	r0, r1
 800fd1a:	b510      	push	{r4, lr}
 800fd1c:	eb01 0402 	add.w	r4, r1, r2
 800fd20:	d902      	bls.n	800fd28 <memmove+0x10>
 800fd22:	4284      	cmp	r4, r0
 800fd24:	4623      	mov	r3, r4
 800fd26:	d807      	bhi.n	800fd38 <memmove+0x20>
 800fd28:	1e43      	subs	r3, r0, #1
 800fd2a:	42a1      	cmp	r1, r4
 800fd2c:	d008      	beq.n	800fd40 <memmove+0x28>
 800fd2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd36:	e7f8      	b.n	800fd2a <memmove+0x12>
 800fd38:	4402      	add	r2, r0
 800fd3a:	4601      	mov	r1, r0
 800fd3c:	428a      	cmp	r2, r1
 800fd3e:	d100      	bne.n	800fd42 <memmove+0x2a>
 800fd40:	bd10      	pop	{r4, pc}
 800fd42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd4a:	e7f7      	b.n	800fd3c <memmove+0x24>

0800fd4c <_sbrk_r>:
 800fd4c:	b538      	push	{r3, r4, r5, lr}
 800fd4e:	4d06      	ldr	r5, [pc, #24]	; (800fd68 <_sbrk_r+0x1c>)
 800fd50:	2300      	movs	r3, #0
 800fd52:	4604      	mov	r4, r0
 800fd54:	4608      	mov	r0, r1
 800fd56:	602b      	str	r3, [r5, #0]
 800fd58:	f7f7 f90a 	bl	8006f70 <_sbrk>
 800fd5c:	1c43      	adds	r3, r0, #1
 800fd5e:	d102      	bne.n	800fd66 <_sbrk_r+0x1a>
 800fd60:	682b      	ldr	r3, [r5, #0]
 800fd62:	b103      	cbz	r3, 800fd66 <_sbrk_r+0x1a>
 800fd64:	6023      	str	r3, [r4, #0]
 800fd66:	bd38      	pop	{r3, r4, r5, pc}
 800fd68:	2000548c 	.word	0x2000548c

0800fd6c <_realloc_r>:
 800fd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd70:	4680      	mov	r8, r0
 800fd72:	4614      	mov	r4, r2
 800fd74:	460e      	mov	r6, r1
 800fd76:	b921      	cbnz	r1, 800fd82 <_realloc_r+0x16>
 800fd78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd7c:	4611      	mov	r1, r2
 800fd7e:	f7ff bc57 	b.w	800f630 <_malloc_r>
 800fd82:	b92a      	cbnz	r2, 800fd90 <_realloc_r+0x24>
 800fd84:	f7ff fbe8 	bl	800f558 <_free_r>
 800fd88:	4625      	mov	r5, r4
 800fd8a:	4628      	mov	r0, r5
 800fd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd90:	f000 f81b 	bl	800fdca <_malloc_usable_size_r>
 800fd94:	4284      	cmp	r4, r0
 800fd96:	4607      	mov	r7, r0
 800fd98:	d802      	bhi.n	800fda0 <_realloc_r+0x34>
 800fd9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fd9e:	d812      	bhi.n	800fdc6 <_realloc_r+0x5a>
 800fda0:	4621      	mov	r1, r4
 800fda2:	4640      	mov	r0, r8
 800fda4:	f7ff fc44 	bl	800f630 <_malloc_r>
 800fda8:	4605      	mov	r5, r0
 800fdaa:	2800      	cmp	r0, #0
 800fdac:	d0ed      	beq.n	800fd8a <_realloc_r+0x1e>
 800fdae:	42bc      	cmp	r4, r7
 800fdb0:	4622      	mov	r2, r4
 800fdb2:	4631      	mov	r1, r6
 800fdb4:	bf28      	it	cs
 800fdb6:	463a      	movcs	r2, r7
 800fdb8:	f7ff fbc0 	bl	800f53c <memcpy>
 800fdbc:	4631      	mov	r1, r6
 800fdbe:	4640      	mov	r0, r8
 800fdc0:	f7ff fbca 	bl	800f558 <_free_r>
 800fdc4:	e7e1      	b.n	800fd8a <_realloc_r+0x1e>
 800fdc6:	4635      	mov	r5, r6
 800fdc8:	e7df      	b.n	800fd8a <_realloc_r+0x1e>

0800fdca <_malloc_usable_size_r>:
 800fdca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdce:	1f18      	subs	r0, r3, #4
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	bfbc      	itt	lt
 800fdd4:	580b      	ldrlt	r3, [r1, r0]
 800fdd6:	18c0      	addlt	r0, r0, r3
 800fdd8:	4770      	bx	lr
	...

0800fddc <sqrtf>:
 800fddc:	b508      	push	{r3, lr}
 800fdde:	ed2d 8b02 	vpush	{d8}
 800fde2:	eeb0 8a40 	vmov.f32	s16, s0
 800fde6:	f000 f91f 	bl	8010028 <__ieee754_sqrtf>
 800fdea:	eeb4 8a48 	vcmp.f32	s16, s16
 800fdee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf2:	d60c      	bvs.n	800fe0e <sqrtf+0x32>
 800fdf4:	eddf 8a07 	vldr	s17, [pc, #28]	; 800fe14 <sqrtf+0x38>
 800fdf8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800fdfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe00:	d505      	bpl.n	800fe0e <sqrtf+0x32>
 800fe02:	f7ff fb6f 	bl	800f4e4 <__errno>
 800fe06:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800fe0a:	2321      	movs	r3, #33	; 0x21
 800fe0c:	6003      	str	r3, [r0, #0]
 800fe0e:	ecbd 8b02 	vpop	{d8}
 800fe12:	bd08      	pop	{r3, pc}
 800fe14:	00000000 	.word	0x00000000

0800fe18 <atanf>:
 800fe18:	b538      	push	{r3, r4, r5, lr}
 800fe1a:	ee10 5a10 	vmov	r5, s0
 800fe1e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800fe22:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800fe26:	eef0 7a40 	vmov.f32	s15, s0
 800fe2a:	db10      	blt.n	800fe4e <atanf+0x36>
 800fe2c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800fe30:	dd04      	ble.n	800fe3c <atanf+0x24>
 800fe32:	ee70 7a00 	vadd.f32	s15, s0, s0
 800fe36:	eeb0 0a67 	vmov.f32	s0, s15
 800fe3a:	bd38      	pop	{r3, r4, r5, pc}
 800fe3c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ff74 <atanf+0x15c>
 800fe40:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800ff78 <atanf+0x160>
 800fe44:	2d00      	cmp	r5, #0
 800fe46:	bfd8      	it	le
 800fe48:	eef0 7a47 	vmovle.f32	s15, s14
 800fe4c:	e7f3      	b.n	800fe36 <atanf+0x1e>
 800fe4e:	4b4b      	ldr	r3, [pc, #300]	; (800ff7c <atanf+0x164>)
 800fe50:	429c      	cmp	r4, r3
 800fe52:	dc10      	bgt.n	800fe76 <atanf+0x5e>
 800fe54:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800fe58:	da0a      	bge.n	800fe70 <atanf+0x58>
 800fe5a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ff80 <atanf+0x168>
 800fe5e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800fe62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe66:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fe6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe6e:	dce2      	bgt.n	800fe36 <atanf+0x1e>
 800fe70:	f04f 33ff 	mov.w	r3, #4294967295
 800fe74:	e013      	b.n	800fe9e <atanf+0x86>
 800fe76:	f000 f8a3 	bl	800ffc0 <fabsf>
 800fe7a:	4b42      	ldr	r3, [pc, #264]	; (800ff84 <atanf+0x16c>)
 800fe7c:	429c      	cmp	r4, r3
 800fe7e:	dc4f      	bgt.n	800ff20 <atanf+0x108>
 800fe80:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800fe84:	429c      	cmp	r4, r3
 800fe86:	dc41      	bgt.n	800ff0c <atanf+0xf4>
 800fe88:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800fe8c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fe90:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fe94:	2300      	movs	r3, #0
 800fe96:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fe9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fe9e:	1c5a      	adds	r2, r3, #1
 800fea0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800fea4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ff88 <atanf+0x170>
 800fea8:	eddf 5a38 	vldr	s11, [pc, #224]	; 800ff8c <atanf+0x174>
 800feac:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800ff90 <atanf+0x178>
 800feb0:	ee66 6a06 	vmul.f32	s13, s12, s12
 800feb4:	eee6 5a87 	vfma.f32	s11, s13, s14
 800feb8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ff94 <atanf+0x17c>
 800febc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fec0:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ff98 <atanf+0x180>
 800fec4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fec8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800ff9c <atanf+0x184>
 800fecc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fed0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ffa0 <atanf+0x188>
 800fed4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fed8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ffa4 <atanf+0x18c>
 800fedc:	eea6 5a87 	vfma.f32	s10, s13, s14
 800fee0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ffa8 <atanf+0x190>
 800fee4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fee8:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800ffac <atanf+0x194>
 800feec:	eea7 5a26 	vfma.f32	s10, s14, s13
 800fef0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ffb0 <atanf+0x198>
 800fef4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fef8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fefc:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ff00:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ff04:	d121      	bne.n	800ff4a <atanf+0x132>
 800ff06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff0a:	e794      	b.n	800fe36 <atanf+0x1e>
 800ff0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ff10:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ff14:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ff18:	2301      	movs	r3, #1
 800ff1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ff1e:	e7be      	b.n	800fe9e <atanf+0x86>
 800ff20:	4b24      	ldr	r3, [pc, #144]	; (800ffb4 <atanf+0x19c>)
 800ff22:	429c      	cmp	r4, r3
 800ff24:	dc0b      	bgt.n	800ff3e <atanf+0x126>
 800ff26:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ff2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff2e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ff32:	2302      	movs	r3, #2
 800ff34:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ff38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff3c:	e7af      	b.n	800fe9e <atanf+0x86>
 800ff3e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ff42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ff46:	2303      	movs	r3, #3
 800ff48:	e7a9      	b.n	800fe9e <atanf+0x86>
 800ff4a:	4a1b      	ldr	r2, [pc, #108]	; (800ffb8 <atanf+0x1a0>)
 800ff4c:	491b      	ldr	r1, [pc, #108]	; (800ffbc <atanf+0x1a4>)
 800ff4e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ff52:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ff56:	edd3 6a00 	vldr	s13, [r3]
 800ff5a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ff5e:	2d00      	cmp	r5, #0
 800ff60:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ff64:	edd2 7a00 	vldr	s15, [r2]
 800ff68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff6c:	bfb8      	it	lt
 800ff6e:	eef1 7a67 	vneglt.f32	s15, s15
 800ff72:	e760      	b.n	800fe36 <atanf+0x1e>
 800ff74:	3fc90fdb 	.word	0x3fc90fdb
 800ff78:	bfc90fdb 	.word	0xbfc90fdb
 800ff7c:	3edfffff 	.word	0x3edfffff
 800ff80:	7149f2ca 	.word	0x7149f2ca
 800ff84:	3f97ffff 	.word	0x3f97ffff
 800ff88:	3c8569d7 	.word	0x3c8569d7
 800ff8c:	3d4bda59 	.word	0x3d4bda59
 800ff90:	bd6ef16b 	.word	0xbd6ef16b
 800ff94:	3d886b35 	.word	0x3d886b35
 800ff98:	3dba2e6e 	.word	0x3dba2e6e
 800ff9c:	3e124925 	.word	0x3e124925
 800ffa0:	3eaaaaab 	.word	0x3eaaaaab
 800ffa4:	bd15a221 	.word	0xbd15a221
 800ffa8:	bd9d8795 	.word	0xbd9d8795
 800ffac:	bde38e38 	.word	0xbde38e38
 800ffb0:	be4ccccd 	.word	0xbe4ccccd
 800ffb4:	401bffff 	.word	0x401bffff
 800ffb8:	08011984 	.word	0x08011984
 800ffbc:	08011994 	.word	0x08011994

0800ffc0 <fabsf>:
 800ffc0:	ee10 3a10 	vmov	r3, s0
 800ffc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ffc8:	ee00 3a10 	vmov	s0, r3
 800ffcc:	4770      	bx	lr
	...

0800ffd0 <tanf>:
 800ffd0:	ee10 3a10 	vmov	r3, s0
 800ffd4:	b507      	push	{r0, r1, r2, lr}
 800ffd6:	4a12      	ldr	r2, [pc, #72]	; (8010020 <tanf+0x50>)
 800ffd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ffdc:	4293      	cmp	r3, r2
 800ffde:	dc07      	bgt.n	800fff0 <tanf+0x20>
 800ffe0:	eddf 0a10 	vldr	s1, [pc, #64]	; 8010024 <tanf+0x54>
 800ffe4:	2001      	movs	r0, #1
 800ffe6:	b003      	add	sp, #12
 800ffe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffec:	f000 b820 	b.w	8010030 <__kernel_tanf>
 800fff0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fff4:	db04      	blt.n	8010000 <tanf+0x30>
 800fff6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800fffa:	b003      	add	sp, #12
 800fffc:	f85d fb04 	ldr.w	pc, [sp], #4
 8010000:	4668      	mov	r0, sp
 8010002:	f000 f8f5 	bl	80101f0 <__ieee754_rem_pio2f>
 8010006:	0040      	lsls	r0, r0, #1
 8010008:	f000 0002 	and.w	r0, r0, #2
 801000c:	eddd 0a01 	vldr	s1, [sp, #4]
 8010010:	ed9d 0a00 	vldr	s0, [sp]
 8010014:	f1c0 0001 	rsb	r0, r0, #1
 8010018:	f000 f80a 	bl	8010030 <__kernel_tanf>
 801001c:	e7ed      	b.n	800fffa <tanf+0x2a>
 801001e:	bf00      	nop
 8010020:	3f490fda 	.word	0x3f490fda
 8010024:	00000000 	.word	0x00000000

08010028 <__ieee754_sqrtf>:
 8010028:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801002c:	4770      	bx	lr
	...

08010030 <__kernel_tanf>:
 8010030:	b508      	push	{r3, lr}
 8010032:	ee10 3a10 	vmov	r3, s0
 8010036:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801003a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801003e:	eef0 7a40 	vmov.f32	s15, s0
 8010042:	da17      	bge.n	8010074 <__kernel_tanf+0x44>
 8010044:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8010048:	ee17 1a10 	vmov	r1, s14
 801004c:	bb41      	cbnz	r1, 80100a0 <__kernel_tanf+0x70>
 801004e:	1c43      	adds	r3, r0, #1
 8010050:	4313      	orrs	r3, r2
 8010052:	d108      	bne.n	8010066 <__kernel_tanf+0x36>
 8010054:	f7ff ffb4 	bl	800ffc0 <fabsf>
 8010058:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801005c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010060:	eeb0 0a67 	vmov.f32	s0, s15
 8010064:	bd08      	pop	{r3, pc}
 8010066:	2801      	cmp	r0, #1
 8010068:	d0fa      	beq.n	8010060 <__kernel_tanf+0x30>
 801006a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801006e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010072:	e7f5      	b.n	8010060 <__kernel_tanf+0x30>
 8010074:	494c      	ldr	r1, [pc, #304]	; (80101a8 <__kernel_tanf+0x178>)
 8010076:	428a      	cmp	r2, r1
 8010078:	db12      	blt.n	80100a0 <__kernel_tanf+0x70>
 801007a:	2b00      	cmp	r3, #0
 801007c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80101ac <__kernel_tanf+0x17c>
 8010080:	bfb8      	it	lt
 8010082:	eef1 7a40 	vneglt.f32	s15, s0
 8010086:	ee37 7a67 	vsub.f32	s14, s14, s15
 801008a:	eddf 7a49 	vldr	s15, [pc, #292]	; 80101b0 <__kernel_tanf+0x180>
 801008e:	bfb8      	it	lt
 8010090:	eef1 0a60 	vneglt.f32	s1, s1
 8010094:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010098:	eddf 0a46 	vldr	s1, [pc, #280]	; 80101b4 <__kernel_tanf+0x184>
 801009c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80100a0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80100a4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80101b8 <__kernel_tanf+0x188>
 80100a8:	ed9f 6a44 	vldr	s12, [pc, #272]	; 80101bc <__kernel_tanf+0x18c>
 80100ac:	ed9f 5a44 	vldr	s10, [pc, #272]	; 80101c0 <__kernel_tanf+0x190>
 80100b0:	493d      	ldr	r1, [pc, #244]	; (80101a8 <__kernel_tanf+0x178>)
 80100b2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80100b6:	428a      	cmp	r2, r1
 80100b8:	eea7 6a25 	vfma.f32	s12, s14, s11
 80100bc:	eddf 5a41 	vldr	s11, [pc, #260]	; 80101c4 <__kernel_tanf+0x194>
 80100c0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80100c4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80101c8 <__kernel_tanf+0x198>
 80100c8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80100cc:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80101cc <__kernel_tanf+0x19c>
 80100d0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80100d4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80101d0 <__kernel_tanf+0x1a0>
 80100d8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80100dc:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80101d4 <__kernel_tanf+0x1a4>
 80100e0:	eee7 5a05 	vfma.f32	s11, s14, s10
 80100e4:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80101d8 <__kernel_tanf+0x1a8>
 80100e8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80100ec:	eddf 5a3b 	vldr	s11, [pc, #236]	; 80101dc <__kernel_tanf+0x1ac>
 80100f0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80100f4:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80101e0 <__kernel_tanf+0x1b0>
 80100f8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80100fc:	eddf 5a39 	vldr	s11, [pc, #228]	; 80101e4 <__kernel_tanf+0x1b4>
 8010100:	eee5 5a07 	vfma.f32	s11, s10, s14
 8010104:	eeb0 7a46 	vmov.f32	s14, s12
 8010108:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801010c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8010110:	eeb0 6a60 	vmov.f32	s12, s1
 8010114:	eea7 6a05 	vfma.f32	s12, s14, s10
 8010118:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80101e8 <__kernel_tanf+0x1b8>
 801011c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8010120:	eee5 0a07 	vfma.f32	s1, s10, s14
 8010124:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8010128:	db1d      	blt.n	8010166 <__kernel_tanf+0x136>
 801012a:	ee07 0a10 	vmov	s14, r0
 801012e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010132:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8010136:	ee76 6a87 	vadd.f32	s13, s13, s14
 801013a:	179b      	asrs	r3, r3, #30
 801013c:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8010140:	f003 0302 	and.w	r3, r3, #2
 8010144:	f1c3 0301 	rsb	r3, r3, #1
 8010148:	ee76 6a60 	vsub.f32	s13, s12, s1
 801014c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010150:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010154:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8010158:	ee07 3a90 	vmov	s15, r3
 801015c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010164:	e77c      	b.n	8010060 <__kernel_tanf+0x30>
 8010166:	2801      	cmp	r0, #1
 8010168:	d01b      	beq.n	80101a2 <__kernel_tanf+0x172>
 801016a:	4b20      	ldr	r3, [pc, #128]	; (80101ec <__kernel_tanf+0x1bc>)
 801016c:	ee16 2a90 	vmov	r2, s13
 8010170:	401a      	ands	r2, r3
 8010172:	ee05 2a90 	vmov	s11, r2
 8010176:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801017a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801017e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010182:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8010186:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 801018a:	ee16 2a10 	vmov	r2, s12
 801018e:	4013      	ands	r3, r2
 8010190:	ee07 3a90 	vmov	s15, r3
 8010194:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010198:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801019c:	eee7 7a06 	vfma.f32	s15, s14, s12
 80101a0:	e75e      	b.n	8010060 <__kernel_tanf+0x30>
 80101a2:	eef0 7a66 	vmov.f32	s15, s13
 80101a6:	e75b      	b.n	8010060 <__kernel_tanf+0x30>
 80101a8:	3f2ca140 	.word	0x3f2ca140
 80101ac:	3f490fda 	.word	0x3f490fda
 80101b0:	33222168 	.word	0x33222168
 80101b4:	00000000 	.word	0x00000000
 80101b8:	b79bae5f 	.word	0xb79bae5f
 80101bc:	38a3f445 	.word	0x38a3f445
 80101c0:	37d95384 	.word	0x37d95384
 80101c4:	3a1a26c8 	.word	0x3a1a26c8
 80101c8:	3b6b6916 	.word	0x3b6b6916
 80101cc:	3cb327a4 	.word	0x3cb327a4
 80101d0:	3e088889 	.word	0x3e088889
 80101d4:	3895c07a 	.word	0x3895c07a
 80101d8:	398137b9 	.word	0x398137b9
 80101dc:	3abede48 	.word	0x3abede48
 80101e0:	3c11371f 	.word	0x3c11371f
 80101e4:	3d5d0dd1 	.word	0x3d5d0dd1
 80101e8:	3eaaaaab 	.word	0x3eaaaaab
 80101ec:	fffff000 	.word	0xfffff000

080101f0 <__ieee754_rem_pio2f>:
 80101f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101f2:	ee10 6a10 	vmov	r6, s0
 80101f6:	4b86      	ldr	r3, [pc, #536]	; (8010410 <__ieee754_rem_pio2f+0x220>)
 80101f8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80101fc:	429d      	cmp	r5, r3
 80101fe:	b087      	sub	sp, #28
 8010200:	4604      	mov	r4, r0
 8010202:	dc05      	bgt.n	8010210 <__ieee754_rem_pio2f+0x20>
 8010204:	2300      	movs	r3, #0
 8010206:	ed80 0a00 	vstr	s0, [r0]
 801020a:	6043      	str	r3, [r0, #4]
 801020c:	2000      	movs	r0, #0
 801020e:	e020      	b.n	8010252 <__ieee754_rem_pio2f+0x62>
 8010210:	4b80      	ldr	r3, [pc, #512]	; (8010414 <__ieee754_rem_pio2f+0x224>)
 8010212:	429d      	cmp	r5, r3
 8010214:	dc38      	bgt.n	8010288 <__ieee754_rem_pio2f+0x98>
 8010216:	2e00      	cmp	r6, #0
 8010218:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8010418 <__ieee754_rem_pio2f+0x228>
 801021c:	4b7f      	ldr	r3, [pc, #508]	; (801041c <__ieee754_rem_pio2f+0x22c>)
 801021e:	f025 050f 	bic.w	r5, r5, #15
 8010222:	dd18      	ble.n	8010256 <__ieee754_rem_pio2f+0x66>
 8010224:	429d      	cmp	r5, r3
 8010226:	ee70 7a47 	vsub.f32	s15, s0, s14
 801022a:	bf09      	itett	eq
 801022c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8010420 <__ieee754_rem_pio2f+0x230>
 8010230:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8010424 <__ieee754_rem_pio2f+0x234>
 8010234:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8010238:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8010428 <__ieee754_rem_pio2f+0x238>
 801023c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8010240:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010244:	edc0 6a00 	vstr	s13, [r0]
 8010248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801024c:	edc0 7a01 	vstr	s15, [r0, #4]
 8010250:	2001      	movs	r0, #1
 8010252:	b007      	add	sp, #28
 8010254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010256:	429d      	cmp	r5, r3
 8010258:	ee70 7a07 	vadd.f32	s15, s0, s14
 801025c:	bf09      	itett	eq
 801025e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8010420 <__ieee754_rem_pio2f+0x230>
 8010262:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8010424 <__ieee754_rem_pio2f+0x234>
 8010266:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801026a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8010428 <__ieee754_rem_pio2f+0x238>
 801026e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8010272:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010276:	edc0 6a00 	vstr	s13, [r0]
 801027a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801027e:	edc0 7a01 	vstr	s15, [r0, #4]
 8010282:	f04f 30ff 	mov.w	r0, #4294967295
 8010286:	e7e4      	b.n	8010252 <__ieee754_rem_pio2f+0x62>
 8010288:	4b68      	ldr	r3, [pc, #416]	; (801042c <__ieee754_rem_pio2f+0x23c>)
 801028a:	429d      	cmp	r5, r3
 801028c:	dc71      	bgt.n	8010372 <__ieee754_rem_pio2f+0x182>
 801028e:	f7ff fe97 	bl	800ffc0 <fabsf>
 8010292:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8010430 <__ieee754_rem_pio2f+0x240>
 8010296:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801029a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801029e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80102a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80102a6:	ee17 0a90 	vmov	r0, s15
 80102aa:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8010418 <__ieee754_rem_pio2f+0x228>
 80102ae:	eea7 0a67 	vfms.f32	s0, s14, s15
 80102b2:	281f      	cmp	r0, #31
 80102b4:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8010424 <__ieee754_rem_pio2f+0x234>
 80102b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102bc:	eeb1 6a47 	vneg.f32	s12, s14
 80102c0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80102c4:	ee16 2a90 	vmov	r2, s13
 80102c8:	dc1c      	bgt.n	8010304 <__ieee754_rem_pio2f+0x114>
 80102ca:	495a      	ldr	r1, [pc, #360]	; (8010434 <__ieee754_rem_pio2f+0x244>)
 80102cc:	1e47      	subs	r7, r0, #1
 80102ce:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80102d2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80102d6:	428b      	cmp	r3, r1
 80102d8:	d014      	beq.n	8010304 <__ieee754_rem_pio2f+0x114>
 80102da:	6022      	str	r2, [r4, #0]
 80102dc:	ed94 7a00 	vldr	s14, [r4]
 80102e0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80102e4:	2e00      	cmp	r6, #0
 80102e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80102ea:	ed84 0a01 	vstr	s0, [r4, #4]
 80102ee:	dab0      	bge.n	8010252 <__ieee754_rem_pio2f+0x62>
 80102f0:	eeb1 7a47 	vneg.f32	s14, s14
 80102f4:	eeb1 0a40 	vneg.f32	s0, s0
 80102f8:	ed84 7a00 	vstr	s14, [r4]
 80102fc:	ed84 0a01 	vstr	s0, [r4, #4]
 8010300:	4240      	negs	r0, r0
 8010302:	e7a6      	b.n	8010252 <__ieee754_rem_pio2f+0x62>
 8010304:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010308:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801030c:	2908      	cmp	r1, #8
 801030e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8010312:	dde2      	ble.n	80102da <__ieee754_rem_pio2f+0xea>
 8010314:	eddf 5a42 	vldr	s11, [pc, #264]	; 8010420 <__ieee754_rem_pio2f+0x230>
 8010318:	eef0 6a40 	vmov.f32	s13, s0
 801031c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010320:	ee70 7a66 	vsub.f32	s15, s0, s13
 8010324:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010328:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8010428 <__ieee754_rem_pio2f+0x238>
 801032c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8010330:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8010334:	ee15 2a90 	vmov	r2, s11
 8010338:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801033c:	1a5b      	subs	r3, r3, r1
 801033e:	2b19      	cmp	r3, #25
 8010340:	dc04      	bgt.n	801034c <__ieee754_rem_pio2f+0x15c>
 8010342:	edc4 5a00 	vstr	s11, [r4]
 8010346:	eeb0 0a66 	vmov.f32	s0, s13
 801034a:	e7c7      	b.n	80102dc <__ieee754_rem_pio2f+0xec>
 801034c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8010438 <__ieee754_rem_pio2f+0x248>
 8010350:	eeb0 0a66 	vmov.f32	s0, s13
 8010354:	eea6 0a25 	vfma.f32	s0, s12, s11
 8010358:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801035c:	eddf 6a37 	vldr	s13, [pc, #220]	; 801043c <__ieee754_rem_pio2f+0x24c>
 8010360:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010364:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8010368:	ee30 7a67 	vsub.f32	s14, s0, s15
 801036c:	ed84 7a00 	vstr	s14, [r4]
 8010370:	e7b4      	b.n	80102dc <__ieee754_rem_pio2f+0xec>
 8010372:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8010376:	db06      	blt.n	8010386 <__ieee754_rem_pio2f+0x196>
 8010378:	ee70 7a40 	vsub.f32	s15, s0, s0
 801037c:	edc0 7a01 	vstr	s15, [r0, #4]
 8010380:	edc0 7a00 	vstr	s15, [r0]
 8010384:	e742      	b.n	801020c <__ieee754_rem_pio2f+0x1c>
 8010386:	15ea      	asrs	r2, r5, #23
 8010388:	3a86      	subs	r2, #134	; 0x86
 801038a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801038e:	ee07 3a90 	vmov	s15, r3
 8010392:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010396:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8010440 <__ieee754_rem_pio2f+0x250>
 801039a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801039e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80103a2:	ed8d 7a03 	vstr	s14, [sp, #12]
 80103a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80103aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80103ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80103b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80103b6:	ed8d 7a04 	vstr	s14, [sp, #16]
 80103ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80103be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80103c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103c6:	edcd 7a05 	vstr	s15, [sp, #20]
 80103ca:	d11e      	bne.n	801040a <__ieee754_rem_pio2f+0x21a>
 80103cc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80103d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103d4:	bf14      	ite	ne
 80103d6:	2302      	movne	r3, #2
 80103d8:	2301      	moveq	r3, #1
 80103da:	491a      	ldr	r1, [pc, #104]	; (8010444 <__ieee754_rem_pio2f+0x254>)
 80103dc:	9101      	str	r1, [sp, #4]
 80103de:	2102      	movs	r1, #2
 80103e0:	9100      	str	r1, [sp, #0]
 80103e2:	a803      	add	r0, sp, #12
 80103e4:	4621      	mov	r1, r4
 80103e6:	f000 f82f 	bl	8010448 <__kernel_rem_pio2f>
 80103ea:	2e00      	cmp	r6, #0
 80103ec:	f6bf af31 	bge.w	8010252 <__ieee754_rem_pio2f+0x62>
 80103f0:	edd4 7a00 	vldr	s15, [r4]
 80103f4:	eef1 7a67 	vneg.f32	s15, s15
 80103f8:	edc4 7a00 	vstr	s15, [r4]
 80103fc:	edd4 7a01 	vldr	s15, [r4, #4]
 8010400:	eef1 7a67 	vneg.f32	s15, s15
 8010404:	edc4 7a01 	vstr	s15, [r4, #4]
 8010408:	e77a      	b.n	8010300 <__ieee754_rem_pio2f+0x110>
 801040a:	2303      	movs	r3, #3
 801040c:	e7e5      	b.n	80103da <__ieee754_rem_pio2f+0x1ea>
 801040e:	bf00      	nop
 8010410:	3f490fd8 	.word	0x3f490fd8
 8010414:	4016cbe3 	.word	0x4016cbe3
 8010418:	3fc90f80 	.word	0x3fc90f80
 801041c:	3fc90fd0 	.word	0x3fc90fd0
 8010420:	37354400 	.word	0x37354400
 8010424:	37354443 	.word	0x37354443
 8010428:	2e85a308 	.word	0x2e85a308
 801042c:	43490f80 	.word	0x43490f80
 8010430:	3f22f984 	.word	0x3f22f984
 8010434:	080119a4 	.word	0x080119a4
 8010438:	2e85a300 	.word	0x2e85a300
 801043c:	248d3132 	.word	0x248d3132
 8010440:	43800000 	.word	0x43800000
 8010444:	08011a24 	.word	0x08011a24

08010448 <__kernel_rem_pio2f>:
 8010448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801044c:	ed2d 8b04 	vpush	{d8-d9}
 8010450:	b0d9      	sub	sp, #356	; 0x164
 8010452:	4688      	mov	r8, r1
 8010454:	9002      	str	r0, [sp, #8]
 8010456:	49b8      	ldr	r1, [pc, #736]	; (8010738 <__kernel_rem_pio2f+0x2f0>)
 8010458:	9866      	ldr	r0, [sp, #408]	; 0x198
 801045a:	9301      	str	r3, [sp, #4]
 801045c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8010460:	9901      	ldr	r1, [sp, #4]
 8010462:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8010464:	f101 3bff 	add.w	fp, r1, #4294967295
 8010468:	1d11      	adds	r1, r2, #4
 801046a:	db25      	blt.n	80104b8 <__kernel_rem_pio2f+0x70>
 801046c:	1ed0      	subs	r0, r2, #3
 801046e:	bf48      	it	mi
 8010470:	1d10      	addmi	r0, r2, #4
 8010472:	10c0      	asrs	r0, r0, #3
 8010474:	1c45      	adds	r5, r0, #1
 8010476:	00e9      	lsls	r1, r5, #3
 8010478:	eba0 070b 	sub.w	r7, r0, fp
 801047c:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8010748 <__kernel_rem_pio2f+0x300>
 8010480:	9103      	str	r1, [sp, #12]
 8010482:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8010486:	eb0a 0c0b 	add.w	ip, sl, fp
 801048a:	ae1c      	add	r6, sp, #112	; 0x70
 801048c:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8010490:	2400      	movs	r4, #0
 8010492:	4564      	cmp	r4, ip
 8010494:	dd12      	ble.n	80104bc <__kernel_rem_pio2f+0x74>
 8010496:	9901      	ldr	r1, [sp, #4]
 8010498:	ac1c      	add	r4, sp, #112	; 0x70
 801049a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801049e:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80104a2:	f04f 0c00 	mov.w	ip, #0
 80104a6:	45d4      	cmp	ip, sl
 80104a8:	dc27      	bgt.n	80104fa <__kernel_rem_pio2f+0xb2>
 80104aa:	f8dd e008 	ldr.w	lr, [sp, #8]
 80104ae:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8010748 <__kernel_rem_pio2f+0x300>
 80104b2:	4627      	mov	r7, r4
 80104b4:	2600      	movs	r6, #0
 80104b6:	e016      	b.n	80104e6 <__kernel_rem_pio2f+0x9e>
 80104b8:	2000      	movs	r0, #0
 80104ba:	e7db      	b.n	8010474 <__kernel_rem_pio2f+0x2c>
 80104bc:	42e7      	cmn	r7, r4
 80104be:	bf5d      	ittte	pl
 80104c0:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 80104c4:	ee07 1a90 	vmovpl	s15, r1
 80104c8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80104cc:	eef0 7a47 	vmovmi.f32	s15, s14
 80104d0:	ece6 7a01 	vstmia	r6!, {s15}
 80104d4:	3401      	adds	r4, #1
 80104d6:	e7dc      	b.n	8010492 <__kernel_rem_pio2f+0x4a>
 80104d8:	ecfe 6a01 	vldmia	lr!, {s13}
 80104dc:	ed97 7a00 	vldr	s14, [r7]
 80104e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80104e4:	3601      	adds	r6, #1
 80104e6:	455e      	cmp	r6, fp
 80104e8:	f1a7 0704 	sub.w	r7, r7, #4
 80104ec:	ddf4      	ble.n	80104d8 <__kernel_rem_pio2f+0x90>
 80104ee:	ece9 7a01 	vstmia	r9!, {s15}
 80104f2:	f10c 0c01 	add.w	ip, ip, #1
 80104f6:	3404      	adds	r4, #4
 80104f8:	e7d5      	b.n	80104a6 <__kernel_rem_pio2f+0x5e>
 80104fa:	a908      	add	r1, sp, #32
 80104fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010500:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8010504:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8010744 <__kernel_rem_pio2f+0x2fc>
 8010508:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8010740 <__kernel_rem_pio2f+0x2f8>
 801050c:	9105      	str	r1, [sp, #20]
 801050e:	9304      	str	r3, [sp, #16]
 8010510:	4656      	mov	r6, sl
 8010512:	00b3      	lsls	r3, r6, #2
 8010514:	9306      	str	r3, [sp, #24]
 8010516:	ab58      	add	r3, sp, #352	; 0x160
 8010518:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801051c:	ac08      	add	r4, sp, #32
 801051e:	ab44      	add	r3, sp, #272	; 0x110
 8010520:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8010524:	46a4      	mov	ip, r4
 8010526:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801052a:	4637      	mov	r7, r6
 801052c:	2f00      	cmp	r7, #0
 801052e:	f1a0 0004 	sub.w	r0, r0, #4
 8010532:	dc4a      	bgt.n	80105ca <__kernel_rem_pio2f+0x182>
 8010534:	4628      	mov	r0, r5
 8010536:	9207      	str	r2, [sp, #28]
 8010538:	f000 f9f8 	bl	801092c <scalbnf>
 801053c:	eeb0 8a40 	vmov.f32	s16, s0
 8010540:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8010544:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010548:	f000 fa56 	bl	80109f8 <floorf>
 801054c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8010550:	eea0 8a67 	vfms.f32	s16, s0, s15
 8010554:	2d00      	cmp	r5, #0
 8010556:	9a07      	ldr	r2, [sp, #28]
 8010558:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801055c:	ee17 9a90 	vmov	r9, s15
 8010560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010564:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010568:	dd41      	ble.n	80105ee <__kernel_rem_pio2f+0x1a6>
 801056a:	f106 3cff 	add.w	ip, r6, #4294967295
 801056e:	ab08      	add	r3, sp, #32
 8010570:	f1c5 0e08 	rsb	lr, r5, #8
 8010574:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8010578:	fa47 f00e 	asr.w	r0, r7, lr
 801057c:	4481      	add	r9, r0
 801057e:	fa00 f00e 	lsl.w	r0, r0, lr
 8010582:	1a3f      	subs	r7, r7, r0
 8010584:	f1c5 0007 	rsb	r0, r5, #7
 8010588:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801058c:	4107      	asrs	r7, r0
 801058e:	2f00      	cmp	r7, #0
 8010590:	dd3c      	ble.n	801060c <__kernel_rem_pio2f+0x1c4>
 8010592:	f04f 0e00 	mov.w	lr, #0
 8010596:	f109 0901 	add.w	r9, r9, #1
 801059a:	4671      	mov	r1, lr
 801059c:	4576      	cmp	r6, lr
 801059e:	dc67      	bgt.n	8010670 <__kernel_rem_pio2f+0x228>
 80105a0:	2d00      	cmp	r5, #0
 80105a2:	dd03      	ble.n	80105ac <__kernel_rem_pio2f+0x164>
 80105a4:	2d01      	cmp	r5, #1
 80105a6:	d074      	beq.n	8010692 <__kernel_rem_pio2f+0x24a>
 80105a8:	2d02      	cmp	r5, #2
 80105aa:	d07b      	beq.n	80106a4 <__kernel_rem_pio2f+0x25c>
 80105ac:	2f02      	cmp	r7, #2
 80105ae:	d12d      	bne.n	801060c <__kernel_rem_pio2f+0x1c4>
 80105b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80105b4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80105b8:	b341      	cbz	r1, 801060c <__kernel_rem_pio2f+0x1c4>
 80105ba:	4628      	mov	r0, r5
 80105bc:	9207      	str	r2, [sp, #28]
 80105be:	f000 f9b5 	bl	801092c <scalbnf>
 80105c2:	9a07      	ldr	r2, [sp, #28]
 80105c4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80105c8:	e020      	b.n	801060c <__kernel_rem_pio2f+0x1c4>
 80105ca:	ee60 7a28 	vmul.f32	s15, s0, s17
 80105ce:	3f01      	subs	r7, #1
 80105d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80105d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80105d8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80105dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80105e0:	ecac 0a01 	vstmia	ip!, {s0}
 80105e4:	ed90 0a00 	vldr	s0, [r0]
 80105e8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80105ec:	e79e      	b.n	801052c <__kernel_rem_pio2f+0xe4>
 80105ee:	d105      	bne.n	80105fc <__kernel_rem_pio2f+0x1b4>
 80105f0:	1e70      	subs	r0, r6, #1
 80105f2:	ab08      	add	r3, sp, #32
 80105f4:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80105f8:	11ff      	asrs	r7, r7, #7
 80105fa:	e7c8      	b.n	801058e <__kernel_rem_pio2f+0x146>
 80105fc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010600:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010608:	da30      	bge.n	801066c <__kernel_rem_pio2f+0x224>
 801060a:	2700      	movs	r7, #0
 801060c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010614:	f040 809a 	bne.w	801074c <__kernel_rem_pio2f+0x304>
 8010618:	1e74      	subs	r4, r6, #1
 801061a:	46a4      	mov	ip, r4
 801061c:	2100      	movs	r1, #0
 801061e:	45d4      	cmp	ip, sl
 8010620:	da47      	bge.n	80106b2 <__kernel_rem_pio2f+0x26a>
 8010622:	2900      	cmp	r1, #0
 8010624:	d063      	beq.n	80106ee <__kernel_rem_pio2f+0x2a6>
 8010626:	ab08      	add	r3, sp, #32
 8010628:	3d08      	subs	r5, #8
 801062a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d07f      	beq.n	8010732 <__kernel_rem_pio2f+0x2ea>
 8010632:	4628      	mov	r0, r5
 8010634:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010638:	f000 f978 	bl	801092c <scalbnf>
 801063c:	1c63      	adds	r3, r4, #1
 801063e:	aa44      	add	r2, sp, #272	; 0x110
 8010640:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8010744 <__kernel_rem_pio2f+0x2fc>
 8010644:	0099      	lsls	r1, r3, #2
 8010646:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801064a:	4623      	mov	r3, r4
 801064c:	2b00      	cmp	r3, #0
 801064e:	f280 80ad 	bge.w	80107ac <__kernel_rem_pio2f+0x364>
 8010652:	4623      	mov	r3, r4
 8010654:	2b00      	cmp	r3, #0
 8010656:	f2c0 80cb 	blt.w	80107f0 <__kernel_rem_pio2f+0x3a8>
 801065a:	aa44      	add	r2, sp, #272	; 0x110
 801065c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8010660:	4e36      	ldr	r6, [pc, #216]	; (801073c <__kernel_rem_pio2f+0x2f4>)
 8010662:	eddf 7a39 	vldr	s15, [pc, #228]	; 8010748 <__kernel_rem_pio2f+0x300>
 8010666:	2000      	movs	r0, #0
 8010668:	1ae2      	subs	r2, r4, r3
 801066a:	e0b6      	b.n	80107da <__kernel_rem_pio2f+0x392>
 801066c:	2702      	movs	r7, #2
 801066e:	e790      	b.n	8010592 <__kernel_rem_pio2f+0x14a>
 8010670:	6820      	ldr	r0, [r4, #0]
 8010672:	b949      	cbnz	r1, 8010688 <__kernel_rem_pio2f+0x240>
 8010674:	b118      	cbz	r0, 801067e <__kernel_rem_pio2f+0x236>
 8010676:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801067a:	6020      	str	r0, [r4, #0]
 801067c:	2001      	movs	r0, #1
 801067e:	f10e 0e01 	add.w	lr, lr, #1
 8010682:	3404      	adds	r4, #4
 8010684:	4601      	mov	r1, r0
 8010686:	e789      	b.n	801059c <__kernel_rem_pio2f+0x154>
 8010688:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801068c:	6020      	str	r0, [r4, #0]
 801068e:	4608      	mov	r0, r1
 8010690:	e7f5      	b.n	801067e <__kernel_rem_pio2f+0x236>
 8010692:	1e74      	subs	r4, r6, #1
 8010694:	ab08      	add	r3, sp, #32
 8010696:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801069a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801069e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80106a2:	e783      	b.n	80105ac <__kernel_rem_pio2f+0x164>
 80106a4:	1e74      	subs	r4, r6, #1
 80106a6:	ab08      	add	r3, sp, #32
 80106a8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80106ac:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80106b0:	e7f5      	b.n	801069e <__kernel_rem_pio2f+0x256>
 80106b2:	ab08      	add	r3, sp, #32
 80106b4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80106b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80106bc:	4301      	orrs	r1, r0
 80106be:	e7ae      	b.n	801061e <__kernel_rem_pio2f+0x1d6>
 80106c0:	3001      	adds	r0, #1
 80106c2:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 80106c6:	2f00      	cmp	r7, #0
 80106c8:	d0fa      	beq.n	80106c0 <__kernel_rem_pio2f+0x278>
 80106ca:	9b06      	ldr	r3, [sp, #24]
 80106cc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80106d0:	eb0d 0403 	add.w	r4, sp, r3
 80106d4:	9b01      	ldr	r3, [sp, #4]
 80106d6:	18f7      	adds	r7, r6, r3
 80106d8:	ab1c      	add	r3, sp, #112	; 0x70
 80106da:	f106 0c01 	add.w	ip, r6, #1
 80106de:	3c4c      	subs	r4, #76	; 0x4c
 80106e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80106e4:	4430      	add	r0, r6
 80106e6:	4560      	cmp	r0, ip
 80106e8:	da04      	bge.n	80106f4 <__kernel_rem_pio2f+0x2ac>
 80106ea:	4606      	mov	r6, r0
 80106ec:	e711      	b.n	8010512 <__kernel_rem_pio2f+0xca>
 80106ee:	9c05      	ldr	r4, [sp, #20]
 80106f0:	2001      	movs	r0, #1
 80106f2:	e7e6      	b.n	80106c2 <__kernel_rem_pio2f+0x27a>
 80106f4:	9b04      	ldr	r3, [sp, #16]
 80106f6:	f8dd e008 	ldr.w	lr, [sp, #8]
 80106fa:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80106fe:	9306      	str	r3, [sp, #24]
 8010700:	ee07 3a90 	vmov	s15, r3
 8010704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010708:	2600      	movs	r6, #0
 801070a:	ece7 7a01 	vstmia	r7!, {s15}
 801070e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8010748 <__kernel_rem_pio2f+0x300>
 8010712:	46b9      	mov	r9, r7
 8010714:	455e      	cmp	r6, fp
 8010716:	dd04      	ble.n	8010722 <__kernel_rem_pio2f+0x2da>
 8010718:	ece4 7a01 	vstmia	r4!, {s15}
 801071c:	f10c 0c01 	add.w	ip, ip, #1
 8010720:	e7e1      	b.n	80106e6 <__kernel_rem_pio2f+0x29e>
 8010722:	ecfe 6a01 	vldmia	lr!, {s13}
 8010726:	ed39 7a01 	vldmdb	r9!, {s14}
 801072a:	3601      	adds	r6, #1
 801072c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010730:	e7f0      	b.n	8010714 <__kernel_rem_pio2f+0x2cc>
 8010732:	3c01      	subs	r4, #1
 8010734:	e777      	b.n	8010626 <__kernel_rem_pio2f+0x1de>
 8010736:	bf00      	nop
 8010738:	08011d68 	.word	0x08011d68
 801073c:	08011d3c 	.word	0x08011d3c
 8010740:	43800000 	.word	0x43800000
 8010744:	3b800000 	.word	0x3b800000
 8010748:	00000000 	.word	0x00000000
 801074c:	9b03      	ldr	r3, [sp, #12]
 801074e:	eeb0 0a48 	vmov.f32	s0, s16
 8010752:	1a98      	subs	r0, r3, r2
 8010754:	f000 f8ea 	bl	801092c <scalbnf>
 8010758:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8010740 <__kernel_rem_pio2f+0x2f8>
 801075c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010764:	db19      	blt.n	801079a <__kernel_rem_pio2f+0x352>
 8010766:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8010744 <__kernel_rem_pio2f+0x2fc>
 801076a:	ee60 7a27 	vmul.f32	s15, s0, s15
 801076e:	aa08      	add	r2, sp, #32
 8010770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010774:	1c74      	adds	r4, r6, #1
 8010776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801077a:	3508      	adds	r5, #8
 801077c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010784:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010788:	ee10 3a10 	vmov	r3, s0
 801078c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010790:	ee17 3a90 	vmov	r3, s15
 8010794:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010798:	e74b      	b.n	8010632 <__kernel_rem_pio2f+0x1ea>
 801079a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801079e:	aa08      	add	r2, sp, #32
 80107a0:	ee10 3a10 	vmov	r3, s0
 80107a4:	4634      	mov	r4, r6
 80107a6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80107aa:	e742      	b.n	8010632 <__kernel_rem_pio2f+0x1ea>
 80107ac:	a808      	add	r0, sp, #32
 80107ae:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80107b2:	9001      	str	r0, [sp, #4]
 80107b4:	ee07 0a90 	vmov	s15, r0
 80107b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107bc:	3b01      	subs	r3, #1
 80107be:	ee67 7a80 	vmul.f32	s15, s15, s0
 80107c2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80107c6:	ed62 7a01 	vstmdb	r2!, {s15}
 80107ca:	e73f      	b.n	801064c <__kernel_rem_pio2f+0x204>
 80107cc:	ecf6 6a01 	vldmia	r6!, {s13}
 80107d0:	ecb5 7a01 	vldmia	r5!, {s14}
 80107d4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80107d8:	3001      	adds	r0, #1
 80107da:	4550      	cmp	r0, sl
 80107dc:	dc01      	bgt.n	80107e2 <__kernel_rem_pio2f+0x39a>
 80107de:	4290      	cmp	r0, r2
 80107e0:	ddf4      	ble.n	80107cc <__kernel_rem_pio2f+0x384>
 80107e2:	a858      	add	r0, sp, #352	; 0x160
 80107e4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80107e8:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 80107ec:	3b01      	subs	r3, #1
 80107ee:	e731      	b.n	8010654 <__kernel_rem_pio2f+0x20c>
 80107f0:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80107f2:	2b02      	cmp	r3, #2
 80107f4:	dc09      	bgt.n	801080a <__kernel_rem_pio2f+0x3c2>
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	dc2b      	bgt.n	8010852 <__kernel_rem_pio2f+0x40a>
 80107fa:	d044      	beq.n	8010886 <__kernel_rem_pio2f+0x43e>
 80107fc:	f009 0007 	and.w	r0, r9, #7
 8010800:	b059      	add	sp, #356	; 0x164
 8010802:	ecbd 8b04 	vpop	{d8-d9}
 8010806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801080a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801080c:	2b03      	cmp	r3, #3
 801080e:	d1f5      	bne.n	80107fc <__kernel_rem_pio2f+0x3b4>
 8010810:	aa30      	add	r2, sp, #192	; 0xc0
 8010812:	1f0b      	subs	r3, r1, #4
 8010814:	4413      	add	r3, r2
 8010816:	461a      	mov	r2, r3
 8010818:	4620      	mov	r0, r4
 801081a:	2800      	cmp	r0, #0
 801081c:	f1a2 0204 	sub.w	r2, r2, #4
 8010820:	dc52      	bgt.n	80108c8 <__kernel_rem_pio2f+0x480>
 8010822:	4622      	mov	r2, r4
 8010824:	2a01      	cmp	r2, #1
 8010826:	f1a3 0304 	sub.w	r3, r3, #4
 801082a:	dc5d      	bgt.n	80108e8 <__kernel_rem_pio2f+0x4a0>
 801082c:	ab30      	add	r3, sp, #192	; 0xc0
 801082e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8010748 <__kernel_rem_pio2f+0x300>
 8010832:	440b      	add	r3, r1
 8010834:	2c01      	cmp	r4, #1
 8010836:	dc67      	bgt.n	8010908 <__kernel_rem_pio2f+0x4c0>
 8010838:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801083c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8010840:	2f00      	cmp	r7, #0
 8010842:	d167      	bne.n	8010914 <__kernel_rem_pio2f+0x4cc>
 8010844:	edc8 6a00 	vstr	s13, [r8]
 8010848:	ed88 7a01 	vstr	s14, [r8, #4]
 801084c:	edc8 7a02 	vstr	s15, [r8, #8]
 8010850:	e7d4      	b.n	80107fc <__kernel_rem_pio2f+0x3b4>
 8010852:	ab30      	add	r3, sp, #192	; 0xc0
 8010854:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8010748 <__kernel_rem_pio2f+0x300>
 8010858:	440b      	add	r3, r1
 801085a:	4622      	mov	r2, r4
 801085c:	2a00      	cmp	r2, #0
 801085e:	da24      	bge.n	80108aa <__kernel_rem_pio2f+0x462>
 8010860:	b34f      	cbz	r7, 80108b6 <__kernel_rem_pio2f+0x46e>
 8010862:	eef1 7a47 	vneg.f32	s15, s14
 8010866:	edc8 7a00 	vstr	s15, [r8]
 801086a:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801086e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010872:	aa31      	add	r2, sp, #196	; 0xc4
 8010874:	2301      	movs	r3, #1
 8010876:	429c      	cmp	r4, r3
 8010878:	da20      	bge.n	80108bc <__kernel_rem_pio2f+0x474>
 801087a:	b10f      	cbz	r7, 8010880 <__kernel_rem_pio2f+0x438>
 801087c:	eef1 7a67 	vneg.f32	s15, s15
 8010880:	edc8 7a01 	vstr	s15, [r8, #4]
 8010884:	e7ba      	b.n	80107fc <__kernel_rem_pio2f+0x3b4>
 8010886:	ab30      	add	r3, sp, #192	; 0xc0
 8010888:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8010748 <__kernel_rem_pio2f+0x300>
 801088c:	440b      	add	r3, r1
 801088e:	2c00      	cmp	r4, #0
 8010890:	da05      	bge.n	801089e <__kernel_rem_pio2f+0x456>
 8010892:	b10f      	cbz	r7, 8010898 <__kernel_rem_pio2f+0x450>
 8010894:	eef1 7a67 	vneg.f32	s15, s15
 8010898:	edc8 7a00 	vstr	s15, [r8]
 801089c:	e7ae      	b.n	80107fc <__kernel_rem_pio2f+0x3b4>
 801089e:	ed33 7a01 	vldmdb	r3!, {s14}
 80108a2:	3c01      	subs	r4, #1
 80108a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80108a8:	e7f1      	b.n	801088e <__kernel_rem_pio2f+0x446>
 80108aa:	ed73 7a01 	vldmdb	r3!, {s15}
 80108ae:	3a01      	subs	r2, #1
 80108b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80108b4:	e7d2      	b.n	801085c <__kernel_rem_pio2f+0x414>
 80108b6:	eef0 7a47 	vmov.f32	s15, s14
 80108ba:	e7d4      	b.n	8010866 <__kernel_rem_pio2f+0x41e>
 80108bc:	ecb2 7a01 	vldmia	r2!, {s14}
 80108c0:	3301      	adds	r3, #1
 80108c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80108c6:	e7d6      	b.n	8010876 <__kernel_rem_pio2f+0x42e>
 80108c8:	edd2 7a00 	vldr	s15, [r2]
 80108cc:	edd2 6a01 	vldr	s13, [r2, #4]
 80108d0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80108d4:	3801      	subs	r0, #1
 80108d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80108da:	ed82 7a00 	vstr	s14, [r2]
 80108de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80108e2:	edc2 7a01 	vstr	s15, [r2, #4]
 80108e6:	e798      	b.n	801081a <__kernel_rem_pio2f+0x3d2>
 80108e8:	edd3 7a00 	vldr	s15, [r3]
 80108ec:	edd3 6a01 	vldr	s13, [r3, #4]
 80108f0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80108f4:	3a01      	subs	r2, #1
 80108f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80108fa:	ed83 7a00 	vstr	s14, [r3]
 80108fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010902:	edc3 7a01 	vstr	s15, [r3, #4]
 8010906:	e78d      	b.n	8010824 <__kernel_rem_pio2f+0x3dc>
 8010908:	ed33 7a01 	vldmdb	r3!, {s14}
 801090c:	3c01      	subs	r4, #1
 801090e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010912:	e78f      	b.n	8010834 <__kernel_rem_pio2f+0x3ec>
 8010914:	eef1 6a66 	vneg.f32	s13, s13
 8010918:	eeb1 7a47 	vneg.f32	s14, s14
 801091c:	edc8 6a00 	vstr	s13, [r8]
 8010920:	ed88 7a01 	vstr	s14, [r8, #4]
 8010924:	eef1 7a67 	vneg.f32	s15, s15
 8010928:	e790      	b.n	801084c <__kernel_rem_pio2f+0x404>
 801092a:	bf00      	nop

0801092c <scalbnf>:
 801092c:	ee10 3a10 	vmov	r3, s0
 8010930:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8010934:	d02b      	beq.n	801098e <scalbnf+0x62>
 8010936:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801093a:	d302      	bcc.n	8010942 <scalbnf+0x16>
 801093c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010940:	4770      	bx	lr
 8010942:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8010946:	d123      	bne.n	8010990 <scalbnf+0x64>
 8010948:	4b24      	ldr	r3, [pc, #144]	; (80109dc <scalbnf+0xb0>)
 801094a:	eddf 7a25 	vldr	s15, [pc, #148]	; 80109e0 <scalbnf+0xb4>
 801094e:	4298      	cmp	r0, r3
 8010950:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010954:	db17      	blt.n	8010986 <scalbnf+0x5a>
 8010956:	ee10 3a10 	vmov	r3, s0
 801095a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801095e:	3a19      	subs	r2, #25
 8010960:	f24c 3150 	movw	r1, #50000	; 0xc350
 8010964:	4288      	cmp	r0, r1
 8010966:	dd15      	ble.n	8010994 <scalbnf+0x68>
 8010968:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80109e4 <scalbnf+0xb8>
 801096c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80109e8 <scalbnf+0xbc>
 8010970:	ee10 3a10 	vmov	r3, s0
 8010974:	eeb0 7a67 	vmov.f32	s14, s15
 8010978:	2b00      	cmp	r3, #0
 801097a:	bfb8      	it	lt
 801097c:	eef0 7a66 	vmovlt.f32	s15, s13
 8010980:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010984:	4770      	bx	lr
 8010986:	eddf 7a19 	vldr	s15, [pc, #100]	; 80109ec <scalbnf+0xc0>
 801098a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801098e:	4770      	bx	lr
 8010990:	0dd2      	lsrs	r2, r2, #23
 8010992:	e7e5      	b.n	8010960 <scalbnf+0x34>
 8010994:	4410      	add	r0, r2
 8010996:	28fe      	cmp	r0, #254	; 0xfe
 8010998:	dce6      	bgt.n	8010968 <scalbnf+0x3c>
 801099a:	2800      	cmp	r0, #0
 801099c:	dd06      	ble.n	80109ac <scalbnf+0x80>
 801099e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80109a2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80109a6:	ee00 3a10 	vmov	s0, r3
 80109aa:	4770      	bx	lr
 80109ac:	f110 0f16 	cmn.w	r0, #22
 80109b0:	da09      	bge.n	80109c6 <scalbnf+0x9a>
 80109b2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80109ec <scalbnf+0xc0>
 80109b6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80109f0 <scalbnf+0xc4>
 80109ba:	ee10 3a10 	vmov	r3, s0
 80109be:	eeb0 7a67 	vmov.f32	s14, s15
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	e7d9      	b.n	801097a <scalbnf+0x4e>
 80109c6:	3019      	adds	r0, #25
 80109c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80109cc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80109d0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80109f4 <scalbnf+0xc8>
 80109d4:	ee07 3a90 	vmov	s15, r3
 80109d8:	e7d7      	b.n	801098a <scalbnf+0x5e>
 80109da:	bf00      	nop
 80109dc:	ffff3cb0 	.word	0xffff3cb0
 80109e0:	4c000000 	.word	0x4c000000
 80109e4:	7149f2ca 	.word	0x7149f2ca
 80109e8:	f149f2ca 	.word	0xf149f2ca
 80109ec:	0da24260 	.word	0x0da24260
 80109f0:	8da24260 	.word	0x8da24260
 80109f4:	33000000 	.word	0x33000000

080109f8 <floorf>:
 80109f8:	ee10 3a10 	vmov	r3, s0
 80109fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010a00:	3a7f      	subs	r2, #127	; 0x7f
 8010a02:	2a16      	cmp	r2, #22
 8010a04:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010a08:	dc2a      	bgt.n	8010a60 <floorf+0x68>
 8010a0a:	2a00      	cmp	r2, #0
 8010a0c:	da11      	bge.n	8010a32 <floorf+0x3a>
 8010a0e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8010a70 <floorf+0x78>
 8010a12:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010a16:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a1e:	dd05      	ble.n	8010a2c <floorf+0x34>
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	da23      	bge.n	8010a6c <floorf+0x74>
 8010a24:	4a13      	ldr	r2, [pc, #76]	; (8010a74 <floorf+0x7c>)
 8010a26:	2900      	cmp	r1, #0
 8010a28:	bf18      	it	ne
 8010a2a:	4613      	movne	r3, r2
 8010a2c:	ee00 3a10 	vmov	s0, r3
 8010a30:	4770      	bx	lr
 8010a32:	4911      	ldr	r1, [pc, #68]	; (8010a78 <floorf+0x80>)
 8010a34:	4111      	asrs	r1, r2
 8010a36:	420b      	tst	r3, r1
 8010a38:	d0fa      	beq.n	8010a30 <floorf+0x38>
 8010a3a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8010a70 <floorf+0x78>
 8010a3e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010a42:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a4a:	ddef      	ble.n	8010a2c <floorf+0x34>
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	bfbe      	ittt	lt
 8010a50:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8010a54:	fa40 f202 	asrlt.w	r2, r0, r2
 8010a58:	189b      	addlt	r3, r3, r2
 8010a5a:	ea23 0301 	bic.w	r3, r3, r1
 8010a5e:	e7e5      	b.n	8010a2c <floorf+0x34>
 8010a60:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010a64:	d3e4      	bcc.n	8010a30 <floorf+0x38>
 8010a66:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010a6a:	4770      	bx	lr
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	e7dd      	b.n	8010a2c <floorf+0x34>
 8010a70:	7149f2ca 	.word	0x7149f2ca
 8010a74:	bf800000 	.word	0xbf800000
 8010a78:	007fffff 	.word	0x007fffff

08010a7c <_init>:
 8010a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a7e:	bf00      	nop
 8010a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a82:	bc08      	pop	{r3}
 8010a84:	469e      	mov	lr, r3
 8010a86:	4770      	bx	lr

08010a88 <_fini>:
 8010a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a8a:	bf00      	nop
 8010a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a8e:	bc08      	pop	{r3}
 8010a90:	469e      	mov	lr, r3
 8010a92:	4770      	bx	lr
