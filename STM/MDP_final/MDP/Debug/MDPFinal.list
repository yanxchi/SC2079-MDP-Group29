
MDPFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c64  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  08010df8  08010df8  00011df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080114b0  080114b0  00013320  2**0
                  CONTENTS
  4 .ARM          00000008  080114b0  080114b0  000124b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080114b8  080114b8  00013320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080114b8  080114b8  000124b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080114bc  080114bc  000124bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000320  20000000  080114c0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013320  2**0
                  CONTENTS
 10 .bss          000052d8  20000320  20000320  00013320  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200055f8  200055f8  00013320  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013320  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e048  00000000  00000000  00013350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f1d  00000000  00000000  00031398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bf8  00000000  00000000  000352b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015f0  00000000  00000000  00036eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025eb7  00000000  00000000  000384a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000202d7  00000000  00000000  0005e357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb7f8  00000000  00000000  0007e62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00169e26  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000089c0  00000000  00000000  00169e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0017282c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000320 	.word	0x20000320
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010ddc 	.word	0x08010ddc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000324 	.word	0x20000324
 80001cc:	08010ddc 	.word	0x08010ddc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <_ICM20948_SelectUserBank>:
#define ICM20948_ENABLE_SENSORS 0x3F
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af04      	add	r7, sp, #16
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	460b      	mov	r3, r1
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8000f94:	7afb      	ldrb	r3, [r7, #11]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <_ICM20948_SelectUserBank+0x26>
 8000f9a:	2368      	movs	r3, #104	@ 0x68
 8000f9c:	e000      	b.n	8000fa0 <_ICM20948_SelectUserBank+0x28>
 8000f9e:	2369      	movs	r3, #105	@ 0x69
 8000fa0:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 8000fa2:	7dbb      	ldrb	r3, [r7, #22]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	b299      	uxth	r1, r3
 8000faa:	230a      	movs	r3, #10
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	f107 0315 	add.w	r3, r7, #21
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	227f      	movs	r2, #127	@ 0x7f
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f006 f8b3 	bl	8007128 <HAL_I2C_Mem_Write>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af04      	add	r7, sp, #16
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	4608      	mov	r0, r1
 8000fda:	4611      	mov	r1, r2
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4603      	mov	r3, r0
 8000fe0:	70fb      	strb	r3, [r7, #3]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	70bb      	strb	r3, [r7, #2]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <_ICM20948_WriteByte+0x28>
 8000ff4:	2368      	movs	r3, #104	@ 0x68
 8000ff6:	e000      	b.n	8000ffa <_ICM20948_WriteByte+0x2a>
 8000ff8:	2369      	movs	r3, #105	@ 0x69
 8000ffa:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8000ffc:	7bbb      	ldrb	r3, [r7, #14]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	b299      	uxth	r1, r3
 8001004:	78bb      	ldrb	r3, [r7, #2]
 8001006:	b29a      	uxth	r2, r3
 8001008:	230a      	movs	r3, #10
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	2301      	movs	r3, #1
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	1c7b      	adds	r3, r7, #1
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2301      	movs	r3, #1
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f006 f886 	bl	8007128 <HAL_I2C_Mem_Write>
 800101c:	4603      	mov	r3, r0
 800101e:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8001020:	7bfb      	ldrb	r3, [r7, #15]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <ICM20948_init>:
	}

	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity) {
 800102a:	b580      	push	{r7, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	460b      	mov	r3, r1
 8001034:	70fb      	strb	r3, [r7, #3]
 8001036:	4613      	mov	r3, r2
 8001038:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800103e:	78fb      	ldrb	r3, [r7, #3]
 8001040:	2200      	movs	r2, #0
 8001042:	4619      	mov	r1, r3
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff97 	bl	8000f78 <_ICM20948_SelectUserBank>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800104e:	78f9      	ldrb	r1, [r7, #3]
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	2206      	movs	r2, #6
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ffbb 	bl	8000fd0 <_ICM20948_WriteByte>
 800105a:	4603      	mov	r3, r0
 800105c:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 800105e:	20c8      	movs	r0, #200	@ 0xc8
 8001060:	f004 ffa0 	bl	8005fa4 <HAL_Delay>

	status = _ICM20948_WriteByte(
 8001064:	78f9      	ldrb	r1, [r7, #3]
 8001066:	2301      	movs	r3, #1
 8001068:	2206      	movs	r2, #6
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffb0 	bl	8000fd0 <_ICM20948_WriteByte>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); */ // For some reason this needs to be tested

	// disable accelerometer
	status = _ICM20948_WriteByte(
 8001074:	78f9      	ldrb	r1, [r7, #3]
 8001076:	2338      	movs	r3, #56	@ 0x38
 8001078:	2207      	movs	r2, #7
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa8 	bl	8000fd0 <_ICM20948_WriteByte>
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
				hi2c,
				selectI2cAddress,
				ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
				0x38);

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	2202      	movs	r2, #2
 8001088:	4619      	mov	r1, r3
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ff74 	bl	8000f78 <_ICM20948_SelectUserBank>
 8001090:	4603      	mov	r3, r0
 8001092:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			3 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << BIT_1|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8001094:	78bb      	ldrb	r3, [r7, #2]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	b25b      	sxtb	r3, r3
 800109a:	f043 0319 	orr.w	r3, r3, #25
 800109e:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	78f9      	ldrb	r1, [r7, #3]
 80010a4:	2201      	movs	r2, #1
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ff92 	bl	8000fd0 <_ICM20948_WriteByte>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
//			hi2c,
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
//			0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 80010b0:	78f9      	ldrb	r1, [r7, #3]
 80010b2:	2304      	movs	r3, #4
 80010b4:	2200      	movs	r2, #0
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ff8a 	bl	8000fd0 <_ICM20948_WriteByte>
 80010bc:	4603      	mov	r3, r0
 80010be:	73fb      	strb	r3, [r7, #15]
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
//			0x04); // Don't understand how this works


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	2200      	movs	r2, #0
 80010c4:	4619      	mov	r1, r3
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ff56 	bl	8000f78 <_ICM20948_SelectUserBank>
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]
//
	status = _ICM20948_WriteByte(
 80010d0:	78f9      	ldrb	r1, [r7, #3]
 80010d2:	2302      	movs	r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ff7a 	bl	8000fd0 <_ICM20948_WriteByte>
 80010dc:	4603      	mov	r3, r0
 80010de:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

//	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ee:	f004 fee7 	bl	8005ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f2:	f000 f973 	bl	80013dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f6:	f000 fd51 	bl	8001b9c <MX_GPIO_Init>
  MX_TIM8_Init();
 80010fa:	f000 fc7b 	bl	80019f4 <MX_TIM8_Init>
  MX_TIM6_Init();
 80010fe:	f000 fc43 	bl	8001988 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001102:	f000 fb3b 	bl	800177c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001106:	f000 fd1f 	bl	8001b48 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800110a:	f000 fa97 	bl	800163c <MX_TIM1_Init>
  MX_TIM3_Init();
 800110e:	f000 fb89 	bl	8001824 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001112:	f000 fa65 	bl	80015e0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001116:	f000 f9bf 	bl	8001498 <MX_ADC1_Init>
  MX_TIM4_Init();
 800111a:	f000 fbd7 	bl	80018cc <MX_TIM4_Init>
  MX_ADC2_Init();
 800111e:	f000 fa0d 	bl	800153c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8001122:	f004 f9f1 	bl	8005508 <OLED_Init>

  ICM20948_init(&hi2c1,0,GYRO_FULL_SCALE_2000DPS);
 8001126:	2203      	movs	r2, #3
 8001128:	2100      	movs	r1, #0
 800112a:	4870      	ldr	r0, [pc, #448]	@ (80012ec <main+0x204>)
 800112c:	f7ff ff7d 	bl	800102a <ICM20948_init>

  // initialise command queue
  curCmd.index = 100;
 8001130:	4b6f      	ldr	r3, [pc, #444]	@ (80012f0 <main+0x208>)
 8001132:	2264      	movs	r2, #100	@ 0x64
 8001134:	701a      	strb	r2, [r3, #0]
  curCmd.val = 0;
 8001136:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <main+0x208>)
 8001138:	2200      	movs	r2, #0
 800113a:	805a      	strh	r2, [r3, #2]

  cQueue.head = 0;
 800113c:	4b6d      	ldr	r3, [pc, #436]	@ (80012f4 <main+0x20c>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
  cQueue.tail = 0;
 8001142:	4b6c      	ldr	r3, [pc, #432]	@ (80012f4 <main+0x20c>)
 8001144:	2200      	movs	r2, #0
 8001146:	705a      	strb	r2, [r3, #1]
  cQueue.size = CMD_BUFFER_SIZE;
 8001148:	4b6b      	ldr	r3, [pc, #428]	@ (80012f8 <main+0x210>)
 800114a:	781a      	ldrb	r2, [r3, #0]
 800114c:	4b69      	ldr	r3, [pc, #420]	@ (80012f4 <main+0x20c>)
 800114e:	709a      	strb	r2, [r3, #2]
  for (int i = 0; i < CMD_BUFFER_SIZE;i++) {
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	e00c      	b.n	8001170 <main+0x88>
	  Command cmd;
	  cmd.index = 100;
 8001156:	2364      	movs	r3, #100	@ 0x64
 8001158:	703b      	strb	r3, [r7, #0]
	  cmd.val = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	807b      	strh	r3, [r7, #2]
	  cQueue.buffer[i] = cmd;
 800115e:	4a65      	ldr	r2, [pc, #404]	@ (80012f4 <main+0x20c>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < CMD_BUFFER_SIZE;i++) {
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3301      	adds	r3, #1
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	4b61      	ldr	r3, [pc, #388]	@ (80012f8 <main+0x210>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4293      	cmp	r3, r2
 800117a:	dbec      	blt.n	8001156 <main+0x6e>
  }

  PIDConfigInit(&pidTSlow, 2.5, 0,0.8);
 800117c:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 80012fc <main+0x214>
 8001180:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001300 <main+0x218>
 8001184:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8001188:	485e      	ldr	r0, [pc, #376]	@ (8001304 <main+0x21c>)
 800118a:	f001 fa77 	bl	800267c <PIDConfigInit>
  PIDConfigInit(&pidSlow, 2.5, 0,0);
 800118e:	ed9f 1a5c 	vldr	s2, [pc, #368]	@ 8001300 <main+0x218>
 8001192:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001300 <main+0x218>
 8001196:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 800119a:	485b      	ldr	r0, [pc, #364]	@ (8001308 <main+0x220>)
 800119c:	f001 fa6e 	bl	800267c <PIDConfigInit>
  PIDConfigInit(&pidFast, 1.5, 0 ,0);
 80011a0:	ed9f 1a57 	vldr	s2, [pc, #348]	@ 8001300 <main+0x218>
 80011a4:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8001300 <main+0x218>
 80011a8:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 80011ac:	4857      	ldr	r0, [pc, #348]	@ (800130c <main+0x224>)
 80011ae:	f001 fa65 	bl	800267c <PIDConfigInit>
//  PIDConfigInit(&pidFast, 0.75, 0.0,0);

  	HAL_UART_Receive_IT(&huart3, aRxBuffer,RX_BUFFER_SIZE);
 80011b2:	4b57      	ldr	r3, [pc, #348]	@ (8001310 <main+0x228>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	4956      	ldr	r1, [pc, #344]	@ (8001314 <main+0x22c>)
 80011ba:	4857      	ldr	r0, [pc, #348]	@ (8001318 <main+0x230>)
 80011bc:	f009 f963 	bl	800a486 <HAL_UART_Receive_IT>

	// servo motor turn
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80011c0:	210c      	movs	r1, #12
 80011c2:	4856      	ldr	r0, [pc, #344]	@ (800131c <main+0x234>)
 80011c4:	f007 fbb8 	bl	8008938 <HAL_TIM_PWM_Start>
	// motor backwheel move
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80011c8:	2100      	movs	r1, #0
 80011ca:	4855      	ldr	r0, [pc, #340]	@ (8001320 <main+0x238>)
 80011cc:	f007 fbb4 	bl	8008938 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80011d0:	2104      	movs	r1, #4
 80011d2:	4853      	ldr	r0, [pc, #332]	@ (8001320 <main+0x238>)
 80011d4:	f007 fbb0 	bl	8008938 <HAL_TIM_PWM_Start>
	// encoder monitor speed and distance
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80011d8:	213c      	movs	r1, #60	@ 0x3c
 80011da:	4852      	ldr	r0, [pc, #328]	@ (8001324 <main+0x23c>)
 80011dc:	f007 ff40 	bl	8009060 <HAL_TIM_Encoder_Start>
//	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);

	//adjust steering
	__RESET_SERVO_TURN(&htim1);
 80011e0:	4b4e      	ldr	r3, [pc, #312]	@ (800131c <main+0x234>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	224a      	movs	r2, #74	@ 0x4a
 80011e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80011e8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011ec:	f004 feda 	bl	8005fa4 <HAL_Delay>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011f0:	f00a f8f8 	bl	800b3e4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of oledTask */
  oledTaskHandle = osThreadNew(runOledTask, NULL, &oledTask_attributes);
 80011f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001328 <main+0x240>)
 80011f6:	2100      	movs	r1, #0
 80011f8:	484c      	ldr	r0, [pc, #304]	@ (800132c <main+0x244>)
 80011fa:	f00a f93d 	bl	800b478 <osThreadNew>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a4b      	ldr	r2, [pc, #300]	@ (8001330 <main+0x248>)
 8001202:	6013      	str	r3, [r2, #0]

  /* creation of commandTask */
  commandTaskHandle = osThreadNew(runCmdTask, NULL, &commandTask_attributes);
 8001204:	4a4b      	ldr	r2, [pc, #300]	@ (8001334 <main+0x24c>)
 8001206:	2100      	movs	r1, #0
 8001208:	484b      	ldr	r0, [pc, #300]	@ (8001338 <main+0x250>)
 800120a:	f00a f935 	bl	800b478 <osThreadNew>
 800120e:	4603      	mov	r3, r0
 8001210:	4a4a      	ldr	r2, [pc, #296]	@ (800133c <main+0x254>)
 8001212:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(runADCTask, NULL, &ADCTask_attributes);
 8001214:	4a4a      	ldr	r2, [pc, #296]	@ (8001340 <main+0x258>)
 8001216:	2100      	movs	r1, #0
 8001218:	484a      	ldr	r0, [pc, #296]	@ (8001344 <main+0x25c>)
 800121a:	f00a f92d 	bl	800b478 <osThreadNew>
 800121e:	4603      	mov	r3, r0
 8001220:	4a49      	ldr	r2, [pc, #292]	@ (8001348 <main+0x260>)
 8001222:	6013      	str	r3, [r2, #0]

  /* creation of moveDistTask */
  moveDistTaskHandle = osThreadNew(runMoveDistTask, NULL, &moveDistTask_attributes);
 8001224:	4a49      	ldr	r2, [pc, #292]	@ (800134c <main+0x264>)
 8001226:	2100      	movs	r1, #0
 8001228:	4849      	ldr	r0, [pc, #292]	@ (8001350 <main+0x268>)
 800122a:	f00a f925 	bl	800b478 <osThreadNew>
 800122e:	4603      	mov	r3, r0
 8001230:	4a48      	ldr	r2, [pc, #288]	@ (8001354 <main+0x26c>)
 8001232:	6013      	str	r3, [r2, #0]

  /* creation of fastestPathTask */
  fastestPathTaskHandle = osThreadNew(runFastestPathTask, NULL, &fastestPathTask_attributes);
 8001234:	4a48      	ldr	r2, [pc, #288]	@ (8001358 <main+0x270>)
 8001236:	2100      	movs	r1, #0
 8001238:	4848      	ldr	r0, [pc, #288]	@ (800135c <main+0x274>)
 800123a:	f00a f91d 	bl	800b478 <osThreadNew>
 800123e:	4603      	mov	r3, r0
 8001240:	4a47      	ldr	r2, [pc, #284]	@ (8001360 <main+0x278>)
 8001242:	6013      	str	r3, [r2, #0]

  /* creation of buzzerTask */
  buzzerTaskHandle = osThreadNew(runBuzzerTask, NULL, &buzzerTask_attributes);
 8001244:	4a47      	ldr	r2, [pc, #284]	@ (8001364 <main+0x27c>)
 8001246:	2100      	movs	r1, #0
 8001248:	4847      	ldr	r0, [pc, #284]	@ (8001368 <main+0x280>)
 800124a:	f00a f915 	bl	800b478 <osThreadNew>
 800124e:	4603      	mov	r3, r0
 8001250:	4a46      	ldr	r2, [pc, #280]	@ (800136c <main+0x284>)
 8001252:	6013      	str	r3, [r2, #0]

  /* creation of FLTask */
  FLTaskHandle = osThreadNew(runFLTask, NULL, &FLTask_attributes);
 8001254:	4a46      	ldr	r2, [pc, #280]	@ (8001370 <main+0x288>)
 8001256:	2100      	movs	r1, #0
 8001258:	4846      	ldr	r0, [pc, #280]	@ (8001374 <main+0x28c>)
 800125a:	f00a f90d 	bl	800b478 <osThreadNew>
 800125e:	4603      	mov	r3, r0
 8001260:	4a45      	ldr	r2, [pc, #276]	@ (8001378 <main+0x290>)
 8001262:	6013      	str	r3, [r2, #0]

  /* creation of FRTask */
  FRTaskHandle = osThreadNew(runFRTask, NULL, &FRTask_attributes);
 8001264:	4a45      	ldr	r2, [pc, #276]	@ (800137c <main+0x294>)
 8001266:	2100      	movs	r1, #0
 8001268:	4845      	ldr	r0, [pc, #276]	@ (8001380 <main+0x298>)
 800126a:	f00a f905 	bl	800b478 <osThreadNew>
 800126e:	4603      	mov	r3, r0
 8001270:	4a44      	ldr	r2, [pc, #272]	@ (8001384 <main+0x29c>)
 8001272:	6013      	str	r3, [r2, #0]

  /* creation of BLTask */
  BLTaskHandle = osThreadNew(runBLTask, NULL, &BLTask_attributes);
 8001274:	4a44      	ldr	r2, [pc, #272]	@ (8001388 <main+0x2a0>)
 8001276:	2100      	movs	r1, #0
 8001278:	4844      	ldr	r0, [pc, #272]	@ (800138c <main+0x2a4>)
 800127a:	f00a f8fd 	bl	800b478 <osThreadNew>
 800127e:	4603      	mov	r3, r0
 8001280:	4a43      	ldr	r2, [pc, #268]	@ (8001390 <main+0x2a8>)
 8001282:	6013      	str	r3, [r2, #0]

  /* creation of BRTask */
  BRTaskHandle = osThreadNew(runBRTask, NULL, &BRTask_attributes);
 8001284:	4a43      	ldr	r2, [pc, #268]	@ (8001394 <main+0x2ac>)
 8001286:	2100      	movs	r1, #0
 8001288:	4843      	ldr	r0, [pc, #268]	@ (8001398 <main+0x2b0>)
 800128a:	f00a f8f5 	bl	800b478 <osThreadNew>
 800128e:	4603      	mov	r3, r0
 8001290:	4a42      	ldr	r2, [pc, #264]	@ (800139c <main+0x2b4>)
 8001292:	6013      	str	r3, [r2, #0]

  /* creation of fastestPathV2 */
  fastestPathV2Handle = osThreadNew(runFastestPathTask_V2, NULL, &fastestPathV2_attributes);
 8001294:	4a42      	ldr	r2, [pc, #264]	@ (80013a0 <main+0x2b8>)
 8001296:	2100      	movs	r1, #0
 8001298:	4842      	ldr	r0, [pc, #264]	@ (80013a4 <main+0x2bc>)
 800129a:	f00a f8ed 	bl	800b478 <osThreadNew>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a41      	ldr	r2, [pc, #260]	@ (80013a8 <main+0x2c0>)
 80012a2:	6013      	str	r3, [r2, #0]

  /* creation of batteryTask */
  batteryTaskHandle = osThreadNew(runBatteryTask, NULL, &batteryTask_attributes);
 80012a4:	4a41      	ldr	r2, [pc, #260]	@ (80013ac <main+0x2c4>)
 80012a6:	2100      	movs	r1, #0
 80012a8:	4841      	ldr	r0, [pc, #260]	@ (80013b0 <main+0x2c8>)
 80012aa:	f00a f8e5 	bl	800b478 <osThreadNew>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4a40      	ldr	r2, [pc, #256]	@ (80013b4 <main+0x2cc>)
 80012b2:	6013      	str	r3, [r2, #0]

  /* creation of moveDistObsTask */
  moveDistObsTaskHandle = osThreadNew(runMoveDistObsTask, NULL, &moveDistObsTask_attributes);
 80012b4:	4a40      	ldr	r2, [pc, #256]	@ (80013b8 <main+0x2d0>)
 80012b6:	2100      	movs	r1, #0
 80012b8:	4840      	ldr	r0, [pc, #256]	@ (80013bc <main+0x2d4>)
 80012ba:	f00a f8dd 	bl	800b478 <osThreadNew>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a3f      	ldr	r2, [pc, #252]	@ (80013c0 <main+0x2d8>)
 80012c2:	6013      	str	r3, [r2, #0]

  SensorTaskHandle = osThreadNew(sensorTask, NULL, &SensorTask_attributes);
 80012c4:	4a3f      	ldr	r2, [pc, #252]	@ (80013c4 <main+0x2dc>)
 80012c6:	2100      	movs	r1, #0
 80012c8:	483f      	ldr	r0, [pc, #252]	@ (80013c8 <main+0x2e0>)
 80012ca:	f00a f8d5 	bl	800b478 <osThreadNew>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a3e      	ldr	r2, [pc, #248]	@ (80013cc <main+0x2e4>)
 80012d2:	6013      	str	r3, [r2, #0]

  IRTaskHandle = osThreadNew(StartIRTask, NULL, &IRTask_attributes);
 80012d4:	4a3e      	ldr	r2, [pc, #248]	@ (80013d0 <main+0x2e8>)
 80012d6:	2100      	movs	r1, #0
 80012d8:	483e      	ldr	r0, [pc, #248]	@ (80013d4 <main+0x2ec>)
 80012da:	f00a f8cd 	bl	800b478 <osThreadNew>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a3d      	ldr	r2, [pc, #244]	@ (80013d8 <main+0x2f0>)
 80012e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012e4:	f00a f8a2 	bl	800b42c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <main+0x200>
 80012ec:	200003cc 	.word	0x200003cc
 80012f0:	20000694 	.word	0x20000694
 80012f4:	20000660 	.word	0x20000660
 80012f8:	20000001 	.word	0x20000001
 80012fc:	3f4ccccd 	.word	0x3f4ccccd
 8001300:	00000000 	.word	0x00000000
 8001304:	200006e0 	.word	0x200006e0
 8001308:	200006cc 	.word	0x200006cc
 800130c:	200006f4 	.word	0x200006f4
 8001310:	20000000 	.word	0x20000000
 8001314:	20000654 	.word	0x20000654
 8001318:	200005d0 	.word	0x200005d0
 800131c:	20000420 	.word	0x20000420
 8001320:	20000588 	.word	0x20000588
 8001324:	20000468 	.word	0x20000468
 8001328:	08010f08 	.word	0x08010f08
 800132c:	08003cf1 	.word	0x08003cf1
 8001330:	20000618 	.word	0x20000618
 8001334:	08010f2c 	.word	0x08010f2c
 8001338:	08003d35 	.word	0x08003d35
 800133c:	2000061c 	.word	0x2000061c
 8001340:	08010f50 	.word	0x08010f50
 8001344:	08004275 	.word	0x08004275
 8001348:	20000620 	.word	0x20000620
 800134c:	08010f74 	.word	0x08010f74
 8001350:	08004355 	.word	0x08004355
 8001354:	20000624 	.word	0x20000624
 8001358:	08010f98 	.word	0x08010f98
 800135c:	080045c9 	.word	0x080045c9
 8001360:	20000628 	.word	0x20000628
 8001364:	08010fbc 	.word	0x08010fbc
 8001368:	08004639 	.word	0x08004639
 800136c:	2000062c 	.word	0x2000062c
 8001370:	08010fe0 	.word	0x08010fe0
 8001374:	08004735 	.word	0x08004735
 8001378:	20000630 	.word	0x20000630
 800137c:	08011004 	.word	0x08011004
 8001380:	0800490d 	.word	0x0800490d
 8001384:	20000634 	.word	0x20000634
 8001388:	08011028 	.word	0x08011028
 800138c:	08004b19 	.word	0x08004b19
 8001390:	20000638 	.word	0x20000638
 8001394:	0801104c 	.word	0x0801104c
 8001398:	08004d25 	.word	0x08004d25
 800139c:	2000063c 	.word	0x2000063c
 80013a0:	08011070 	.word	0x08011070
 80013a4:	08004f1d 	.word	0x08004f1d
 80013a8:	20000640 	.word	0x20000640
 80013ac:	08011094 	.word	0x08011094
 80013b0:	08005241 	.word	0x08005241
 80013b4:	20000644 	.word	0x20000644
 80013b8:	080110b8 	.word	0x080110b8
 80013bc:	080052bd 	.word	0x080052bd
 80013c0:	20000648 	.word	0x20000648
 80013c4:	080110dc 	.word	0x080110dc
 80013c8:	08005141 	.word	0x08005141
 80013cc:	2000064c 	.word	0x2000064c
 80013d0:	08011100 	.word	0x08011100
 80013d4:	080025c1 	.word	0x080025c1
 80013d8:	20000650 	.word	0x20000650

080013dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b094      	sub	sp, #80	@ 0x50
 80013e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e2:	f107 0320 	add.w	r3, r7, #32
 80013e6:	2230      	movs	r2, #48	@ 0x30
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00d fc2d 	bl	800ec4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <SystemClock_Config+0xb4>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	4a21      	ldr	r2, [pc, #132]	@ (8001490 <SystemClock_Config+0xb4>)
 800140a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800140e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001410:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <SystemClock_Config+0xb4>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800141c:	2300      	movs	r3, #0
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <SystemClock_Config+0xb8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1b      	ldr	r2, [pc, #108]	@ (8001494 <SystemClock_Config+0xb8>)
 8001426:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <SystemClock_Config+0xb8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001438:	2302      	movs	r3, #2
 800143a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143c:	2301      	movs	r3, #1
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001440:	2310      	movs	r3, #16
 8001442:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001444:	2300      	movs	r3, #0
 8001446:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001448:	f107 0320 	add.w	r3, r7, #32
 800144c:	4618      	mov	r0, r3
 800144e:	f006 fd73 	bl	8007f38 <HAL_RCC_OscConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001458:	f003 ffa8 	bl	80053ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145c:	230f      	movs	r3, #15
 800145e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f006 ffd6 	bl	8008428 <HAL_RCC_ClockConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001482:	f003 ff93 	bl	80053ac <Error_Handler>
  }
}
 8001486:	bf00      	nop
 8001488:	3750      	adds	r7, #80	@ 0x50
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40007000 	.word	0x40007000

08001498 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014aa:	4b21      	ldr	r3, [pc, #132]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014ac:	4a21      	ldr	r2, [pc, #132]	@ (8001534 <MX_ADC1_Init+0x9c>)
 80014ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;		//this means that the ADC performs a single-channel, single-conversion mode.
 80014c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014c8:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014d0:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d6:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014d8:	4a17      	ldr	r2, [pc, #92]	@ (8001538 <MX_ADC1_Init+0xa0>)
 80014da:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014dc:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014e2:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014f6:	480e      	ldr	r0, [pc, #56]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014f8:	f004 fd78 	bl	8005fec <HAL_ADC_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001502:	f003 ff53 	bl	80053ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001506:	230b      	movs	r3, #11
 8001508:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800150a:	2301      	movs	r3, #1
 800150c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001512:	463b      	mov	r3, r7
 8001514:	4619      	mov	r1, r3
 8001516:	4806      	ldr	r0, [pc, #24]	@ (8001530 <MX_ADC1_Init+0x98>)
 8001518:	f004 ff4a 	bl	80063b0 <HAL_ADC_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001522:	f003 ff43 	bl	80053ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000033c 	.word	0x2000033c
 8001534:	40012000 	.word	0x40012000
 8001538:	0f000001 	.word	0x0f000001

0800153c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800154e:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001550:	4a21      	ldr	r2, [pc, #132]	@ (80015d8 <MX_ADC2_Init+0x9c>)
 8001552:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001554:	4b1f      	ldr	r3, [pc, #124]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001556:	2200      	movs	r2, #0
 8001558:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800155a:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <MX_ADC2_Init+0x98>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001560:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001566:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001568:	2200      	movs	r2, #0
 800156a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800156c:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <MX_ADC2_Init+0x98>)
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001574:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001576:	2200      	movs	r2, #0
 8001578:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800157a:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <MX_ADC2_Init+0x98>)
 800157c:	4a17      	ldr	r2, [pc, #92]	@ (80015dc <MX_ADC2_Init+0xa0>)
 800157e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001580:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001586:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001588:	2201      	movs	r2, #1
 800158a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <MX_ADC2_Init+0x98>)
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001596:	2201      	movs	r2, #1
 8001598:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800159a:	480e      	ldr	r0, [pc, #56]	@ (80015d4 <MX_ADC2_Init+0x98>)
 800159c:	f004 fd26 	bl	8005fec <HAL_ADC_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80015a6:	f003 ff01 	bl	80053ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80015aa:	230c      	movs	r3, #12
 80015ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015ae:	2301      	movs	r3, #1
 80015b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015b6:	463b      	mov	r3, r7
 80015b8:	4619      	mov	r1, r3
 80015ba:	4806      	ldr	r0, [pc, #24]	@ (80015d4 <MX_ADC2_Init+0x98>)
 80015bc:	f004 fef8 	bl	80063b0 <HAL_ADC_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80015c6:	f003 fef1 	bl	80053ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000384 	.word	0x20000384
 80015d8:	40012100 	.word	0x40012100
 80015dc:	0f000001 	.word	0x0f000001

080015e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <MX_I2C1_Init+0x50>)
 80015e6:	4a13      	ldr	r2, [pc, #76]	@ (8001634 <MX_I2C1_Init+0x54>)
 80015e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <MX_I2C1_Init+0x50>)
 80015ec:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <MX_I2C1_Init+0x58>)
 80015ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <MX_I2C1_Init+0x50>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <MX_I2C1_Init+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <MX_I2C1_Init+0x50>)
 80015fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001604:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <MX_I2C1_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <MX_I2C1_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001610:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <MX_I2C1_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <MX_I2C1_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	@ (8001630 <MX_I2C1_Init+0x50>)
 800161e:	f005 fc3f 	bl	8006ea0 <HAL_I2C_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001628:	f003 fec0 	bl	80053ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200003cc 	.word	0x200003cc
 8001634:	40005400 	.word	0x40005400
 8001638:	000186a0 	.word	0x000186a0

0800163c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b096      	sub	sp, #88	@ 0x58
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001642:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001650:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800165a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]
 800166a:	615a      	str	r2, [r3, #20]
 800166c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2220      	movs	r2, #32
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f00d fae8 	bl	800ec4a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800167a:	4b3e      	ldr	r3, [pc, #248]	@ (8001774 <MX_TIM1_Init+0x138>)
 800167c:	4a3e      	ldr	r2, [pc, #248]	@ (8001778 <MX_TIM1_Init+0x13c>)
 800167e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320;
 8001680:	4b3c      	ldr	r3, [pc, #240]	@ (8001774 <MX_TIM1_Init+0x138>)
 8001682:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001686:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b3a      	ldr	r3, [pc, #232]	@ (8001774 <MX_TIM1_Init+0x138>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800168e:	4b39      	ldr	r3, [pc, #228]	@ (8001774 <MX_TIM1_Init+0x138>)
 8001690:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001694:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001696:	4b37      	ldr	r3, [pc, #220]	@ (8001774 <MX_TIM1_Init+0x138>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800169c:	4b35      	ldr	r3, [pc, #212]	@ (8001774 <MX_TIM1_Init+0x138>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016a2:	4b34      	ldr	r3, [pc, #208]	@ (8001774 <MX_TIM1_Init+0x138>)
 80016a4:	2280      	movs	r2, #128	@ 0x80
 80016a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016a8:	4832      	ldr	r0, [pc, #200]	@ (8001774 <MX_TIM1_Init+0x138>)
 80016aa:	f007 f89d 	bl	80087e8 <HAL_TIM_Base_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80016b4:	f003 fe7a 	bl	80053ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016be:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016c2:	4619      	mov	r1, r3
 80016c4:	482b      	ldr	r0, [pc, #172]	@ (8001774 <MX_TIM1_Init+0x138>)
 80016c6:	f007 ffa7 	bl	8009618 <HAL_TIM_ConfigClockSource>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80016d0:	f003 fe6c 	bl	80053ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016d4:	4827      	ldr	r0, [pc, #156]	@ (8001774 <MX_TIM1_Init+0x138>)
 80016d6:	f007 f8d6 	bl	8008886 <HAL_TIM_PWM_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80016e0:	f003 fe64 	bl	80053ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016f0:	4619      	mov	r1, r3
 80016f2:	4820      	ldr	r0, [pc, #128]	@ (8001774 <MX_TIM1_Init+0x138>)
 80016f4:	f008 fd0a 	bl	800a10c <HAL_TIMEx_MasterConfigSynchronization>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80016fe:	f003 fe55 	bl	80053ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001702:	2360      	movs	r3, #96	@ 0x60
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170a:	2300      	movs	r3, #0
 800170c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800171a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800171e:	220c      	movs	r2, #12
 8001720:	4619      	mov	r1, r3
 8001722:	4814      	ldr	r0, [pc, #80]	@ (8001774 <MX_TIM1_Init+0x138>)
 8001724:	f007 feb6 	bl	8009494 <HAL_TIM_PWM_ConfigChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800172e:	f003 fe3d 	bl	80053ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001746:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800174a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	4619      	mov	r1, r3
 8001754:	4807      	ldr	r0, [pc, #28]	@ (8001774 <MX_TIM1_Init+0x138>)
 8001756:	f008 fd55 	bl	800a204 <HAL_TIMEx_ConfigBreakDeadTime>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001760:	f003 fe24 	bl	80053ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001764:	4803      	ldr	r0, [pc, #12]	@ (8001774 <MX_TIM1_Init+0x138>)
 8001766:	f004 f9d1 	bl	8005b0c <HAL_TIM_MspPostInit>

}
 800176a:	bf00      	nop
 800176c:	3758      	adds	r7, #88	@ 0x58
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000420 	.word	0x20000420
 8001778:	40010000 	.word	0x40010000

0800177c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08c      	sub	sp, #48	@ 0x30
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	2224      	movs	r2, #36	@ 0x24
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f00d fa5d 	bl	800ec4a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001798:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <MX_TIM2_Init+0xa4>)
 800179a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800179e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80017ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ba:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017c0:	2303      	movs	r3, #3
 80017c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017c8:	2301      	movs	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80017d0:	230a      	movs	r3, #10
 80017d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017d8:	2301      	movs	r3, #1
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80017e0:	230a      	movs	r3, #10
 80017e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4619      	mov	r1, r3
 80017ea:	480d      	ldr	r0, [pc, #52]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017ec:	f007 fb92 	bl	8008f14 <HAL_TIM_Encoder_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80017f6:	f003 fdd9 	bl	80053ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	4619      	mov	r1, r3
 8001806:	4806      	ldr	r0, [pc, #24]	@ (8001820 <MX_TIM2_Init+0xa4>)
 8001808:	f008 fc80 	bl	800a10c <HAL_TIMEx_MasterConfigSynchronization>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001812:	f003 fdcb 	bl	80053ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	3730      	adds	r7, #48	@ 0x30
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000468 	.word	0x20000468

08001824 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	@ 0x30
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	2224      	movs	r2, #36	@ 0x24
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f00d fa09 	bl	800ec4a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001840:	4b20      	ldr	r3, [pc, #128]	@ (80018c4 <MX_TIM3_Init+0xa0>)
 8001842:	4a21      	ldr	r2, [pc, #132]	@ (80018c8 <MX_TIM3_Init+0xa4>)
 8001844:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001846:	4b1f      	ldr	r3, [pc, #124]	@ (80018c4 <MX_TIM3_Init+0xa0>)
 8001848:	2200      	movs	r2, #0
 800184a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184c:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <MX_TIM3_Init+0xa0>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001852:	4b1c      	ldr	r3, [pc, #112]	@ (80018c4 <MX_TIM3_Init+0xa0>)
 8001854:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001858:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185a:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <MX_TIM3_Init+0xa0>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001860:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <MX_TIM3_Init+0xa0>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001866:	2303      	movs	r3, #3
 8001868:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800186e:	2301      	movs	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001876:	230a      	movs	r3, #10
 8001878:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800187e:	2301      	movs	r3, #1
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001886:	230a      	movs	r3, #10
 8001888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	4619      	mov	r1, r3
 8001890:	480c      	ldr	r0, [pc, #48]	@ (80018c4 <MX_TIM3_Init+0xa0>)
 8001892:	f007 fb3f 	bl	8008f14 <HAL_TIM_Encoder_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800189c:	f003 fd86 	bl	80053ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <MX_TIM3_Init+0xa0>)
 80018ae:	f008 fc2d 	bl	800a10c <HAL_TIMEx_MasterConfigSynchronization>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80018b8:	f003 fd78 	bl	80053ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	3730      	adds	r7, #48	@ 0x30
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200004b0 	.word	0x200004b0
 80018c8:	40000400 	.word	0x40000400

080018cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018dc:	463b      	mov	r3, r7
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018e8:	4b25      	ldr	r3, [pc, #148]	@ (8001980 <MX_TIM4_Init+0xb4>)
 80018ea:	4a26      	ldr	r2, [pc, #152]	@ (8001984 <MX_TIM4_Init+0xb8>)
 80018ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 80018ee:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <MX_TIM4_Init+0xb4>)
 80018f0:	220f      	movs	r2, #15
 80018f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f4:	4b22      	ldr	r3, [pc, #136]	@ (8001980 <MX_TIM4_Init+0xb4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018fa:	4b21      	ldr	r3, [pc, #132]	@ (8001980 <MX_TIM4_Init+0xb4>)
 80018fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001900:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001902:	4b1f      	ldr	r3, [pc, #124]	@ (8001980 <MX_TIM4_Init+0xb4>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001908:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <MX_TIM4_Init+0xb4>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800190e:	481c      	ldr	r0, [pc, #112]	@ (8001980 <MX_TIM4_Init+0xb4>)
 8001910:	f007 f8da 	bl	8008ac8 <HAL_TIM_IC_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800191a:	f003 fd47 	bl	80053ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	4619      	mov	r1, r3
 800192c:	4814      	ldr	r0, [pc, #80]	@ (8001980 <MX_TIM4_Init+0xb4>)
 800192e:	f008 fbed 	bl	800a10c <HAL_TIMEx_MasterConfigSynchronization>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001938:	f003 fd38 	bl	80053ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800193c:	2300      	movs	r3, #0
 800193e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001940:	2301      	movs	r3, #1
 8001942:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800194c:	463b      	mov	r3, r7
 800194e:	2204      	movs	r2, #4
 8001950:	4619      	mov	r1, r3
 8001952:	480b      	ldr	r0, [pc, #44]	@ (8001980 <MX_TIM4_Init+0xb4>)
 8001954:	f007 fd02 	bl	800935c <HAL_TIM_IC_ConfigChannel>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800195e:	f003 fd25 	bl	80053ac <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001962:	463b      	mov	r3, r7
 8001964:	2200      	movs	r2, #0
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	@ (8001980 <MX_TIM4_Init+0xb4>)
 800196a:	f007 fcf7 	bl	800935c <HAL_TIM_IC_ConfigChannel>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM4_Init+0xac>
  		Error_Handler();
 8001974:	f003 fd1a 	bl	80053ac <Error_Handler>
  	}
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	200004f8 	.word	0x200004f8
 8001984:	40000800 	.word	0x40000800

08001988 <MX_TIM6_Init>:

static void MX_TIM6_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198e:	463b      	mov	r3, r7
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <MX_TIM6_Init+0x64>)
 8001998:	4a15      	ldr	r2, [pc, #84]	@ (80019f0 <MX_TIM6_Init+0x68>)
 800199a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800199c:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <MX_TIM6_Init+0x64>)
 800199e:	2200      	movs	r2, #0
 80019a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <MX_TIM6_Init+0x64>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80019a8:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <MX_TIM6_Init+0x64>)
 80019aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b0:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <MX_TIM6_Init+0x64>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019b6:	480d      	ldr	r0, [pc, #52]	@ (80019ec <MX_TIM6_Init+0x64>)
 80019b8:	f006 ff16 	bl	80087e8 <HAL_TIM_Base_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80019c2:	f003 fcf3 	bl	80053ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019ce:	463b      	mov	r3, r7
 80019d0:	4619      	mov	r1, r3
 80019d2:	4806      	ldr	r0, [pc, #24]	@ (80019ec <MX_TIM6_Init+0x64>)
 80019d4:	f008 fb9a 	bl	800a10c <HAL_TIMEx_MasterConfigSynchronization>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80019de:	f003 fce5 	bl	80053ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000540 	.word	0x20000540
 80019f0:	40001000 	.word	0x40001000

080019f4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b096      	sub	sp, #88	@ 0x58
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a08:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]
 8001a22:	615a      	str	r2, [r3, #20]
 8001a24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	2220      	movs	r2, #32
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f00d f90c 	bl	800ec4a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a32:	4b43      	ldr	r3, [pc, #268]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a34:	4a43      	ldr	r2, [pc, #268]	@ (8001b44 <MX_TIM8_Init+0x150>)
 8001a36:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a38:	4b41      	ldr	r3, [pc, #260]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3e:	4b40      	ldr	r3, [pc, #256]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001a44:	4b3e      	ldr	r3, [pc, #248]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a46:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001a4a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a52:	4b3b      	ldr	r3, [pc, #236]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a58:	4b39      	ldr	r3, [pc, #228]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a5e:	4838      	ldr	r0, [pc, #224]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a60:	f006 fec2 	bl	80087e8 <HAL_TIM_Base_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001a6a:	f003 fc9f 	bl	80053ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a72:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a74:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4831      	ldr	r0, [pc, #196]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a7c:	f007 fdcc 	bl	8009618 <HAL_TIM_ConfigClockSource>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001a86:	f003 fc91 	bl	80053ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a8a:	482d      	ldr	r0, [pc, #180]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a8c:	f006 fefb 	bl	8008886 <HAL_TIM_PWM_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001a96:	f003 fc89 	bl	80053ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001aa2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4825      	ldr	r0, [pc, #148]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001aaa:	f008 fb2f 	bl	800a10c <HAL_TIMEx_MasterConfigSynchronization>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001ab4:	f003 fc7a 	bl	80053ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab8:	2360      	movs	r3, #96	@ 0x60
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad8:	2200      	movs	r2, #0
 8001ada:	4619      	mov	r1, r3
 8001adc:	4818      	ldr	r0, [pc, #96]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001ade:	f007 fcd9 	bl	8009494 <HAL_TIM_PWM_ConfigChannel>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001ae8:	f003 fc60 	bl	80053ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af0:	2204      	movs	r2, #4
 8001af2:	4619      	mov	r1, r3
 8001af4:	4812      	ldr	r0, [pc, #72]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001af6:	f007 fccd 	bl	8009494 <HAL_TIM_PWM_ConfigChannel>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001b00:	f003 fc54 	bl	80053ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	4619      	mov	r1, r3
 8001b26:	4806      	ldr	r0, [pc, #24]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001b28:	f008 fb6c 	bl	800a204 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001b32:	f003 fc3b 	bl	80053ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	3758      	adds	r7, #88	@ 0x58
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000588 	.word	0x20000588
 8001b44:	40010400 	.word	0x40010400

08001b48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	@ (8001b98 <MX_USART3_UART_Init+0x50>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b7e:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b80:	f008 fba6 	bl	800a2d0 <HAL_UART_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b8a:	f003 fc0f 	bl	80053ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200005d0 	.word	0x200005d0
 8001b98:	40004800 	.word	0x40004800

08001b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08c      	sub	sp, #48	@ 0x30
 8001ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	4a5a      	ldr	r2, [pc, #360]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001bbc:	f043 0310 	orr.w	r3, r3, #16
 8001bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc2:	4b58      	ldr	r3, [pc, #352]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	4b54      	ldr	r3, [pc, #336]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	4a53      	ldr	r2, [pc, #332]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bde:	4b51      	ldr	r3, [pc, #324]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	4b4d      	ldr	r3, [pc, #308]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	4a4c      	ldr	r2, [pc, #304]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	4b46      	ldr	r3, [pc, #280]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	4a45      	ldr	r2, [pc, #276]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c16:	4b43      	ldr	r3, [pc, #268]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	4b3f      	ldr	r3, [pc, #252]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c32:	4b3c      	ldr	r3, [pc, #240]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	4b38      	ldr	r3, [pc, #224]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	4a37      	ldr	r2, [pc, #220]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001c48:	f043 0308 	orr.w	r3, r3, #8
 8001c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4e:	4b35      	ldr	r3, [pc, #212]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 8001c60:	4831      	ldr	r0, [pc, #196]	@ (8001d28 <MX_GPIO_Init+0x18c>)
 8001c62:	f005 f903 	bl	8006e6c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001c66:	2200      	movs	r2, #0
 8001c68:	213c      	movs	r1, #60	@ 0x3c
 8001c6a:	4830      	ldr	r0, [pc, #192]	@ (8001d2c <MX_GPIO_Init+0x190>)
 8001c6c:	f005 f8fe 	bl	8006e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin|TRI_Pin, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001c76:	482e      	ldr	r0, [pc, #184]	@ (8001d30 <MX_GPIO_Init+0x194>)
 8001c78:	f005 f8f8 	bl	8006e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c82:	482c      	ldr	r0, [pc, #176]	@ (8001d34 <MX_GPIO_Init+0x198>)
 8001c84:	f005 f8f2 	bl	8006e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001c88:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 8001c8c:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4821      	ldr	r0, [pc, #132]	@ (8001d28 <MX_GPIO_Init+0x18c>)
 8001ca2:	f004 ff47 	bl	8006b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001ca6:	233c      	movs	r3, #60	@ 0x3c
 8001ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	4619      	mov	r1, r3
 8001cbc:	481b      	ldr	r0, [pc, #108]	@ (8001d2c <MX_GPIO_Init+0x190>)
 8001cbe:	f004 ff39 	bl	8006b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin TRI_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|TRI_Pin;
 8001cc2:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8001cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4815      	ldr	r0, [pc, #84]	@ (8001d30 <MX_GPIO_Init+0x194>)
 8001cdc:	f004 ff2a 	bl	8006b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = USER_PB_Pin;
 8001ce0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ce6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480f      	ldr	r0, [pc, #60]	@ (8001d34 <MX_GPIO_Init+0x198>)
 8001cf8:	f004 ff1c 	bl	8006b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigger_Pin */
  	GPIO_InitStruct.Pin = Trigger_Pin;
 8001cfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d00:	61fb      	str	r3, [r7, #28]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	623b      	str	r3, [r7, #32]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  	HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4619      	mov	r1, r3
 8001d14:	4807      	ldr	r0, [pc, #28]	@ (8001d34 <MX_GPIO_Init+0x198>)
 8001d16:	f004 ff0d 	bl	8006b34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
//  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 8001d1a:	bf00      	nop
 8001d1c:	3730      	adds	r7, #48	@ 0x30
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40020400 	.word	0x40020400
 8001d34:	40020c00 	.word	0x40020c00

08001d38 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */

// HAL_UART_RxCpltCallback evoked when buffer is full
// Function process commands like stop forward and etc
// Main logic block helps to queue commands to commandqueue for processing
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08a      	sub	sp, #40	@ 0x28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	// prevent unused argument(s) compilation warning
	HAL_UART_Transmit(&huart3, (uint8_t*) aRxBuffer, 4, 0xFFF);
 8001d40:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001d44:	2204      	movs	r2, #4
 8001d46:	4992      	ldr	r1, [pc, #584]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001d48:	4892      	ldr	r0, [pc, #584]	@ (8001f94 <HAL_UART_RxCpltCallback+0x25c>)
 8001d4a:	f008 fb11 	bl	800a370 <HAL_UART_Transmit>
	UNUSED(huart);
	int val;
	val = (aRxBuffer[2] - 48) * 10 + (aRxBuffer[3] - 48);
 8001d4e:	4b90      	ldr	r3, [pc, #576]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001d50:	789b      	ldrb	r3, [r3, #2]
 8001d52:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b8b      	ldr	r3, [pc, #556]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001d62:	78db      	ldrb	r3, [r3, #3]
 8001d64:	3b30      	subs	r3, #48	@ 0x30
 8001d66:	4413      	add	r3, r2
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
	if (aRxBuffer[1] >= '0' && aRxBuffer[1] <= '9') val += (aRxBuffer[1] - 48) * 100;
 8001d6a:	4b89      	ldr	r3, [pc, #548]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001d6c:	785b      	ldrb	r3, [r3, #1]
 8001d6e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d70:	d90c      	bls.n	8001d8c <HAL_UART_RxCpltCallback+0x54>
 8001d72:	4b87      	ldr	r3, [pc, #540]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001d74:	785b      	ldrb	r3, [r3, #1]
 8001d76:	2b39      	cmp	r3, #57	@ 0x39
 8001d78:	d808      	bhi.n	8001d8c <HAL_UART_RxCpltCallback+0x54>
 8001d7a:	4b85      	ldr	r3, [pc, #532]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001d7c:	785b      	ldrb	r3, [r3, #1]
 8001d7e:	3b30      	subs	r3, #48	@ 0x30
 8001d80:	2264      	movs	r2, #100	@ 0x64
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
 8001d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d88:	4413      	add	r3, r2
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24


	manualMode = 0;
 8001d8c:	4b82      	ldr	r3, [pc, #520]	@ (8001f98 <HAL_UART_RxCpltCallback+0x260>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]

	if (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T') { // only STOP can preempt any greedy task
 8001d92:	4b7f      	ldr	r3, [pc, #508]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b53      	cmp	r3, #83	@ 0x53
 8001d98:	d159      	bne.n	8001e4e <HAL_UART_RxCpltCallback+0x116>
 8001d9a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001d9c:	785b      	ldrb	r3, [r3, #1]
 8001d9e:	2b54      	cmp	r3, #84	@ 0x54
 8001da0:	d155      	bne.n	8001e4e <HAL_UART_RxCpltCallback+0x116>
//		__ADD_COMMAND(cQueue, 0, 0); // stop
		__ON_TASK_END(&htim8, prevTask, curTask);
 8001da2:	4b7e      	ldr	r3, [pc, #504]	@ (8001f9c <HAL_UART_RxCpltCallback+0x264>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2200      	movs	r2, #0
 8001da8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001daa:	4b7c      	ldr	r3, [pc, #496]	@ (8001f9c <HAL_UART_RxCpltCallback+0x264>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2200      	movs	r2, #0
 8001db0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001db2:	4b7b      	ldr	r3, [pc, #492]	@ (8001fa0 <HAL_UART_RxCpltCallback+0x268>)
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	4b7b      	ldr	r3, [pc, #492]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x26c>)
 8001db8:	701a      	strb	r2, [r3, #0]
 8001dba:	4b79      	ldr	r3, [pc, #484]	@ (8001fa0 <HAL_UART_RxCpltCallback+0x268>)
 8001dbc:	220b      	movs	r2, #11
 8001dbe:	701a      	strb	r2, [r3, #0]
		  angleNow = 0; gyroZ = 0; // reset angle for PID
 8001dc0:	4b79      	ldr	r3, [pc, #484]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x270>)
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	4b78      	ldr	r3, [pc, #480]	@ (8001fac <HAL_UART_RxCpltCallback+0x274>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	801a      	strh	r2, [r3, #0]
		PIDConfigReset(&pidTSlow);
 8001dce:	4878      	ldr	r0, [pc, #480]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x278>)
 8001dd0:	f000 fc75 	bl	80026be <PIDConfigReset>
		PIDConfigReset(&pidSlow);
 8001dd4:	4877      	ldr	r0, [pc, #476]	@ (8001fb4 <HAL_UART_RxCpltCallback+0x27c>)
 8001dd6:	f000 fc72 	bl	80026be <PIDConfigReset>
		PIDConfigReset(&pidFast);
 8001dda:	4877      	ldr	r0, [pc, #476]	@ (8001fb8 <HAL_UART_RxCpltCallback+0x280>)
 8001ddc:	f000 fc6f 	bl	80026be <PIDConfigReset>
		curDistTick = 0;
 8001de0:	4b76      	ldr	r3, [pc, #472]	@ (8001fbc <HAL_UART_RxCpltCallback+0x284>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	801a      	strh	r2, [r3, #0]
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8001de6:	4b76      	ldr	r3, [pc, #472]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	4b75      	ldr	r3, [pc, #468]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001dec:	785b      	ldrb	r3, [r3, #1]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d112      	bne.n	8001e18 <HAL_UART_RxCpltCallback+0xe0>
			__CLEAR_CURCMD(curCmd);
 8001df2:	4b74      	ldr	r3, [pc, #464]	@ (8001fc4 <HAL_UART_RxCpltCallback+0x28c>)
 8001df4:	2264      	movs	r2, #100	@ 0x64
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	4b72      	ldr	r3, [pc, #456]	@ (8001fc4 <HAL_UART_RxCpltCallback+0x28c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 8001dfe:	4a72      	ldr	r2, [pc, #456]	@ (8001fc8 <HAL_UART_RxCpltCallback+0x290>)
 8001e00:	210f      	movs	r1, #15
 8001e02:	4872      	ldr	r0, [pc, #456]	@ (8001fcc <HAL_UART_RxCpltCallback+0x294>)
 8001e04:	f00c fe8a 	bl	800eb1c <sniprintf>
 8001e08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e0c:	2206      	movs	r2, #6
 8001e0e:	4970      	ldr	r1, [pc, #448]	@ (8001fd0 <HAL_UART_RxCpltCallback+0x298>)
 8001e10:	4860      	ldr	r0, [pc, #384]	@ (8001f94 <HAL_UART_RxCpltCallback+0x25c>)
 8001e12:	f008 faad 	bl	800a370 <HAL_UART_Transmit>
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8001e16:	e308      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
		}
		else {
			__READ_COMMAND(cQueue, curCmd, rxMsg);
 8001e18:	4b69      	ldr	r3, [pc, #420]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001e1a:	785b      	ldrb	r3, [r3, #1]
 8001e1c:	4a69      	ldr	r2, [pc, #420]	@ (8001fc4 <HAL_UART_RxCpltCallback+0x28c>)
 8001e1e:	4968      	ldr	r1, [pc, #416]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b65      	ldr	r3, [pc, #404]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001e2a:	785b      	ldrb	r3, [r3, #1]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	4a64      	ldr	r2, [pc, #400]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001e30:	7892      	ldrb	r2, [r2, #2]
 8001e32:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e36:	fb01 f202 	mul.w	r2, r1, r2
 8001e3a:	1a9b      	subs	r3, r3, r2
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b60      	ldr	r3, [pc, #384]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001e40:	705a      	strb	r2, [r3, #1]
 8001e42:	4a64      	ldr	r2, [pc, #400]	@ (8001fd4 <HAL_UART_RxCpltCallback+0x29c>)
 8001e44:	210f      	movs	r1, #15
 8001e46:	4861      	ldr	r0, [pc, #388]	@ (8001fcc <HAL_UART_RxCpltCallback+0x294>)
 8001e48:	f00c fe68 	bl	800eb1c <sniprintf>
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8001e4c:	e2ed      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
		}
	}
	else if (aRxBuffer[0] == 'F' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S')) { //FW or FS
 8001e4e:	4b50      	ldr	r3, [pc, #320]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b46      	cmp	r3, #70	@ 0x46
 8001e54:	d13d      	bne.n	8001ed2 <HAL_UART_RxCpltCallback+0x19a>
 8001e56:	4b4e      	ldr	r3, [pc, #312]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001e58:	785b      	ldrb	r3, [r3, #1]
 8001e5a:	2b57      	cmp	r3, #87	@ 0x57
 8001e5c:	d003      	beq.n	8001e66 <HAL_UART_RxCpltCallback+0x12e>
 8001e5e:	4b4c      	ldr	r3, [pc, #304]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001e60:	785b      	ldrb	r3, [r3, #1]
 8001e62:	2b53      	cmp	r3, #83	@ 0x53
 8001e64:	d135      	bne.n	8001ed2 <HAL_UART_RxCpltCallback+0x19a>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001e66:	4b4a      	ldr	r3, [pc, #296]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001e68:	789b      	ldrb	r3, [r3, #2]
 8001e6a:	2b2d      	cmp	r3, #45	@ 0x2d
 8001e6c:	d105      	bne.n	8001e7a <HAL_UART_RxCpltCallback+0x142>
 8001e6e:	4b48      	ldr	r3, [pc, #288]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001e70:	78db      	ldrb	r3, [r3, #3]
 8001e72:	2b2d      	cmp	r3, #45	@ 0x2d
 8001e74:	d101      	bne.n	8001e7a <HAL_UART_RxCpltCallback+0x142>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_UART_RxCpltCallback+0x144>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4b46      	ldr	r3, [pc, #280]	@ (8001f98 <HAL_UART_RxCpltCallback+0x260>)
 8001e80:	701a      	strb	r2, [r3, #0]
		moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001e82:	4b43      	ldr	r3, [pc, #268]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001e84:	785b      	ldrb	r3, [r3, #1]
 8001e86:	2b53      	cmp	r3, #83	@ 0x53
 8001e88:	bf14      	ite	ne
 8001e8a:	2301      	movne	r3, #1
 8001e8c:	2300      	moveq	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b51      	ldr	r3, [pc, #324]	@ (8001fd8 <HAL_UART_RxCpltCallback+0x2a0>)
 8001e94:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 1, val);
 8001e96:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	4a49      	ldr	r2, [pc, #292]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	711a      	strb	r2, [r3, #4]
 8001ea4:	4b46      	ldr	r3, [pc, #280]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eaa:	b291      	uxth	r1, r2
 8001eac:	4a44      	ldr	r2, [pc, #272]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	460a      	mov	r2, r1
 8001eb4:	80da      	strh	r2, [r3, #6]
 8001eb6:	4b42      	ldr	r3, [pc, #264]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	4a40      	ldr	r2, [pc, #256]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001ebe:	7892      	ldrb	r2, [r2, #2]
 8001ec0:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ec4:	fb01 f202 	mul.w	r2, r1, r2
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	4b3c      	ldr	r3, [pc, #240]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001ece:	701a      	strb	r2, [r3, #0]
 8001ed0:	e2ab      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	}
	else if (aRxBuffer[0] == 'B' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S')) { //BW or BS
 8001ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b42      	cmp	r3, #66	@ 0x42
 8001ed8:	d13d      	bne.n	8001f56 <HAL_UART_RxCpltCallback+0x21e>
 8001eda:	4b2d      	ldr	r3, [pc, #180]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001edc:	785b      	ldrb	r3, [r3, #1]
 8001ede:	2b57      	cmp	r3, #87	@ 0x57
 8001ee0:	d003      	beq.n	8001eea <HAL_UART_RxCpltCallback+0x1b2>
 8001ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001ee4:	785b      	ldrb	r3, [r3, #1]
 8001ee6:	2b53      	cmp	r3, #83	@ 0x53
 8001ee8:	d135      	bne.n	8001f56 <HAL_UART_RxCpltCallback+0x21e>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001eea:	4b29      	ldr	r3, [pc, #164]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001eec:	789b      	ldrb	r3, [r3, #2]
 8001eee:	2b2d      	cmp	r3, #45	@ 0x2d
 8001ef0:	d105      	bne.n	8001efe <HAL_UART_RxCpltCallback+0x1c6>
 8001ef2:	4b27      	ldr	r3, [pc, #156]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001ef4:	78db      	ldrb	r3, [r3, #3]
 8001ef6:	2b2d      	cmp	r3, #45	@ 0x2d
 8001ef8:	d101      	bne.n	8001efe <HAL_UART_RxCpltCallback+0x1c6>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_UART_RxCpltCallback+0x1c8>
 8001efe:	2300      	movs	r3, #0
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b25      	ldr	r3, [pc, #148]	@ (8001f98 <HAL_UART_RxCpltCallback+0x260>)
 8001f04:	701a      	strb	r2, [r3, #0]
		moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001f06:	4b22      	ldr	r3, [pc, #136]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001f08:	785b      	ldrb	r3, [r3, #1]
 8001f0a:	2b53      	cmp	r3, #83	@ 0x53
 8001f0c:	bf14      	ite	ne
 8001f0e:	2301      	movne	r3, #1
 8001f10:	2300      	moveq	r3, #0
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b30      	ldr	r3, [pc, #192]	@ (8001fd8 <HAL_UART_RxCpltCallback+0x2a0>)
 8001f18:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 2, val);
 8001f1a:	4b29      	ldr	r3, [pc, #164]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	4a28      	ldr	r2, [pc, #160]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	2202      	movs	r2, #2
 8001f26:	711a      	strb	r2, [r3, #4]
 8001f28:	4b25      	ldr	r3, [pc, #148]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f2e:	b291      	uxth	r1, r2
 8001f30:	4a23      	ldr	r2, [pc, #140]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	460a      	mov	r2, r1
 8001f38:	80da      	strh	r2, [r3, #6]
 8001f3a:	4b21      	ldr	r3, [pc, #132]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	4a1f      	ldr	r2, [pc, #124]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001f42:	7892      	ldrb	r2, [r2, #2]
 8001f44:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f48:	fb01 f202 	mul.w	r2, r1, r2
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	e269      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'L') { // FL
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b46      	cmp	r3, #70	@ 0x46
 8001f5c:	d15d      	bne.n	800201a <HAL_UART_RxCpltCallback+0x2e2>
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001f60:	785b      	ldrb	r3, [r3, #1]
 8001f62:	2b4c      	cmp	r3, #76	@ 0x4c
 8001f64:	d159      	bne.n	800201a <HAL_UART_RxCpltCallback+0x2e2>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001f66:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001f68:	789b      	ldrb	r3, [r3, #2]
 8001f6a:	2b2d      	cmp	r3, #45	@ 0x2d
 8001f6c:	d105      	bne.n	8001f7a <HAL_UART_RxCpltCallback+0x242>
 8001f6e:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001f70:	78db      	ldrb	r3, [r3, #3]
 8001f72:	2b2d      	cmp	r3, #45	@ 0x2d
 8001f74:	d101      	bne.n	8001f7a <HAL_UART_RxCpltCallback+0x242>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_UART_RxCpltCallback+0x244>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <HAL_UART_RxCpltCallback+0x260>)
 8001f80:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 3 + (manualMode ? 0 : 4), val);
 8001f82:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_UART_RxCpltCallback+0x260>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d028      	beq.n	8001fdc <HAL_UART_RxCpltCallback+0x2a4>
 8001f8a:	2103      	movs	r1, #3
 8001f8c:	e027      	b.n	8001fde <HAL_UART_RxCpltCallback+0x2a6>
 8001f8e:	bf00      	nop
 8001f90:	20000654 	.word	0x20000654
 8001f94:	200005d0 	.word	0x200005d0
 8001f98:	200006a8 	.word	0x200006a8
 8001f9c:	20000588 	.word	0x20000588
 8001fa0:	20000134 	.word	0x20000134
 8001fa4:	20000135 	.word	0x20000135
 8001fa8:	200006b0 	.word	0x200006b0
 8001fac:	200006b6 	.word	0x200006b6
 8001fb0:	200006e0 	.word	0x200006e0
 8001fb4:	200006cc 	.word	0x200006cc
 8001fb8:	200006f4 	.word	0x200006f4
 8001fbc:	200006c4 	.word	0x200006c4
 8001fc0:	20000660 	.word	0x20000660
 8001fc4:	20000694 	.word	0x20000694
 8001fc8:	08010ea4 	.word	0x08010ea4
 8001fcc:	20000698 	.word	0x20000698
 8001fd0:	08010eac 	.word	0x08010eac
 8001fd4:	08010eb4 	.word	0x08010eb4
 8001fd8:	20000136 	.word	0x20000136
 8001fdc:	2107      	movs	r1, #7
 8001fde:	4b8d      	ldr	r3, [pc, #564]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	4a8c      	ldr	r2, [pc, #560]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	460a      	mov	r2, r1
 8001fea:	711a      	strb	r2, [r3, #4]
 8001fec:	4b89      	ldr	r3, [pc, #548]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff2:	b291      	uxth	r1, r2
 8001ff4:	4a87      	ldr	r2, [pc, #540]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	460a      	mov	r2, r1
 8001ffc:	80da      	strh	r2, [r3, #6]
 8001ffe:	4b85      	ldr	r3, [pc, #532]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	4a83      	ldr	r2, [pc, #524]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002006:	7892      	ldrb	r2, [r2, #2]
 8002008:	fb93 f1f2 	sdiv	r1, r3, r2
 800200c:	fb01 f202 	mul.w	r2, r1, r2
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	b2da      	uxtb	r2, r3
 8002014:	4b7f      	ldr	r3, [pc, #508]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	e207      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R') { // FR
 800201a:	4b7f      	ldr	r3, [pc, #508]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b46      	cmp	r3, #70	@ 0x46
 8002020:	d136      	bne.n	8002090 <HAL_UART_RxCpltCallback+0x358>
 8002022:	4b7d      	ldr	r3, [pc, #500]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 8002024:	785b      	ldrb	r3, [r3, #1]
 8002026:	2b52      	cmp	r3, #82	@ 0x52
 8002028:	d132      	bne.n	8002090 <HAL_UART_RxCpltCallback+0x358>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 800202a:	4b7b      	ldr	r3, [pc, #492]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 800202c:	789b      	ldrb	r3, [r3, #2]
 800202e:	2b2d      	cmp	r3, #45	@ 0x2d
 8002030:	d105      	bne.n	800203e <HAL_UART_RxCpltCallback+0x306>
 8002032:	4b79      	ldr	r3, [pc, #484]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 8002034:	78db      	ldrb	r3, [r3, #3]
 8002036:	2b2d      	cmp	r3, #45	@ 0x2d
 8002038:	d101      	bne.n	800203e <HAL_UART_RxCpltCallback+0x306>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_UART_RxCpltCallback+0x308>
 800203e:	2300      	movs	r3, #0
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4b76      	ldr	r3, [pc, #472]	@ (800221c <HAL_UART_RxCpltCallback+0x4e4>)
 8002044:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 4 + (manualMode ? 0 : 4), val);
 8002046:	4b75      	ldr	r3, [pc, #468]	@ (800221c <HAL_UART_RxCpltCallback+0x4e4>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_UART_RxCpltCallback+0x31a>
 800204e:	2104      	movs	r1, #4
 8002050:	e000      	b.n	8002054 <HAL_UART_RxCpltCallback+0x31c>
 8002052:	2108      	movs	r1, #8
 8002054:	4b6f      	ldr	r3, [pc, #444]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	4a6e      	ldr	r2, [pc, #440]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	460a      	mov	r2, r1
 8002060:	711a      	strb	r2, [r3, #4]
 8002062:	4b6c      	ldr	r3, [pc, #432]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002068:	b291      	uxth	r1, r2
 800206a:	4a6a      	ldr	r2, [pc, #424]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	460a      	mov	r2, r1
 8002072:	80da      	strh	r2, [r3, #6]
 8002074:	4b67      	ldr	r3, [pc, #412]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	3301      	adds	r3, #1
 800207a:	4a66      	ldr	r2, [pc, #408]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 800207c:	7892      	ldrb	r2, [r2, #2]
 800207e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002082:	fb01 f202 	mul.w	r2, r1, r2
 8002086:	1a9b      	subs	r3, r3, r2
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b62      	ldr	r3, [pc, #392]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	e1cc      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'L') { // BL
 8002090:	4b61      	ldr	r3, [pc, #388]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b42      	cmp	r3, #66	@ 0x42
 8002096:	d136      	bne.n	8002106 <HAL_UART_RxCpltCallback+0x3ce>
 8002098:	4b5f      	ldr	r3, [pc, #380]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 800209a:	785b      	ldrb	r3, [r3, #1]
 800209c:	2b4c      	cmp	r3, #76	@ 0x4c
 800209e:	d132      	bne.n	8002106 <HAL_UART_RxCpltCallback+0x3ce>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 80020a0:	4b5d      	ldr	r3, [pc, #372]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 80020a2:	789b      	ldrb	r3, [r3, #2]
 80020a4:	2b2d      	cmp	r3, #45	@ 0x2d
 80020a6:	d105      	bne.n	80020b4 <HAL_UART_RxCpltCallback+0x37c>
 80020a8:	4b5b      	ldr	r3, [pc, #364]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 80020aa:	78db      	ldrb	r3, [r3, #3]
 80020ac:	2b2d      	cmp	r3, #45	@ 0x2d
 80020ae:	d101      	bne.n	80020b4 <HAL_UART_RxCpltCallback+0x37c>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <HAL_UART_RxCpltCallback+0x37e>
 80020b4:	2300      	movs	r3, #0
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	4b58      	ldr	r3, [pc, #352]	@ (800221c <HAL_UART_RxCpltCallback+0x4e4>)
 80020ba:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 5 + (manualMode ? 0 : 4), val);
 80020bc:	4b57      	ldr	r3, [pc, #348]	@ (800221c <HAL_UART_RxCpltCallback+0x4e4>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_UART_RxCpltCallback+0x390>
 80020c4:	2105      	movs	r1, #5
 80020c6:	e000      	b.n	80020ca <HAL_UART_RxCpltCallback+0x392>
 80020c8:	2109      	movs	r1, #9
 80020ca:	4b52      	ldr	r3, [pc, #328]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	4a51      	ldr	r2, [pc, #324]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	460a      	mov	r2, r1
 80020d6:	711a      	strb	r2, [r3, #4]
 80020d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020de:	b291      	uxth	r1, r2
 80020e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	460a      	mov	r2, r1
 80020e8:	80da      	strh	r2, [r3, #6]
 80020ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	3301      	adds	r3, #1
 80020f0:	4a48      	ldr	r2, [pc, #288]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80020f2:	7892      	ldrb	r2, [r2, #2]
 80020f4:	fb93 f1f2 	sdiv	r1, r3, r2
 80020f8:	fb01 f202 	mul.w	r2, r1, r2
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b44      	ldr	r3, [pc, #272]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002102:	701a      	strb	r2, [r3, #0]
 8002104:	e191      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'R') { // BR
 8002106:	4b44      	ldr	r3, [pc, #272]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b42      	cmp	r3, #66	@ 0x42
 800210c:	d136      	bne.n	800217c <HAL_UART_RxCpltCallback+0x444>
 800210e:	4b42      	ldr	r3, [pc, #264]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	2b52      	cmp	r3, #82	@ 0x52
 8002114:	d132      	bne.n	800217c <HAL_UART_RxCpltCallback+0x444>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8002116:	4b40      	ldr	r3, [pc, #256]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 8002118:	789b      	ldrb	r3, [r3, #2]
 800211a:	2b2d      	cmp	r3, #45	@ 0x2d
 800211c:	d105      	bne.n	800212a <HAL_UART_RxCpltCallback+0x3f2>
 800211e:	4b3e      	ldr	r3, [pc, #248]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 8002120:	78db      	ldrb	r3, [r3, #3]
 8002122:	2b2d      	cmp	r3, #45	@ 0x2d
 8002124:	d101      	bne.n	800212a <HAL_UART_RxCpltCallback+0x3f2>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_UART_RxCpltCallback+0x3f4>
 800212a:	2300      	movs	r3, #0
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4b3b      	ldr	r3, [pc, #236]	@ (800221c <HAL_UART_RxCpltCallback+0x4e4>)
 8002130:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 6 + (manualMode ? 0 : 4), val);
 8002132:	4b3a      	ldr	r3, [pc, #232]	@ (800221c <HAL_UART_RxCpltCallback+0x4e4>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_UART_RxCpltCallback+0x406>
 800213a:	2106      	movs	r1, #6
 800213c:	e000      	b.n	8002140 <HAL_UART_RxCpltCallback+0x408>
 800213e:	210a      	movs	r1, #10
 8002140:	4b34      	ldr	r3, [pc, #208]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4a33      	ldr	r2, [pc, #204]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	460a      	mov	r2, r1
 800214c:	711a      	strb	r2, [r3, #4]
 800214e:	4b31      	ldr	r3, [pc, #196]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002154:	b291      	uxth	r1, r2
 8002156:	4a2f      	ldr	r2, [pc, #188]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	460a      	mov	r2, r1
 800215e:	80da      	strh	r2, [r3, #6]
 8002160:	4b2c      	ldr	r3, [pc, #176]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	3301      	adds	r3, #1
 8002166:	4a2b      	ldr	r2, [pc, #172]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002168:	7892      	ldrb	r2, [r2, #2]
 800216a:	fb93 f1f2 	sdiv	r1, r3, r2
 800216e:	fb01 f202 	mul.w	r2, r1, r2
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b27      	ldr	r3, [pc, #156]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	e156      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	}
	else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'L') __ADD_COMMAND(cQueue, 11, val); // TL turn left max
 800217c:	4b26      	ldr	r3, [pc, #152]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b54      	cmp	r3, #84	@ 0x54
 8002182:	d121      	bne.n	80021c8 <HAL_UART_RxCpltCallback+0x490>
 8002184:	4b24      	ldr	r3, [pc, #144]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 8002186:	785b      	ldrb	r3, [r3, #1]
 8002188:	2b4c      	cmp	r3, #76	@ 0x4c
 800218a:	d11d      	bne.n	80021c8 <HAL_UART_RxCpltCallback+0x490>
 800218c:	4b21      	ldr	r3, [pc, #132]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4a20      	ldr	r2, [pc, #128]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	220b      	movs	r2, #11
 8002198:	711a      	strb	r2, [r3, #4]
 800219a:	4b1e      	ldr	r3, [pc, #120]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021a0:	b291      	uxth	r1, r2
 80021a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	460a      	mov	r2, r1
 80021aa:	80da      	strh	r2, [r3, #6]
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	3301      	adds	r3, #1
 80021b2:	4a18      	ldr	r2, [pc, #96]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80021b4:	7892      	ldrb	r2, [r2, #2]
 80021b6:	fb93 f1f2 	sdiv	r1, r3, r2
 80021ba:	fb01 f202 	mul.w	r2, r1, r2
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4b14      	ldr	r3, [pc, #80]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	e130      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'R') __ADD_COMMAND(cQueue, 12, val); // TR turn right max
 80021c8:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b54      	cmp	r3, #84	@ 0x54
 80021ce:	d127      	bne.n	8002220 <HAL_UART_RxCpltCallback+0x4e8>
 80021d0:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 80021d2:	785b      	ldrb	r3, [r3, #1]
 80021d4:	2b52      	cmp	r3, #82	@ 0x52
 80021d6:	d123      	bne.n	8002220 <HAL_UART_RxCpltCallback+0x4e8>
 80021d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	220c      	movs	r2, #12
 80021e4:	711a      	strb	r2, [r3, #4]
 80021e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ec:	b291      	uxth	r1, r2
 80021ee:	4a09      	ldr	r2, [pc, #36]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	460a      	mov	r2, r1
 80021f6:	80da      	strh	r2, [r3, #6]
 80021f8:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	4a05      	ldr	r2, [pc, #20]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002200:	7892      	ldrb	r2, [r2, #2]
 8002202:	fb93 f1f2 	sdiv	r1, r3, r2
 8002206:	fb01 f202 	mul.w	r2, r1, r2
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4b01      	ldr	r3, [pc, #4]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	e10a      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
 8002214:	20000660 	.word	0x20000660
 8002218:	20000654 	.word	0x20000654
 800221c:	200006a8 	.word	0x200006a8
	else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'R') __ADD_COMMAND(cQueue, 13, val); // test IR sensor
 8002220:	4b6f      	ldr	r3, [pc, #444]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b49      	cmp	r3, #73	@ 0x49
 8002226:	d121      	bne.n	800226c <HAL_UART_RxCpltCallback+0x534>
 8002228:	4b6d      	ldr	r3, [pc, #436]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 800222a:	785b      	ldrb	r3, [r3, #1]
 800222c:	2b52      	cmp	r3, #82	@ 0x52
 800222e:	d11d      	bne.n	800226c <HAL_UART_RxCpltCallback+0x534>
 8002230:	4b6c      	ldr	r3, [pc, #432]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	4a6b      	ldr	r2, [pc, #428]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	220d      	movs	r2, #13
 800223c:	711a      	strb	r2, [r3, #4]
 800223e:	4b69      	ldr	r3, [pc, #420]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002244:	b291      	uxth	r1, r2
 8002246:	4a67      	ldr	r2, [pc, #412]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	460a      	mov	r2, r1
 800224e:	80da      	strh	r2, [r3, #6]
 8002250:	4b64      	ldr	r3, [pc, #400]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	4a63      	ldr	r2, [pc, #396]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002258:	7892      	ldrb	r2, [r2, #2]
 800225a:	fb93 f1f2 	sdiv	r1, r3, r2
 800225e:	fb01 f202 	mul.w	r2, r1, r2
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4b5f      	ldr	r3, [pc, #380]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e0de      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	else if (aRxBuffer[0] == 'D' && aRxBuffer[1] == 'T') __ADD_COMMAND(cQueue, 14, val); // DT move until specified distance from obstacle
 800226c:	4b5c      	ldr	r3, [pc, #368]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b44      	cmp	r3, #68	@ 0x44
 8002272:	d121      	bne.n	80022b8 <HAL_UART_RxCpltCallback+0x580>
 8002274:	4b5a      	ldr	r3, [pc, #360]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 8002276:	785b      	ldrb	r3, [r3, #1]
 8002278:	2b54      	cmp	r3, #84	@ 0x54
 800227a:	d11d      	bne.n	80022b8 <HAL_UART_RxCpltCallback+0x580>
 800227c:	4b59      	ldr	r3, [pc, #356]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4a58      	ldr	r2, [pc, #352]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	220e      	movs	r2, #14
 8002288:	711a      	strb	r2, [r3, #4]
 800228a:	4b56      	ldr	r3, [pc, #344]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002290:	b291      	uxth	r1, r2
 8002292:	4a54      	ldr	r2, [pc, #336]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	460a      	mov	r2, r1
 800229a:	80da      	strh	r2, [r3, #6]
 800229c:	4b51      	ldr	r3, [pc, #324]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	3301      	adds	r3, #1
 80022a2:	4a50      	ldr	r2, [pc, #320]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80022a4:	7892      	ldrb	r2, [r2, #2]
 80022a6:	fb93 f1f2 	sdiv	r1, r3, r2
 80022aa:	fb01 f202 	mul.w	r2, r1, r2
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4b4c      	ldr	r3, [pc, #304]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	e0b8      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	else if (aRxBuffer[0] == 'Z' && aRxBuffer[1] == 'Z') __ADD_COMMAND(cQueue, 15, val); // ZZ buzzer
 80022b8:	4b49      	ldr	r3, [pc, #292]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b5a      	cmp	r3, #90	@ 0x5a
 80022be:	d121      	bne.n	8002304 <HAL_UART_RxCpltCallback+0x5cc>
 80022c0:	4b47      	ldr	r3, [pc, #284]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 80022c2:	785b      	ldrb	r3, [r3, #1]
 80022c4:	2b5a      	cmp	r3, #90	@ 0x5a
 80022c6:	d11d      	bne.n	8002304 <HAL_UART_RxCpltCallback+0x5cc>
 80022c8:	4b46      	ldr	r3, [pc, #280]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4a45      	ldr	r2, [pc, #276]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	220f      	movs	r2, #15
 80022d4:	711a      	strb	r2, [r3, #4]
 80022d6:	4b43      	ldr	r3, [pc, #268]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022dc:	b291      	uxth	r1, r2
 80022de:	4a41      	ldr	r2, [pc, #260]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	460a      	mov	r2, r1
 80022e6:	80da      	strh	r2, [r3, #6]
 80022e8:	4b3e      	ldr	r3, [pc, #248]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	3301      	adds	r3, #1
 80022ee:	4a3d      	ldr	r2, [pc, #244]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80022f0:	7892      	ldrb	r2, [r2, #2]
 80022f2:	fb93 f1f2 	sdiv	r1, r3, r2
 80022f6:	fb01 f202 	mul.w	r2, r1, r2
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4b39      	ldr	r3, [pc, #228]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002300:	701a      	strb	r2, [r3, #0]
 8002302:	e092      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'X') __ADD_COMMAND(cQueue, 16, val); // WN fastest path
 8002304:	4b36      	ldr	r3, [pc, #216]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b57      	cmp	r3, #87	@ 0x57
 800230a:	d121      	bne.n	8002350 <HAL_UART_RxCpltCallback+0x618>
 800230c:	4b34      	ldr	r3, [pc, #208]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 800230e:	785b      	ldrb	r3, [r3, #1]
 8002310:	2b58      	cmp	r3, #88	@ 0x58
 8002312:	d11d      	bne.n	8002350 <HAL_UART_RxCpltCallback+0x618>
 8002314:	4b33      	ldr	r3, [pc, #204]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4a32      	ldr	r2, [pc, #200]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	2210      	movs	r2, #16
 8002320:	711a      	strb	r2, [r3, #4]
 8002322:	4b30      	ldr	r3, [pc, #192]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002328:	b291      	uxth	r1, r2
 800232a:	4a2e      	ldr	r2, [pc, #184]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	460a      	mov	r2, r1
 8002332:	80da      	strh	r2, [r3, #6]
 8002334:	4b2b      	ldr	r3, [pc, #172]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	4a2a      	ldr	r2, [pc, #168]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 800233c:	7892      	ldrb	r2, [r2, #2]
 800233e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002342:	fb01 f202 	mul.w	r2, r1, r2
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4b26      	ldr	r3, [pc, #152]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	e06c      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'N') __ADD_COMMAND(cQueue, 17, val); // WN fastest path v2
 8002350:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b57      	cmp	r3, #87	@ 0x57
 8002356:	d121      	bne.n	800239c <HAL_UART_RxCpltCallback+0x664>
 8002358:	4b21      	ldr	r3, [pc, #132]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 800235a:	785b      	ldrb	r3, [r3, #1]
 800235c:	2b4e      	cmp	r3, #78	@ 0x4e
 800235e:	d11d      	bne.n	800239c <HAL_UART_RxCpltCallback+0x664>
 8002360:	4b20      	ldr	r3, [pc, #128]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	4a1f      	ldr	r2, [pc, #124]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	2211      	movs	r2, #17
 800236c:	711a      	strb	r2, [r3, #4]
 800236e:	4b1d      	ldr	r3, [pc, #116]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002374:	b291      	uxth	r1, r2
 8002376:	4a1b      	ldr	r2, [pc, #108]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	460a      	mov	r2, r1
 800237e:	80da      	strh	r2, [r3, #6]
 8002380:	4b18      	ldr	r3, [pc, #96]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	4a17      	ldr	r2, [pc, #92]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002388:	7892      	ldrb	r2, [r2, #2]
 800238a:	fb93 f1f2 	sdiv	r1, r3, r2
 800238e:	fb01 f202 	mul.w	r2, r1, r2
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b13      	ldr	r3, [pc, #76]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	e046      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	else if (aRxBuffer[0] == 'A') __ADD_COMMAND(cQueue, 88, val); // anti-clockwise rotation with variable
 800239c:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b41      	cmp	r3, #65	@ 0x41
 80023a2:	d121      	bne.n	80023e8 <HAL_UART_RxCpltCallback+0x6b0>
 80023a4:	4b0f      	ldr	r3, [pc, #60]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4a0e      	ldr	r2, [pc, #56]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	2258      	movs	r2, #88	@ 0x58
 80023b0:	711a      	strb	r2, [r3, #4]
 80023b2:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b8:	b291      	uxth	r1, r2
 80023ba:	4a0a      	ldr	r2, [pc, #40]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	460a      	mov	r2, r1
 80023c2:	80da      	strh	r2, [r3, #6]
 80023c4:	4b07      	ldr	r3, [pc, #28]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	3301      	adds	r3, #1
 80023ca:	4a06      	ldr	r2, [pc, #24]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80023cc:	7892      	ldrb	r2, [r2, #2]
 80023ce:	fb93 f1f2 	sdiv	r1, r3, r2
 80023d2:	fb01 f202 	mul.w	r2, r1, r2
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b02      	ldr	r3, [pc, #8]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e024      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
 80023e0:	20000654 	.word	0x20000654
 80023e4:	20000660 	.word	0x20000660
	else if (aRxBuffer[0] == 'C') __ADD_COMMAND(cQueue, 89, val); // clockwise rotation with variable
 80023e8:	4b41      	ldr	r3, [pc, #260]	@ (80024f0 <HAL_UART_RxCpltCallback+0x7b8>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b43      	cmp	r3, #67	@ 0x43
 80023ee:	d11c      	bne.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
 80023f0:	4b40      	ldr	r3, [pc, #256]	@ (80024f4 <HAL_UART_RxCpltCallback+0x7bc>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4a3f      	ldr	r2, [pc, #252]	@ (80024f4 <HAL_UART_RxCpltCallback+0x7bc>)
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	2259      	movs	r2, #89	@ 0x59
 80023fc:	711a      	strb	r2, [r3, #4]
 80023fe:	4b3d      	ldr	r3, [pc, #244]	@ (80024f4 <HAL_UART_RxCpltCallback+0x7bc>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002404:	b291      	uxth	r1, r2
 8002406:	4a3b      	ldr	r2, [pc, #236]	@ (80024f4 <HAL_UART_RxCpltCallback+0x7bc>)
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	460a      	mov	r2, r1
 800240e:	80da      	strh	r2, [r3, #6]
 8002410:	4b38      	ldr	r3, [pc, #224]	@ (80024f4 <HAL_UART_RxCpltCallback+0x7bc>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	3301      	adds	r3, #1
 8002416:	4a37      	ldr	r2, [pc, #220]	@ (80024f4 <HAL_UART_RxCpltCallback+0x7bc>)
 8002418:	7892      	ldrb	r2, [r2, #2]
 800241a:	fb93 f1f2 	sdiv	r1, r3, r2
 800241e:	fb01 f202 	mul.w	r2, r1, r2
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b33      	ldr	r3, [pc, #204]	@ (80024f4 <HAL_UART_RxCpltCallback+0x7bc>)
 8002428:	701a      	strb	r2, [r3, #0]

	if (!__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 800242a:	4b32      	ldr	r3, [pc, #200]	@ (80024f4 <HAL_UART_RxCpltCallback+0x7bc>)
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	4b31      	ldr	r3, [pc, #196]	@ (80024f4 <HAL_UART_RxCpltCallback+0x7bc>)
 8002430:	785b      	ldrb	r3, [r3, #1]
 8002432:	429a      	cmp	r2, r3
 8002434:	d019      	beq.n	800246a <HAL_UART_RxCpltCallback+0x732>
		__READ_COMMAND(cQueue, curCmd, rxMsg);
 8002436:	4b2f      	ldr	r3, [pc, #188]	@ (80024f4 <HAL_UART_RxCpltCallback+0x7bc>)
 8002438:	785b      	ldrb	r3, [r3, #1]
 800243a:	4a2f      	ldr	r2, [pc, #188]	@ (80024f8 <HAL_UART_RxCpltCallback+0x7c0>)
 800243c:	492d      	ldr	r1, [pc, #180]	@ (80024f4 <HAL_UART_RxCpltCallback+0x7bc>)
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b2b      	ldr	r3, [pc, #172]	@ (80024f4 <HAL_UART_RxCpltCallback+0x7bc>)
 8002448:	785b      	ldrb	r3, [r3, #1]
 800244a:	3301      	adds	r3, #1
 800244c:	4a29      	ldr	r2, [pc, #164]	@ (80024f4 <HAL_UART_RxCpltCallback+0x7bc>)
 800244e:	7892      	ldrb	r2, [r2, #2]
 8002450:	fb93 f1f2 	sdiv	r1, r3, r2
 8002454:	fb01 f202 	mul.w	r2, r1, r2
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	b2da      	uxtb	r2, r3
 800245c:	4b25      	ldr	r3, [pc, #148]	@ (80024f4 <HAL_UART_RxCpltCallback+0x7bc>)
 800245e:	705a      	strb	r2, [r3, #1]
 8002460:	4a26      	ldr	r2, [pc, #152]	@ (80024fc <HAL_UART_RxCpltCallback+0x7c4>)
 8002462:	210f      	movs	r1, #15
 8002464:	4826      	ldr	r0, [pc, #152]	@ (8002500 <HAL_UART_RxCpltCallback+0x7c8>)
 8002466:	f00c fb59 	bl	800eb1c <sniprintf>
	}

	// clear aRx buffer
	  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 800246a:	4b26      	ldr	r3, [pc, #152]	@ (8002504 <HAL_UART_RxCpltCallback+0x7cc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
	  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8002470:	4b25      	ldr	r3, [pc, #148]	@ (8002508 <HAL_UART_RxCpltCallback+0x7d0>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	491e      	ldr	r1, [pc, #120]	@ (80024f0 <HAL_UART_RxCpltCallback+0x7b8>)
 8002478:	4822      	ldr	r0, [pc, #136]	@ (8002504 <HAL_UART_RxCpltCallback+0x7cc>)
 800247a:	f008 f804 	bl	800a486 <HAL_UART_Receive_IT>
	    char c1 = aRxBuffer[0];
 800247e:	4b1c      	ldr	r3, [pc, #112]	@ (80024f0 <HAL_UART_RxCpltCallback+0x7b8>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		char c2 = aRxBuffer[1];
 8002486:	4b1a      	ldr	r3, [pc, #104]	@ (80024f0 <HAL_UART_RxCpltCallback+0x7b8>)
 8002488:	785b      	ldrb	r3, [r3, #1]
 800248a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		char d[4];

		//d[0] = '0';
		//d[1] = '0';
		//d[2] = '3';
		if(aRxBuffer[2] == '-' && aRxBuffer[3] == '1')
 800248e:	4b18      	ldr	r3, [pc, #96]	@ (80024f0 <HAL_UART_RxCpltCallback+0x7b8>)
 8002490:	789b      	ldrb	r3, [r3, #2]
 8002492:	2b2d      	cmp	r3, #45	@ 0x2d
 8002494:	d108      	bne.n	80024a8 <HAL_UART_RxCpltCallback+0x770>
 8002496:	4b16      	ldr	r3, [pc, #88]	@ (80024f0 <HAL_UART_RxCpltCallback+0x7b8>)
 8002498:	78db      	ldrb	r3, [r3, #3]
 800249a:	2b31      	cmp	r3, #49	@ 0x31
 800249c:	d104      	bne.n	80024a8 <HAL_UART_RxCpltCallback+0x770>
			data = -1;
 800249e:	4b1b      	ldr	r3, [pc, #108]	@ (800250c <HAL_UART_RxCpltCallback+0x7d4>)
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	e00d      	b.n	80024c4 <HAL_UART_RxCpltCallback+0x78c>
		else {
			memcpy(d, (void*) &aRxBuffer[2], 2);
 80024a8:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <HAL_UART_RxCpltCallback+0x7b8>)
 80024aa:	885b      	ldrh	r3, [r3, #2]
 80024ac:	83bb      	strh	r3, [r7, #28]
			d[2] = '\0';
 80024ae:	2300      	movs	r3, #0
 80024b0:	77bb      	strb	r3, [r7, #30]

			data = (uint32_t) atoi(d);
 80024b2:	f107 031c 	add.w	r3, r7, #28
 80024b6:	4618      	mov	r0, r3
 80024b8:	f00b fd8e 	bl	800dfd8 <atoi>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	4b12      	ldr	r3, [pc, #72]	@ (800250c <HAL_UART_RxCpltCallback+0x7d4>)
 80024c2:	601a      	str	r2, [r3, #0]

		//if (c1 == 'n') {
		//	newCmdReceived = 1;

		//}
		moveCmd = c1;
 80024c4:	4a12      	ldr	r2, [pc, #72]	@ (8002510 <HAL_UART_RxCpltCallback+0x7d8>)
 80024c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80024ca:	7013      	strb	r3, [r2, #0]
		directionCmd = c2;
 80024cc:	4a11      	ldr	r2, [pc, #68]	@ (8002514 <HAL_UART_RxCpltCallback+0x7dc>)
 80024ce:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80024d2:	7013      	strb	r3, [r2, #0]
		// steeringCmd = c3;
		uint8_t message1[20];

		sprintf(message1, "cmd:%c,%d", directionCmd, data);
 80024d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002514 <HAL_UART_RxCpltCallback+0x7dc>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <HAL_UART_RxCpltCallback+0x7d4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f107 0008 	add.w	r0, r7, #8
 80024e2:	490d      	ldr	r1, [pc, #52]	@ (8002518 <HAL_UART_RxCpltCallback+0x7e0>)
 80024e4:	f00c fb4e 	bl	800eb84 <siprintf>
//		if (aRxBuffer == "LEFT"){
//
//		} else if (aRxBuffer == "RIGHT"){
//
//		}
}
 80024e8:	bf00      	nop
 80024ea:	3728      	adds	r7, #40	@ 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000654 	.word	0x20000654
 80024f4:	20000660 	.word	0x20000660
 80024f8:	20000694 	.word	0x20000694
 80024fc:	08010eb4 	.word	0x08010eb4
 8002500:	20000698 	.word	0x20000698
 8002504:	200005d0 	.word	0x200005d0
 8002508:	20000000 	.word	0x20000000
 800250c:	20000744 	.word	0x20000744
 8002510:	20000749 	.word	0x20000749
 8002514:	20000748 	.word	0x20000748
 8002518:	08010ebc 	.word	0x08010ebc

0800251c <IR_Left_Read>:
//		__READ_COMMAND(cQueue, curCmd, rxMsg);
	}

}
// ir sensor
void IR_Left_Read() {
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8002520:	4809      	ldr	r0, [pc, #36]	@ (8002548 <IR_Left_Read+0x2c>)
 8002522:	f003 fda7 	bl	8006074 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8002526:	210a      	movs	r1, #10
 8002528:	4807      	ldr	r0, [pc, #28]	@ (8002548 <IR_Left_Read+0x2c>)
 800252a:	f003 fea8 	bl	800627e <HAL_ADC_PollForConversion>
	iDistanceL = HAL_ADC_GetValue(&hadc1);
 800252e:	4806      	ldr	r0, [pc, #24]	@ (8002548 <IR_Left_Read+0x2c>)
 8002530:	f003 ff30 	bl	8006394 <HAL_ADC_GetValue>
 8002534:	4603      	mov	r3, r0
 8002536:	b29a      	uxth	r2, r3
 8002538:	4b04      	ldr	r3, [pc, #16]	@ (800254c <IR_Left_Read+0x30>)
 800253a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 800253c:	4802      	ldr	r0, [pc, #8]	@ (8002548 <IR_Left_Read+0x2c>)
 800253e:	f003 fe6b 	bl	8006218 <HAL_ADC_Stop>
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	2000033c 	.word	0x2000033c
 800254c:	2000073c 	.word	0x2000073c

08002550 <IR_Right_Read>:

int IR_Right_Read() {
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
	int retval = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 5; i++){
 800255a:	2300      	movs	r3, #0
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	e01a      	b.n	8002596 <IR_Right_Read+0x46>
		HAL_ADC_Start(&hadc2);
 8002560:	4814      	ldr	r0, [pc, #80]	@ (80025b4 <IR_Right_Read+0x64>)
 8002562:	f003 fd87 	bl	8006074 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 10);
 8002566:	210a      	movs	r1, #10
 8002568:	4812      	ldr	r0, [pc, #72]	@ (80025b4 <IR_Right_Read+0x64>)
 800256a:	f003 fe88 	bl	800627e <HAL_ADC_PollForConversion>
		retval += HAL_ADC_GetValue(&hadc2);
 800256e:	4811      	ldr	r0, [pc, #68]	@ (80025b4 <IR_Right_Read+0x64>)
 8002570:	f003 ff10 	bl	8006394 <HAL_ADC_GetValue>
 8002574:	4602      	mov	r2, r0
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	607b      	str	r3, [r7, #4]
		iDistanceR = HAL_ADC_GetValue(&hadc2);
 800257c:	480d      	ldr	r0, [pc, #52]	@ (80025b4 <IR_Right_Read+0x64>)
 800257e:	f003 ff09 	bl	8006394 <HAL_ADC_GetValue>
 8002582:	4603      	mov	r3, r0
 8002584:	b29a      	uxth	r2, r3
 8002586:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <IR_Right_Read+0x68>)
 8002588:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc2);
 800258a:	480a      	ldr	r0, [pc, #40]	@ (80025b4 <IR_Right_Read+0x64>)
 800258c:	f003 fe44 	bl	8006218 <HAL_ADC_Stop>
	for (int i = 0; i < 5; i++){
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b04      	cmp	r3, #4
 800259a:	dde1      	ble.n	8002560 <IR_Right_Read+0x10>
	}
	return retval/5;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a07      	ldr	r2, [pc, #28]	@ (80025bc <IR_Right_Read+0x6c>)
 80025a0:	fb82 1203 	smull	r1, r2, r2, r3
 80025a4:	1052      	asrs	r2, r2, #1
 80025a6:	17db      	asrs	r3, r3, #31
 80025a8:	1ad3      	subs	r3, r2, r3
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000384 	.word	0x20000384
 80025b8:	2000073e 	.word	0x2000073e
 80025bc:	66666667 	.word	0x66666667

080025c0 <StartIRTask>:
/* USER CODE END Header_StartIRTask */
void StartIRTask(void *argument) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartIRTask */
	/* Infinite loop */
	uint8_t irVal[20] = { 0 };
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	f107 0310 	add.w	r3, r7, #16
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
	for (;;) {

		sprintf(irVal, "L: %d R: %d \0", (int) iDistanceL, iDistanceR);
 80025da:	4b20      	ldr	r3, [pc, #128]	@ (800265c <StartIRTask+0x9c>)
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002660 <StartIRTask+0xa0>)
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	f107 000c 	add.w	r0, r7, #12
 80025e8:	491e      	ldr	r1, [pc, #120]	@ (8002664 <StartIRTask+0xa4>)
 80025ea:	f00c facb 	bl	800eb84 <siprintf>
		//OLED_ShowString(0, 30, irVal);
		if (irResumeFlag == 1) {
 80025ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002668 <StartIRTask+0xa8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d104      	bne.n	8002600 <StartIRTask+0x40>
			vTaskSuspend(IRTaskHandle);
 80025f6:	4b1d      	ldr	r3, [pc, #116]	@ (800266c <StartIRTask+0xac>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f009 ffa8 	bl	800c550 <vTaskSuspend>
		}
		IR_Left_Read();
 8002600:	f7ff ff8c 	bl	800251c <IR_Left_Read>
		IR_Right_Read();
 8002604:	f7ff ffa4 	bl	8002550 <IR_Right_Read>

		if ((aRxBuffer[1] == 'L' && (iDistanceL <= irThreshold - 500)
 8002608:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <StartIRTask+0xb0>)
 800260a:	785b      	ldrb	r3, [r3, #1]
 800260c:	2b4c      	cmp	r3, #76	@ 0x4c
 800260e:	d10b      	bne.n	8002628 <StartIRTask+0x68>
 8002610:	4b18      	ldr	r3, [pc, #96]	@ (8002674 <StartIRTask+0xb4>)
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	f2a3 13f3 	subw	r3, r3, #499	@ 0x1f3
 8002618:	4a10      	ldr	r2, [pc, #64]	@ (800265c <StartIRTask+0x9c>)
 800261a:	8812      	ldrh	r2, [r2, #0]
 800261c:	4293      	cmp	r3, r2
 800261e:	dd03      	ble.n	8002628 <StartIRTask+0x68>
				&& irFlag == 1)
 8002620:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <StartIRTask+0xb8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d00f      	beq.n	8002648 <StartIRTask+0x88>
				|| (aRxBuffer[1] == 'R' && (iDistanceR <= irThreshold - 500)
 8002628:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <StartIRTask+0xb0>)
 800262a:	785b      	ldrb	r3, [r3, #1]
 800262c:	2b52      	cmp	r3, #82	@ 0x52
 800262e:	d110      	bne.n	8002652 <StartIRTask+0x92>
 8002630:	4b10      	ldr	r3, [pc, #64]	@ (8002674 <StartIRTask+0xb4>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	f2a3 13f3 	subw	r3, r3, #499	@ 0x1f3
 8002638:	4a09      	ldr	r2, [pc, #36]	@ (8002660 <StartIRTask+0xa0>)
 800263a:	8812      	ldrh	r2, [r2, #0]
 800263c:	4293      	cmp	r3, r2
 800263e:	dd08      	ble.n	8002652 <StartIRTask+0x92>
						&& irFlag == 1)) {
 8002640:	4b0d      	ldr	r3, [pc, #52]	@ (8002678 <StartIRTask+0xb8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d104      	bne.n	8002652 <StartIRTask+0x92>
			irFlag = 0;
 8002648:	4b0b      	ldr	r3, [pc, #44]	@ (8002678 <StartIRTask+0xb8>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
			motorStop();
 800264e:	f002 fdd5 	bl	80051fc <motorStop>
		}

		osDelay(50);
 8002652:	2032      	movs	r0, #50	@ 0x32
 8002654:	f008 ffa2 	bl	800b59c <osDelay>
		sprintf(irVal, "L: %d R: %d \0", (int) iDistanceL, iDistanceR);
 8002658:	e7bf      	b.n	80025da <StartIRTask+0x1a>
 800265a:	bf00      	nop
 800265c:	2000073c 	.word	0x2000073c
 8002660:	2000073e 	.word	0x2000073e
 8002664:	08010ec8 	.word	0x08010ec8
 8002668:	20000140 	.word	0x20000140
 800266c:	20000650 	.word	0x20000650
 8002670:	20000654 	.word	0x20000654
 8002674:	2000013e 	.word	0x2000013e
 8002678:	20000740 	.word	0x20000740

0800267c <PIDConfigInit>:
	}
	/* USER CODE END StartIRTask */
}

void PIDConfigInit(PIDConfig * cfg, const float Kp, const float Ki, const float Kd) {
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	ed87 0a02 	vstr	s0, [r7, #8]
 8002688:	edc7 0a01 	vstr	s1, [r7, #4]
 800268c:	ed87 1a00 	vstr	s2, [r7]
	cfg->Kp = Kp;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	601a      	str	r2, [r3, #0]
	cfg->Ki = Ki;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	605a      	str	r2, [r3, #4]
	cfg->Kd = Kd;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	609a      	str	r2, [r3, #8]
	cfg->ek1 = 0;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	60da      	str	r2, [r3, #12]
	cfg->ekSum = 0;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]
}
 80026b2:	bf00      	nop
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <PIDConfigReset>:

void PIDConfigReset(PIDConfig * cfg) {
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
	cfg->ek1 = 0;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
	cfg->ekSum = 0;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	611a      	str	r2, [r3, #16]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <StraightLineMove>:

int8_t dir = 1;
int correction = 0;
//PIDConfig curPIDConfig;

void StraightLineMove(const uint8_t speedMode) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af04      	add	r7, sp, #16
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
	__Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 80026ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026f2:	9302      	str	r3, [sp, #8]
 80026f4:	2302      	movs	r3, #2
 80026f6:	9301      	str	r3, [sp, #4]
 80026f8:	4ba9      	ldr	r3, [pc, #676]	@ (80029a0 <StraightLineMove+0x2bc>)
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	2301      	movs	r3, #1
 80026fe:	2237      	movs	r2, #55	@ 0x37
 8002700:	21d0      	movs	r1, #208	@ 0xd0
 8002702:	48a8      	ldr	r0, [pc, #672]	@ (80029a4 <StraightLineMove+0x2c0>)
 8002704:	f004 fe0a 	bl	800731c <HAL_I2C_Mem_Read>
 8002708:	4ba5      	ldr	r3, [pc, #660]	@ (80029a0 <StraightLineMove+0x2bc>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	b21a      	sxth	r2, r3
 8002710:	4ba3      	ldr	r3, [pc, #652]	@ (80029a0 <StraightLineMove+0x2bc>)
 8002712:	785b      	ldrb	r3, [r3, #1]
 8002714:	b21b      	sxth	r3, r3
 8002716:	4313      	orrs	r3, r2
 8002718:	b21a      	sxth	r2, r3
 800271a:	4ba3      	ldr	r3, [pc, #652]	@ (80029a8 <StraightLineMove+0x2c4>)
 800271c:	801a      	strh	r2, [r3, #0]
	dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 800271e:	4ba3      	ldr	r3, [pc, #652]	@ (80029ac <StraightLineMove+0x2c8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b10      	cmp	r3, #16
 800272a:	d101      	bne.n	8002730 <StraightLineMove+0x4c>
 800272c:	2201      	movs	r2, #1
 800272e:	e001      	b.n	8002734 <StraightLineMove+0x50>
 8002730:	f04f 32ff 	mov.w	r2, #4294967295
 8002734:	4b9e      	ldr	r3, [pc, #632]	@ (80029b0 <StraightLineMove+0x2cc>)
 8002736:	701a      	strb	r2, [r3, #0]
	angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002738:	4b9b      	ldr	r3, [pc, #620]	@ (80029a8 <StraightLineMove+0x2c4>)
 800273a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800273e:	f113 0f04 	cmn.w	r3, #4
 8002742:	db04      	blt.n	800274e <StraightLineMove+0x6a>
 8002744:	4b98      	ldr	r3, [pc, #608]	@ (80029a8 <StraightLineMove+0x2c4>)
 8002746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800274a:	2b0b      	cmp	r3, #11
 800274c:	dd07      	ble.n	800275e <StraightLineMove+0x7a>
 800274e:	4b96      	ldr	r3, [pc, #600]	@ (80029a8 <StraightLineMove+0x2c4>)
 8002750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002754:	ee07 3a90 	vmov	s15, r3
 8002758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800275c:	e001      	b.n	8002762 <StraightLineMove+0x7e>
 800275e:	eddf 7a95 	vldr	s15, [pc, #596]	@ 80029b4 <StraightLineMove+0x2d0>
 8002762:	4b95      	ldr	r3, [pc, #596]	@ (80029b8 <StraightLineMove+0x2d4>)
 8002764:	ed93 7a00 	vldr	s14, [r3]
 8002768:	ee77 7a87 	vadd.f32	s15, s15, s14
 800276c:	4b92      	ldr	r3, [pc, #584]	@ (80029b8 <StraightLineMove+0x2d4>)
 800276e:	edc3 7a00 	vstr	s15, [r3]

	if (speedMode == SPEED_MODE_T) __PID_SPEED_T(pidTSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d164      	bne.n	8002842 <StraightLineMove+0x15e>
 8002778:	4b90      	ldr	r3, [pc, #576]	@ (80029bc <StraightLineMove+0x2d8>)
 800277a:	ed93 7a00 	vldr	s14, [r3]
 800277e:	4b8e      	ldr	r3, [pc, #568]	@ (80029b8 <StraightLineMove+0x2d4>)
 8002780:	edd3 7a00 	vldr	s15, [r3]
 8002784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002788:	4b8c      	ldr	r3, [pc, #560]	@ (80029bc <StraightLineMove+0x2d8>)
 800278a:	edd3 6a01 	vldr	s13, [r3, #4]
 800278e:	4b8b      	ldr	r3, [pc, #556]	@ (80029bc <StraightLineMove+0x2d8>)
 8002790:	edd3 7a04 	vldr	s15, [r3, #16]
 8002794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002798:	ee37 7a27 	vadd.f32	s14, s14, s15
 800279c:	4b87      	ldr	r3, [pc, #540]	@ (80029bc <StraightLineMove+0x2d8>)
 800279e:	edd3 6a02 	vldr	s13, [r3, #8]
 80027a2:	4b86      	ldr	r3, [pc, #536]	@ (80029bc <StraightLineMove+0x2d8>)
 80027a4:	ed93 6a03 	vldr	s12, [r3, #12]
 80027a8:	4b83      	ldr	r3, [pc, #524]	@ (80029b8 <StraightLineMove+0x2d4>)
 80027aa:	edd3 7a00 	vldr	s15, [r3]
 80027ae:	ee76 7a67 	vsub.f32	s15, s12, s15
 80027b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027be:	ee17 2a90 	vmov	r2, s15
 80027c2:	4b7f      	ldr	r3, [pc, #508]	@ (80029c0 <StraightLineMove+0x2dc>)
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	4b7c      	ldr	r3, [pc, #496]	@ (80029b8 <StraightLineMove+0x2d4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a7c      	ldr	r2, [pc, #496]	@ (80029bc <StraightLineMove+0x2d8>)
 80027cc:	60d3      	str	r3, [r2, #12]
 80027ce:	4b7b      	ldr	r3, [pc, #492]	@ (80029bc <StraightLineMove+0x2d8>)
 80027d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80027d4:	4b78      	ldr	r3, [pc, #480]	@ (80029b8 <StraightLineMove+0x2d4>)
 80027d6:	edd3 7a00 	vldr	s15, [r3]
 80027da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027de:	4b77      	ldr	r3, [pc, #476]	@ (80029bc <StraightLineMove+0x2d8>)
 80027e0:	edc3 7a04 	vstr	s15, [r3, #16]
 80027e4:	4b76      	ldr	r3, [pc, #472]	@ (80029c0 <StraightLineMove+0x2dc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80027ec:	dc06      	bgt.n	80027fc <StraightLineMove+0x118>
 80027ee:	4b74      	ldr	r3, [pc, #464]	@ (80029c0 <StraightLineMove+0x2dc>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a74      	ldr	r2, [pc, #464]	@ (80029c4 <StraightLineMove+0x2e0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	bfb8      	it	lt
 80027f8:	4613      	movlt	r3, r2
 80027fa:	e001      	b.n	8002800 <StraightLineMove+0x11c>
 80027fc:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8002800:	4a6f      	ldr	r2, [pc, #444]	@ (80029c0 <StraightLineMove+0x2dc>)
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b6a      	ldr	r3, [pc, #424]	@ (80029b0 <StraightLineMove+0x2cc>)
 8002806:	f993 3000 	ldrsb.w	r3, [r3]
 800280a:	b29a      	uxth	r2, r3
 800280c:	4b6c      	ldr	r3, [pc, #432]	@ (80029c0 <StraightLineMove+0x2dc>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	b29b      	uxth	r3, r3
 8002812:	fb12 f303 	smulbb	r3, r2, r3
 8002816:	b29b      	uxth	r3, r3
 8002818:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800281c:	b29a      	uxth	r2, r3
 800281e:	4b6a      	ldr	r3, [pc, #424]	@ (80029c8 <StraightLineMove+0x2e4>)
 8002820:	801a      	strh	r2, [r3, #0]
 8002822:	4b63      	ldr	r3, [pc, #396]	@ (80029b0 <StraightLineMove+0x2cc>)
 8002824:	f993 3000 	ldrsb.w	r3, [r3]
 8002828:	b29a      	uxth	r2, r3
 800282a:	4b65      	ldr	r3, [pc, #404]	@ (80029c0 <StraightLineMove+0x2dc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	fb12 f303 	smulbb	r3, r2, r3
 8002834:	b29b      	uxth	r3, r3
 8002836:	f5c3 6396 	rsb	r3, r3, #1200	@ 0x4b0
 800283a:	b29a      	uxth	r2, r3
 800283c:	4b63      	ldr	r3, [pc, #396]	@ (80029cc <StraightLineMove+0x2e8>)
 800283e:	801a      	strh	r2, [r3, #0]
 8002840:	e0ef      	b.n	8002a22 <StraightLineMove+0x33e>
	else if (speedMode == SPEED_MODE_2) __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d165      	bne.n	8002914 <StraightLineMove+0x230>
 8002848:	4b61      	ldr	r3, [pc, #388]	@ (80029d0 <StraightLineMove+0x2ec>)
 800284a:	ed93 7a00 	vldr	s14, [r3]
 800284e:	4b5a      	ldr	r3, [pc, #360]	@ (80029b8 <StraightLineMove+0x2d4>)
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002858:	4b5d      	ldr	r3, [pc, #372]	@ (80029d0 <StraightLineMove+0x2ec>)
 800285a:	edd3 6a01 	vldr	s13, [r3, #4]
 800285e:	4b5c      	ldr	r3, [pc, #368]	@ (80029d0 <StraightLineMove+0x2ec>)
 8002860:	edd3 7a04 	vldr	s15, [r3, #16]
 8002864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002868:	ee37 7a27 	vadd.f32	s14, s14, s15
 800286c:	4b58      	ldr	r3, [pc, #352]	@ (80029d0 <StraightLineMove+0x2ec>)
 800286e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002872:	4b57      	ldr	r3, [pc, #348]	@ (80029d0 <StraightLineMove+0x2ec>)
 8002874:	ed93 6a03 	vldr	s12, [r3, #12]
 8002878:	4b4f      	ldr	r3, [pc, #316]	@ (80029b8 <StraightLineMove+0x2d4>)
 800287a:	edd3 7a00 	vldr	s15, [r3]
 800287e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800288e:	ee17 2a90 	vmov	r2, s15
 8002892:	4b4b      	ldr	r3, [pc, #300]	@ (80029c0 <StraightLineMove+0x2dc>)
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	4b48      	ldr	r3, [pc, #288]	@ (80029b8 <StraightLineMove+0x2d4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a4d      	ldr	r2, [pc, #308]	@ (80029d0 <StraightLineMove+0x2ec>)
 800289c:	60d3      	str	r3, [r2, #12]
 800289e:	4b4c      	ldr	r3, [pc, #304]	@ (80029d0 <StraightLineMove+0x2ec>)
 80028a0:	ed93 7a04 	vldr	s14, [r3, #16]
 80028a4:	4b44      	ldr	r3, [pc, #272]	@ (80029b8 <StraightLineMove+0x2d4>)
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ae:	4b48      	ldr	r3, [pc, #288]	@ (80029d0 <StraightLineMove+0x2ec>)
 80028b0:	edc3 7a04 	vstr	s15, [r3, #16]
 80028b4:	4b42      	ldr	r3, [pc, #264]	@ (80029c0 <StraightLineMove+0x2dc>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 80028bc:	dc06      	bgt.n	80028cc <StraightLineMove+0x1e8>
 80028be:	4b40      	ldr	r3, [pc, #256]	@ (80029c0 <StraightLineMove+0x2dc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a44      	ldr	r2, [pc, #272]	@ (80029d4 <StraightLineMove+0x2f0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	bfb8      	it	lt
 80028c8:	4613      	movlt	r3, r2
 80028ca:	e001      	b.n	80028d0 <StraightLineMove+0x1ec>
 80028cc:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80028d0:	4a3b      	ldr	r2, [pc, #236]	@ (80029c0 <StraightLineMove+0x2dc>)
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	4b36      	ldr	r3, [pc, #216]	@ (80029b0 <StraightLineMove+0x2cc>)
 80028d6:	f993 3000 	ldrsb.w	r3, [r3]
 80028da:	b29a      	uxth	r2, r3
 80028dc:	4b38      	ldr	r3, [pc, #224]	@ (80029c0 <StraightLineMove+0x2dc>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	fb12 f303 	smulbb	r3, r2, r3
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	4b36      	ldr	r3, [pc, #216]	@ (80029c8 <StraightLineMove+0x2e4>)
 80028f0:	801a      	strh	r2, [r3, #0]
 80028f2:	4b2f      	ldr	r3, [pc, #188]	@ (80029b0 <StraightLineMove+0x2cc>)
 80028f4:	f993 3000 	ldrsb.w	r3, [r3]
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	4b31      	ldr	r3, [pc, #196]	@ (80029c0 <StraightLineMove+0x2dc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	fb12 f303 	smulbb	r3, r2, r3
 8002904:	b29b      	uxth	r3, r3
 8002906:	f5c3 633b 	rsb	r3, r3, #2992	@ 0xbb0
 800290a:	3308      	adds	r3, #8
 800290c:	b29a      	uxth	r2, r3
 800290e:	4b2f      	ldr	r3, [pc, #188]	@ (80029cc <StraightLineMove+0x2e8>)
 8002910:	801a      	strh	r2, [r3, #0]
 8002912:	e086      	b.n	8002a22 <StraightLineMove+0x33e>
	else if (speedMode == SPEED_MODE_1) __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	2b01      	cmp	r3, #1
 8002918:	f040 8083 	bne.w	8002a22 <StraightLineMove+0x33e>
 800291c:	4b2e      	ldr	r3, [pc, #184]	@ (80029d8 <StraightLineMove+0x2f4>)
 800291e:	ed93 7a00 	vldr	s14, [r3]
 8002922:	4b25      	ldr	r3, [pc, #148]	@ (80029b8 <StraightLineMove+0x2d4>)
 8002924:	edd3 7a00 	vldr	s15, [r3]
 8002928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800292c:	4b2a      	ldr	r3, [pc, #168]	@ (80029d8 <StraightLineMove+0x2f4>)
 800292e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002932:	4b29      	ldr	r3, [pc, #164]	@ (80029d8 <StraightLineMove+0x2f4>)
 8002934:	edd3 7a04 	vldr	s15, [r3, #16]
 8002938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800293c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002940:	4b25      	ldr	r3, [pc, #148]	@ (80029d8 <StraightLineMove+0x2f4>)
 8002942:	edd3 6a02 	vldr	s13, [r3, #8]
 8002946:	4b24      	ldr	r3, [pc, #144]	@ (80029d8 <StraightLineMove+0x2f4>)
 8002948:	ed93 6a03 	vldr	s12, [r3, #12]
 800294c:	4b1a      	ldr	r3, [pc, #104]	@ (80029b8 <StraightLineMove+0x2d4>)
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800295a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800295e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002962:	ee17 2a90 	vmov	r2, s15
 8002966:	4b16      	ldr	r3, [pc, #88]	@ (80029c0 <StraightLineMove+0x2dc>)
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	4b13      	ldr	r3, [pc, #76]	@ (80029b8 <StraightLineMove+0x2d4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a1a      	ldr	r2, [pc, #104]	@ (80029d8 <StraightLineMove+0x2f4>)
 8002970:	60d3      	str	r3, [r2, #12]
 8002972:	4b19      	ldr	r3, [pc, #100]	@ (80029d8 <StraightLineMove+0x2f4>)
 8002974:	ed93 7a04 	vldr	s14, [r3, #16]
 8002978:	4b0f      	ldr	r3, [pc, #60]	@ (80029b8 <StraightLineMove+0x2d4>)
 800297a:	edd3 7a00 	vldr	s15, [r3]
 800297e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002982:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <StraightLineMove+0x2f4>)
 8002984:	edc3 7a04 	vstr	s15, [r3, #16]
 8002988:	4b0d      	ldr	r3, [pc, #52]	@ (80029c0 <StraightLineMove+0x2dc>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8002990:	dc24      	bgt.n	80029dc <StraightLineMove+0x2f8>
 8002992:	4b0b      	ldr	r3, [pc, #44]	@ (80029c0 <StraightLineMove+0x2dc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a0f      	ldr	r2, [pc, #60]	@ (80029d4 <StraightLineMove+0x2f0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	bfb8      	it	lt
 800299c:	4613      	movlt	r3, r2
 800299e:	e01f      	b.n	80029e0 <StraightLineMove+0x2fc>
 80029a0:	200006b4 	.word	0x200006b4
 80029a4:	200003cc 	.word	0x200003cc
 80029a8:	200006b6 	.word	0x200006b6
 80029ac:	20000468 	.word	0x20000468
 80029b0:	20000144 	.word	0x20000144
 80029b4:	00000000 	.word	0x00000000
 80029b8:	200006b0 	.word	0x200006b0
 80029bc:	200006e0 	.word	0x200006e0
 80029c0:	20000750 	.word	0x20000750
 80029c4:	fffffda8 	.word	0xfffffda8
 80029c8:	200006b8 	.word	0x200006b8
 80029cc:	200006ba 	.word	0x200006ba
 80029d0:	200006f4 	.word	0x200006f4
 80029d4:	fffffd44 	.word	0xfffffd44
 80029d8:	200006cc 	.word	0x200006cc
 80029dc:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80029e0:	4a17      	ldr	r2, [pc, #92]	@ (8002a40 <StraightLineMove+0x35c>)
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b17      	ldr	r3, [pc, #92]	@ (8002a44 <StraightLineMove+0x360>)
 80029e6:	f993 3000 	ldrsb.w	r3, [r3]
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	4b14      	ldr	r3, [pc, #80]	@ (8002a40 <StraightLineMove+0x35c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	fb12 f303 	smulbb	r3, r2, r3
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	f603 03fc 	addw	r3, r3, #2300	@ 0x8fc
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	4b12      	ldr	r3, [pc, #72]	@ (8002a48 <StraightLineMove+0x364>)
 8002a00:	801a      	strh	r2, [r3, #0]
 8002a02:	4b10      	ldr	r3, [pc, #64]	@ (8002a44 <StraightLineMove+0x360>)
 8002a04:	f993 3000 	ldrsb.w	r3, [r3]
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a40 <StraightLineMove+0x35c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	fb12 f303 	smulbb	r3, r2, r3
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	f5c3 630f 	rsb	r3, r3, #2288	@ 0x8f0
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a4c <StraightLineMove+0x368>)
 8002a20:	801a      	strh	r2, [r3, #0]

	__SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 8002a22:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <StraightLineMove+0x364>)
 8002a24:	881a      	ldrh	r2, [r3, #0]
 8002a26:	4b0a      	ldr	r3, [pc, #40]	@ (8002a50 <StraightLineMove+0x36c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a2c:	4b07      	ldr	r3, [pc, #28]	@ (8002a4c <StraightLineMove+0x368>)
 8002a2e:	881a      	ldrh	r2, [r3, #0]
 8002a30:	4b07      	ldr	r3, [pc, #28]	@ (8002a50 <StraightLineMove+0x36c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000750 	.word	0x20000750
 8002a44:	20000144 	.word	0x20000144
 8002a48:	200006b8 	.word	0x200006b8
 8002a4c:	200006ba 	.word	0x200006ba
 8002a50:	20000588 	.word	0x20000588

08002a54 <StraightLineMoveSpeedScale>:

void StraightLineMoveSpeedScale(const uint8_t speedMode, float * speedScale) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af04      	add	r7, sp, #16
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	6039      	str	r1, [r7, #0]
 8002a5e:	71fb      	strb	r3, [r7, #7]
	__Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 8002a60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a64:	9302      	str	r3, [sp, #8]
 8002a66:	2302      	movs	r3, #2
 8002a68:	9301      	str	r3, [sp, #4]
 8002a6a:	4b9b      	ldr	r3, [pc, #620]	@ (8002cd8 <StraightLineMoveSpeedScale+0x284>)
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	2301      	movs	r3, #1
 8002a70:	2237      	movs	r2, #55	@ 0x37
 8002a72:	21d0      	movs	r1, #208	@ 0xd0
 8002a74:	4899      	ldr	r0, [pc, #612]	@ (8002cdc <StraightLineMoveSpeedScale+0x288>)
 8002a76:	f004 fc51 	bl	800731c <HAL_I2C_Mem_Read>
 8002a7a:	4b97      	ldr	r3, [pc, #604]	@ (8002cd8 <StraightLineMoveSpeedScale+0x284>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	b21a      	sxth	r2, r3
 8002a82:	4b95      	ldr	r3, [pc, #596]	@ (8002cd8 <StraightLineMoveSpeedScale+0x284>)
 8002a84:	785b      	ldrb	r3, [r3, #1]
 8002a86:	b21b      	sxth	r3, r3
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	b21a      	sxth	r2, r3
 8002a8c:	4b94      	ldr	r3, [pc, #592]	@ (8002ce0 <StraightLineMoveSpeedScale+0x28c>)
 8002a8e:	801a      	strh	r2, [r3, #0]
	dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 8002a90:	4b94      	ldr	r3, [pc, #592]	@ (8002ce4 <StraightLineMoveSpeedScale+0x290>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0310 	and.w	r3, r3, #16
 8002a9a:	2b10      	cmp	r3, #16
 8002a9c:	d101      	bne.n	8002aa2 <StraightLineMoveSpeedScale+0x4e>
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	e001      	b.n	8002aa6 <StraightLineMoveSpeedScale+0x52>
 8002aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa6:	4b90      	ldr	r3, [pc, #576]	@ (8002ce8 <StraightLineMoveSpeedScale+0x294>)
 8002aa8:	701a      	strb	r2, [r3, #0]
	angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002aaa:	4b8d      	ldr	r3, [pc, #564]	@ (8002ce0 <StraightLineMoveSpeedScale+0x28c>)
 8002aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab0:	f113 0f04 	cmn.w	r3, #4
 8002ab4:	db04      	blt.n	8002ac0 <StraightLineMoveSpeedScale+0x6c>
 8002ab6:	4b8a      	ldr	r3, [pc, #552]	@ (8002ce0 <StraightLineMoveSpeedScale+0x28c>)
 8002ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002abc:	2b0b      	cmp	r3, #11
 8002abe:	dd07      	ble.n	8002ad0 <StraightLineMoveSpeedScale+0x7c>
 8002ac0:	4b87      	ldr	r3, [pc, #540]	@ (8002ce0 <StraightLineMoveSpeedScale+0x28c>)
 8002ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ac6:	ee07 3a90 	vmov	s15, r3
 8002aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ace:	e001      	b.n	8002ad4 <StraightLineMoveSpeedScale+0x80>
 8002ad0:	eddf 7a86 	vldr	s15, [pc, #536]	@ 8002cec <StraightLineMoveSpeedScale+0x298>
 8002ad4:	4b86      	ldr	r3, [pc, #536]	@ (8002cf0 <StraightLineMoveSpeedScale+0x29c>)
 8002ad6:	ed93 7a00 	vldr	s14, [r3]
 8002ada:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ade:	4b84      	ldr	r3, [pc, #528]	@ (8002cf0 <StraightLineMoveSpeedScale+0x29c>)
 8002ae0:	edc3 7a00 	vstr	s15, [r3]
	if (speedMode == SPEED_MODE_1) __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d165      	bne.n	8002bb6 <StraightLineMoveSpeedScale+0x162>
 8002aea:	4b82      	ldr	r3, [pc, #520]	@ (8002cf4 <StraightLineMoveSpeedScale+0x2a0>)
 8002aec:	ed93 7a00 	vldr	s14, [r3]
 8002af0:	4b7f      	ldr	r3, [pc, #508]	@ (8002cf0 <StraightLineMoveSpeedScale+0x29c>)
 8002af2:	edd3 7a00 	vldr	s15, [r3]
 8002af6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002afa:	4b7e      	ldr	r3, [pc, #504]	@ (8002cf4 <StraightLineMoveSpeedScale+0x2a0>)
 8002afc:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b00:	4b7c      	ldr	r3, [pc, #496]	@ (8002cf4 <StraightLineMoveSpeedScale+0x2a0>)
 8002b02:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b0e:	4b79      	ldr	r3, [pc, #484]	@ (8002cf4 <StraightLineMoveSpeedScale+0x2a0>)
 8002b10:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b14:	4b77      	ldr	r3, [pc, #476]	@ (8002cf4 <StraightLineMoveSpeedScale+0x2a0>)
 8002b16:	ed93 6a03 	vldr	s12, [r3, #12]
 8002b1a:	4b75      	ldr	r3, [pc, #468]	@ (8002cf0 <StraightLineMoveSpeedScale+0x29c>)
 8002b1c:	edd3 7a00 	vldr	s15, [r3]
 8002b20:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b30:	ee17 2a90 	vmov	r2, s15
 8002b34:	4b70      	ldr	r3, [pc, #448]	@ (8002cf8 <StraightLineMoveSpeedScale+0x2a4>)
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	4b6d      	ldr	r3, [pc, #436]	@ (8002cf0 <StraightLineMoveSpeedScale+0x29c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a6d      	ldr	r2, [pc, #436]	@ (8002cf4 <StraightLineMoveSpeedScale+0x2a0>)
 8002b3e:	60d3      	str	r3, [r2, #12]
 8002b40:	4b6c      	ldr	r3, [pc, #432]	@ (8002cf4 <StraightLineMoveSpeedScale+0x2a0>)
 8002b42:	ed93 7a04 	vldr	s14, [r3, #16]
 8002b46:	4b6a      	ldr	r3, [pc, #424]	@ (8002cf0 <StraightLineMoveSpeedScale+0x29c>)
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b50:	4b68      	ldr	r3, [pc, #416]	@ (8002cf4 <StraightLineMoveSpeedScale+0x2a0>)
 8002b52:	edc3 7a04 	vstr	s15, [r3, #16]
 8002b56:	4b68      	ldr	r3, [pc, #416]	@ (8002cf8 <StraightLineMoveSpeedScale+0x2a4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8002b5e:	dc06      	bgt.n	8002b6e <StraightLineMoveSpeedScale+0x11a>
 8002b60:	4b65      	ldr	r3, [pc, #404]	@ (8002cf8 <StraightLineMoveSpeedScale+0x2a4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a65      	ldr	r2, [pc, #404]	@ (8002cfc <StraightLineMoveSpeedScale+0x2a8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	bfb8      	it	lt
 8002b6a:	4613      	movlt	r3, r2
 8002b6c:	e001      	b.n	8002b72 <StraightLineMoveSpeedScale+0x11e>
 8002b6e:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002b72:	4a61      	ldr	r2, [pc, #388]	@ (8002cf8 <StraightLineMoveSpeedScale+0x2a4>)
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	4b5c      	ldr	r3, [pc, #368]	@ (8002ce8 <StraightLineMoveSpeedScale+0x294>)
 8002b78:	f993 3000 	ldrsb.w	r3, [r3]
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	4b5e      	ldr	r3, [pc, #376]	@ (8002cf8 <StraightLineMoveSpeedScale+0x2a4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	fb12 f303 	smulbb	r3, r2, r3
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	f603 03fc 	addw	r3, r3, #2300	@ 0x8fc
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	4b5b      	ldr	r3, [pc, #364]	@ (8002d00 <StraightLineMoveSpeedScale+0x2ac>)
 8002b92:	801a      	strh	r2, [r3, #0]
 8002b94:	4b54      	ldr	r3, [pc, #336]	@ (8002ce8 <StraightLineMoveSpeedScale+0x294>)
 8002b96:	f993 3000 	ldrsb.w	r3, [r3]
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	4b56      	ldr	r3, [pc, #344]	@ (8002cf8 <StraightLineMoveSpeedScale+0x2a4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	fb12 f303 	smulbb	r3, r2, r3
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f5c3 630f 	rsb	r3, r3, #2288	@ 0x8f0
 8002bac:	330c      	adds	r3, #12
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	4b54      	ldr	r3, [pc, #336]	@ (8002d04 <StraightLineMoveSpeedScale+0x2b0>)
 8002bb2:	801a      	strh	r2, [r3, #0]
 8002bb4:	e067      	b.n	8002c86 <StraightLineMoveSpeedScale+0x232>
	else if (speedMode == SPEED_MODE_2) __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d164      	bne.n	8002c86 <StraightLineMoveSpeedScale+0x232>
 8002bbc:	4b52      	ldr	r3, [pc, #328]	@ (8002d08 <StraightLineMoveSpeedScale+0x2b4>)
 8002bbe:	ed93 7a00 	vldr	s14, [r3]
 8002bc2:	4b4b      	ldr	r3, [pc, #300]	@ (8002cf0 <StraightLineMoveSpeedScale+0x29c>)
 8002bc4:	edd3 7a00 	vldr	s15, [r3]
 8002bc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bcc:	4b4e      	ldr	r3, [pc, #312]	@ (8002d08 <StraightLineMoveSpeedScale+0x2b4>)
 8002bce:	edd3 6a01 	vldr	s13, [r3, #4]
 8002bd2:	4b4d      	ldr	r3, [pc, #308]	@ (8002d08 <StraightLineMoveSpeedScale+0x2b4>)
 8002bd4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002be0:	4b49      	ldr	r3, [pc, #292]	@ (8002d08 <StraightLineMoveSpeedScale+0x2b4>)
 8002be2:	edd3 6a02 	vldr	s13, [r3, #8]
 8002be6:	4b48      	ldr	r3, [pc, #288]	@ (8002d08 <StraightLineMoveSpeedScale+0x2b4>)
 8002be8:	ed93 6a03 	vldr	s12, [r3, #12]
 8002bec:	4b40      	ldr	r3, [pc, #256]	@ (8002cf0 <StraightLineMoveSpeedScale+0x29c>)
 8002bee:	edd3 7a00 	vldr	s15, [r3]
 8002bf2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c02:	ee17 2a90 	vmov	r2, s15
 8002c06:	4b3c      	ldr	r3, [pc, #240]	@ (8002cf8 <StraightLineMoveSpeedScale+0x2a4>)
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	4b39      	ldr	r3, [pc, #228]	@ (8002cf0 <StraightLineMoveSpeedScale+0x29c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d08 <StraightLineMoveSpeedScale+0x2b4>)
 8002c10:	60d3      	str	r3, [r2, #12]
 8002c12:	4b3d      	ldr	r3, [pc, #244]	@ (8002d08 <StraightLineMoveSpeedScale+0x2b4>)
 8002c14:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c18:	4b35      	ldr	r3, [pc, #212]	@ (8002cf0 <StraightLineMoveSpeedScale+0x29c>)
 8002c1a:	edd3 7a00 	vldr	s15, [r3]
 8002c1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c22:	4b39      	ldr	r3, [pc, #228]	@ (8002d08 <StraightLineMoveSpeedScale+0x2b4>)
 8002c24:	edc3 7a04 	vstr	s15, [r3, #16]
 8002c28:	4b33      	ldr	r3, [pc, #204]	@ (8002cf8 <StraightLineMoveSpeedScale+0x2a4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8002c30:	dc06      	bgt.n	8002c40 <StraightLineMoveSpeedScale+0x1ec>
 8002c32:	4b31      	ldr	r3, [pc, #196]	@ (8002cf8 <StraightLineMoveSpeedScale+0x2a4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a31      	ldr	r2, [pc, #196]	@ (8002cfc <StraightLineMoveSpeedScale+0x2a8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	bfb8      	it	lt
 8002c3c:	4613      	movlt	r3, r2
 8002c3e:	e001      	b.n	8002c44 <StraightLineMoveSpeedScale+0x1f0>
 8002c40:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002c44:	4a2c      	ldr	r2, [pc, #176]	@ (8002cf8 <StraightLineMoveSpeedScale+0x2a4>)
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	4b27      	ldr	r3, [pc, #156]	@ (8002ce8 <StraightLineMoveSpeedScale+0x294>)
 8002c4a:	f993 3000 	ldrsb.w	r3, [r3]
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	4b29      	ldr	r3, [pc, #164]	@ (8002cf8 <StraightLineMoveSpeedScale+0x2a4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	fb12 f303 	smulbb	r3, r2, r3
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	4b27      	ldr	r3, [pc, #156]	@ (8002d00 <StraightLineMoveSpeedScale+0x2ac>)
 8002c64:	801a      	strh	r2, [r3, #0]
 8002c66:	4b20      	ldr	r3, [pc, #128]	@ (8002ce8 <StraightLineMoveSpeedScale+0x294>)
 8002c68:	f993 3000 	ldrsb.w	r3, [r3]
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	4b22      	ldr	r3, [pc, #136]	@ (8002cf8 <StraightLineMoveSpeedScale+0x2a4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	fb12 f303 	smulbb	r3, r2, r3
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	f5c3 633b 	rsb	r3, r3, #2992	@ 0xbb0
 8002c7e:	3308      	adds	r3, #8
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	4b20      	ldr	r3, [pc, #128]	@ (8002d04 <StraightLineMoveSpeedScale+0x2b0>)
 8002c84:	801a      	strh	r2, [r3, #0]

	__SET_MOTOR_DUTY(&htim8, newDutyL * (*speedScale), newDutyR * (*speedScale));
 8002c86:	4b1e      	ldr	r3, [pc, #120]	@ (8002d00 <StraightLineMoveSpeedScale+0x2ac>)
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	edd3 7a00 	vldr	s15, [r3]
 8002c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d0c <StraightLineMoveSpeedScale+0x2b8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ca4:	ee17 2a90 	vmov	r2, s15
 8002ca8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002caa:	4b16      	ldr	r3, [pc, #88]	@ (8002d04 <StraightLineMoveSpeedScale+0x2b0>)
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	ee07 3a90 	vmov	s15, r3
 8002cb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	edd3 7a00 	vldr	s15, [r3]
 8002cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc0:	4b12      	ldr	r3, [pc, #72]	@ (8002d0c <StraightLineMoveSpeedScale+0x2b8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cc8:	ee17 2a90 	vmov	r2, s15
 8002ccc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200006b4 	.word	0x200006b4
 8002cdc:	200003cc 	.word	0x200003cc
 8002ce0:	200006b6 	.word	0x200006b6
 8002ce4:	20000468 	.word	0x20000468
 8002ce8:	20000144 	.word	0x20000144
 8002cec:	00000000 	.word	0x00000000
 8002cf0:	200006b0 	.word	0x200006b0
 8002cf4:	200006cc 	.word	0x200006cc
 8002cf8:	20000750 	.word	0x20000750
 8002cfc:	fffffd44 	.word	0xfffffd44
 8002d00:	200006b8 	.word	0x200006b8
 8002d04:	200006ba 	.word	0x200006ba
 8002d08:	200006f4 	.word	0x200006f4
 8002d0c:	20000588 	.word	0x20000588

08002d10 <RobotMoveDist>:

void RobotMoveDist(float * targetDist, const uint8_t dir, const uint8_t speedMode) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70fb      	strb	r3, [r7, #3]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	70bb      	strb	r3, [r7, #2]
	angleNow = 0; gyroZ = 0; // reset angle for PID
 8002d20:	4ba1      	ldr	r3, [pc, #644]	@ (8002fa8 <RobotMoveDist+0x298>)
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	4ba0      	ldr	r3, [pc, #640]	@ (8002fac <RobotMoveDist+0x29c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	801a      	strh	r2, [r3, #0]
	PIDConfigReset(&pidTSlow);
 8002d2e:	48a0      	ldr	r0, [pc, #640]	@ (8002fb0 <RobotMoveDist+0x2a0>)
 8002d30:	f7ff fcc5 	bl	80026be <PIDConfigReset>
	PIDConfigReset(&pidSlow);
 8002d34:	489f      	ldr	r0, [pc, #636]	@ (8002fb4 <RobotMoveDist+0x2a4>)
 8002d36:	f7ff fcc2 	bl	80026be <PIDConfigReset>
	PIDConfigReset(&pidFast);
 8002d3a:	489f      	ldr	r0, [pc, #636]	@ (8002fb8 <RobotMoveDist+0x2a8>)
 8002d3c:	f7ff fcbf 	bl	80026be <PIDConfigReset>
	curDistTick = 0;
 8002d40:	4b9e      	ldr	r3, [pc, #632]	@ (8002fbc <RobotMoveDist+0x2ac>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	801a      	strh	r2, [r3, #0]

	__GET_TARGETTICK(*targetDist, targetDistTick);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fbfc 	bl	8000548 <__aeabi_f2d>
 8002d50:	a38f      	add	r3, pc, #572	@ (adr r3, 8002f90 <RobotMoveDist+0x280>)
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	f7fd fc4f 	bl	80005f8 <__aeabi_dmul>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4610      	mov	r0, r2
 8002d60:	4619      	mov	r1, r3
 8002d62:	a38d      	add	r3, pc, #564	@ (adr r3, 8002f98 <RobotMoveDist+0x288>)
 8002d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d68:	f7fd fa8e 	bl	8000288 <__aeabi_dsub>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4610      	mov	r0, r2
 8002d72:	4619      	mov	r1, r3
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	4b91      	ldr	r3, [pc, #580]	@ (8002fc0 <RobotMoveDist+0x2b0>)
 8002d7a:	f7fd fd67 	bl	800084c <__aeabi_ddiv>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	4b8e      	ldr	r3, [pc, #568]	@ (8002fc4 <RobotMoveDist+0x2b4>)
 8002d8c:	f7fd fc34 	bl	80005f8 <__aeabi_dmul>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	4b8a      	ldr	r3, [pc, #552]	@ (8002fc8 <RobotMoveDist+0x2b8>)
 8002d9e:	f7fd fa73 	bl	8000288 <__aeabi_dsub>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	f7fd fefd 	bl	8000ba8 <__aeabi_d2uiz>
 8002dae:	4603      	mov	r3, r0
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	4b86      	ldr	r3, [pc, #536]	@ (8002fcc <RobotMoveDist+0x2bc>)
 8002db4:	801a      	strh	r2, [r3, #0]

	last_curTask_tick = HAL_GetTick();
 8002db6:	f003 f8e9 	bl	8005f8c <HAL_GetTick>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4a84      	ldr	r2, [pc, #528]	@ (8002fd0 <RobotMoveDist+0x2c0>)
 8002dbe:	6013      	str	r3, [r2, #0]
	__SET_MOTOR_DIRECTION(dir);
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2301      	moveq	r3, #1
 8002dc8:	2300      	movne	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2104      	movs	r1, #4
 8002dd0:	4880      	ldr	r0, [pc, #512]	@ (8002fd4 <RobotMoveDist+0x2c4>)
 8002dd2:	f004 f84b 	bl	8006e6c <HAL_GPIO_WritePin>
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf14      	ite	ne
 8002ddc:	2301      	movne	r3, #1
 8002dde:	2300      	moveq	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	2108      	movs	r1, #8
 8002de6:	487b      	ldr	r0, [pc, #492]	@ (8002fd4 <RobotMoveDist+0x2c4>)
 8002de8:	f004 f840 	bl	8006e6c <HAL_GPIO_WritePin>
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	bf0c      	ite	eq
 8002df2:	2301      	moveq	r3, #1
 8002df4:	2300      	movne	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2120      	movs	r1, #32
 8002dfc:	4875      	ldr	r0, [pc, #468]	@ (8002fd4 <RobotMoveDist+0x2c4>)
 8002dfe:	f004 f835 	bl	8006e6c <HAL_GPIO_WritePin>
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf14      	ite	ne
 8002e08:	2301      	movne	r3, #1
 8002e0a:	2300      	moveq	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2110      	movs	r1, #16
 8002e12:	4870      	ldr	r0, [pc, #448]	@ (8002fd4 <RobotMoveDist+0x2c4>)
 8002e14:	f004 f82a 	bl	8006e6c <HAL_GPIO_WritePin>
	__SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 8002e18:	4b6f      	ldr	r3, [pc, #444]	@ (8002fd8 <RobotMoveDist+0x2c8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	4b6e      	ldr	r3, [pc, #440]	@ (8002fdc <RobotMoveDist+0x2cc>)
 8002e22:	801a      	strh	r2, [r3, #0]
	do {
		__GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002e24:	4b6c      	ldr	r3, [pc, #432]	@ (8002fd8 <RobotMoveDist+0x2c8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8002fd8 <RobotMoveDist+0x2c8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d117      	bne.n	8002e6a <RobotMoveDist+0x15a>
 8002e3a:	4b68      	ldr	r3, [pc, #416]	@ (8002fdc <RobotMoveDist+0x2cc>)
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d806      	bhi.n	8002e54 <RobotMoveDist+0x144>
 8002e46:	4b65      	ldr	r3, [pc, #404]	@ (8002fdc <RobotMoveDist+0x2cc>)
 8002e48:	881a      	ldrh	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	e007      	b.n	8002e64 <RobotMoveDist+0x154>
 8002e54:	4b61      	ldr	r3, [pc, #388]	@ (8002fdc <RobotMoveDist+0x2cc>)
 8002e56:	881a      	ldrh	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	4a5e      	ldr	r2, [pc, #376]	@ (8002fe0 <RobotMoveDist+0x2d0>)
 8002e66:	8013      	strh	r3, [r2, #0]
 8002e68:	e016      	b.n	8002e98 <RobotMoveDist+0x188>
 8002e6a:	4b5c      	ldr	r3, [pc, #368]	@ (8002fdc <RobotMoveDist+0x2cc>)
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d306      	bcc.n	8002e84 <RobotMoveDist+0x174>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	4b58      	ldr	r3, [pc, #352]	@ (8002fdc <RobotMoveDist+0x2cc>)
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	e007      	b.n	8002e94 <RobotMoveDist+0x184>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	4b54      	ldr	r3, [pc, #336]	@ (8002fdc <RobotMoveDist+0x2cc>)
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	4a52      	ldr	r2, [pc, #328]	@ (8002fe0 <RobotMoveDist+0x2d0>)
 8002e96:	8013      	strh	r3, [r2, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	4b4f      	ldr	r3, [pc, #316]	@ (8002fdc <RobotMoveDist+0x2cc>)
 8002e9e:	801a      	strh	r2, [r3, #0]
		curDistTick += dist_dL;
 8002ea0:	4b46      	ldr	r3, [pc, #280]	@ (8002fbc <RobotMoveDist+0x2ac>)
 8002ea2:	881a      	ldrh	r2, [r3, #0]
 8002ea4:	4b4e      	ldr	r3, [pc, #312]	@ (8002fe0 <RobotMoveDist+0x2d0>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	4b43      	ldr	r3, [pc, #268]	@ (8002fbc <RobotMoveDist+0x2ac>)
 8002eae:	801a      	strh	r2, [r3, #0]

		if (curDistTick >= targetDistTick) break;
 8002eb0:	4b42      	ldr	r3, [pc, #264]	@ (8002fbc <RobotMoveDist+0x2ac>)
 8002eb2:	881a      	ldrh	r2, [r3, #0]
 8002eb4:	4b45      	ldr	r3, [pc, #276]	@ (8002fcc <RobotMoveDist+0x2bc>)
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	f080 80a8 	bcs.w	800300e <RobotMoveDist+0x2fe>

		if (HAL_GetTick() - last_curTask_tick >= 10) {
 8002ebe:	f003 f865 	bl	8005f8c <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	4b42      	ldr	r3, [pc, #264]	@ (8002fd0 <RobotMoveDist+0x2c0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b09      	cmp	r3, #9
 8002ecc:	d9aa      	bls.n	8002e24 <RobotMoveDist+0x114>
			if (speedMode == SPEED_MODE_T) {
 8002ece:	78bb      	ldrb	r3, [r7, #2]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d103      	bne.n	8002edc <RobotMoveDist+0x1cc>
				StraightLineMove(SPEED_MODE_T);
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f7ff fc05 	bl	80026e4 <StraightLineMove>
 8002eda:	e092      	b.n	8003002 <RobotMoveDist+0x2f2>
			} else {
				speedScale = abs(curDistTick - targetDistTick) / 990; // start to slow down at last 990 ticks (15cm)
 8002edc:	4b37      	ldr	r3, [pc, #220]	@ (8002fbc <RobotMoveDist+0x2ac>)
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8002fcc <RobotMoveDist+0x2bc>)
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bfb8      	it	lt
 8002eec:	425b      	neglt	r3, r3
 8002eee:	4a3d      	ldr	r2, [pc, #244]	@ (8002fe4 <RobotMoveDist+0x2d4>)
 8002ef0:	fb82 1203 	smull	r1, r2, r2, r3
 8002ef4:	11d2      	asrs	r2, r2, #7
 8002ef6:	17db      	asrs	r3, r3, #31
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	ee07 3a90 	vmov	s15, r3
 8002efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f02:	4b39      	ldr	r3, [pc, #228]	@ (8002fe8 <RobotMoveDist+0x2d8>)
 8002f04:	edc3 7a00 	vstr	s15, [r3]
				if (speedMode == SPEED_MODE_1) speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8002f08:	78bb      	ldrb	r3, [r7, #2]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d11e      	bne.n	8002f4c <RobotMoveDist+0x23c>
 8002f0e:	4b36      	ldr	r3, [pc, #216]	@ (8002fe8 <RobotMoveDist+0x2d8>)
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f20:	dd02      	ble.n	8002f28 <RobotMoveDist+0x218>
 8002f22:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002f26:	e00e      	b.n	8002f46 <RobotMoveDist+0x236>
 8002f28:	4b2f      	ldr	r3, [pc, #188]	@ (8002fe8 <RobotMoveDist+0x2d8>)
 8002f2a:	edd3 7a00 	vldr	s15, [r3]
 8002f2e:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8002f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3a:	d502      	bpl.n	8002f42 <RobotMoveDist+0x232>
 8002f3c:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8002f40:	e001      	b.n	8002f46 <RobotMoveDist+0x236>
 8002f42:	4b29      	ldr	r3, [pc, #164]	@ (8002fe8 <RobotMoveDist+0x2d8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a28      	ldr	r2, [pc, #160]	@ (8002fe8 <RobotMoveDist+0x2d8>)
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e055      	b.n	8002ff8 <RobotMoveDist+0x2e8>
				else if (speedMode == SPEED_MODE_2)speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8002f4c:	78bb      	ldrb	r3, [r7, #2]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d152      	bne.n	8002ff8 <RobotMoveDist+0x2e8>
 8002f52:	4b25      	ldr	r3, [pc, #148]	@ (8002fe8 <RobotMoveDist+0x2d8>)
 8002f54:	edd3 7a00 	vldr	s15, [r3]
 8002f58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f64:	dd02      	ble.n	8002f6c <RobotMoveDist+0x25c>
 8002f66:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002f6a:	e043      	b.n	8002ff4 <RobotMoveDist+0x2e4>
 8002f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe8 <RobotMoveDist+0x2d8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fae9 	bl	8000548 <__aeabi_f2d>
 8002f76:	a30a      	add	r3, pc, #40	@ (adr r3, 8002fa0 <RobotMoveDist+0x290>)
 8002f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7c:	f7fd fdae 	bl	8000adc <__aeabi_dcmplt>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d034      	beq.n	8002ff0 <RobotMoveDist+0x2e0>
 8002f86:	4b19      	ldr	r3, [pc, #100]	@ (8002fec <RobotMoveDist+0x2dc>)
 8002f88:	e034      	b.n	8002ff4 <RobotMoveDist+0x2e4>
 8002f8a:	bf00      	nop
 8002f8c:	f3af 8000 	nop.w
 8002f90:	fc66b22a 	.word	0xfc66b22a
 8002f94:	3ff266ac 	.word	0x3ff266ac
 8002f98:	bb2526f8 	.word	0xbb2526f8
 8002f9c:	3feee3d4 	.word	0x3feee3d4
 8002fa0:	9999999a 	.word	0x9999999a
 8002fa4:	3fd99999 	.word	0x3fd99999
 8002fa8:	200006b0 	.word	0x200006b0
 8002fac:	200006b6 	.word	0x200006b6
 8002fb0:	200006e0 	.word	0x200006e0
 8002fb4:	200006cc 	.word	0x200006cc
 8002fb8:	200006f4 	.word	0x200006f4
 8002fbc:	200006c4 	.word	0x200006c4
 8002fc0:	40340000 	.word	0x40340000
 8002fc4:	4094a000 	.word	0x4094a000
 8002fc8:	40240000 	.word	0x40240000
 8002fcc:	200006c6 	.word	0x200006c6
 8002fd0:	200006bc 	.word	0x200006bc
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	20000468 	.word	0x20000468
 8002fdc:	200006ca 	.word	0x200006ca
 8002fe0:	200006c8 	.word	0x200006c8
 8002fe4:	21195767 	.word	0x21195767
 8002fe8:	20000138 	.word	0x20000138
 8002fec:	3ecccccd 	.word	0x3ecccccd
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8003028 <RobotMoveDist+0x318>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8003028 <RobotMoveDist+0x318>)
 8002ff6:	6013      	str	r3, [r2, #0]
				StraightLineMoveSpeedScale(speedMode, &speedScale);
 8002ff8:	78bb      	ldrb	r3, [r7, #2]
 8002ffa:	490b      	ldr	r1, [pc, #44]	@ (8003028 <RobotMoveDist+0x318>)
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fd29 	bl	8002a54 <StraightLineMoveSpeedScale>
			}

			last_curTask_tick = HAL_GetTick();
 8003002:	f002 ffc3 	bl	8005f8c <HAL_GetTick>
 8003006:	4603      	mov	r3, r0
 8003008:	4a08      	ldr	r2, [pc, #32]	@ (800302c <RobotMoveDist+0x31c>)
 800300a:	6013      	str	r3, [r2, #0]
		__GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 800300c:	e70a      	b.n	8002e24 <RobotMoveDist+0x114>
		if (curDistTick >= targetDistTick) break;
 800300e:	bf00      	nop
		}
	} while (1);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 8003010:	4b07      	ldr	r3, [pc, #28]	@ (8003030 <RobotMoveDist+0x320>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2200      	movs	r2, #0
 8003016:	635a      	str	r2, [r3, #52]	@ 0x34
 8003018:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <RobotMoveDist+0x320>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2200      	movs	r2, #0
 800301e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003020:	bf00      	nop
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000138 	.word	0x20000138
 800302c:	200006bc 	.word	0x200006bc
 8003030:	20000588 	.word	0x20000588
 8003034:	00000000 	.word	0x00000000

08003038 <RobotMoveDistObstacle>:

// RobotMoveDistObstacle must be called within a task(eg. runFastestPath) and not within an interrupt(eg. UART, EXTI)
// else osDelay won't work and TRI's timer interrupt can't be given chance to update obsDist_US
void RobotMoveDistObstacle(float * targetDist, const uint8_t speedMode) {
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	70fb      	strb	r3, [r7, #3]
	angleNow = 0; gyroZ = 0;
 8003044:	4bb4      	ldr	r3, [pc, #720]	@ (8003318 <RobotMoveDistObstacle+0x2e0>)
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	4bb3      	ldr	r3, [pc, #716]	@ (800331c <RobotMoveDistObstacle+0x2e4>)
 800304e:	2200      	movs	r2, #0
 8003050:	801a      	strh	r2, [r3, #0]
	PIDConfigReset(&pidTSlow);
 8003052:	48b3      	ldr	r0, [pc, #716]	@ (8003320 <RobotMoveDistObstacle+0x2e8>)
 8003054:	f7ff fb33 	bl	80026be <PIDConfigReset>
	PIDConfigReset(&pidSlow);
 8003058:	48b2      	ldr	r0, [pc, #712]	@ (8003324 <RobotMoveDistObstacle+0x2ec>)
 800305a:	f7ff fb30 	bl	80026be <PIDConfigReset>
	PIDConfigReset(&pidFast);
 800305e:	48b2      	ldr	r0, [pc, #712]	@ (8003328 <RobotMoveDistObstacle+0x2f0>)
 8003060:	f7ff fb2d 	bl	80026be <PIDConfigReset>
//	obsDist_US = 1000;
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8003064:	2104      	movs	r1, #4
 8003066:	48b1      	ldr	r0, [pc, #708]	@ (800332c <RobotMoveDistObstacle+0x2f4>)
 8003068:	f005 fd7e 	bl	8008b68 <HAL_TIM_IC_Start_IT>
	last_curTask_tick = HAL_GetTick();
 800306c:	f002 ff8e 	bl	8005f8c <HAL_GetTick>
 8003070:	4603      	mov	r3, r0
 8003072:	4aaf      	ldr	r2, [pc, #700]	@ (8003330 <RobotMoveDistObstacle+0x2f8>)
 8003074:	6013      	str	r3, [r2, #0]

	do {
	  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8003076:	2201      	movs	r2, #1
 8003078:	2110      	movs	r1, #16
 800307a:	48ae      	ldr	r0, [pc, #696]	@ (8003334 <RobotMoveDistObstacle+0x2fc>)
 800307c:	f003 fef6 	bl	8006e6c <HAL_GPIO_WritePin>
	  __delay_us(&htim4, 10); // wait for 10us
 8003080:	4baa      	ldr	r3, [pc, #680]	@ (800332c <RobotMoveDistObstacle+0x2f4>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2200      	movs	r2, #0
 8003086:	625a      	str	r2, [r3, #36]	@ 0x24
 8003088:	4ba8      	ldr	r3, [pc, #672]	@ (800332c <RobotMoveDistObstacle+0x2f4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308e:	2b09      	cmp	r3, #9
 8003090:	d9fa      	bls.n	8003088 <RobotMoveDistObstacle+0x50>
	  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8003092:	2200      	movs	r2, #0
 8003094:	2110      	movs	r1, #16
 8003096:	48a7      	ldr	r0, [pc, #668]	@ (8003334 <RobotMoveDistObstacle+0x2fc>)
 8003098:	f003 fee8 	bl	8006e6c <HAL_GPIO_WritePin>
	  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
 800309c:	4ba3      	ldr	r3, [pc, #652]	@ (800332c <RobotMoveDistObstacle+0x2f4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	4ba2      	ldr	r3, [pc, #648]	@ (800332c <RobotMoveDistObstacle+0x2f4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0204 	orr.w	r2, r2, #4
 80030aa:	60da      	str	r2, [r3, #12]
	  osDelay(10); // give timer interrupt chance to update obsDist_US value
 80030ac:	200a      	movs	r0, #10
 80030ae:	f008 fa75 	bl	800b59c <osDelay>
	  if (abs(*targetDist - Distance) < 0.1) break;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	ed93 7a00 	vldr	s14, [r3]
 80030b8:	4b9f      	ldr	r3, [pc, #636]	@ (8003338 <RobotMoveDistObstacle+0x300>)
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	ee07 3a90 	vmov	s15, r3
 80030c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030cc:	ee17 3a90 	vmov	r3, s15
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	db11      	blt.n	80030f8 <RobotMoveDistObstacle+0xc0>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	ed93 7a00 	vldr	s14, [r3]
 80030da:	4b97      	ldr	r3, [pc, #604]	@ (8003338 <RobotMoveDistObstacle+0x300>)
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	ee07 3a90 	vmov	s15, r3
 80030e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030ee:	ee17 3a90 	vmov	r3, s15
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f340 80f9 	ble.w	80032ea <RobotMoveDistObstacle+0x2b2>
	  __SET_MOTOR_DIRECTION(Distance >= *targetDist);
 80030f8:	4b8f      	ldr	r3, [pc, #572]	@ (8003338 <RobotMoveDistObstacle+0x300>)
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	ee07 3a90 	vmov	s15, r3
 8003100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	edd3 7a00 	vldr	s15, [r3]
 800310a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800310e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003112:	bfac      	ite	ge
 8003114:	2301      	movge	r3, #1
 8003116:	2300      	movlt	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	f083 0301 	eor.w	r3, r3, #1
 800311e:	b2db      	uxtb	r3, r3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	2104      	movs	r1, #4
 8003126:	4885      	ldr	r0, [pc, #532]	@ (800333c <RobotMoveDistObstacle+0x304>)
 8003128:	f003 fea0 	bl	8006e6c <HAL_GPIO_WritePin>
 800312c:	4b82      	ldr	r3, [pc, #520]	@ (8003338 <RobotMoveDistObstacle+0x300>)
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	ee07 3a90 	vmov	s15, r3
 8003134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	edd3 7a00 	vldr	s15, [r3]
 800313e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003146:	bfac      	ite	ge
 8003148:	2301      	movge	r3, #1
 800314a:	2300      	movlt	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	2108      	movs	r1, #8
 8003152:	487a      	ldr	r0, [pc, #488]	@ (800333c <RobotMoveDistObstacle+0x304>)
 8003154:	f003 fe8a 	bl	8006e6c <HAL_GPIO_WritePin>
 8003158:	4b77      	ldr	r3, [pc, #476]	@ (8003338 <RobotMoveDistObstacle+0x300>)
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	ee07 3a90 	vmov	s15, r3
 8003160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	edd3 7a00 	vldr	s15, [r3]
 800316a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800316e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003172:	bfac      	ite	ge
 8003174:	2301      	movge	r3, #1
 8003176:	2300      	movlt	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	f083 0301 	eor.w	r3, r3, #1
 800317e:	b2db      	uxtb	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	2120      	movs	r1, #32
 8003186:	486d      	ldr	r0, [pc, #436]	@ (800333c <RobotMoveDistObstacle+0x304>)
 8003188:	f003 fe70 	bl	8006e6c <HAL_GPIO_WritePin>
 800318c:	4b6a      	ldr	r3, [pc, #424]	@ (8003338 <RobotMoveDistObstacle+0x300>)
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	ee07 3a90 	vmov	s15, r3
 8003194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	edd3 7a00 	vldr	s15, [r3]
 800319e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a6:	bfac      	ite	ge
 80031a8:	2301      	movge	r3, #1
 80031aa:	2300      	movlt	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	2110      	movs	r1, #16
 80031b2:	4862      	ldr	r0, [pc, #392]	@ (800333c <RobotMoveDistObstacle+0x304>)
 80031b4:	f003 fe5a 	bl	8006e6c <HAL_GPIO_WritePin>
	  if (HAL_GetTick() - last_curTask_tick >=20) {
 80031b8:	f002 fee8 	bl	8005f8c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b5c      	ldr	r3, [pc, #368]	@ (8003330 <RobotMoveDistObstacle+0x2f8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b13      	cmp	r3, #19
 80031c6:	f67f af56 	bls.w	8003076 <RobotMoveDistObstacle+0x3e>
//		  speedScale = 1;
		  if (speedMode == SPEED_MODE_1) {
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d142      	bne.n	8003256 <RobotMoveDistObstacle+0x21e>
			  speedScale = abs(Distance - *targetDist) / 15; // slow down at 15cm
 80031d0:	4b59      	ldr	r3, [pc, #356]	@ (8003338 <RobotMoveDistObstacle+0x300>)
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	ee07 3a90 	vmov	s15, r3
 80031d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	edd3 7a00 	vldr	s15, [r3]
 80031e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031ea:	ee17 3a90 	vmov	r3, s15
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bfb8      	it	lt
 80031f2:	425b      	neglt	r3, r3
 80031f4:	4a52      	ldr	r2, [pc, #328]	@ (8003340 <RobotMoveDistObstacle+0x308>)
 80031f6:	fb82 1203 	smull	r1, r2, r2, r3
 80031fa:	441a      	add	r2, r3
 80031fc:	10d2      	asrs	r2, r2, #3
 80031fe:	17db      	asrs	r3, r3, #31
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	ee07 3a90 	vmov	s15, r3
 8003206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800320a:	4b4e      	ldr	r3, [pc, #312]	@ (8003344 <RobotMoveDistObstacle+0x30c>)
 800320c:	edc3 7a00 	vstr	s15, [r3]
			  speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8003210:	4b4c      	ldr	r3, [pc, #304]	@ (8003344 <RobotMoveDistObstacle+0x30c>)
 8003212:	edd3 7a00 	vldr	s15, [r3]
 8003216:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800321a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003222:	dd02      	ble.n	800322a <RobotMoveDistObstacle+0x1f2>
 8003224:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003228:	e00e      	b.n	8003248 <RobotMoveDistObstacle+0x210>
 800322a:	4b46      	ldr	r3, [pc, #280]	@ (8003344 <RobotMoveDistObstacle+0x30c>)
 800322c:	edd3 7a00 	vldr	s15, [r3]
 8003230:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8003234:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323c:	d502      	bpl.n	8003244 <RobotMoveDistObstacle+0x20c>
 800323e:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8003242:	e001      	b.n	8003248 <RobotMoveDistObstacle+0x210>
 8003244:	4b3f      	ldr	r3, [pc, #252]	@ (8003344 <RobotMoveDistObstacle+0x30c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a3e      	ldr	r2, [pc, #248]	@ (8003344 <RobotMoveDistObstacle+0x30c>)
 800324a:	6013      	str	r3, [r2, #0]
			  StraightLineMoveSpeedScale(SPEED_MODE_1, &speedScale);
 800324c:	493d      	ldr	r1, [pc, #244]	@ (8003344 <RobotMoveDistObstacle+0x30c>)
 800324e:	2001      	movs	r0, #1
 8003250:	f7ff fc00 	bl	8002a54 <StraightLineMoveSpeedScale>
 8003254:	e043      	b.n	80032de <RobotMoveDistObstacle+0x2a6>
		  } else {
			  speedScale = abs(Distance - *targetDist) / 15; // slow down at 15cm
 8003256:	4b38      	ldr	r3, [pc, #224]	@ (8003338 <RobotMoveDistObstacle+0x300>)
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	edd3 7a00 	vldr	s15, [r3]
 8003268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003270:	ee17 3a90 	vmov	r3, s15
 8003274:	2b00      	cmp	r3, #0
 8003276:	bfb8      	it	lt
 8003278:	425b      	neglt	r3, r3
 800327a:	4a31      	ldr	r2, [pc, #196]	@ (8003340 <RobotMoveDistObstacle+0x308>)
 800327c:	fb82 1203 	smull	r1, r2, r2, r3
 8003280:	441a      	add	r2, r3
 8003282:	10d2      	asrs	r2, r2, #3
 8003284:	17db      	asrs	r3, r3, #31
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	ee07 3a90 	vmov	s15, r3
 800328c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003290:	4b2c      	ldr	r3, [pc, #176]	@ (8003344 <RobotMoveDistObstacle+0x30c>)
 8003292:	edc3 7a00 	vstr	s15, [r3]
			  speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8003296:	4b2b      	ldr	r3, [pc, #172]	@ (8003344 <RobotMoveDistObstacle+0x30c>)
 8003298:	edd3 7a00 	vldr	s15, [r3]
 800329c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a8:	dd02      	ble.n	80032b0 <RobotMoveDistObstacle+0x278>
 80032aa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80032ae:	e010      	b.n	80032d2 <RobotMoveDistObstacle+0x29a>
 80032b0:	4b24      	ldr	r3, [pc, #144]	@ (8003344 <RobotMoveDistObstacle+0x30c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd f947 	bl	8000548 <__aeabi_f2d>
 80032ba:	a315      	add	r3, pc, #84	@ (adr r3, 8003310 <RobotMoveDistObstacle+0x2d8>)
 80032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c0:	f7fd fc0c 	bl	8000adc <__aeabi_dcmplt>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <RobotMoveDistObstacle+0x296>
 80032ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003348 <RobotMoveDistObstacle+0x310>)
 80032cc:	e001      	b.n	80032d2 <RobotMoveDistObstacle+0x29a>
 80032ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003344 <RobotMoveDistObstacle+0x30c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003344 <RobotMoveDistObstacle+0x30c>)
 80032d4:	6013      	str	r3, [r2, #0]
			  StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 80032d6:	491b      	ldr	r1, [pc, #108]	@ (8003344 <RobotMoveDistObstacle+0x30c>)
 80032d8:	2002      	movs	r0, #2
 80032da:	f7ff fbbb 	bl	8002a54 <StraightLineMoveSpeedScale>
		  }


		  last_curTask_tick = HAL_GetTick();
 80032de:	f002 fe55 	bl	8005f8c <HAL_GetTick>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4a12      	ldr	r2, [pc, #72]	@ (8003330 <RobotMoveDistObstacle+0x2f8>)
 80032e6:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80032e8:	e6c5      	b.n	8003076 <RobotMoveDistObstacle+0x3e>
	  if (abs(*targetDist - Distance) < 0.1) break;
 80032ea:	bf00      	nop
	  }

	} while (1);

	__SET_MOTOR_DUTY(&htim8, 0, 0);
 80032ec:	4b17      	ldr	r3, [pc, #92]	@ (800334c <RobotMoveDistObstacle+0x314>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2200      	movs	r2, #0
 80032f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80032f4:	4b15      	ldr	r3, [pc, #84]	@ (800334c <RobotMoveDistObstacle+0x314>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2200      	movs	r2, #0
 80032fa:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_2);
 80032fc:	2104      	movs	r1, #4
 80032fe:	480b      	ldr	r0, [pc, #44]	@ (800332c <RobotMoveDistObstacle+0x2f4>)
 8003300:	f005 fd5a 	bl	8008db8 <HAL_TIM_IC_Stop_IT>
}
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	f3af 8000 	nop.w
 8003310:	9999999a 	.word	0x9999999a
 8003314:	3fd99999 	.word	0x3fd99999
 8003318:	200006b0 	.word	0x200006b0
 800331c:	200006b6 	.word	0x200006b6
 8003320:	200006e0 	.word	0x200006e0
 8003324:	200006cc 	.word	0x200006cc
 8003328:	200006f4 	.word	0x200006f4
 800332c:	200004f8 	.word	0x200004f8
 8003330:	200006bc 	.word	0x200006bc
 8003334:	40020400 	.word	0x40020400
 8003338:	20000734 	.word	0x20000734
 800333c:	40020000 	.word	0x40020000
 8003340:	88888889 	.word	0x88888889
 8003344:	20000138 	.word	0x20000138
 8003348:	3ecccccd 	.word	0x3ecccccd
 800334c:	20000588 	.word	0x20000588

08003350 <RobotMoveDistObstacle_IR>:

void RobotMoveDistObstacle_IR(float * targetDist) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	dataPoint = 0; IR_data_raw_acc = 0; obsDist_IR = 1000;
 8003358:	4ba3      	ldr	r3, [pc, #652]	@ (80035e8 <RobotMoveDistObstacle_IR+0x298>)
 800335a:	2200      	movs	r2, #0
 800335c:	801a      	strh	r2, [r3, #0]
 800335e:	4ba3      	ldr	r3, [pc, #652]	@ (80035ec <RobotMoveDistObstacle_IR+0x29c>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	4ba2      	ldr	r3, [pc, #648]	@ (80035f0 <RobotMoveDistObstacle_IR+0x2a0>)
 8003366:	4aa3      	ldr	r2, [pc, #652]	@ (80035f4 <RobotMoveDistObstacle_IR+0x2a4>)
 8003368:	601a      	str	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 800336a:	f002 fe0f 	bl	8005f8c <HAL_GetTick>
 800336e:	4603      	mov	r3, r0
 8003370:	4aa1      	ldr	r2, [pc, #644]	@ (80035f8 <RobotMoveDistObstacle_IR+0x2a8>)
 8003372:	6013      	str	r3, [r2, #0]
//	__PEND_CURCMD(curCmd);

	do {
		__ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003374:	48a1      	ldr	r0, [pc, #644]	@ (80035fc <RobotMoveDistObstacle_IR+0x2ac>)
 8003376:	f002 fe7d 	bl	8006074 <HAL_ADC_Start>
 800337a:	2114      	movs	r1, #20
 800337c:	489f      	ldr	r0, [pc, #636]	@ (80035fc <RobotMoveDistObstacle_IR+0x2ac>)
 800337e:	f002 ff7e 	bl	800627e <HAL_ADC_PollForConversion>
 8003382:	489e      	ldr	r0, [pc, #632]	@ (80035fc <RobotMoveDistObstacle_IR+0x2ac>)
 8003384:	f003 f806 	bl	8006394 <HAL_ADC_GetValue>
 8003388:	4602      	mov	r2, r0
 800338a:	4b98      	ldr	r3, [pc, #608]	@ (80035ec <RobotMoveDistObstacle_IR+0x29c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4413      	add	r3, r2
 8003390:	4a96      	ldr	r2, [pc, #600]	@ (80035ec <RobotMoveDistObstacle_IR+0x29c>)
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	4b94      	ldr	r3, [pc, #592]	@ (80035e8 <RobotMoveDistObstacle_IR+0x298>)
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	4b99      	ldr	r3, [pc, #612]	@ (8003600 <RobotMoveDistObstacle_IR+0x2b0>)
 800339c:	fb83 1302 	smull	r1, r3, r3, r2
 80033a0:	1099      	asrs	r1, r3, #2
 80033a2:	17d3      	asrs	r3, r2, #31
 80033a4:	1ac9      	subs	r1, r1, r3
 80033a6:	460b      	mov	r3, r1
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	1ad1      	subs	r1, r2, r3
 80033b0:	b28a      	uxth	r2, r1
 80033b2:	4b8d      	ldr	r3, [pc, #564]	@ (80035e8 <RobotMoveDistObstacle_IR+0x298>)
 80033b4:	801a      	strh	r2, [r3, #0]
 80033b6:	4b8c      	ldr	r3, [pc, #560]	@ (80035e8 <RobotMoveDistObstacle_IR+0x298>)
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	2b09      	cmp	r3, #9
 80033bc:	d129      	bne.n	8003412 <RobotMoveDistObstacle_IR+0xc2>
 80033be:	4b8b      	ldr	r3, [pc, #556]	@ (80035ec <RobotMoveDistObstacle_IR+0x29c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a89      	ldr	r2, [pc, #548]	@ (80035e8 <RobotMoveDistObstacle_IR+0x298>)
 80033c4:	8812      	ldrh	r2, [r2, #0]
 80033c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fd f89a 	bl	8000504 <__aeabi_ui2d>
 80033d0:	a37f      	add	r3, pc, #508	@ (adr r3, 80035d0 <RobotMoveDistObstacle_IR+0x280>)
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	f7fc ff57 	bl	8000288 <__aeabi_dsub>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	a17e      	add	r1, pc, #504	@ (adr r1, 80035d8 <RobotMoveDistObstacle_IR+0x288>)
 80033e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033e4:	f7fd fa32 	bl	800084c <__aeabi_ddiv>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4610      	mov	r0, r2
 80033ee:	4619      	mov	r1, r3
 80033f0:	f7fd fbfa 	bl	8000be8 <__aeabi_d2f>
 80033f4:	4603      	mov	r3, r0
 80033f6:	4a7e      	ldr	r2, [pc, #504]	@ (80035f0 <RobotMoveDistObstacle_IR+0x2a0>)
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b7c      	ldr	r3, [pc, #496]	@ (80035ec <RobotMoveDistObstacle_IR+0x29c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a7a      	ldr	r2, [pc, #488]	@ (80035e8 <RobotMoveDistObstacle_IR+0x298>)
 8003400:	8812      	ldrh	r2, [r2, #0]
 8003402:	fbb3 f3f2 	udiv	r3, r3, r2
 8003406:	b29a      	uxth	r2, r3
 8003408:	4b7e      	ldr	r3, [pc, #504]	@ (8003604 <RobotMoveDistObstacle_IR+0x2b4>)
 800340a:	801a      	strh	r2, [r3, #0]
 800340c:	4b77      	ldr	r3, [pc, #476]	@ (80035ec <RobotMoveDistObstacle_IR+0x29c>)
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	487a      	ldr	r0, [pc, #488]	@ (80035fc <RobotMoveDistObstacle_IR+0x2ac>)
 8003414:	f002 ff00 	bl	8006218 <HAL_ADC_Stop>
		if (*targetDist > 0 && abs(*targetDist - obsDist_IR) < 0.1) break;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	edd3 7a00 	vldr	s15, [r3]
 800341e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003426:	dd1c      	ble.n	8003462 <RobotMoveDistObstacle_IR+0x112>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	ed93 7a00 	vldr	s14, [r3]
 800342e:	4b70      	ldr	r3, [pc, #448]	@ (80035f0 <RobotMoveDistObstacle_IR+0x2a0>)
 8003430:	edd3 7a00 	vldr	s15, [r3]
 8003434:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003438:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800343c:	ee17 3a90 	vmov	r3, s15
 8003440:	2b00      	cmp	r3, #0
 8003442:	db0e      	blt.n	8003462 <RobotMoveDistObstacle_IR+0x112>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	ed93 7a00 	vldr	s14, [r3]
 800344a:	4b69      	ldr	r3, [pc, #420]	@ (80035f0 <RobotMoveDistObstacle_IR+0x2a0>)
 800344c:	edd3 7a00 	vldr	s15, [r3]
 8003450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003458:	ee17 3a90 	vmov	r3, s15
 800345c:	2b00      	cmp	r3, #0
 800345e:	f340 80a4 	ble.w	80035aa <RobotMoveDistObstacle_IR+0x25a>

		__SET_MOTOR_DIRECTION(obsDist_IR >= *targetDist);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	ed93 7a00 	vldr	s14, [r3]
 8003468:	4b61      	ldr	r3, [pc, #388]	@ (80035f0 <RobotMoveDistObstacle_IR+0x2a0>)
 800346a:	edd3 7a00 	vldr	s15, [r3]
 800346e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003476:	bf94      	ite	ls
 8003478:	2301      	movls	r3, #1
 800347a:	2300      	movhi	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	f083 0301 	eor.w	r3, r3, #1
 8003482:	b2db      	uxtb	r3, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	2104      	movs	r1, #4
 800348a:	485f      	ldr	r0, [pc, #380]	@ (8003608 <RobotMoveDistObstacle_IR+0x2b8>)
 800348c:	f003 fcee 	bl	8006e6c <HAL_GPIO_WritePin>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	ed93 7a00 	vldr	s14, [r3]
 8003496:	4b56      	ldr	r3, [pc, #344]	@ (80035f0 <RobotMoveDistObstacle_IR+0x2a0>)
 8003498:	edd3 7a00 	vldr	s15, [r3]
 800349c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a4:	bf94      	ite	ls
 80034a6:	2301      	movls	r3, #1
 80034a8:	2300      	movhi	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	2108      	movs	r1, #8
 80034b0:	4855      	ldr	r0, [pc, #340]	@ (8003608 <RobotMoveDistObstacle_IR+0x2b8>)
 80034b2:	f003 fcdb 	bl	8006e6c <HAL_GPIO_WritePin>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	ed93 7a00 	vldr	s14, [r3]
 80034bc:	4b4c      	ldr	r3, [pc, #304]	@ (80035f0 <RobotMoveDistObstacle_IR+0x2a0>)
 80034be:	edd3 7a00 	vldr	s15, [r3]
 80034c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ca:	bf94      	ite	ls
 80034cc:	2301      	movls	r3, #1
 80034ce:	2300      	movhi	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f083 0301 	eor.w	r3, r3, #1
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	2120      	movs	r1, #32
 80034de:	484a      	ldr	r0, [pc, #296]	@ (8003608 <RobotMoveDistObstacle_IR+0x2b8>)
 80034e0:	f003 fcc4 	bl	8006e6c <HAL_GPIO_WritePin>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	ed93 7a00 	vldr	s14, [r3]
 80034ea:	4b41      	ldr	r3, [pc, #260]	@ (80035f0 <RobotMoveDistObstacle_IR+0x2a0>)
 80034ec:	edd3 7a00 	vldr	s15, [r3]
 80034f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f8:	bf94      	ite	ls
 80034fa:	2301      	movls	r3, #1
 80034fc:	2300      	movhi	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	2110      	movs	r1, #16
 8003504:	4840      	ldr	r0, [pc, #256]	@ (8003608 <RobotMoveDistObstacle_IR+0x2b8>)
 8003506:	f003 fcb1 	bl	8006e6c <HAL_GPIO_WritePin>
	  if (HAL_GetTick() - last_curTask_tick >=10) {
 800350a:	f002 fd3f 	bl	8005f8c <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	4b39      	ldr	r3, [pc, #228]	@ (80035f8 <RobotMoveDistObstacle_IR+0x2a8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b09      	cmp	r3, #9
 8003518:	f67f af2c 	bls.w	8003374 <RobotMoveDistObstacle_IR+0x24>
//		  speedScale = 1;
		  speedScale = abs(obsDist_IR - *targetDist) / 15; // slow down at 15cm
 800351c:	4b34      	ldr	r3, [pc, #208]	@ (80035f0 <RobotMoveDistObstacle_IR+0x2a0>)
 800351e:	ed93 7a00 	vldr	s14, [r3]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800352c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003530:	ee17 3a90 	vmov	r3, s15
 8003534:	2b00      	cmp	r3, #0
 8003536:	bfb8      	it	lt
 8003538:	425b      	neglt	r3, r3
 800353a:	4a34      	ldr	r2, [pc, #208]	@ (800360c <RobotMoveDistObstacle_IR+0x2bc>)
 800353c:	fb82 1203 	smull	r1, r2, r2, r3
 8003540:	441a      	add	r2, r3
 8003542:	10d2      	asrs	r2, r2, #3
 8003544:	17db      	asrs	r3, r3, #31
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	ee07 3a90 	vmov	s15, r3
 800354c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003550:	4b2f      	ldr	r3, [pc, #188]	@ (8003610 <RobotMoveDistObstacle_IR+0x2c0>)
 8003552:	edc3 7a00 	vstr	s15, [r3]
		  speedScale = speedScale > 1 ? 1 : (speedScale < 0.3 ? 0.3 : speedScale);
 8003556:	4b2e      	ldr	r3, [pc, #184]	@ (8003610 <RobotMoveDistObstacle_IR+0x2c0>)
 8003558:	edd3 7a00 	vldr	s15, [r3]
 800355c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003568:	dd02      	ble.n	8003570 <RobotMoveDistObstacle_IR+0x220>
 800356a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800356e:	e010      	b.n	8003592 <RobotMoveDistObstacle_IR+0x242>
 8003570:	4b27      	ldr	r3, [pc, #156]	@ (8003610 <RobotMoveDistObstacle_IR+0x2c0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7fc ffe7 	bl	8000548 <__aeabi_f2d>
 800357a:	a319      	add	r3, pc, #100	@ (adr r3, 80035e0 <RobotMoveDistObstacle_IR+0x290>)
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f7fd faac 	bl	8000adc <__aeabi_dcmplt>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <RobotMoveDistObstacle_IR+0x23e>
 800358a:	4b22      	ldr	r3, [pc, #136]	@ (8003614 <RobotMoveDistObstacle_IR+0x2c4>)
 800358c:	e001      	b.n	8003592 <RobotMoveDistObstacle_IR+0x242>
 800358e:	4b20      	ldr	r3, [pc, #128]	@ (8003610 <RobotMoveDistObstacle_IR+0x2c0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1f      	ldr	r2, [pc, #124]	@ (8003610 <RobotMoveDistObstacle_IR+0x2c0>)
 8003594:	6013      	str	r3, [r2, #0]
		  StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 8003596:	491e      	ldr	r1, [pc, #120]	@ (8003610 <RobotMoveDistObstacle_IR+0x2c0>)
 8003598:	2002      	movs	r0, #2
 800359a:	f7ff fa5b 	bl	8002a54 <StraightLineMoveSpeedScale>

		  last_curTask_tick = HAL_GetTick();
 800359e:	f002 fcf5 	bl	8005f8c <HAL_GetTick>
 80035a2:	4603      	mov	r3, r0
 80035a4:	4a14      	ldr	r2, [pc, #80]	@ (80035f8 <RobotMoveDistObstacle_IR+0x2a8>)
 80035a6:	6013      	str	r3, [r2, #0]
		__ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 80035a8:	e6e4      	b.n	8003374 <RobotMoveDistObstacle_IR+0x24>
		if (*targetDist > 0 && abs(*targetDist - obsDist_IR) < 0.1) break;
 80035aa:	bf00      	nop
	  }
//	  osDelay(5);
	} while (1);

//  __ON_TASK_END(&htim8, prevTask, curTask);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 80035ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003618 <RobotMoveDistObstacle_IR+0x2c8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2200      	movs	r2, #0
 80035b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80035b4:	4b18      	ldr	r3, [pc, #96]	@ (8003618 <RobotMoveDistObstacle_IR+0x2c8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2200      	movs	r2, #0
 80035ba:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_ADC_Stop(&hadc1);
 80035bc:	480f      	ldr	r0, [pc, #60]	@ (80035fc <RobotMoveDistObstacle_IR+0x2ac>)
 80035be:	f002 fe2b 	bl	8006218 <HAL_ADC_Stop>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	f3af 8000 	nop.w
 80035d0:	fb5723d3 	.word	0xfb5723d3
 80035d4:	407046c5 	.word	0x407046c5
 80035d8:	324c8366 	.word	0x324c8366
 80035dc:	40d90b34 	.word	0x40d90b34
 80035e0:	33333333 	.word	0x33333333
 80035e4:	3fd33333 	.word	0x3fd33333
 80035e8:	20000714 	.word	0x20000714
 80035ec:	20000718 	.word	0x20000718
 80035f0:	2000070c 	.word	0x2000070c
 80035f4:	447a0000 	.word	0x447a0000
 80035f8:	200006bc 	.word	0x200006bc
 80035fc:	2000033c 	.word	0x2000033c
 8003600:	66666667 	.word	0x66666667
 8003604:	20000708 	.word	0x20000708
 8003608:	40020000 	.word	0x40020000
 800360c:	88888889 	.word	0x88888889
 8003610:	20000138 	.word	0x20000138
 8003614:	3e99999a 	.word	0x3e99999a
 8003618:	20000588 	.word	0x20000588
 800361c:	00000000 	.word	0x00000000

08003620 <RobotTurn>:

void RobotTurn(float * targetAngle) {
 8003620:	b5b0      	push	{r4, r5, r7, lr}
 8003622:	b08c      	sub	sp, #48	@ 0x30
 8003624:	af04      	add	r7, sp, #16
 8003626:	6078      	str	r0, [r7, #4]
	angleNow = 0; gyroZ = 0;
 8003628:	4b4b      	ldr	r3, [pc, #300]	@ (8003758 <RobotTurn+0x138>)
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	4b4a      	ldr	r3, [pc, #296]	@ (800375c <RobotTurn+0x13c>)
 8003632:	2200      	movs	r2, #0
 8003634:	801a      	strh	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 8003636:	f002 fca9 	bl	8005f8c <HAL_GetTick>
 800363a:	4603      	mov	r3, r0
 800363c:	4a48      	ldr	r2, [pc, #288]	@ (8003760 <RobotTurn+0x140>)
 800363e:	6013      	str	r3, [r2, #0]
	char message1[20];
	do {

	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 8003640:	f002 fca4 	bl	8005f8c <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	4b46      	ldr	r3, [pc, #280]	@ (8003760 <RobotTurn+0x140>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b09      	cmp	r3, #9
 800364e:	d9f7      	bls.n	8003640 <RobotTurn+0x20>
		  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8003650:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003654:	9302      	str	r3, [sp, #8]
 8003656:	2302      	movs	r3, #2
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	4b42      	ldr	r3, [pc, #264]	@ (8003764 <RobotTurn+0x144>)
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	2301      	movs	r3, #1
 8003660:	2237      	movs	r2, #55	@ 0x37
 8003662:	21d0      	movs	r1, #208	@ 0xd0
 8003664:	4840      	ldr	r0, [pc, #256]	@ (8003768 <RobotTurn+0x148>)
 8003666:	f003 fe59 	bl	800731c <HAL_I2C_Mem_Read>
 800366a:	4b3e      	ldr	r3, [pc, #248]	@ (8003764 <RobotTurn+0x144>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	b21a      	sxth	r2, r3
 8003672:	4b3c      	ldr	r3, [pc, #240]	@ (8003764 <RobotTurn+0x144>)
 8003674:	785b      	ldrb	r3, [r3, #1]
 8003676:	b21b      	sxth	r3, r3
 8003678:	4313      	orrs	r3, r2
 800367a:	b21a      	sxth	r2, r3
 800367c:	4b37      	ldr	r3, [pc, #220]	@ (800375c <RobotTurn+0x13c>)
 800367e:	801a      	strh	r2, [r3, #0]
		  //if(abs(gyroZ) > 10.0f){
		  angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8003680:	4b35      	ldr	r3, [pc, #212]	@ (8003758 <RobotTurn+0x138>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7fc ff5f 	bl	8000548 <__aeabi_f2d>
 800368a:	4604      	mov	r4, r0
 800368c:	460d      	mov	r5, r1
 800368e:	4b33      	ldr	r3, [pc, #204]	@ (800375c <RobotTurn+0x13c>)
 8003690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003694:	4618      	mov	r0, r3
 8003696:	f7fc ff45 	bl	8000524 <__aeabi_i2d>
 800369a:	a32b      	add	r3, pc, #172	@ (adr r3, 8003748 <RobotTurn+0x128>)
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f7fd f8d4 	bl	800084c <__aeabi_ddiv>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4610      	mov	r0, r2
 80036aa:	4619      	mov	r1, r3
 80036ac:	a328      	add	r3, pc, #160	@ (adr r3, 8003750 <RobotTurn+0x130>)
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f7fc ffa1 	bl	80005f8 <__aeabi_dmul>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4620      	mov	r0, r4
 80036bc:	4629      	mov	r1, r5
 80036be:	f7fc fde5 	bl	800028c <__adddf3>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4610      	mov	r0, r2
 80036c8:	4619      	mov	r1, r3
 80036ca:	f7fd fa8d 	bl	8000be8 <__aeabi_d2f>
 80036ce:	4603      	mov	r3, r0
 80036d0:	4a21      	ldr	r2, [pc, #132]	@ (8003758 <RobotTurn+0x138>)
 80036d2:	6013      	str	r3, [r2, #0]
		  if (abs(angleNow - *targetAngle) < 0.01) break;
 80036d4:	4b20      	ldr	r3, [pc, #128]	@ (8003758 <RobotTurn+0x138>)
 80036d6:	ed93 7a00 	vldr	s14, [r3]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	edd3 7a00 	vldr	s15, [r3]
 80036e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036e8:	ee17 3a90 	vmov	r3, s15
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	db0d      	blt.n	800370c <RobotTurn+0xec>
 80036f0:	4b19      	ldr	r3, [pc, #100]	@ (8003758 <RobotTurn+0x138>)
 80036f2:	ed93 7a00 	vldr	s14, [r3]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	edd3 7a00 	vldr	s15, [r3]
 80036fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003700:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003704:	ee17 3a90 	vmov	r3, s15
 8003708:	2b00      	cmp	r3, #0
 800370a:	dd05      	ble.n	8003718 <RobotTurn+0xf8>
		  last_curTask_tick = HAL_GetTick();
 800370c:	f002 fc3e 	bl	8005f8c <HAL_GetTick>
 8003710:	4603      	mov	r3, r0
 8003712:	4a13      	ldr	r2, [pc, #76]	@ (8003760 <RobotTurn+0x140>)
 8003714:	6013      	str	r3, [r2, #0]
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 8003716:	e793      	b.n	8003640 <RobotTurn+0x20>
		  if (abs(angleNow - *targetAngle) < 0.01) break;
 8003718:	bf00      	nop
	} while(1);
//	sprintf(message1, "%d \n", angleNow);
//	OLED_ShowString(10,15, &message1[0]);
//	OLED_Refresh_Gram();

	__SET_MOTOR_DUTY(&htim8, 0, 0);
 800371a:	4b14      	ldr	r3, [pc, #80]	@ (800376c <RobotTurn+0x14c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2200      	movs	r2, #0
 8003720:	635a      	str	r2, [r3, #52]	@ 0x34
 8003722:	4b12      	ldr	r3, [pc, #72]	@ (800376c <RobotTurn+0x14c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2200      	movs	r2, #0
 8003728:	639a      	str	r2, [r3, #56]	@ 0x38
	__RESET_SERVO_TURN(&htim1);
 800372a:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <RobotTurn+0x150>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	224a      	movs	r2, #74	@ 0x4a
 8003730:	641a      	str	r2, [r3, #64]	@ 0x40
 8003732:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003736:	f002 fc35 	bl	8005fa4 <HAL_Delay>
}
 800373a:	bf00      	nop
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bdb0      	pop	{r4, r5, r7, pc}
 8003742:	bf00      	nop
 8003744:	f3af 8000 	nop.w
 8003748:	66666666 	.word	0x66666666
 800374c:	40306666 	.word	0x40306666
 8003750:	47ae147b 	.word	0x47ae147b
 8003754:	3f847ae1 	.word	0x3f847ae1
 8003758:	200006b0 	.word	0x200006b0
 800375c:	200006b6 	.word	0x200006b6
 8003760:	200006bc 	.word	0x200006bc
 8003764:	200006b4 	.word	0x200006b4
 8003768:	200003cc 	.word	0x200003cc
 800376c:	20000588 	.word	0x20000588
 8003770:	20000420 	.word	0x20000420
 8003774:	00000000 	.word	0x00000000

08003778 <RobotMoveUntilIROvershoot>:
		__SET_MOTOR_DUTY(&htim8, 3500, 3240);
		break;
	}
	RobotTurnFastest(&targetAngle);
}
void RobotMoveUntilIROvershoot() {
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  obsDist_IR = 0;
 800377c:	4bb2      	ldr	r3, [pc, #712]	@ (8003a48 <RobotMoveUntilIROvershoot+0x2d0>)
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
  obsDist_IR2 = 0;
 8003784:	4bb1      	ldr	r3, [pc, #708]	@ (8003a4c <RobotMoveUntilIROvershoot+0x2d4>)
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
  angleNow = 0; gyroZ = 0;
 800378c:	4bb0      	ldr	r3, [pc, #704]	@ (8003a50 <RobotMoveUntilIROvershoot+0x2d8>)
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	4baf      	ldr	r3, [pc, #700]	@ (8003a54 <RobotMoveUntilIROvershoot+0x2dc>)
 8003796:	2200      	movs	r2, #0
 8003798:	801a      	strh	r2, [r3, #0]
    last_curTask_tick = HAL_GetTick();
 800379a:	f002 fbf7 	bl	8005f8c <HAL_GetTick>
 800379e:	4603      	mov	r3, r0
 80037a0:	4aad      	ldr	r2, [pc, #692]	@ (8003a58 <RobotMoveUntilIROvershoot+0x2e0>)
 80037a2:	6013      	str	r3, [r2, #0]

    do {
      __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 80037a4:	48ad      	ldr	r0, [pc, #692]	@ (8003a5c <RobotMoveUntilIROvershoot+0x2e4>)
 80037a6:	f002 fc65 	bl	8006074 <HAL_ADC_Start>
 80037aa:	2114      	movs	r1, #20
 80037ac:	48ab      	ldr	r0, [pc, #684]	@ (8003a5c <RobotMoveUntilIROvershoot+0x2e4>)
 80037ae:	f002 fd66 	bl	800627e <HAL_ADC_PollForConversion>
 80037b2:	48aa      	ldr	r0, [pc, #680]	@ (8003a5c <RobotMoveUntilIROvershoot+0x2e4>)
 80037b4:	f002 fdee 	bl	8006394 <HAL_ADC_GetValue>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4ba9      	ldr	r3, [pc, #676]	@ (8003a60 <RobotMoveUntilIROvershoot+0x2e8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4413      	add	r3, r2
 80037c0:	4aa7      	ldr	r2, [pc, #668]	@ (8003a60 <RobotMoveUntilIROvershoot+0x2e8>)
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	4ba7      	ldr	r3, [pc, #668]	@ (8003a64 <RobotMoveUntilIROvershoot+0x2ec>)
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	4ba7      	ldr	r3, [pc, #668]	@ (8003a68 <RobotMoveUntilIROvershoot+0x2f0>)
 80037cc:	fb83 1302 	smull	r1, r3, r3, r2
 80037d0:	1099      	asrs	r1, r3, #2
 80037d2:	17d3      	asrs	r3, r2, #31
 80037d4:	1ac9      	subs	r1, r1, r3
 80037d6:	460b      	mov	r3, r1
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	1ad1      	subs	r1, r2, r3
 80037e0:	b28a      	uxth	r2, r1
 80037e2:	4ba0      	ldr	r3, [pc, #640]	@ (8003a64 <RobotMoveUntilIROvershoot+0x2ec>)
 80037e4:	801a      	strh	r2, [r3, #0]
 80037e6:	4b9f      	ldr	r3, [pc, #636]	@ (8003a64 <RobotMoveUntilIROvershoot+0x2ec>)
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	2b09      	cmp	r3, #9
 80037ec:	d129      	bne.n	8003842 <RobotMoveUntilIROvershoot+0xca>
 80037ee:	4b9c      	ldr	r3, [pc, #624]	@ (8003a60 <RobotMoveUntilIROvershoot+0x2e8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a9c      	ldr	r2, [pc, #624]	@ (8003a64 <RobotMoveUntilIROvershoot+0x2ec>)
 80037f4:	8812      	ldrh	r2, [r2, #0]
 80037f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fc fe82 	bl	8000504 <__aeabi_ui2d>
 8003800:	a38d      	add	r3, pc, #564	@ (adr r3, 8003a38 <RobotMoveUntilIROvershoot+0x2c0>)
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	f7fc fd3f 	bl	8000288 <__aeabi_dsub>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	a18c      	add	r1, pc, #560	@ (adr r1, 8003a40 <RobotMoveUntilIROvershoot+0x2c8>)
 8003810:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003814:	f7fd f81a 	bl	800084c <__aeabi_ddiv>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	f7fd f9e2 	bl	8000be8 <__aeabi_d2f>
 8003824:	4603      	mov	r3, r0
 8003826:	4a88      	ldr	r2, [pc, #544]	@ (8003a48 <RobotMoveUntilIROvershoot+0x2d0>)
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	4b8d      	ldr	r3, [pc, #564]	@ (8003a60 <RobotMoveUntilIROvershoot+0x2e8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a8d      	ldr	r2, [pc, #564]	@ (8003a64 <RobotMoveUntilIROvershoot+0x2ec>)
 8003830:	8812      	ldrh	r2, [r2, #0]
 8003832:	fbb3 f3f2 	udiv	r3, r3, r2
 8003836:	b29a      	uxth	r2, r3
 8003838:	4b8c      	ldr	r3, [pc, #560]	@ (8003a6c <RobotMoveUntilIROvershoot+0x2f4>)
 800383a:	801a      	strh	r2, [r3, #0]
 800383c:	4b88      	ldr	r3, [pc, #544]	@ (8003a60 <RobotMoveUntilIROvershoot+0x2e8>)
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	4886      	ldr	r0, [pc, #536]	@ (8003a5c <RobotMoveUntilIROvershoot+0x2e4>)
 8003844:	f002 fce8 	bl	8006218 <HAL_ADC_Stop>
      if (obsDist_IR > 20 || obsDist_IR < 0)
 8003848:	4b7f      	ldr	r3, [pc, #508]	@ (8003a48 <RobotMoveUntilIROvershoot+0x2d0>)
 800384a:	edd3 7a00 	vldr	s15, [r3]
 800384e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385a:	dc07      	bgt.n	800386c <RobotMoveUntilIROvershoot+0xf4>
 800385c:	4b7a      	ldr	r3, [pc, #488]	@ (8003a48 <RobotMoveUntilIROvershoot+0x2d0>)
 800385e:	edd3 7a00 	vldr	s15, [r3]
 8003862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386a:	d565      	bpl.n	8003938 <RobotMoveUntilIROvershoot+0x1c0>
        {
        __ADC_Read_Dist(&hadc2, dataPoint2, IR_data_raw_acc2, obsDist_IR2, obsTick_IR2);
 800386c:	4880      	ldr	r0, [pc, #512]	@ (8003a70 <RobotMoveUntilIROvershoot+0x2f8>)
 800386e:	f002 fc01 	bl	8006074 <HAL_ADC_Start>
 8003872:	2114      	movs	r1, #20
 8003874:	487e      	ldr	r0, [pc, #504]	@ (8003a70 <RobotMoveUntilIROvershoot+0x2f8>)
 8003876:	f002 fd02 	bl	800627e <HAL_ADC_PollForConversion>
 800387a:	487d      	ldr	r0, [pc, #500]	@ (8003a70 <RobotMoveUntilIROvershoot+0x2f8>)
 800387c:	f002 fd8a 	bl	8006394 <HAL_ADC_GetValue>
 8003880:	4602      	mov	r2, r0
 8003882:	4b7c      	ldr	r3, [pc, #496]	@ (8003a74 <RobotMoveUntilIROvershoot+0x2fc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4413      	add	r3, r2
 8003888:	4a7a      	ldr	r2, [pc, #488]	@ (8003a74 <RobotMoveUntilIROvershoot+0x2fc>)
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	4b7a      	ldr	r3, [pc, #488]	@ (8003a78 <RobotMoveUntilIROvershoot+0x300>)
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	4b75      	ldr	r3, [pc, #468]	@ (8003a68 <RobotMoveUntilIROvershoot+0x2f0>)
 8003894:	fb83 1302 	smull	r1, r3, r3, r2
 8003898:	1099      	asrs	r1, r3, #2
 800389a:	17d3      	asrs	r3, r2, #31
 800389c:	1ac9      	subs	r1, r1, r3
 800389e:	460b      	mov	r3, r1
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	1ad1      	subs	r1, r2, r3
 80038a8:	b28a      	uxth	r2, r1
 80038aa:	4b73      	ldr	r3, [pc, #460]	@ (8003a78 <RobotMoveUntilIROvershoot+0x300>)
 80038ac:	801a      	strh	r2, [r3, #0]
 80038ae:	4b72      	ldr	r3, [pc, #456]	@ (8003a78 <RobotMoveUntilIROvershoot+0x300>)
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	2b09      	cmp	r3, #9
 80038b4:	d129      	bne.n	800390a <RobotMoveUntilIROvershoot+0x192>
 80038b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003a74 <RobotMoveUntilIROvershoot+0x2fc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a6f      	ldr	r2, [pc, #444]	@ (8003a78 <RobotMoveUntilIROvershoot+0x300>)
 80038bc:	8812      	ldrh	r2, [r2, #0]
 80038be:	fbb3 f3f2 	udiv	r3, r3, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fc fe1e 	bl	8000504 <__aeabi_ui2d>
 80038c8:	a35b      	add	r3, pc, #364	@ (adr r3, 8003a38 <RobotMoveUntilIROvershoot+0x2c0>)
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	f7fc fcdb 	bl	8000288 <__aeabi_dsub>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	a15a      	add	r1, pc, #360	@ (adr r1, 8003a40 <RobotMoveUntilIROvershoot+0x2c8>)
 80038d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038dc:	f7fc ffb6 	bl	800084c <__aeabi_ddiv>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4610      	mov	r0, r2
 80038e6:	4619      	mov	r1, r3
 80038e8:	f7fd f97e 	bl	8000be8 <__aeabi_d2f>
 80038ec:	4603      	mov	r3, r0
 80038ee:	4a57      	ldr	r2, [pc, #348]	@ (8003a4c <RobotMoveUntilIROvershoot+0x2d4>)
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b60      	ldr	r3, [pc, #384]	@ (8003a74 <RobotMoveUntilIROvershoot+0x2fc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a60      	ldr	r2, [pc, #384]	@ (8003a78 <RobotMoveUntilIROvershoot+0x300>)
 80038f8:	8812      	ldrh	r2, [r2, #0]
 80038fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80038fe:	b29a      	uxth	r2, r3
 8003900:	4b5e      	ldr	r3, [pc, #376]	@ (8003a7c <RobotMoveUntilIROvershoot+0x304>)
 8003902:	801a      	strh	r2, [r3, #0]
 8003904:	4b5b      	ldr	r3, [pc, #364]	@ (8003a74 <RobotMoveUntilIROvershoot+0x2fc>)
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	4859      	ldr	r0, [pc, #356]	@ (8003a70 <RobotMoveUntilIROvershoot+0x2f8>)
 800390c:	f002 fc84 	bl	8006218 <HAL_ADC_Stop>
        if(obsDist_IR2 > 20 || obsDist_IR2<0 )
 8003910:	4b4e      	ldr	r3, [pc, #312]	@ (8003a4c <RobotMoveUntilIROvershoot+0x2d4>)
 8003912:	edd3 7a00 	vldr	s15, [r3]
 8003916:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800391a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800391e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003922:	f300 80b6 	bgt.w	8003a92 <RobotMoveUntilIROvershoot+0x31a>
 8003926:	4b49      	ldr	r3, [pc, #292]	@ (8003a4c <RobotMoveUntilIROvershoot+0x2d4>)
 8003928:	edd3 7a00 	vldr	s15, [r3]
 800392c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003934:	f100 80ad 	bmi.w	8003a92 <RobotMoveUntilIROvershoot+0x31a>
          {break;
          }
        }
      __ADC_Read_Dist(&hadc2, dataPoint2, IR_data_raw_acc2, obsDist_IR2, obsTick_IR2);
 8003938:	484d      	ldr	r0, [pc, #308]	@ (8003a70 <RobotMoveUntilIROvershoot+0x2f8>)
 800393a:	f002 fb9b 	bl	8006074 <HAL_ADC_Start>
 800393e:	2114      	movs	r1, #20
 8003940:	484b      	ldr	r0, [pc, #300]	@ (8003a70 <RobotMoveUntilIROvershoot+0x2f8>)
 8003942:	f002 fc9c 	bl	800627e <HAL_ADC_PollForConversion>
 8003946:	484a      	ldr	r0, [pc, #296]	@ (8003a70 <RobotMoveUntilIROvershoot+0x2f8>)
 8003948:	f002 fd24 	bl	8006394 <HAL_ADC_GetValue>
 800394c:	4602      	mov	r2, r0
 800394e:	4b49      	ldr	r3, [pc, #292]	@ (8003a74 <RobotMoveUntilIROvershoot+0x2fc>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4413      	add	r3, r2
 8003954:	4a47      	ldr	r2, [pc, #284]	@ (8003a74 <RobotMoveUntilIROvershoot+0x2fc>)
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	4b47      	ldr	r3, [pc, #284]	@ (8003a78 <RobotMoveUntilIROvershoot+0x300>)
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	4b42      	ldr	r3, [pc, #264]	@ (8003a68 <RobotMoveUntilIROvershoot+0x2f0>)
 8003960:	fb83 1302 	smull	r1, r3, r3, r2
 8003964:	1099      	asrs	r1, r3, #2
 8003966:	17d3      	asrs	r3, r2, #31
 8003968:	1ac9      	subs	r1, r1, r3
 800396a:	460b      	mov	r3, r1
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	1ad1      	subs	r1, r2, r3
 8003974:	b28a      	uxth	r2, r1
 8003976:	4b40      	ldr	r3, [pc, #256]	@ (8003a78 <RobotMoveUntilIROvershoot+0x300>)
 8003978:	801a      	strh	r2, [r3, #0]
 800397a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a78 <RobotMoveUntilIROvershoot+0x300>)
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	2b09      	cmp	r3, #9
 8003980:	d129      	bne.n	80039d6 <RobotMoveUntilIROvershoot+0x25e>
 8003982:	4b3c      	ldr	r3, [pc, #240]	@ (8003a74 <RobotMoveUntilIROvershoot+0x2fc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a3c      	ldr	r2, [pc, #240]	@ (8003a78 <RobotMoveUntilIROvershoot+0x300>)
 8003988:	8812      	ldrh	r2, [r2, #0]
 800398a:	fbb3 f3f2 	udiv	r3, r3, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f7fc fdb8 	bl	8000504 <__aeabi_ui2d>
 8003994:	a328      	add	r3, pc, #160	@ (adr r3, 8003a38 <RobotMoveUntilIROvershoot+0x2c0>)
 8003996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399a:	f7fc fc75 	bl	8000288 <__aeabi_dsub>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	a127      	add	r1, pc, #156	@ (adr r1, 8003a40 <RobotMoveUntilIROvershoot+0x2c8>)
 80039a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039a8:	f7fc ff50 	bl	800084c <__aeabi_ddiv>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	f7fd f918 	bl	8000be8 <__aeabi_d2f>
 80039b8:	4603      	mov	r3, r0
 80039ba:	4a24      	ldr	r2, [pc, #144]	@ (8003a4c <RobotMoveUntilIROvershoot+0x2d4>)
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	4b2d      	ldr	r3, [pc, #180]	@ (8003a74 <RobotMoveUntilIROvershoot+0x2fc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a2d      	ldr	r2, [pc, #180]	@ (8003a78 <RobotMoveUntilIROvershoot+0x300>)
 80039c4:	8812      	ldrh	r2, [r2, #0]
 80039c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	4b2b      	ldr	r3, [pc, #172]	@ (8003a7c <RobotMoveUntilIROvershoot+0x304>)
 80039ce:	801a      	strh	r2, [r3, #0]
 80039d0:	4b28      	ldr	r3, [pc, #160]	@ (8003a74 <RobotMoveUntilIROvershoot+0x2fc>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	4826      	ldr	r0, [pc, #152]	@ (8003a70 <RobotMoveUntilIROvershoot+0x2f8>)
 80039d8:	f002 fc1e 	bl	8006218 <HAL_ADC_Stop>
      if(obsDist_IR2 > 20 || obsDist_IR2 <0)
 80039dc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a4c <RobotMoveUntilIROvershoot+0x2d4>)
 80039de:	edd3 7a00 	vldr	s15, [r3]
 80039e2:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80039e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ee:	dc07      	bgt.n	8003a00 <RobotMoveUntilIROvershoot+0x288>
 80039f0:	4b16      	ldr	r3, [pc, #88]	@ (8003a4c <RobotMoveUntilIROvershoot+0x2d4>)
 80039f2:	edd3 7a00 	vldr	s15, [r3]
 80039f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fe:	d511      	bpl.n	8003a24 <RobotMoveUntilIROvershoot+0x2ac>
      {
        if(obsDist_IR > 20 || obsDist_IR <0 )break;
 8003a00:	4b11      	ldr	r3, [pc, #68]	@ (8003a48 <RobotMoveUntilIROvershoot+0x2d0>)
 8003a02:	edd3 7a00 	vldr	s15, [r3]
 8003a06:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a12:	dc3e      	bgt.n	8003a92 <RobotMoveUntilIROvershoot+0x31a>
 8003a14:	4b0c      	ldr	r3, [pc, #48]	@ (8003a48 <RobotMoveUntilIROvershoot+0x2d0>)
 8003a16:	edd3 7a00 	vldr	s15, [r3]
 8003a1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a22:	d436      	bmi.n	8003a92 <RobotMoveUntilIROvershoot+0x31a>
      }
      if (HAL_GetTick() - last_curTask_tick >= 5) {
 8003a24:	f002 fab2 	bl	8005f8c <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a58 <RobotMoveUntilIROvershoot+0x2e0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	f67f aeb7 	bls.w	80037a4 <RobotMoveUntilIROvershoot+0x2c>
 8003a36:	e023      	b.n	8003a80 <RobotMoveUntilIROvershoot+0x308>
 8003a38:	fb5723d3 	.word	0xfb5723d3
 8003a3c:	407046c5 	.word	0x407046c5
 8003a40:	324c8366 	.word	0x324c8366
 8003a44:	40d90b34 	.word	0x40d90b34
 8003a48:	2000070c 	.word	0x2000070c
 8003a4c:	20000710 	.word	0x20000710
 8003a50:	200006b0 	.word	0x200006b0
 8003a54:	200006b6 	.word	0x200006b6
 8003a58:	200006bc 	.word	0x200006bc
 8003a5c:	2000033c 	.word	0x2000033c
 8003a60:	20000718 	.word	0x20000718
 8003a64:	20000714 	.word	0x20000714
 8003a68:	66666667 	.word	0x66666667
 8003a6c:	20000708 	.word	0x20000708
 8003a70:	20000384 	.word	0x20000384
 8003a74:	2000071c 	.word	0x2000071c
 8003a78:	20000716 	.word	0x20000716
 8003a7c:	2000070a 	.word	0x2000070a
        StraightLineMove(SPEED_MODE_2);
 8003a80:	2002      	movs	r0, #2
 8003a82:	f7fe fe2f 	bl	80026e4 <StraightLineMove>
        last_curTask_tick = HAL_GetTick();
 8003a86:	f002 fa81 	bl	8005f8c <HAL_GetTick>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	4a06      	ldr	r2, [pc, #24]	@ (8003aa8 <RobotMoveUntilIROvershoot+0x330>)
 8003a8e:	6013      	str	r3, [r2, #0]
      __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003a90:	e688      	b.n	80037a4 <RobotMoveUntilIROvershoot+0x2c>
      }
    } while (1);

//    motorStop();
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003a92:	4b06      	ldr	r3, [pc, #24]	@ (8003aac <RobotMoveUntilIROvershoot+0x334>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2200      	movs	r2, #0
 8003a98:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a9a:	4b04      	ldr	r3, [pc, #16]	@ (8003aac <RobotMoveUntilIROvershoot+0x334>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	200006bc 	.word	0x200006bc
 8003aac:	20000588 	.word	0x20000588

08003ab0 <RobotMoveUntilIRHit>:

void RobotMoveUntilIRHit() {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
	obsDist_IR = 1000;
 8003ab4:	4b7e      	ldr	r3, [pc, #504]	@ (8003cb0 <RobotMoveUntilIRHit+0x200>)
 8003ab6:	4a7f      	ldr	r2, [pc, #508]	@ (8003cb4 <RobotMoveUntilIRHit+0x204>)
 8003ab8:	601a      	str	r2, [r3, #0]
	angleNow = 0; gyroZ = 0;
 8003aba:	4b7f      	ldr	r3, [pc, #508]	@ (8003cb8 <RobotMoveUntilIRHit+0x208>)
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	4b7e      	ldr	r3, [pc, #504]	@ (8003cbc <RobotMoveUntilIRHit+0x20c>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	801a      	strh	r2, [r3, #0]
	  last_curTask_tick = HAL_GetTick();
 8003ac8:	f002 fa60 	bl	8005f8c <HAL_GetTick>
 8003acc:	4603      	mov	r3, r0
 8003ace:	4a7c      	ldr	r2, [pc, #496]	@ (8003cc0 <RobotMoveUntilIRHit+0x210>)
 8003ad0:	6013      	str	r3, [r2, #0]
	  do {
		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003ad2:	487c      	ldr	r0, [pc, #496]	@ (8003cc4 <RobotMoveUntilIRHit+0x214>)
 8003ad4:	f002 face 	bl	8006074 <HAL_ADC_Start>
 8003ad8:	2114      	movs	r1, #20
 8003ada:	487a      	ldr	r0, [pc, #488]	@ (8003cc4 <RobotMoveUntilIRHit+0x214>)
 8003adc:	f002 fbcf 	bl	800627e <HAL_ADC_PollForConversion>
 8003ae0:	4878      	ldr	r0, [pc, #480]	@ (8003cc4 <RobotMoveUntilIRHit+0x214>)
 8003ae2:	f002 fc57 	bl	8006394 <HAL_ADC_GetValue>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	4b77      	ldr	r3, [pc, #476]	@ (8003cc8 <RobotMoveUntilIRHit+0x218>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4413      	add	r3, r2
 8003aee:	4a76      	ldr	r2, [pc, #472]	@ (8003cc8 <RobotMoveUntilIRHit+0x218>)
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	4b76      	ldr	r3, [pc, #472]	@ (8003ccc <RobotMoveUntilIRHit+0x21c>)
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	4b75      	ldr	r3, [pc, #468]	@ (8003cd0 <RobotMoveUntilIRHit+0x220>)
 8003afa:	fb83 1302 	smull	r1, r3, r3, r2
 8003afe:	1099      	asrs	r1, r3, #2
 8003b00:	17d3      	asrs	r3, r2, #31
 8003b02:	1ac9      	subs	r1, r1, r3
 8003b04:	460b      	mov	r3, r1
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	1ad1      	subs	r1, r2, r3
 8003b0e:	b28a      	uxth	r2, r1
 8003b10:	4b6e      	ldr	r3, [pc, #440]	@ (8003ccc <RobotMoveUntilIRHit+0x21c>)
 8003b12:	801a      	strh	r2, [r3, #0]
 8003b14:	4b6d      	ldr	r3, [pc, #436]	@ (8003ccc <RobotMoveUntilIRHit+0x21c>)
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	2b09      	cmp	r3, #9
 8003b1a:	d129      	bne.n	8003b70 <RobotMoveUntilIRHit+0xc0>
 8003b1c:	4b6a      	ldr	r3, [pc, #424]	@ (8003cc8 <RobotMoveUntilIRHit+0x218>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a6a      	ldr	r2, [pc, #424]	@ (8003ccc <RobotMoveUntilIRHit+0x21c>)
 8003b22:	8812      	ldrh	r2, [r2, #0]
 8003b24:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fc fceb 	bl	8000504 <__aeabi_ui2d>
 8003b2e:	a35c      	add	r3, pc, #368	@ (adr r3, 8003ca0 <RobotMoveUntilIRHit+0x1f0>)
 8003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b34:	f7fc fba8 	bl	8000288 <__aeabi_dsub>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	a15a      	add	r1, pc, #360	@ (adr r1, 8003ca8 <RobotMoveUntilIRHit+0x1f8>)
 8003b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b42:	f7fc fe83 	bl	800084c <__aeabi_ddiv>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	f7fd f84b 	bl	8000be8 <__aeabi_d2f>
 8003b52:	4603      	mov	r3, r0
 8003b54:	4a56      	ldr	r2, [pc, #344]	@ (8003cb0 <RobotMoveUntilIRHit+0x200>)
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	4b5b      	ldr	r3, [pc, #364]	@ (8003cc8 <RobotMoveUntilIRHit+0x218>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a5b      	ldr	r2, [pc, #364]	@ (8003ccc <RobotMoveUntilIRHit+0x21c>)
 8003b5e:	8812      	ldrh	r2, [r2, #0]
 8003b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	4b5b      	ldr	r3, [pc, #364]	@ (8003cd4 <RobotMoveUntilIRHit+0x224>)
 8003b68:	801a      	strh	r2, [r3, #0]
 8003b6a:	4b57      	ldr	r3, [pc, #348]	@ (8003cc8 <RobotMoveUntilIRHit+0x218>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	4854      	ldr	r0, [pc, #336]	@ (8003cc4 <RobotMoveUntilIRHit+0x214>)
 8003b72:	f002 fb51 	bl	8006218 <HAL_ADC_Stop>
	      __ADC_Read_Dist(&hadc2, dataPoint2, IR_data_raw_acc2, obsDist_IR2, obsTick_IR2);
 8003b76:	4858      	ldr	r0, [pc, #352]	@ (8003cd8 <RobotMoveUntilIRHit+0x228>)
 8003b78:	f002 fa7c 	bl	8006074 <HAL_ADC_Start>
 8003b7c:	2114      	movs	r1, #20
 8003b7e:	4856      	ldr	r0, [pc, #344]	@ (8003cd8 <RobotMoveUntilIRHit+0x228>)
 8003b80:	f002 fb7d 	bl	800627e <HAL_ADC_PollForConversion>
 8003b84:	4854      	ldr	r0, [pc, #336]	@ (8003cd8 <RobotMoveUntilIRHit+0x228>)
 8003b86:	f002 fc05 	bl	8006394 <HAL_ADC_GetValue>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	4b53      	ldr	r3, [pc, #332]	@ (8003cdc <RobotMoveUntilIRHit+0x22c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4413      	add	r3, r2
 8003b92:	4a52      	ldr	r2, [pc, #328]	@ (8003cdc <RobotMoveUntilIRHit+0x22c>)
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b52      	ldr	r3, [pc, #328]	@ (8003ce0 <RobotMoveUntilIRHit+0x230>)
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	4b4c      	ldr	r3, [pc, #304]	@ (8003cd0 <RobotMoveUntilIRHit+0x220>)
 8003b9e:	fb83 1302 	smull	r1, r3, r3, r2
 8003ba2:	1099      	asrs	r1, r3, #2
 8003ba4:	17d3      	asrs	r3, r2, #31
 8003ba6:	1ac9      	subs	r1, r1, r3
 8003ba8:	460b      	mov	r3, r1
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	1ad1      	subs	r1, r2, r3
 8003bb2:	b28a      	uxth	r2, r1
 8003bb4:	4b4a      	ldr	r3, [pc, #296]	@ (8003ce0 <RobotMoveUntilIRHit+0x230>)
 8003bb6:	801a      	strh	r2, [r3, #0]
 8003bb8:	4b49      	ldr	r3, [pc, #292]	@ (8003ce0 <RobotMoveUntilIRHit+0x230>)
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	2b09      	cmp	r3, #9
 8003bbe:	d129      	bne.n	8003c14 <RobotMoveUntilIRHit+0x164>
 8003bc0:	4b46      	ldr	r3, [pc, #280]	@ (8003cdc <RobotMoveUntilIRHit+0x22c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a46      	ldr	r2, [pc, #280]	@ (8003ce0 <RobotMoveUntilIRHit+0x230>)
 8003bc6:	8812      	ldrh	r2, [r2, #0]
 8003bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fc fc99 	bl	8000504 <__aeabi_ui2d>
 8003bd2:	a333      	add	r3, pc, #204	@ (adr r3, 8003ca0 <RobotMoveUntilIRHit+0x1f0>)
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	f7fc fb56 	bl	8000288 <__aeabi_dsub>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	a131      	add	r1, pc, #196	@ (adr r1, 8003ca8 <RobotMoveUntilIRHit+0x1f8>)
 8003be2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003be6:	f7fc fe31 	bl	800084c <__aeabi_ddiv>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4610      	mov	r0, r2
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f7fc fff9 	bl	8000be8 <__aeabi_d2f>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ce4 <RobotMoveUntilIRHit+0x234>)
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	4b37      	ldr	r3, [pc, #220]	@ (8003cdc <RobotMoveUntilIRHit+0x22c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a37      	ldr	r2, [pc, #220]	@ (8003ce0 <RobotMoveUntilIRHit+0x230>)
 8003c02:	8812      	ldrh	r2, [r2, #0]
 8003c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	4b37      	ldr	r3, [pc, #220]	@ (8003ce8 <RobotMoveUntilIRHit+0x238>)
 8003c0c:	801a      	strh	r2, [r3, #0]
 8003c0e:	4b33      	ldr	r3, [pc, #204]	@ (8003cdc <RobotMoveUntilIRHit+0x22c>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	4830      	ldr	r0, [pc, #192]	@ (8003cd8 <RobotMoveUntilIRHit+0x228>)
 8003c16:	f002 faff 	bl	8006218 <HAL_ADC_Stop>
		  if((obsDist_IR < 25 && obsDist_IR > 0)|| (obsDist_IR2 <25 && obsDist_IR2 >0)) break;
 8003c1a:	4b25      	ldr	r3, [pc, #148]	@ (8003cb0 <RobotMoveUntilIRHit+0x200>)
 8003c1c:	edd3 7a00 	vldr	s15, [r3]
 8003c20:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8003c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2c:	d507      	bpl.n	8003c3e <RobotMoveUntilIRHit+0x18e>
 8003c2e:	4b20      	ldr	r3, [pc, #128]	@ (8003cb0 <RobotMoveUntilIRHit+0x200>)
 8003c30:	edd3 7a00 	vldr	s15, [r3]
 8003c34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3c:	dc23      	bgt.n	8003c86 <RobotMoveUntilIRHit+0x1d6>
 8003c3e:	4b29      	ldr	r3, [pc, #164]	@ (8003ce4 <RobotMoveUntilIRHit+0x234>)
 8003c40:	edd3 7a00 	vldr	s15, [r3]
 8003c44:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8003c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c50:	d507      	bpl.n	8003c62 <RobotMoveUntilIRHit+0x1b2>
 8003c52:	4b24      	ldr	r3, [pc, #144]	@ (8003ce4 <RobotMoveUntilIRHit+0x234>)
 8003c54:	edd3 7a00 	vldr	s15, [r3]
 8003c58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c60:	dc11      	bgt.n	8003c86 <RobotMoveUntilIRHit+0x1d6>

		  if (HAL_GetTick() - last_curTask_tick >= 5) {
 8003c62:	f002 f993 	bl	8005f8c <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	4b15      	ldr	r3, [pc, #84]	@ (8003cc0 <RobotMoveUntilIRHit+0x210>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	f67f af2f 	bls.w	8003ad2 <RobotMoveUntilIRHit+0x22>
			  StraightLineMove(SPEED_MODE_2);
 8003c74:	2002      	movs	r0, #2
 8003c76:	f7fe fd35 	bl	80026e4 <StraightLineMove>
			  last_curTask_tick = HAL_GetTick();
 8003c7a:	f002 f987 	bl	8005f8c <HAL_GetTick>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4a0f      	ldr	r2, [pc, #60]	@ (8003cc0 <RobotMoveUntilIRHit+0x210>)
 8003c82:	6013      	str	r3, [r2, #0]
		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003c84:	e725      	b.n	8003ad2 <RobotMoveUntilIRHit+0x22>
		  }
	  } while (1);
	  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003c86:	4b19      	ldr	r3, [pc, #100]	@ (8003cec <RobotMoveUntilIRHit+0x23c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c8e:	4b17      	ldr	r3, [pc, #92]	@ (8003cec <RobotMoveUntilIRHit+0x23c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2200      	movs	r2, #0
 8003c94:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	f3af 8000 	nop.w
 8003ca0:	fb5723d3 	.word	0xfb5723d3
 8003ca4:	407046c5 	.word	0x407046c5
 8003ca8:	324c8366 	.word	0x324c8366
 8003cac:	40d90b34 	.word	0x40d90b34
 8003cb0:	2000070c 	.word	0x2000070c
 8003cb4:	447a0000 	.word	0x447a0000
 8003cb8:	200006b0 	.word	0x200006b0
 8003cbc:	200006b6 	.word	0x200006b6
 8003cc0:	200006bc 	.word	0x200006bc
 8003cc4:	2000033c 	.word	0x2000033c
 8003cc8:	20000718 	.word	0x20000718
 8003ccc:	20000714 	.word	0x20000714
 8003cd0:	66666667 	.word	0x66666667
 8003cd4:	20000708 	.word	0x20000708
 8003cd8:	20000384 	.word	0x20000384
 8003cdc:	2000071c 	.word	0x2000071c
 8003ce0:	20000716 	.word	0x20000716
 8003ce4:	20000710 	.word	0x20000710
 8003ce8:	2000070a 	.word	0x2000070a
 8003cec:	20000588 	.word	0x20000588

08003cf0 <runOledTask>:
  * @retval None
  */
/* USER CODE END Header_runOledTask */
float angleTemp;
void runOledTask(void *argument)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b092      	sub	sp, #72	@ 0x48
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
//	OLED_ShowString(0, 24, (char *) ch);
//	snprintf(ch, sizeof(ch), "US:%-4d|IR:%-4d", (int)obsDist_US, (int)obsDist_IR);
//	OLED_ShowString(0, 48, (char *) ch);
//	OLED_Refresh_Gram();
	//HAL_UART_Transmit(&huart3, (uint8_t *) "(", 7, 0xFFFF);
	sprintf(message1, "(%d)", Distance);
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d28 <runOledTask+0x38>)
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003d02:	490a      	ldr	r1, [pc, #40]	@ (8003d2c <runOledTask+0x3c>)
 8003d04:	4618      	mov	r0, r3
 8003d06:	f00a ff3d 	bl	800eb84 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) message1, 7, 0xFFFF);
 8003d0a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8003d0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d12:	2207      	movs	r2, #7
 8003d14:	4806      	ldr	r0, [pc, #24]	@ (8003d30 <runOledTask+0x40>)
 8003d16:	f006 fb2b 	bl	800a370 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart3, (uint8_t *) ")", 7, 0xFFFF);

	osDelay(1000);
 8003d1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003d1e:	f007 fc3d 	bl	800b59c <osDelay>
	sprintf(message1, "(%d)", Distance);
 8003d22:	bf00      	nop
 8003d24:	e7e8      	b.n	8003cf8 <runOledTask+0x8>
 8003d26:	bf00      	nop
 8003d28:	20000734 	.word	0x20000734
 8003d2c:	08010ed8 	.word	0x08010ed8
 8003d30:	200005d0 	.word	0x200005d0

08003d34 <runCmdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runCmdTask */
void runCmdTask(void *argument)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runCmdTask */
  /* Infinite loop */
  for(;;)
  {
 	  switch(curCmd.index) {
 8003d3c:	4bc6      	ldr	r3, [pc, #792]	@ (8004058 <runCmdTask+0x324>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	2b63      	cmp	r3, #99	@ 0x63
 8003d44:	f200 8278 	bhi.w	8004238 <runCmdTask+0x504>
 8003d48:	a201      	add	r2, pc, #4	@ (adr r2, 8003d50 <runCmdTask+0x1c>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003ee1 	.word	0x08003ee1
 8003d54:	08003ee1 	.word	0x08003ee1
 8003d58:	08003efd 	.word	0x08003efd
 8003d5c:	08003efd 	.word	0x08003efd
 8003d60:	08003efd 	.word	0x08003efd
 8003d64:	08003efd 	.word	0x08003efd
 8003d68:	080040c9 	.word	0x080040c9
 8003d6c:	080040d7 	.word	0x080040d7
 8003d70:	080040e5 	.word	0x080040e5
 8003d74:	080040f3 	.word	0x080040f3
 8003d78:	08004101 	.word	0x08004101
 8003d7c:	08004101 	.word	0x08004101
 8003d80:	08004149 	.word	0x08004149
 8003d84:	08004151 	.word	0x08004151
 8003d88:	0800415f 	.word	0x0800415f
 8003d8c:	0800416d 	.word	0x0800416d
 8003d90:	0800417b 	.word	0x0800417b
 8003d94:	08004239 	.word	0x08004239
 8003d98:	08004239 	.word	0x08004239
 8003d9c:	08004239 	.word	0x08004239
 8003da0:	08004239 	.word	0x08004239
 8003da4:	08004239 	.word	0x08004239
 8003da8:	08004239 	.word	0x08004239
 8003dac:	08004239 	.word	0x08004239
 8003db0:	08004239 	.word	0x08004239
 8003db4:	08004239 	.word	0x08004239
 8003db8:	08004239 	.word	0x08004239
 8003dbc:	08004239 	.word	0x08004239
 8003dc0:	08004239 	.word	0x08004239
 8003dc4:	08004239 	.word	0x08004239
 8003dc8:	08004239 	.word	0x08004239
 8003dcc:	08004239 	.word	0x08004239
 8003dd0:	08004239 	.word	0x08004239
 8003dd4:	08004239 	.word	0x08004239
 8003dd8:	08004239 	.word	0x08004239
 8003ddc:	08004239 	.word	0x08004239
 8003de0:	08004239 	.word	0x08004239
 8003de4:	08004239 	.word	0x08004239
 8003de8:	08004239 	.word	0x08004239
 8003dec:	08004239 	.word	0x08004239
 8003df0:	08004239 	.word	0x08004239
 8003df4:	08004239 	.word	0x08004239
 8003df8:	08004239 	.word	0x08004239
 8003dfc:	08004239 	.word	0x08004239
 8003e00:	08004239 	.word	0x08004239
 8003e04:	08004239 	.word	0x08004239
 8003e08:	08004239 	.word	0x08004239
 8003e0c:	08004239 	.word	0x08004239
 8003e10:	08004239 	.word	0x08004239
 8003e14:	08004239 	.word	0x08004239
 8003e18:	08004239 	.word	0x08004239
 8003e1c:	08004239 	.word	0x08004239
 8003e20:	08004239 	.word	0x08004239
 8003e24:	08004239 	.word	0x08004239
 8003e28:	08004239 	.word	0x08004239
 8003e2c:	08004239 	.word	0x08004239
 8003e30:	08004239 	.word	0x08004239
 8003e34:	08004239 	.word	0x08004239
 8003e38:	08004239 	.word	0x08004239
 8003e3c:	08004239 	.word	0x08004239
 8003e40:	08004239 	.word	0x08004239
 8003e44:	08004239 	.word	0x08004239
 8003e48:	08004239 	.word	0x08004239
 8003e4c:	08004239 	.word	0x08004239
 8003e50:	08004239 	.word	0x08004239
 8003e54:	08004239 	.word	0x08004239
 8003e58:	08004239 	.word	0x08004239
 8003e5c:	08004239 	.word	0x08004239
 8003e60:	08004239 	.word	0x08004239
 8003e64:	08004239 	.word	0x08004239
 8003e68:	08004239 	.word	0x08004239
 8003e6c:	08004239 	.word	0x08004239
 8003e70:	08004239 	.word	0x08004239
 8003e74:	08004239 	.word	0x08004239
 8003e78:	08004239 	.word	0x08004239
 8003e7c:	08004239 	.word	0x08004239
 8003e80:	08004239 	.word	0x08004239
 8003e84:	08004239 	.word	0x08004239
 8003e88:	08004239 	.word	0x08004239
 8003e8c:	08004239 	.word	0x08004239
 8003e90:	08004239 	.word	0x08004239
 8003e94:	08004239 	.word	0x08004239
 8003e98:	08004239 	.word	0x08004239
 8003e9c:	08004239 	.word	0x08004239
 8003ea0:	08004239 	.word	0x08004239
 8003ea4:	08004239 	.word	0x08004239
 8003ea8:	08004239 	.word	0x08004239
 8003eac:	08004189 	.word	0x08004189
 8003eb0:	08004189 	.word	0x08004189
 8003eb4:	08004239 	.word	0x08004239
 8003eb8:	08004239 	.word	0x08004239
 8003ebc:	08004239 	.word	0x08004239
 8003ec0:	08004239 	.word	0x08004239
 8003ec4:	08004239 	.word	0x08004239
 8003ec8:	08004239 	.word	0x08004239
 8003ecc:	08004239 	.word	0x08004239
 8003ed0:	08004239 	.word	0x08004239
 8003ed4:	08004239 	.word	0x08004239
 8003ed8:	08004239 	.word	0x08004239
 8003edc:	08004239 	.word	0x08004239
//	  	 case 0: // STOP handled in UART IRQ directly
//	  	  	  break;
	  	 case 1: //FW
	  	 case 2: //BW
	  		curTask = curCmd.index == 1 ? TASK_MOVE : TASK_MOVE_BACKWARD;
 8003ee0:	4b5d      	ldr	r3, [pc, #372]	@ (8004058 <runCmdTask+0x324>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	bf14      	ite	ne
 8003ee8:	2301      	movne	r3, #1
 8003eea:	2300      	moveq	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4b5a      	ldr	r3, [pc, #360]	@ (800405c <runCmdTask+0x328>)
 8003ef2:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8003ef4:	4b58      	ldr	r3, [pc, #352]	@ (8004058 <runCmdTask+0x324>)
 8003ef6:	2263      	movs	r2, #99	@ 0x63
 8003ef8:	701a      	strb	r2, [r3, #0]
	  		 break;
 8003efa:	e19e      	b.n	800423a <runCmdTask+0x506>
	  	case 3: //FL manual

		case 4: //FR manual
		case 5: //BL manual
		case 6: //BR manual
			__SET_CMD_CONFIG(cfgs[curCmd.index], &htim8, &htim1, targetAngle);
 8003efc:	4b56      	ldr	r3, [pc, #344]	@ (8004058 <runCmdTask+0x324>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	4a57      	ldr	r2, [pc, #348]	@ (8004060 <runCmdTask+0x32c>)
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	4413      	add	r3, r2
 8003f06:	3304      	adds	r3, #4
 8003f08:	edd3 7a00 	vldr	s15, [r3]
 8003f0c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8004064 <runCmdTask+0x330>
 8003f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f18:	dd01      	ble.n	8003f1e <runCmdTask+0x1ea>
 8003f1a:	2373      	movs	r3, #115	@ 0x73
 8003f1c:	e01c      	b.n	8003f58 <runCmdTask+0x224>
 8003f1e:	4b4e      	ldr	r3, [pc, #312]	@ (8004058 <runCmdTask+0x324>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	4a4f      	ldr	r2, [pc, #316]	@ (8004060 <runCmdTask+0x32c>)
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	4413      	add	r3, r2
 8003f28:	3304      	adds	r3, #4
 8003f2a:	edd3 7a00 	vldr	s15, [r3]
 8003f2e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3a:	d501      	bpl.n	8003f40 <runCmdTask+0x20c>
 8003f3c:	2314      	movs	r3, #20
 8003f3e:	e00b      	b.n	8003f58 <runCmdTask+0x224>
 8003f40:	4b45      	ldr	r3, [pc, #276]	@ (8004058 <runCmdTask+0x324>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	4a46      	ldr	r2, [pc, #280]	@ (8004060 <runCmdTask+0x32c>)
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	4413      	add	r3, r2
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	edd3 7a00 	vldr	s15, [r3]
 8003f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f54:	ee17 3a90 	vmov	r3, s15
 8003f58:	4a43      	ldr	r2, [pc, #268]	@ (8004068 <runCmdTask+0x334>)
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f5e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003f62:	f002 f81f 	bl	8005fa4 <HAL_Delay>
 8003f66:	4b3c      	ldr	r3, [pc, #240]	@ (8004058 <runCmdTask+0x324>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	4a3d      	ldr	r2, [pc, #244]	@ (8004060 <runCmdTask+0x32c>)
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	4413      	add	r3, r2
 8003f70:	3308      	adds	r3, #8
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a3d      	ldr	r2, [pc, #244]	@ (800406c <runCmdTask+0x338>)
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	4b37      	ldr	r3, [pc, #220]	@ (8004058 <runCmdTask+0x324>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	4a38      	ldr	r2, [pc, #224]	@ (8004060 <runCmdTask+0x32c>)
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	4413      	add	r3, r2
 8003f82:	330c      	adds	r3, #12
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf0c      	ite	eq
 8003f8a:	2301      	moveq	r3, #1
 8003f8c:	2300      	movne	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	2104      	movs	r1, #4
 8003f94:	4836      	ldr	r0, [pc, #216]	@ (8004070 <runCmdTask+0x33c>)
 8003f96:	f002 ff69 	bl	8006e6c <HAL_GPIO_WritePin>
 8003f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8004058 <runCmdTask+0x324>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	4a30      	ldr	r2, [pc, #192]	@ (8004060 <runCmdTask+0x32c>)
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	4413      	add	r3, r2
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bf14      	ite	ne
 8003fac:	2301      	movne	r3, #1
 8003fae:	2300      	moveq	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2108      	movs	r1, #8
 8003fb6:	482e      	ldr	r0, [pc, #184]	@ (8004070 <runCmdTask+0x33c>)
 8003fb8:	f002 ff58 	bl	8006e6c <HAL_GPIO_WritePin>
 8003fbc:	4b26      	ldr	r3, [pc, #152]	@ (8004058 <runCmdTask+0x324>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	4a27      	ldr	r2, [pc, #156]	@ (8004060 <runCmdTask+0x32c>)
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	4413      	add	r3, r2
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	bf0c      	ite	eq
 8003fce:	2301      	moveq	r3, #1
 8003fd0:	2300      	movne	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2120      	movs	r1, #32
 8003fd8:	4825      	ldr	r0, [pc, #148]	@ (8004070 <runCmdTask+0x33c>)
 8003fda:	f002 ff47 	bl	8006e6c <HAL_GPIO_WritePin>
 8003fde:	4b1e      	ldr	r3, [pc, #120]	@ (8004058 <runCmdTask+0x324>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8004060 <runCmdTask+0x32c>)
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	4413      	add	r3, r2
 8003fe8:	330c      	adds	r3, #12
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	bf14      	ite	ne
 8003ff0:	2301      	movne	r3, #1
 8003ff2:	2300      	moveq	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2110      	movs	r1, #16
 8003ffa:	481d      	ldr	r0, [pc, #116]	@ (8004070 <runCmdTask+0x33c>)
 8003ffc:	f002 ff36 	bl	8006e6c <HAL_GPIO_WritePin>
 8004000:	4b15      	ldr	r3, [pc, #84]	@ (8004058 <runCmdTask+0x324>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	4a16      	ldr	r2, [pc, #88]	@ (8004060 <runCmdTask+0x32c>)
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	4413      	add	r3, r2
 800400a:	881a      	ldrh	r2, [r3, #0]
 800400c:	4b19      	ldr	r3, [pc, #100]	@ (8004074 <runCmdTask+0x340>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	635a      	str	r2, [r3, #52]	@ 0x34
 8004012:	4b11      	ldr	r3, [pc, #68]	@ (8004058 <runCmdTask+0x324>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	4a12      	ldr	r2, [pc, #72]	@ (8004060 <runCmdTask+0x32c>)
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	4413      	add	r3, r2
 800401c:	3302      	adds	r3, #2
 800401e:	881a      	ldrh	r2, [r3, #0]
 8004020:	4b14      	ldr	r3, [pc, #80]	@ (8004074 <runCmdTask+0x340>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	639a      	str	r2, [r3, #56]	@ 0x38
			if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8004026:	4b14      	ldr	r3, [pc, #80]	@ (8004078 <runCmdTask+0x344>)
 8004028:	781a      	ldrb	r2, [r3, #0]
 800402a:	4b13      	ldr	r3, [pc, #76]	@ (8004078 <runCmdTask+0x344>)
 800402c:	785b      	ldrb	r3, [r3, #1]
 800402e:	429a      	cmp	r2, r3
 8004030:	d12c      	bne.n	800408c <runCmdTask+0x358>
				__CLEAR_CURCMD(curCmd);
 8004032:	4b09      	ldr	r3, [pc, #36]	@ (8004058 <runCmdTask+0x324>)
 8004034:	2264      	movs	r2, #100	@ 0x64
 8004036:	701a      	strb	r2, [r3, #0]
 8004038:	4b07      	ldr	r3, [pc, #28]	@ (8004058 <runCmdTask+0x324>)
 800403a:	2200      	movs	r2, #0
 800403c:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 800403e:	4a0f      	ldr	r2, [pc, #60]	@ (800407c <runCmdTask+0x348>)
 8004040:	210f      	movs	r1, #15
 8004042:	480f      	ldr	r0, [pc, #60]	@ (8004080 <runCmdTask+0x34c>)
 8004044:	f00a fd6a 	bl	800eb1c <sniprintf>
 8004048:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800404c:	2206      	movs	r2, #6
 800404e:	490d      	ldr	r1, [pc, #52]	@ (8004084 <runCmdTask+0x350>)
 8004050:	480d      	ldr	r0, [pc, #52]	@ (8004088 <runCmdTask+0x354>)
 8004052:	f006 f98d 	bl	800a370 <HAL_UART_Transmit>
 8004056:	e033      	b.n	80040c0 <runCmdTask+0x38c>
 8004058:	20000694 	.word	0x20000694
 800405c:	20000134 	.word	0x20000134
 8004060:	20000004 	.word	0x20000004
 8004064:	42e60000 	.word	0x42e60000
 8004068:	20000420 	.word	0x20000420
 800406c:	200006ac 	.word	0x200006ac
 8004070:	40020000 	.word	0x40020000
 8004074:	20000588 	.word	0x20000588
 8004078:	20000660 	.word	0x20000660
 800407c:	08010ea4 	.word	0x08010ea4
 8004080:	20000698 	.word	0x20000698
 8004084:	08010eac 	.word	0x08010eac
 8004088:	200005d0 	.word	0x200005d0

			} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 800408c:	4b6d      	ldr	r3, [pc, #436]	@ (8004244 <runCmdTask+0x510>)
 800408e:	785b      	ldrb	r3, [r3, #1]
 8004090:	4a6d      	ldr	r2, [pc, #436]	@ (8004248 <runCmdTask+0x514>)
 8004092:	496c      	ldr	r1, [pc, #432]	@ (8004244 <runCmdTask+0x510>)
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	4b69      	ldr	r3, [pc, #420]	@ (8004244 <runCmdTask+0x510>)
 800409e:	785b      	ldrb	r3, [r3, #1]
 80040a0:	3301      	adds	r3, #1
 80040a2:	4a68      	ldr	r2, [pc, #416]	@ (8004244 <runCmdTask+0x510>)
 80040a4:	7892      	ldrb	r2, [r2, #2]
 80040a6:	fb93 f1f2 	sdiv	r1, r3, r2
 80040aa:	fb01 f202 	mul.w	r2, r1, r2
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	4b64      	ldr	r3, [pc, #400]	@ (8004244 <runCmdTask+0x510>)
 80040b4:	705a      	strb	r2, [r3, #1]
 80040b6:	4a65      	ldr	r2, [pc, #404]	@ (800424c <runCmdTask+0x518>)
 80040b8:	210f      	movs	r1, #15
 80040ba:	4865      	ldr	r0, [pc, #404]	@ (8004250 <runCmdTask+0x51c>)
 80040bc:	f00a fd2e 	bl	800eb1c <sniprintf>
			__PEND_CURCMD(curCmd);
 80040c0:	4b61      	ldr	r3, [pc, #388]	@ (8004248 <runCmdTask+0x514>)
 80040c2:	2263      	movs	r2, #99	@ 0x63
 80040c4:	701a      	strb	r2, [r3, #0]
			 break;
 80040c6:	e0b8      	b.n	800423a <runCmdTask+0x506>
	  	 case 7: // FL
	  		 curTask = TASK_FL;
 80040c8:	4b62      	ldr	r3, [pc, #392]	@ (8004254 <runCmdTask+0x520>)
 80040ca:	2202      	movs	r2, #2
 80040cc:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 80040ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004248 <runCmdTask+0x514>)
 80040d0:	2263      	movs	r2, #99	@ 0x63
 80040d2:	701a      	strb	r2, [r3, #0]
	  		 break;
 80040d4:	e0b1      	b.n	800423a <runCmdTask+0x506>
	  	 case 8: // FR
	  		curTask = TASK_FR;
 80040d6:	4b5f      	ldr	r3, [pc, #380]	@ (8004254 <runCmdTask+0x520>)
 80040d8:	2203      	movs	r2, #3
 80040da:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 80040dc:	4b5a      	ldr	r3, [pc, #360]	@ (8004248 <runCmdTask+0x514>)
 80040de:	2263      	movs	r2, #99	@ 0x63
 80040e0:	701a      	strb	r2, [r3, #0]
	  		break;
 80040e2:	e0aa      	b.n	800423a <runCmdTask+0x506>
	  	 case 9: // BL
	  		curTask = TASK_BL;
 80040e4:	4b5b      	ldr	r3, [pc, #364]	@ (8004254 <runCmdTask+0x520>)
 80040e6:	2204      	movs	r2, #4
 80040e8:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 80040ea:	4b57      	ldr	r3, [pc, #348]	@ (8004248 <runCmdTask+0x514>)
 80040ec:	2263      	movs	r2, #99	@ 0x63
 80040ee:	701a      	strb	r2, [r3, #0]
	  		break;
 80040f0:	e0a3      	b.n	800423a <runCmdTask+0x506>
	  	 case 10: //BR
	  		curTask = TASK_BR;
 80040f2:	4b58      	ldr	r3, [pc, #352]	@ (8004254 <runCmdTask+0x520>)
 80040f4:	2205      	movs	r2, #5
 80040f6:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 80040f8:	4b53      	ldr	r3, [pc, #332]	@ (8004248 <runCmdTask+0x514>)
 80040fa:	2263      	movs	r2, #99	@ 0x63
 80040fc:	701a      	strb	r2, [r3, #0]
	  		break;
 80040fe:	e09c      	b.n	800423a <runCmdTask+0x506>
	  	 case 11: // TL
	  	 case 12: // TR
	  		 __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 11 ? 1 : 0);
 8004100:	4b51      	ldr	r3, [pc, #324]	@ (8004248 <runCmdTask+0x514>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b0b      	cmp	r3, #11
 8004106:	d004      	beq.n	8004112 <runCmdTask+0x3de>
 8004108:	4b53      	ldr	r3, [pc, #332]	@ (8004258 <runCmdTask+0x524>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2273      	movs	r2, #115	@ 0x73
 800410e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004110:	e003      	b.n	800411a <runCmdTask+0x3e6>
 8004112:	4b51      	ldr	r3, [pc, #324]	@ (8004258 <runCmdTask+0x524>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2214      	movs	r2, #20
 8004118:	641a      	str	r2, [r3, #64]	@ 0x40
 800411a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800411e:	f001 ff41 	bl	8005fa4 <HAL_Delay>
	  		__CLEAR_CURCMD(curCmd);
 8004122:	4b49      	ldr	r3, [pc, #292]	@ (8004248 <runCmdTask+0x514>)
 8004124:	2264      	movs	r2, #100	@ 0x64
 8004126:	701a      	strb	r2, [r3, #0]
 8004128:	4b47      	ldr	r3, [pc, #284]	@ (8004248 <runCmdTask+0x514>)
 800412a:	2200      	movs	r2, #0
 800412c:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 800412e:	4a4b      	ldr	r2, [pc, #300]	@ (800425c <runCmdTask+0x528>)
 8004130:	210f      	movs	r1, #15
 8004132:	4847      	ldr	r0, [pc, #284]	@ (8004250 <runCmdTask+0x51c>)
 8004134:	f00a fcf2 	bl	800eb1c <sniprintf>
 8004138:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800413c:	2206      	movs	r2, #6
 800413e:	4948      	ldr	r1, [pc, #288]	@ (8004260 <runCmdTask+0x52c>)
 8004140:	4848      	ldr	r0, [pc, #288]	@ (8004264 <runCmdTask+0x530>)
 8004142:	f006 f915 	bl	800a370 <HAL_UART_Transmit>
	  		 break;
 8004146:	e078      	b.n	800423a <runCmdTask+0x506>
	  	 case 13: // debug IR sensor
	  		 curTask = TASK_ADC;
 8004148:	4b42      	ldr	r3, [pc, #264]	@ (8004254 <runCmdTask+0x520>)
 800414a:	2206      	movs	r2, #6
 800414c:	701a      	strb	r2, [r3, #0]
	  		 break;
 800414e:	e074      	b.n	800423a <runCmdTask+0x506>
	  	 case 14: // DT move until specified distance from obstacle
	  		  curTask = TASK_MOVE_OBS;
 8004150:	4b40      	ldr	r3, [pc, #256]	@ (8004254 <runCmdTask+0x520>)
 8004152:	2207      	movs	r2, #7
 8004154:	701a      	strb	r2, [r3, #0]
	  		  __PEND_CURCMD(curCmd);
 8004156:	4b3c      	ldr	r3, [pc, #240]	@ (8004248 <runCmdTask+0x514>)
 8004158:	2263      	movs	r2, #99	@ 0x63
 800415a:	701a      	strb	r2, [r3, #0]
	  		 break;
 800415c:	e06d      	b.n	800423a <runCmdTask+0x506>
	  	 case 15:
	  		 curTask = TASK_BUZZER;
 800415e:	4b3d      	ldr	r3, [pc, #244]	@ (8004254 <runCmdTask+0x520>)
 8004160:	220a      	movs	r2, #10
 8004162:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8004164:	4b38      	ldr	r3, [pc, #224]	@ (8004248 <runCmdTask+0x514>)
 8004166:	2263      	movs	r2, #99	@ 0x63
 8004168:	701a      	strb	r2, [r3, #0]
	  		break;
 800416a:	e066      	b.n	800423a <runCmdTask+0x506>
	  	 case 16:
	  		 curTask = TASK_FASTESTPATH;
 800416c:	4b39      	ldr	r3, [pc, #228]	@ (8004254 <runCmdTask+0x520>)
 800416e:	2208      	movs	r2, #8
 8004170:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8004172:	4b35      	ldr	r3, [pc, #212]	@ (8004248 <runCmdTask+0x514>)
 8004174:	2263      	movs	r2, #99	@ 0x63
 8004176:	701a      	strb	r2, [r3, #0]
	  		 break;
 8004178:	e05f      	b.n	800423a <runCmdTask+0x506>
	  	 case 17:
	  		 curTask = TASK_FASTESTPATH_V2;
 800417a:	4b36      	ldr	r3, [pc, #216]	@ (8004254 <runCmdTask+0x520>)
 800417c:	2209      	movs	r2, #9
 800417e:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8004180:	4b31      	ldr	r3, [pc, #196]	@ (8004248 <runCmdTask+0x514>)
 8004182:	2263      	movs	r2, #99	@ 0x63
 8004184:	701a      	strb	r2, [r3, #0]
	  		 break;
 8004186:	e058      	b.n	800423a <runCmdTask+0x506>
	  	 case 88: // Axxx, rotate left by xxx degree
	  	 case 89: // Cxxx, rotate right by xxx degree
	  		 __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 88);
 8004188:	4b2f      	ldr	r3, [pc, #188]	@ (8004248 <runCmdTask+0x514>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b58      	cmp	r3, #88	@ 0x58
 800418e:	d004      	beq.n	800419a <runCmdTask+0x466>
 8004190:	4b31      	ldr	r3, [pc, #196]	@ (8004258 <runCmdTask+0x524>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2273      	movs	r2, #115	@ 0x73
 8004196:	641a      	str	r2, [r3, #64]	@ 0x40
 8004198:	e003      	b.n	80041a2 <runCmdTask+0x46e>
 800419a:	4b2f      	ldr	r3, [pc, #188]	@ (8004258 <runCmdTask+0x524>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2214      	movs	r2, #20
 80041a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80041a2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80041a6:	f001 fefd 	bl	8005fa4 <HAL_Delay>
	  		 __SET_MOTOR_DIRECTION(DIR_FORWARD);
 80041aa:	2200      	movs	r2, #0
 80041ac:	2104      	movs	r1, #4
 80041ae:	482e      	ldr	r0, [pc, #184]	@ (8004268 <runCmdTask+0x534>)
 80041b0:	f002 fe5c 	bl	8006e6c <HAL_GPIO_WritePin>
 80041b4:	2201      	movs	r2, #1
 80041b6:	2108      	movs	r1, #8
 80041b8:	482b      	ldr	r0, [pc, #172]	@ (8004268 <runCmdTask+0x534>)
 80041ba:	f002 fe57 	bl	8006e6c <HAL_GPIO_WritePin>
 80041be:	2200      	movs	r2, #0
 80041c0:	2120      	movs	r1, #32
 80041c2:	4829      	ldr	r0, [pc, #164]	@ (8004268 <runCmdTask+0x534>)
 80041c4:	f002 fe52 	bl	8006e6c <HAL_GPIO_WritePin>
 80041c8:	2201      	movs	r2, #1
 80041ca:	2110      	movs	r1, #16
 80041cc:	4826      	ldr	r0, [pc, #152]	@ (8004268 <runCmdTask+0x534>)
 80041ce:	f002 fe4d 	bl	8006e6c <HAL_GPIO_WritePin>
	  		 if (curCmd.index == 88) {
 80041d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004248 <runCmdTask+0x514>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b58      	cmp	r3, #88	@ 0x58
 80041d8:	d113      	bne.n	8004202 <runCmdTask+0x4ce>
	  			 targetAngle = curCmd.val;
 80041da:	4b1b      	ldr	r3, [pc, #108]	@ (8004248 <runCmdTask+0x514>)
 80041dc:	885b      	ldrh	r3, [r3, #2]
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e6:	4b21      	ldr	r3, [pc, #132]	@ (800426c <runCmdTask+0x538>)
 80041e8:	edc3 7a00 	vstr	s15, [r3]
	  			 __SET_MOTOR_DUTY(&htim8, 800, 1200);
 80041ec:	4b20      	ldr	r3, [pc, #128]	@ (8004270 <runCmdTask+0x53c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80041f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80041f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004270 <runCmdTask+0x53c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80041fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8004200:	e013      	b.n	800422a <runCmdTask+0x4f6>
	  		 } else {
	  			targetAngle = -curCmd.val;
 8004202:	4b11      	ldr	r3, [pc, #68]	@ (8004248 <runCmdTask+0x514>)
 8004204:	885b      	ldrh	r3, [r3, #2]
 8004206:	425b      	negs	r3, r3
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004210:	4b16      	ldr	r3, [pc, #88]	@ (800426c <runCmdTask+0x538>)
 8004212:	edc3 7a00 	vstr	s15, [r3]
	  			 __SET_MOTOR_DUTY(&htim8, 1200, 800);
 8004216:	4b16      	ldr	r3, [pc, #88]	@ (8004270 <runCmdTask+0x53c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800421e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004220:	4b13      	ldr	r3, [pc, #76]	@ (8004270 <runCmdTask+0x53c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8004228:	639a      	str	r2, [r3, #56]	@ 0x38
	  		 }
	  		__PEND_CURCMD(curCmd);
 800422a:	4b07      	ldr	r3, [pc, #28]	@ (8004248 <runCmdTask+0x514>)
 800422c:	2263      	movs	r2, #99	@ 0x63
 800422e:	701a      	strb	r2, [r3, #0]
	  		 RobotTurn(&targetAngle);
 8004230:	480e      	ldr	r0, [pc, #56]	@ (800426c <runCmdTask+0x538>)
 8004232:	f7ff f9f5 	bl	8003620 <RobotTurn>
	  		 break;
 8004236:	e000      	b.n	800423a <runCmdTask+0x506>
	  		 break;
	  	 case 100:
	  		 break;
	  	 default:
	  //		 curCmd.index = 99;
	  		 break;
 8004238:	bf00      	nop
	  	 }

	  osDelay(100);
 800423a:	2064      	movs	r0, #100	@ 0x64
 800423c:	f007 f9ae 	bl	800b59c <osDelay>
 	  switch(curCmd.index) {
 8004240:	e57c      	b.n	8003d3c <runCmdTask+0x8>
 8004242:	bf00      	nop
 8004244:	20000660 	.word	0x20000660
 8004248:	20000694 	.word	0x20000694
 800424c:	08010eb4 	.word	0x08010eb4
 8004250:	20000698 	.word	0x20000698
 8004254:	20000134 	.word	0x20000134
 8004258:	20000420 	.word	0x20000420
 800425c:	08010ea4 	.word	0x08010ea4
 8004260:	08010eac 	.word	0x08010eac
 8004264:	200005d0 	.word	0x200005d0
 8004268:	40020000 	.word	0x40020000
 800426c:	200006ac 	.word	0x200006ac
 8004270:	20000588 	.word	0x20000588

08004274 <runADCTask>:
* Greedy Task (can only preempted by UART IRQ or EXTI)
* When activate (curTask == TASK_ADC), function executes in 1MHz
*/
/* USER CODE END Header_runADCTask */
void runADCTask(void *argument)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runADCTask */
	uint16_t dataPoint = 0; uint32_t IR_data_raw_acc = 0;
 800427c:	2300      	movs	r3, #0
 800427e:	81fb      	strh	r3, [r7, #14]
 8004280:	2300      	movs	r3, #0
 8004282:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_ADC) osDelay(1000);
 8004284:	4b27      	ldr	r3, [pc, #156]	@ (8004324 <runADCTask+0xb0>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b06      	cmp	r3, #6
 800428a:	d004      	beq.n	8004296 <runADCTask+0x22>
 800428c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004290:	f007 f984 	bl	800b59c <osDelay>
 8004294:	e7f6      	b.n	8004284 <runADCTask+0x10>
	  else {
//			dataPoint = 0; IR_data_raw_acc = 0; obsDist_IR = 1000;
//			last_curTask_tick = HAL_GetTick();
			__PEND_CURCMD(curCmd);
 8004296:	4b24      	ldr	r3, [pc, #144]	@ (8004328 <runADCTask+0xb4>)
 8004298:	2263      	movs	r2, #99	@ 0x63
 800429a:	701a      	strb	r2, [r3, #0]
			targetDist = 40;
 800429c:	4b23      	ldr	r3, [pc, #140]	@ (800432c <runADCTask+0xb8>)
 800429e:	4a24      	ldr	r2, [pc, #144]	@ (8004330 <runADCTask+0xbc>)
 80042a0:	601a      	str	r2, [r3, #0]
			RobotMoveDistObstacle_IR(&targetDist);
 80042a2:	4822      	ldr	r0, [pc, #136]	@ (800432c <runADCTask+0xb8>)
 80042a4:	f7ff f854 	bl	8003350 <RobotMoveDistObstacle_IR>
//			  osDelay(5);
//			} while (1);
//
//		  __ON_TASK_END(&htim8, prevTask, curTask);
//		  HAL_ADC_Stop(&hadc1);
		  clickOnce = 0;
 80042a8:	4b22      	ldr	r3, [pc, #136]	@ (8004334 <runADCTask+0xc0>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 80042ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004324 <runADCTask+0xb0>)
 80042b0:	781a      	ldrb	r2, [r3, #0]
 80042b2:	4b21      	ldr	r3, [pc, #132]	@ (8004338 <runADCTask+0xc4>)
 80042b4:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 80042b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004324 <runADCTask+0xb0>)
 80042b8:	220b      	movs	r2, #11
 80042ba:	701a      	strb	r2, [r3, #0]
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 80042bc:	4b1f      	ldr	r3, [pc, #124]	@ (800433c <runADCTask+0xc8>)
 80042be:	781a      	ldrb	r2, [r3, #0]
 80042c0:	4b1e      	ldr	r3, [pc, #120]	@ (800433c <runADCTask+0xc8>)
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d112      	bne.n	80042ee <runADCTask+0x7a>
			__CLEAR_CURCMD(curCmd);
 80042c8:	4b17      	ldr	r3, [pc, #92]	@ (8004328 <runADCTask+0xb4>)
 80042ca:	2264      	movs	r2, #100	@ 0x64
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	4b16      	ldr	r3, [pc, #88]	@ (8004328 <runADCTask+0xb4>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 80042d4:	4a1a      	ldr	r2, [pc, #104]	@ (8004340 <runADCTask+0xcc>)
 80042d6:	210f      	movs	r1, #15
 80042d8:	481a      	ldr	r0, [pc, #104]	@ (8004344 <runADCTask+0xd0>)
 80042da:	f00a fc1f 	bl	800eb1c <sniprintf>
 80042de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80042e2:	2206      	movs	r2, #6
 80042e4:	4918      	ldr	r1, [pc, #96]	@ (8004348 <runADCTask+0xd4>)
 80042e6:	4819      	ldr	r0, [pc, #100]	@ (800434c <runADCTask+0xd8>)
 80042e8:	f006 f842 	bl	800a370 <HAL_UART_Transmit>
 80042ec:	e7ca      	b.n	8004284 <runADCTask+0x10>

		} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 80042ee:	4b13      	ldr	r3, [pc, #76]	@ (800433c <runADCTask+0xc8>)
 80042f0:	785b      	ldrb	r3, [r3, #1]
 80042f2:	4a0d      	ldr	r2, [pc, #52]	@ (8004328 <runADCTask+0xb4>)
 80042f4:	4911      	ldr	r1, [pc, #68]	@ (800433c <runADCTask+0xc8>)
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	4b0f      	ldr	r3, [pc, #60]	@ (800433c <runADCTask+0xc8>)
 8004300:	785b      	ldrb	r3, [r3, #1]
 8004302:	3301      	adds	r3, #1
 8004304:	4a0d      	ldr	r2, [pc, #52]	@ (800433c <runADCTask+0xc8>)
 8004306:	7892      	ldrb	r2, [r2, #2]
 8004308:	fb93 f1f2 	sdiv	r1, r3, r2
 800430c:	fb01 f202 	mul.w	r2, r1, r2
 8004310:	1a9b      	subs	r3, r3, r2
 8004312:	b2da      	uxtb	r2, r3
 8004314:	4b09      	ldr	r3, [pc, #36]	@ (800433c <runADCTask+0xc8>)
 8004316:	705a      	strb	r2, [r3, #1]
 8004318:	4a0d      	ldr	r2, [pc, #52]	@ (8004350 <runADCTask+0xdc>)
 800431a:	210f      	movs	r1, #15
 800431c:	4809      	ldr	r0, [pc, #36]	@ (8004344 <runADCTask+0xd0>)
 800431e:	f00a fbfd 	bl	800eb1c <sniprintf>
	  if (curTask != TASK_ADC) osDelay(1000);
 8004322:	e7af      	b.n	8004284 <runADCTask+0x10>
 8004324:	20000134 	.word	0x20000134
 8004328:	20000694 	.word	0x20000694
 800432c:	200006c0 	.word	0x200006c0
 8004330:	42200000 	.word	0x42200000
 8004334:	2000074c 	.word	0x2000074c
 8004338:	20000135 	.word	0x20000135
 800433c:	20000660 	.word	0x20000660
 8004340:	08010ea4 	.word	0x08010ea4
 8004344:	20000698 	.word	0x20000698
 8004348:	08010eac 	.word	0x08010eac
 800434c:	200005d0 	.word	0x200005d0
 8004350:	08010eb4 	.word	0x08010eb4

08004354 <runMoveDistTask>:
* @retval None
* Greedy Task (can only preempted by UART IRQ or EXTI)
*/
/* USER CODE END Header_runMoveDistTask */
void runMoveDistTask(void *argument)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runMoveDistTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_MOVE && curTask != TASK_MOVE_BACKWARD) osDelay(1000);
 800435c:	4b85      	ldr	r3, [pc, #532]	@ (8004574 <runMoveDistTask+0x220>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <runMoveDistTask+0x22>
 8004364:	4b83      	ldr	r3, [pc, #524]	@ (8004574 <runMoveDistTask+0x220>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d004      	beq.n	8004376 <runMoveDistTask+0x22>
 800436c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004370:	f007 f914 	bl	800b59c <osDelay>
 8004374:	e0fc      	b.n	8004570 <runMoveDistTask+0x21c>
	  else {
		  if (manualMode) {
 8004376:	4b80      	ldr	r3, [pc, #512]	@ (8004578 <runMoveDistTask+0x224>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d07e      	beq.n	800447c <runMoveDistTask+0x128>
			angleNow = 0; gyroZ = 0; // reset angle for PID
 800437e:	4b7f      	ldr	r3, [pc, #508]	@ (800457c <runMoveDistTask+0x228>)
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	4b7e      	ldr	r3, [pc, #504]	@ (8004580 <runMoveDistTask+0x22c>)
 8004388:	2200      	movs	r2, #0
 800438a:	801a      	strh	r2, [r3, #0]
			PIDConfigReset(&pidTSlow);
 800438c:	487d      	ldr	r0, [pc, #500]	@ (8004584 <runMoveDistTask+0x230>)
 800438e:	f7fe f996 	bl	80026be <PIDConfigReset>
			PIDConfigReset(&pidSlow);
 8004392:	487d      	ldr	r0, [pc, #500]	@ (8004588 <runMoveDistTask+0x234>)
 8004394:	f7fe f993 	bl	80026be <PIDConfigReset>
			PIDConfigReset(&pidFast);
 8004398:	487c      	ldr	r0, [pc, #496]	@ (800458c <runMoveDistTask+0x238>)
 800439a:	f7fe f990 	bl	80026be <PIDConfigReset>

			__SET_MOTOR_DIRECTION(curTask == TASK_MOVE ? DIR_FORWARD : DIR_BACKWARD);
 800439e:	4b75      	ldr	r3, [pc, #468]	@ (8004574 <runMoveDistTask+0x220>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	bf14      	ite	ne
 80043a6:	2301      	movne	r3, #1
 80043a8:	2300      	moveq	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	2104      	movs	r1, #4
 80043b0:	4877      	ldr	r0, [pc, #476]	@ (8004590 <runMoveDistTask+0x23c>)
 80043b2:	f002 fd5b 	bl	8006e6c <HAL_GPIO_WritePin>
 80043b6:	4b6f      	ldr	r3, [pc, #444]	@ (8004574 <runMoveDistTask+0x220>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bf0c      	ite	eq
 80043be:	2301      	moveq	r3, #1
 80043c0:	2300      	movne	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	2108      	movs	r1, #8
 80043c8:	4871      	ldr	r0, [pc, #452]	@ (8004590 <runMoveDistTask+0x23c>)
 80043ca:	f002 fd4f 	bl	8006e6c <HAL_GPIO_WritePin>
 80043ce:	4b69      	ldr	r3, [pc, #420]	@ (8004574 <runMoveDistTask+0x220>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bf14      	ite	ne
 80043d6:	2301      	movne	r3, #1
 80043d8:	2300      	moveq	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	461a      	mov	r2, r3
 80043de:	2120      	movs	r1, #32
 80043e0:	486b      	ldr	r0, [pc, #428]	@ (8004590 <runMoveDistTask+0x23c>)
 80043e2:	f002 fd43 	bl	8006e6c <HAL_GPIO_WritePin>
 80043e6:	4b63      	ldr	r3, [pc, #396]	@ (8004574 <runMoveDistTask+0x220>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	bf0c      	ite	eq
 80043ee:	2301      	moveq	r3, #1
 80043f0:	2300      	movne	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	2110      	movs	r1, #16
 80043f8:	4865      	ldr	r0, [pc, #404]	@ (8004590 <runMoveDistTask+0x23c>)
 80043fa:	f002 fd37 	bl	8006e6c <HAL_GPIO_WritePin>

			  __ON_TASK_END(&htim8, prevTask, curTask);
 80043fe:	4b65      	ldr	r3, [pc, #404]	@ (8004594 <runMoveDistTask+0x240>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2200      	movs	r2, #0
 8004404:	635a      	str	r2, [r3, #52]	@ 0x34
 8004406:	4b63      	ldr	r3, [pc, #396]	@ (8004594 <runMoveDistTask+0x240>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2200      	movs	r2, #0
 800440c:	639a      	str	r2, [r3, #56]	@ 0x38
 800440e:	4b59      	ldr	r3, [pc, #356]	@ (8004574 <runMoveDistTask+0x220>)
 8004410:	781a      	ldrb	r2, [r3, #0]
 8004412:	4b61      	ldr	r3, [pc, #388]	@ (8004598 <runMoveDistTask+0x244>)
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	4b57      	ldr	r3, [pc, #348]	@ (8004574 <runMoveDistTask+0x220>)
 8004418:	220b      	movs	r2, #11
 800441a:	701a      	strb	r2, [r3, #0]
			  clickOnce = 0;
 800441c:	4b5f      	ldr	r3, [pc, #380]	@ (800459c <runMoveDistTask+0x248>)
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]

			  __CLEAR_CURCMD(curCmd);
 8004422:	4b5f      	ldr	r3, [pc, #380]	@ (80045a0 <runMoveDistTask+0x24c>)
 8004424:	2264      	movs	r2, #100	@ 0x64
 8004426:	701a      	strb	r2, [r3, #0]
 8004428:	4b5d      	ldr	r3, [pc, #372]	@ (80045a0 <runMoveDistTask+0x24c>)
 800442a:	2200      	movs	r2, #0
 800442c:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 800442e:	4a5d      	ldr	r2, [pc, #372]	@ (80045a4 <runMoveDistTask+0x250>)
 8004430:	210f      	movs	r1, #15
 8004432:	485d      	ldr	r0, [pc, #372]	@ (80045a8 <runMoveDistTask+0x254>)
 8004434:	f00a fb72 	bl	800eb1c <sniprintf>
 8004438:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800443c:	2206      	movs	r2, #6
 800443e:	495b      	ldr	r1, [pc, #364]	@ (80045ac <runMoveDistTask+0x258>)
 8004440:	485b      	ldr	r0, [pc, #364]	@ (80045b0 <runMoveDistTask+0x25c>)
 8004442:	f005 ff95 	bl	800a370 <HAL_UART_Transmit>

			last_curTask_tick = HAL_GetTick();
 8004446:	f001 fda1 	bl	8005f8c <HAL_GetTick>
 800444a:	4603      	mov	r3, r0
 800444c:	4a59      	ldr	r2, [pc, #356]	@ (80045b4 <runMoveDistTask+0x260>)
 800444e:	6013      	str	r3, [r2, #0]
			do {
				if (!manualMode) break;
 8004450:	4b49      	ldr	r3, [pc, #292]	@ (8004578 <runMoveDistTask+0x224>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 808a 	beq.w	800456e <runMoveDistTask+0x21a>
				if (HAL_GetTick() - last_curTask_tick >= 10) {
 800445a:	f001 fd97 	bl	8005f8c <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	4b54      	ldr	r3, [pc, #336]	@ (80045b4 <runMoveDistTask+0x260>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b09      	cmp	r3, #9
 8004468:	d9f2      	bls.n	8004450 <runMoveDistTask+0xfc>
					StraightLineMove(SPEED_MODE_T);
 800446a:	2000      	movs	r0, #0
 800446c:	f7fe f93a 	bl	80026e4 <StraightLineMove>
					last_curTask_tick = HAL_GetTick();
 8004470:	f001 fd8c 	bl	8005f8c <HAL_GetTick>
 8004474:	4603      	mov	r3, r0
 8004476:	4a4f      	ldr	r2, [pc, #316]	@ (80045b4 <runMoveDistTask+0x260>)
 8004478:	6013      	str	r3, [r2, #0]
				if (!manualMode) break;
 800447a:	e7e9      	b.n	8004450 <runMoveDistTask+0xfc>
			} while (1);

		  } else {
//			  osDelay(5000); // for video demo only
			  //htim1.Instance->CCR4 = 140; // Center wheel POS
			  targetDist = (float) curCmd.val;
 800447c:	4b48      	ldr	r3, [pc, #288]	@ (80045a0 <runMoveDistTask+0x24c>)
 800447e:	885b      	ldrh	r3, [r3, #2]
 8004480:	ee07 3a90 	vmov	s15, r3
 8004484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004488:	4b4b      	ldr	r3, [pc, #300]	@ (80045b8 <runMoveDistTask+0x264>)
 800448a:	edc3 7a00 	vstr	s15, [r3]
			  // for target distance lesser than 15, move mode must be forced to SLOW
			  if (targetDist <= 15) moveMode = SLOW;
 800448e:	4b4a      	ldr	r3, [pc, #296]	@ (80045b8 <runMoveDistTask+0x264>)
 8004490:	edd3 7a00 	vldr	s15, [r3]
 8004494:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8004498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800449c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a0:	d802      	bhi.n	80044a8 <runMoveDistTask+0x154>
 80044a2:	4b46      	ldr	r3, [pc, #280]	@ (80045bc <runMoveDistTask+0x268>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	701a      	strb	r2, [r3, #0]

			  if (moveMode == SLOW) {
 80044a8:	4b44      	ldr	r3, [pc, #272]	@ (80045bc <runMoveDistTask+0x268>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10c      	bne.n	80044ca <runMoveDistTask+0x176>
				  RobotMoveDist(&targetDist, curTask == TASK_MOVE ? DIR_FORWARD : DIR_BACKWARD, SPEED_MODE_1);
 80044b0:	4b30      	ldr	r3, [pc, #192]	@ (8004574 <runMoveDistTask+0x220>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	bf0c      	ite	eq
 80044b8:	2301      	moveq	r3, #1
 80044ba:	2300      	movne	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2201      	movs	r2, #1
 80044c0:	4619      	mov	r1, r3
 80044c2:	483d      	ldr	r0, [pc, #244]	@ (80045b8 <runMoveDistTask+0x264>)
 80044c4:	f7fe fc24 	bl	8002d10 <RobotMoveDist>
 80044c8:	e00b      	b.n	80044e2 <runMoveDistTask+0x18e>
			  } else {
				  RobotMoveDist(&targetDist, curTask == TASK_MOVE ? DIR_FORWARD : DIR_BACKWARD, SPEED_MODE_2);
 80044ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004574 <runMoveDistTask+0x220>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bf0c      	ite	eq
 80044d2:	2301      	moveq	r3, #1
 80044d4:	2300      	movne	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2202      	movs	r2, #2
 80044da:	4619      	mov	r1, r3
 80044dc:	4836      	ldr	r0, [pc, #216]	@ (80045b8 <runMoveDistTask+0x264>)
 80044de:	f7fe fc17 	bl	8002d10 <RobotMoveDist>
			  }

			  __ON_TASK_END(&htim8, prevTask, curTask);
 80044e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004594 <runMoveDistTask+0x240>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2200      	movs	r2, #0
 80044e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80044ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004594 <runMoveDistTask+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2200      	movs	r2, #0
 80044f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80044f2:	4b20      	ldr	r3, [pc, #128]	@ (8004574 <runMoveDistTask+0x220>)
 80044f4:	781a      	ldrb	r2, [r3, #0]
 80044f6:	4b28      	ldr	r3, [pc, #160]	@ (8004598 <runMoveDistTask+0x244>)
 80044f8:	701a      	strb	r2, [r3, #0]
 80044fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004574 <runMoveDistTask+0x220>)
 80044fc:	220b      	movs	r2, #11
 80044fe:	701a      	strb	r2, [r3, #0]
				  clickOnce = 0;
 8004500:	4b26      	ldr	r3, [pc, #152]	@ (800459c <runMoveDistTask+0x248>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]

				if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8004506:	4b2e      	ldr	r3, [pc, #184]	@ (80045c0 <runMoveDistTask+0x26c>)
 8004508:	781a      	ldrb	r2, [r3, #0]
 800450a:	4b2d      	ldr	r3, [pc, #180]	@ (80045c0 <runMoveDistTask+0x26c>)
 800450c:	785b      	ldrb	r3, [r3, #1]
 800450e:	429a      	cmp	r2, r3
 8004510:	d112      	bne.n	8004538 <runMoveDistTask+0x1e4>
					__CLEAR_CURCMD(curCmd);
 8004512:	4b23      	ldr	r3, [pc, #140]	@ (80045a0 <runMoveDistTask+0x24c>)
 8004514:	2264      	movs	r2, #100	@ 0x64
 8004516:	701a      	strb	r2, [r3, #0]
 8004518:	4b21      	ldr	r3, [pc, #132]	@ (80045a0 <runMoveDistTask+0x24c>)
 800451a:	2200      	movs	r2, #0
 800451c:	805a      	strh	r2, [r3, #2]
					__ACK_TASK_DONE(&huart3, rxMsg);
 800451e:	4a21      	ldr	r2, [pc, #132]	@ (80045a4 <runMoveDistTask+0x250>)
 8004520:	210f      	movs	r1, #15
 8004522:	4821      	ldr	r0, [pc, #132]	@ (80045a8 <runMoveDistTask+0x254>)
 8004524:	f00a fafa 	bl	800eb1c <sniprintf>
 8004528:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800452c:	2206      	movs	r2, #6
 800452e:	491f      	ldr	r1, [pc, #124]	@ (80045ac <runMoveDistTask+0x258>)
 8004530:	481f      	ldr	r0, [pc, #124]	@ (80045b0 <runMoveDistTask+0x25c>)
 8004532:	f005 ff1d 	bl	800a370 <HAL_UART_Transmit>
 8004536:	e711      	b.n	800435c <runMoveDistTask+0x8>
				} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004538:	4b21      	ldr	r3, [pc, #132]	@ (80045c0 <runMoveDistTask+0x26c>)
 800453a:	785b      	ldrb	r3, [r3, #1]
 800453c:	4a18      	ldr	r2, [pc, #96]	@ (80045a0 <runMoveDistTask+0x24c>)
 800453e:	4920      	ldr	r1, [pc, #128]	@ (80045c0 <runMoveDistTask+0x26c>)
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	4b1d      	ldr	r3, [pc, #116]	@ (80045c0 <runMoveDistTask+0x26c>)
 800454a:	785b      	ldrb	r3, [r3, #1]
 800454c:	3301      	adds	r3, #1
 800454e:	4a1c      	ldr	r2, [pc, #112]	@ (80045c0 <runMoveDistTask+0x26c>)
 8004550:	7892      	ldrb	r2, [r2, #2]
 8004552:	fb93 f1f2 	sdiv	r1, r3, r2
 8004556:	fb01 f202 	mul.w	r2, r1, r2
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	b2da      	uxtb	r2, r3
 800455e:	4b18      	ldr	r3, [pc, #96]	@ (80045c0 <runMoveDistTask+0x26c>)
 8004560:	705a      	strb	r2, [r3, #1]
 8004562:	4a18      	ldr	r2, [pc, #96]	@ (80045c4 <runMoveDistTask+0x270>)
 8004564:	210f      	movs	r1, #15
 8004566:	4810      	ldr	r0, [pc, #64]	@ (80045a8 <runMoveDistTask+0x254>)
 8004568:	f00a fad8 	bl	800eb1c <sniprintf>
 800456c:	e6f6      	b.n	800435c <runMoveDistTask+0x8>
				if (!manualMode) break;
 800456e:	bf00      	nop
	  if (curTask != TASK_MOVE && curTask != TASK_MOVE_BACKWARD) osDelay(1000);
 8004570:	e6f4      	b.n	800435c <runMoveDistTask+0x8>
 8004572:	bf00      	nop
 8004574:	20000134 	.word	0x20000134
 8004578:	200006a8 	.word	0x200006a8
 800457c:	200006b0 	.word	0x200006b0
 8004580:	200006b6 	.word	0x200006b6
 8004584:	200006e0 	.word	0x200006e0
 8004588:	200006cc 	.word	0x200006cc
 800458c:	200006f4 	.word	0x200006f4
 8004590:	40020000 	.word	0x40020000
 8004594:	20000588 	.word	0x20000588
 8004598:	20000135 	.word	0x20000135
 800459c:	2000074c 	.word	0x2000074c
 80045a0:	20000694 	.word	0x20000694
 80045a4:	08010ea4 	.word	0x08010ea4
 80045a8:	20000698 	.word	0x20000698
 80045ac:	08010eac 	.word	0x08010eac
 80045b0:	200005d0 	.word	0x200005d0
 80045b4:	200006bc 	.word	0x200006bc
 80045b8:	200006c0 	.word	0x200006c0
 80045bc:	20000136 	.word	0x20000136
 80045c0:	20000660 	.word	0x20000660
 80045c4:	08010eb4 	.word	0x08010eb4

080045c8 <runFastestPathTask>:
* @brief Function implementing the fastestPathTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFastestPathTask */
void runFastestPathTask(void *argument) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN runFastestPathTask */
//	RobotMoveUntilIROvershoot();
    for(;;) {
//    	RobotMoveUntilIROvershoot();
        if (curTask != TASK_FASTESTPATH) {
 80045d0:	4b12      	ldr	r3, [pc, #72]	@ (800461c <runFastestPathTask+0x54>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d004      	beq.n	80045e2 <runFastestPathTask+0x1a>
            osDelay(1000);
 80045d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80045dc:	f006 ffde 	bl	800b59c <osDelay>
 80045e0:	e7f6      	b.n	80045d0 <runFastestPathTask+0x8>
        } else {
            // Call only the RobotMoveUntilIROvershoot function
            RobotMoveUntilIROvershoot();
 80045e2:	f7ff f8c9 	bl	8003778 <RobotMoveUntilIROvershoot>

            // After finishing the task, clear the task and acknowledge
            prevTask = curTask;
 80045e6:	4b0d      	ldr	r3, [pc, #52]	@ (800461c <runFastestPathTask+0x54>)
 80045e8:	781a      	ldrb	r2, [r3, #0]
 80045ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004620 <runFastestPathTask+0x58>)
 80045ec:	701a      	strb	r2, [r3, #0]
            curTask = TASK_NONE;
 80045ee:	4b0b      	ldr	r3, [pc, #44]	@ (800461c <runFastestPathTask+0x54>)
 80045f0:	220b      	movs	r2, #11
 80045f2:	701a      	strb	r2, [r3, #0]
            __CLEAR_CURCMD(curCmd);
 80045f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004624 <runFastestPathTask+0x5c>)
 80045f6:	2264      	movs	r2, #100	@ 0x64
 80045f8:	701a      	strb	r2, [r3, #0]
 80045fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004624 <runFastestPathTask+0x5c>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	805a      	strh	r2, [r3, #2]
            __ACK_TASK_DONE(&huart3, rxMsg);
 8004600:	4a09      	ldr	r2, [pc, #36]	@ (8004628 <runFastestPathTask+0x60>)
 8004602:	210f      	movs	r1, #15
 8004604:	4809      	ldr	r0, [pc, #36]	@ (800462c <runFastestPathTask+0x64>)
 8004606:	f00a fa89 	bl	800eb1c <sniprintf>
 800460a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800460e:	2206      	movs	r2, #6
 8004610:	4907      	ldr	r1, [pc, #28]	@ (8004630 <runFastestPathTask+0x68>)
 8004612:	4808      	ldr	r0, [pc, #32]	@ (8004634 <runFastestPathTask+0x6c>)
 8004614:	f005 feac 	bl	800a370 <HAL_UART_Transmit>
        if (curTask != TASK_FASTESTPATH) {
 8004618:	e7da      	b.n	80045d0 <runFastestPathTask+0x8>
 800461a:	bf00      	nop
 800461c:	20000134 	.word	0x20000134
 8004620:	20000135 	.word	0x20000135
 8004624:	20000694 	.word	0x20000694
 8004628:	08010ea4 	.word	0x08010ea4
 800462c:	20000698 	.word	0x20000698
 8004630:	08010eac 	.word	0x08010eac
 8004634:	200005d0 	.word	0x200005d0

08004638 <runBuzzerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBuzzerTask */
void runBuzzerTask(void *argument)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBuzzerTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_BUZZER) osDelay(1000);
 8004640:	4b31      	ldr	r3, [pc, #196]	@ (8004708 <runBuzzerTask+0xd0>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b0a      	cmp	r3, #10
 8004646:	d01c      	beq.n	8004682 <runBuzzerTask+0x4a>
 8004648:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800464c:	f006 ffa6 	bl	800b59c <osDelay>
 8004650:	e7f6      	b.n	8004640 <runBuzzerTask+0x8>
	  else {
		  while (curCmd.val > 0) {
			  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8004652:	2201      	movs	r2, #1
 8004654:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004658:	482c      	ldr	r0, [pc, #176]	@ (800470c <runBuzzerTask+0xd4>)
 800465a:	f002 fc07 	bl	8006e6c <HAL_GPIO_WritePin>
			  osDelay(100);
 800465e:	2064      	movs	r0, #100	@ 0x64
 8004660:	f006 ff9c 	bl	800b59c <osDelay>
			  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8004664:	2200      	movs	r2, #0
 8004666:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800466a:	4828      	ldr	r0, [pc, #160]	@ (800470c <runBuzzerTask+0xd4>)
 800466c:	f002 fbfe 	bl	8006e6c <HAL_GPIO_WritePin>
			  osDelay(100);
 8004670:	2064      	movs	r0, #100	@ 0x64
 8004672:	f006 ff93 	bl	800b59c <osDelay>
			  curCmd.val--;
 8004676:	4b26      	ldr	r3, [pc, #152]	@ (8004710 <runBuzzerTask+0xd8>)
 8004678:	885b      	ldrh	r3, [r3, #2]
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	4b24      	ldr	r3, [pc, #144]	@ (8004710 <runBuzzerTask+0xd8>)
 8004680:	805a      	strh	r2, [r3, #2]
		  while (curCmd.val > 0) {
 8004682:	4b23      	ldr	r3, [pc, #140]	@ (8004710 <runBuzzerTask+0xd8>)
 8004684:	885b      	ldrh	r3, [r3, #2]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1e3      	bne.n	8004652 <runBuzzerTask+0x1a>
		  }
		  prevTask = curTask;
 800468a:	4b1f      	ldr	r3, [pc, #124]	@ (8004708 <runBuzzerTask+0xd0>)
 800468c:	781a      	ldrb	r2, [r3, #0]
 800468e:	4b21      	ldr	r3, [pc, #132]	@ (8004714 <runBuzzerTask+0xdc>)
 8004690:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8004692:	4b1d      	ldr	r3, [pc, #116]	@ (8004708 <runBuzzerTask+0xd0>)
 8004694:	220b      	movs	r2, #11
 8004696:	701a      	strb	r2, [r3, #0]
		  clickOnce = 0;
 8004698:	4b1f      	ldr	r3, [pc, #124]	@ (8004718 <runBuzzerTask+0xe0>)
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]


		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 800469e:	4b1f      	ldr	r3, [pc, #124]	@ (800471c <runBuzzerTask+0xe4>)
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	4b1e      	ldr	r3, [pc, #120]	@ (800471c <runBuzzerTask+0xe4>)
 80046a4:	785b      	ldrb	r3, [r3, #1]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d112      	bne.n	80046d0 <runBuzzerTask+0x98>
				__CLEAR_CURCMD(curCmd);
 80046aa:	4b19      	ldr	r3, [pc, #100]	@ (8004710 <runBuzzerTask+0xd8>)
 80046ac:	2264      	movs	r2, #100	@ 0x64
 80046ae:	701a      	strb	r2, [r3, #0]
 80046b0:	4b17      	ldr	r3, [pc, #92]	@ (8004710 <runBuzzerTask+0xd8>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 80046b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004720 <runBuzzerTask+0xe8>)
 80046b8:	210f      	movs	r1, #15
 80046ba:	481a      	ldr	r0, [pc, #104]	@ (8004724 <runBuzzerTask+0xec>)
 80046bc:	f00a fa2e 	bl	800eb1c <sniprintf>
 80046c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046c4:	2206      	movs	r2, #6
 80046c6:	4918      	ldr	r1, [pc, #96]	@ (8004728 <runBuzzerTask+0xf0>)
 80046c8:	4818      	ldr	r0, [pc, #96]	@ (800472c <runBuzzerTask+0xf4>)
 80046ca:	f005 fe51 	bl	800a370 <HAL_UART_Transmit>
 80046ce:	e7b7      	b.n	8004640 <runBuzzerTask+0x8>
			} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 80046d0:	4b12      	ldr	r3, [pc, #72]	@ (800471c <runBuzzerTask+0xe4>)
 80046d2:	785b      	ldrb	r3, [r3, #1]
 80046d4:	4a0e      	ldr	r2, [pc, #56]	@ (8004710 <runBuzzerTask+0xd8>)
 80046d6:	4911      	ldr	r1, [pc, #68]	@ (800471c <runBuzzerTask+0xe4>)
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	6013      	str	r3, [r2, #0]
 80046e0:	4b0e      	ldr	r3, [pc, #56]	@ (800471c <runBuzzerTask+0xe4>)
 80046e2:	785b      	ldrb	r3, [r3, #1]
 80046e4:	3301      	adds	r3, #1
 80046e6:	4a0d      	ldr	r2, [pc, #52]	@ (800471c <runBuzzerTask+0xe4>)
 80046e8:	7892      	ldrb	r2, [r2, #2]
 80046ea:	fb93 f1f2 	sdiv	r1, r3, r2
 80046ee:	fb01 f202 	mul.w	r2, r1, r2
 80046f2:	1a9b      	subs	r3, r3, r2
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	4b09      	ldr	r3, [pc, #36]	@ (800471c <runBuzzerTask+0xe4>)
 80046f8:	705a      	strb	r2, [r3, #1]
 80046fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004730 <runBuzzerTask+0xf8>)
 80046fc:	210f      	movs	r1, #15
 80046fe:	4809      	ldr	r0, [pc, #36]	@ (8004724 <runBuzzerTask+0xec>)
 8004700:	f00a fa0c 	bl	800eb1c <sniprintf>
	  if (curTask != TASK_BUZZER) osDelay(1000);
 8004704:	e79c      	b.n	8004640 <runBuzzerTask+0x8>
 8004706:	bf00      	nop
 8004708:	20000134 	.word	0x20000134
 800470c:	40020400 	.word	0x40020400
 8004710:	20000694 	.word	0x20000694
 8004714:	20000135 	.word	0x20000135
 8004718:	2000074c 	.word	0x2000074c
 800471c:	20000660 	.word	0x20000660
 8004720:	08010ea4 	.word	0x08010ea4
 8004724:	20000698 	.word	0x20000698
 8004728:	08010eac 	.word	0x08010eac
 800472c:	200005d0 	.word	0x200005d0
 8004730:	08010eb4 	.word	0x08010eb4

08004734 <runFLTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFLTask */
void runFLTask(void *argument)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b098      	sub	sp, #96	@ 0x60
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	uint8_t message1[20], message2[20], message3[20];

  for(;;)
  {
	  if (curTask != TASK_FL) osDelay(1000);
 800473c:	4b63      	ldr	r3, [pc, #396]	@ (80048cc <runFLTask+0x198>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d004      	beq.n	800474e <runFLTask+0x1a>
 8004744:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004748:	f006 ff28 	bl	800b59c <osDelay>
 800474c:	e7f6      	b.n	800473c <runFLTask+0x8>
	  else {
		  targetAngle = curCmd.val-1;
 800474e:	4b60      	ldr	r3, [pc, #384]	@ (80048d0 <runFLTask+0x19c>)
 8004750:	885b      	ldrh	r3, [r3, #2]
 8004752:	3b01      	subs	r3, #1
 8004754:	ee07 3a90 	vmov	s15, r3
 8004758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800475c:	4b5d      	ldr	r3, [pc, #372]	@ (80048d4 <runFLTask+0x1a0>)
 800475e:	edc3 7a00 	vstr	s15, [r3]
		  uint16_t leftDuty = 560;
 8004762:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8004766:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		  uint16_t rightDuty = 2000;
 800476a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800476e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
		  float servoTurnVal = 53;
 8004772:	4b59      	ldr	r3, [pc, #356]	@ (80048d8 <runFLTask+0x1a4>)
 8004774:	65bb      	str	r3, [r7, #88]	@ 0x58

		              // Corrected type declaration for config
		  CmdConfig config = {leftDuty, rightDuty, servoTurnVal, targetAngle, DIR_FORWARD};
 8004776:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800477a:	81bb      	strh	r3, [r7, #12]
 800477c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8004780:	81fb      	strh	r3, [r7, #14]
 8004782:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	4b53      	ldr	r3, [pc, #332]	@ (80048d4 <runFLTask+0x1a0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	2301      	movs	r3, #1
 800478e:	763b      	strb	r3, [r7, #24]

		              // Apply the configuration to the motors and steering
		  __SET_CMD_CONFIG(config, &htim8, &htim1, targetAngle);
 8004790:	edd7 7a04 	vldr	s15, [r7, #16]
 8004794:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80048dc <runFLTask+0x1a8>
 8004798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800479c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a0:	dd01      	ble.n	80047a6 <runFLTask+0x72>
 80047a2:	2373      	movs	r3, #115	@ 0x73
 80047a4:	e010      	b.n	80047c8 <runFLTask+0x94>
 80047a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80047aa:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80047ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b6:	d501      	bpl.n	80047bc <runFLTask+0x88>
 80047b8:	2314      	movs	r3, #20
 80047ba:	e005      	b.n	80047c8 <runFLTask+0x94>
 80047bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80047c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c4:	ee17 3a90 	vmov	r3, s15
 80047c8:	4a45      	ldr	r2, [pc, #276]	@ (80048e0 <runFLTask+0x1ac>)
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80047ce:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80047d2:	f001 fbe7 	bl	8005fa4 <HAL_Delay>
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	4a3e      	ldr	r2, [pc, #248]	@ (80048d4 <runFLTask+0x1a0>)
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	7e3b      	ldrb	r3, [r7, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	bf0c      	ite	eq
 80047e2:	2301      	moveq	r3, #1
 80047e4:	2300      	movne	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	2104      	movs	r1, #4
 80047ec:	483d      	ldr	r0, [pc, #244]	@ (80048e4 <runFLTask+0x1b0>)
 80047ee:	f002 fb3d 	bl	8006e6c <HAL_GPIO_WritePin>
 80047f2:	7e3b      	ldrb	r3, [r7, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bf14      	ite	ne
 80047f8:	2301      	movne	r3, #1
 80047fa:	2300      	moveq	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	461a      	mov	r2, r3
 8004800:	2108      	movs	r1, #8
 8004802:	4838      	ldr	r0, [pc, #224]	@ (80048e4 <runFLTask+0x1b0>)
 8004804:	f002 fb32 	bl	8006e6c <HAL_GPIO_WritePin>
 8004808:	7e3b      	ldrb	r3, [r7, #24]
 800480a:	2b00      	cmp	r3, #0
 800480c:	bf0c      	ite	eq
 800480e:	2301      	moveq	r3, #1
 8004810:	2300      	movne	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	461a      	mov	r2, r3
 8004816:	2120      	movs	r1, #32
 8004818:	4832      	ldr	r0, [pc, #200]	@ (80048e4 <runFLTask+0x1b0>)
 800481a:	f002 fb27 	bl	8006e6c <HAL_GPIO_WritePin>
 800481e:	7e3b      	ldrb	r3, [r7, #24]
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf14      	ite	ne
 8004824:	2301      	movne	r3, #1
 8004826:	2300      	moveq	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	2110      	movs	r1, #16
 800482e:	482d      	ldr	r0, [pc, #180]	@ (80048e4 <runFLTask+0x1b0>)
 8004830:	f002 fb1c 	bl	8006e6c <HAL_GPIO_WritePin>
 8004834:	89ba      	ldrh	r2, [r7, #12]
 8004836:	4b2c      	ldr	r3, [pc, #176]	@ (80048e8 <runFLTask+0x1b4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	635a      	str	r2, [r3, #52]	@ 0x34
 800483c:	89fa      	ldrh	r2, [r7, #14]
 800483e:	4b2a      	ldr	r3, [pc, #168]	@ (80048e8 <runFLTask+0x1b4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	639a      	str	r2, [r3, #56]	@ 0x38
		  RobotTurn(&targetAngle);
 8004844:	4823      	ldr	r0, [pc, #140]	@ (80048d4 <runFLTask+0x1a0>)
 8004846:	f7fe feeb 	bl	8003620 <RobotTurn>
//		  	{1500, 1500, 51, -87.5, DIR_BACKWARD}, // BL30
//		  	{2000, 0, 115, 90.5, DIR_BACKWARD}, // BR30
//		  osDelay(100);
//		  targetDist = 4;
//		  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
		  osDelay(10);
 800484a:	200a      	movs	r0, #10
 800484c:	f006 fea6 	bl	800b59c <osDelay>
////			  osDelay(10);
//			  break;
//		  }


		  clickOnce = 0;
 8004850:	4b26      	ldr	r3, [pc, #152]	@ (80048ec <runFLTask+0x1b8>)
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8004856:	4b1d      	ldr	r3, [pc, #116]	@ (80048cc <runFLTask+0x198>)
 8004858:	781a      	ldrb	r2, [r3, #0]
 800485a:	4b25      	ldr	r3, [pc, #148]	@ (80048f0 <runFLTask+0x1bc>)
 800485c:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 800485e:	4b1b      	ldr	r3, [pc, #108]	@ (80048cc <runFLTask+0x198>)
 8004860:	220b      	movs	r2, #11
 8004862:	701a      	strb	r2, [r3, #0]

		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8004864:	4b23      	ldr	r3, [pc, #140]	@ (80048f4 <runFLTask+0x1c0>)
 8004866:	781a      	ldrb	r2, [r3, #0]
 8004868:	4b22      	ldr	r3, [pc, #136]	@ (80048f4 <runFLTask+0x1c0>)
 800486a:	785b      	ldrb	r3, [r3, #1]
 800486c:	429a      	cmp	r2, r3
 800486e:	d112      	bne.n	8004896 <runFLTask+0x162>
				__CLEAR_CURCMD(curCmd);
 8004870:	4b17      	ldr	r3, [pc, #92]	@ (80048d0 <runFLTask+0x19c>)
 8004872:	2264      	movs	r2, #100	@ 0x64
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	4b16      	ldr	r3, [pc, #88]	@ (80048d0 <runFLTask+0x19c>)
 8004878:	2200      	movs	r2, #0
 800487a:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 800487c:	4a1e      	ldr	r2, [pc, #120]	@ (80048f8 <runFLTask+0x1c4>)
 800487e:	210f      	movs	r1, #15
 8004880:	481e      	ldr	r0, [pc, #120]	@ (80048fc <runFLTask+0x1c8>)
 8004882:	f00a f94b 	bl	800eb1c <sniprintf>
 8004886:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800488a:	2206      	movs	r2, #6
 800488c:	491c      	ldr	r1, [pc, #112]	@ (8004900 <runFLTask+0x1cc>)
 800488e:	481d      	ldr	r0, [pc, #116]	@ (8004904 <runFLTask+0x1d0>)
 8004890:	f005 fd6e 	bl	800a370 <HAL_UART_Transmit>
 8004894:	e752      	b.n	800473c <runFLTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004896:	4b17      	ldr	r3, [pc, #92]	@ (80048f4 <runFLTask+0x1c0>)
 8004898:	785b      	ldrb	r3, [r3, #1]
 800489a:	4a0d      	ldr	r2, [pc, #52]	@ (80048d0 <runFLTask+0x19c>)
 800489c:	4915      	ldr	r1, [pc, #84]	@ (80048f4 <runFLTask+0x1c0>)
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	4b13      	ldr	r3, [pc, #76]	@ (80048f4 <runFLTask+0x1c0>)
 80048a8:	785b      	ldrb	r3, [r3, #1]
 80048aa:	3301      	adds	r3, #1
 80048ac:	4a11      	ldr	r2, [pc, #68]	@ (80048f4 <runFLTask+0x1c0>)
 80048ae:	7892      	ldrb	r2, [r2, #2]
 80048b0:	fb93 f1f2 	sdiv	r1, r3, r2
 80048b4:	fb01 f202 	mul.w	r2, r1, r2
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	4b0d      	ldr	r3, [pc, #52]	@ (80048f4 <runFLTask+0x1c0>)
 80048be:	705a      	strb	r2, [r3, #1]
 80048c0:	4a11      	ldr	r2, [pc, #68]	@ (8004908 <runFLTask+0x1d4>)
 80048c2:	210f      	movs	r1, #15
 80048c4:	480d      	ldr	r0, [pc, #52]	@ (80048fc <runFLTask+0x1c8>)
 80048c6:	f00a f929 	bl	800eb1c <sniprintf>
	  if (curTask != TASK_FL) osDelay(1000);
 80048ca:	e737      	b.n	800473c <runFLTask+0x8>
 80048cc:	20000134 	.word	0x20000134
 80048d0:	20000694 	.word	0x20000694
 80048d4:	200006ac 	.word	0x200006ac
 80048d8:	42540000 	.word	0x42540000
 80048dc:	42e60000 	.word	0x42e60000
 80048e0:	20000420 	.word	0x20000420
 80048e4:	40020000 	.word	0x40020000
 80048e8:	20000588 	.word	0x20000588
 80048ec:	2000074c 	.word	0x2000074c
 80048f0:	20000135 	.word	0x20000135
 80048f4:	20000660 	.word	0x20000660
 80048f8:	08010ea4 	.word	0x08010ea4
 80048fc:	20000698 	.word	0x20000698
 8004900:	08010eac 	.word	0x08010eac
 8004904:	200005d0 	.word	0x200005d0
 8004908:	08010eb4 	.word	0x08010eb4

0800490c <runFRTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFRTask */
void runFRTask(void *argument)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08a      	sub	sp, #40	@ 0x28
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
//	RobotTurn(&angle);
  /* USER CODE BEGIN runFRTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_FR) osDelay(1000);
 8004914:	4b6f      	ldr	r3, [pc, #444]	@ (8004ad4 <runFRTask+0x1c8>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b03      	cmp	r3, #3
 800491a:	d004      	beq.n	8004926 <runFRTask+0x1a>
 800491c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004920:	f006 fe3c 	bl	800b59c <osDelay>
 8004924:	e7f6      	b.n	8004914 <runFRTask+0x8>
//			{0, 2000, 53, 90, DIR_FORWARD}, // FL30
//			{2000, 0, 120, -87, DIR_FORWARD}, // FR30
//			{1500, 1500, 51, -87.5, DIR_BACKWARD}, // BL30
//			{2000, 0, 115, 90.5, DIR_BACKWARD}, // BR30
//		  osDelay(3000); // video demo only
		  targetAngle = curCmd.val;
 8004926:	4b6c      	ldr	r3, [pc, #432]	@ (8004ad8 <runFRTask+0x1cc>)
 8004928:	885b      	ldrh	r3, [r3, #2]
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004932:	4b6a      	ldr	r3, [pc, #424]	@ (8004adc <runFRTask+0x1d0>)
 8004934:	edc3 7a00 	vstr	s15, [r3]
		  if (targetAngle > 3){
 8004938:	4b68      	ldr	r3, [pc, #416]	@ (8004adc <runFRTask+0x1d0>)
 800493a:	edd3 7a00 	vldr	s15, [r3]
 800493e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8004942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494a:	dd09      	ble.n	8004960 <runFRTask+0x54>
			  targetAngle -=  3;
 800494c:	4b63      	ldr	r3, [pc, #396]	@ (8004adc <runFRTask+0x1d0>)
 800494e:	edd3 7a00 	vldr	s15, [r3]
 8004952:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8004956:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800495a:	4b60      	ldr	r3, [pc, #384]	@ (8004adc <runFRTask+0x1d0>)
 800495c:	edc3 7a00 	vstr	s15, [r3]
		  		  }
		  		  uint16_t leftDuty = 2500;
 8004960:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8004964:	84fb      	strh	r3, [r7, #38]	@ 0x26
		  		  uint16_t rightDuty = 1000;
 8004966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800496a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		  		  float servoTurnVal = 300;
 800496c:	4b5c      	ldr	r3, [pc, #368]	@ (8004ae0 <runFRTask+0x1d4>)
 800496e:	623b      	str	r3, [r7, #32]
		  		  float negatetargetAngle =  0 - targetAngle;
 8004970:	4b5a      	ldr	r3, [pc, #360]	@ (8004adc <runFRTask+0x1d0>)
 8004972:	edd3 7a00 	vldr	s15, [r3]
 8004976:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8004ae4 <runFRTask+0x1d8>
 800497a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800497e:	edc7 7a07 	vstr	s15, [r7, #28]

		  		              // Corrected type declaration for config
		  		  CmdConfig config = {leftDuty, rightDuty, servoTurnVal, negatetargetAngle, DIR_FORWARD};
 8004982:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004984:	81bb      	strh	r3, [r7, #12]
 8004986:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004988:	81fb      	strh	r3, [r7, #14]
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	2301      	movs	r3, #1
 8004994:	763b      	strb	r3, [r7, #24]

		  		              // Apply the configuration to the motors and steering
		  		  __SET_CMD_CONFIG(config, &htim8, &htim1, targetAngle);
 8004996:	edd7 7a04 	vldr	s15, [r7, #16]
 800499a:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8004ae8 <runFRTask+0x1dc>
 800499e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a6:	dd01      	ble.n	80049ac <runFRTask+0xa0>
 80049a8:	2373      	movs	r3, #115	@ 0x73
 80049aa:	e010      	b.n	80049ce <runFRTask+0xc2>
 80049ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80049b0:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80049b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049bc:	d501      	bpl.n	80049c2 <runFRTask+0xb6>
 80049be:	2314      	movs	r3, #20
 80049c0:	e005      	b.n	80049ce <runFRTask+0xc2>
 80049c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80049c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ca:	ee17 3a90 	vmov	r3, s15
 80049ce:	4a47      	ldr	r2, [pc, #284]	@ (8004aec <runFRTask+0x1e0>)
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80049d4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80049d8:	f001 fae4 	bl	8005fa4 <HAL_Delay>
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	4a3f      	ldr	r2, [pc, #252]	@ (8004adc <runFRTask+0x1d0>)
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	7e3b      	ldrb	r3, [r7, #24]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	bf0c      	ite	eq
 80049e8:	2301      	moveq	r3, #1
 80049ea:	2300      	movne	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	2104      	movs	r1, #4
 80049f2:	483f      	ldr	r0, [pc, #252]	@ (8004af0 <runFRTask+0x1e4>)
 80049f4:	f002 fa3a 	bl	8006e6c <HAL_GPIO_WritePin>
 80049f8:	7e3b      	ldrb	r3, [r7, #24]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	bf14      	ite	ne
 80049fe:	2301      	movne	r3, #1
 8004a00:	2300      	moveq	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	2108      	movs	r1, #8
 8004a08:	4839      	ldr	r0, [pc, #228]	@ (8004af0 <runFRTask+0x1e4>)
 8004a0a:	f002 fa2f 	bl	8006e6c <HAL_GPIO_WritePin>
 8004a0e:	7e3b      	ldrb	r3, [r7, #24]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	bf0c      	ite	eq
 8004a14:	2301      	moveq	r3, #1
 8004a16:	2300      	movne	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	2120      	movs	r1, #32
 8004a1e:	4834      	ldr	r0, [pc, #208]	@ (8004af0 <runFRTask+0x1e4>)
 8004a20:	f002 fa24 	bl	8006e6c <HAL_GPIO_WritePin>
 8004a24:	7e3b      	ldrb	r3, [r7, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf14      	ite	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	2300      	moveq	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	2110      	movs	r1, #16
 8004a34:	482e      	ldr	r0, [pc, #184]	@ (8004af0 <runFRTask+0x1e4>)
 8004a36:	f002 fa19 	bl	8006e6c <HAL_GPIO_WritePin>
 8004a3a:	89ba      	ldrh	r2, [r7, #12]
 8004a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8004af4 <runFRTask+0x1e8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a42:	89fa      	ldrh	r2, [r7, #14]
 8004a44:	4b2b      	ldr	r3, [pc, #172]	@ (8004af4 <runFRTask+0x1e8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	639a      	str	r2, [r3, #56]	@ 0x38
		  		  RobotTurn(&targetAngle);
 8004a4a:	4824      	ldr	r0, [pc, #144]	@ (8004adc <runFRTask+0x1d0>)
 8004a4c:	f7fe fde8 	bl	8003620 <RobotTurn>
//		  		  osDelay(100);
//		  		  targetDist = 4;
//		  		  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
		  		  osDelay(10);
 8004a50:	200a      	movs	r0, #10
 8004a52:	f006 fda3 	bl	800b59c <osDelay>


		  clickOnce = 0;
 8004a56:	4b28      	ldr	r3, [pc, #160]	@ (8004af8 <runFRTask+0x1ec>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8004a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad4 <runFRTask+0x1c8>)
 8004a5e:	781a      	ldrb	r2, [r3, #0]
 8004a60:	4b26      	ldr	r3, [pc, #152]	@ (8004afc <runFRTask+0x1f0>)
 8004a62:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8004a64:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad4 <runFRTask+0x1c8>)
 8004a66:	220b      	movs	r2, #11
 8004a68:	701a      	strb	r2, [r3, #0]
		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8004a6a:	4b25      	ldr	r3, [pc, #148]	@ (8004b00 <runFRTask+0x1f4>)
 8004a6c:	781a      	ldrb	r2, [r3, #0]
 8004a6e:	4b24      	ldr	r3, [pc, #144]	@ (8004b00 <runFRTask+0x1f4>)
 8004a70:	785b      	ldrb	r3, [r3, #1]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d112      	bne.n	8004a9c <runFRTask+0x190>
				__CLEAR_CURCMD(curCmd);
 8004a76:	4b18      	ldr	r3, [pc, #96]	@ (8004ad8 <runFRTask+0x1cc>)
 8004a78:	2264      	movs	r2, #100	@ 0x64
 8004a7a:	701a      	strb	r2, [r3, #0]
 8004a7c:	4b16      	ldr	r3, [pc, #88]	@ (8004ad8 <runFRTask+0x1cc>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8004a82:	4a20      	ldr	r2, [pc, #128]	@ (8004b04 <runFRTask+0x1f8>)
 8004a84:	210f      	movs	r1, #15
 8004a86:	4820      	ldr	r0, [pc, #128]	@ (8004b08 <runFRTask+0x1fc>)
 8004a88:	f00a f848 	bl	800eb1c <sniprintf>
 8004a8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a90:	2206      	movs	r2, #6
 8004a92:	491e      	ldr	r1, [pc, #120]	@ (8004b0c <runFRTask+0x200>)
 8004a94:	481e      	ldr	r0, [pc, #120]	@ (8004b10 <runFRTask+0x204>)
 8004a96:	f005 fc6b 	bl	800a370 <HAL_UART_Transmit>
 8004a9a:	e73b      	b.n	8004914 <runFRTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004a9c:	4b18      	ldr	r3, [pc, #96]	@ (8004b00 <runFRTask+0x1f4>)
 8004a9e:	785b      	ldrb	r3, [r3, #1]
 8004aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ad8 <runFRTask+0x1cc>)
 8004aa2:	4917      	ldr	r1, [pc, #92]	@ (8004b00 <runFRTask+0x1f4>)
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	4b14      	ldr	r3, [pc, #80]	@ (8004b00 <runFRTask+0x1f4>)
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	4a13      	ldr	r2, [pc, #76]	@ (8004b00 <runFRTask+0x1f4>)
 8004ab4:	7892      	ldrb	r2, [r2, #2]
 8004ab6:	fb93 f1f2 	sdiv	r1, r3, r2
 8004aba:	fb01 f202 	mul.w	r2, r1, r2
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8004b00 <runFRTask+0x1f4>)
 8004ac4:	705a      	strb	r2, [r3, #1]
 8004ac6:	4a13      	ldr	r2, [pc, #76]	@ (8004b14 <runFRTask+0x208>)
 8004ac8:	210f      	movs	r1, #15
 8004aca:	480f      	ldr	r0, [pc, #60]	@ (8004b08 <runFRTask+0x1fc>)
 8004acc:	f00a f826 	bl	800eb1c <sniprintf>
	  if (curTask != TASK_FR) osDelay(1000);
 8004ad0:	e720      	b.n	8004914 <runFRTask+0x8>
 8004ad2:	bf00      	nop
 8004ad4:	20000134 	.word	0x20000134
 8004ad8:	20000694 	.word	0x20000694
 8004adc:	200006ac 	.word	0x200006ac
 8004ae0:	43960000 	.word	0x43960000
 8004ae4:	00000000 	.word	0x00000000
 8004ae8:	42e60000 	.word	0x42e60000
 8004aec:	20000420 	.word	0x20000420
 8004af0:	40020000 	.word	0x40020000
 8004af4:	20000588 	.word	0x20000588
 8004af8:	2000074c 	.word	0x2000074c
 8004afc:	20000135 	.word	0x20000135
 8004b00:	20000660 	.word	0x20000660
 8004b04:	08010ea4 	.word	0x08010ea4
 8004b08:	20000698 	.word	0x20000698
 8004b0c:	08010eac 	.word	0x08010eac
 8004b10:	200005d0 	.word	0x200005d0
 8004b14:	08010eb4 	.word	0x08010eb4

08004b18 <runBLTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBLTask */
void runBLTask(void *argument)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	@ 0x28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBLTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_BL) osDelay(1000);
 8004b20:	4b6f      	ldr	r3, [pc, #444]	@ (8004ce0 <runBLTask+0x1c8>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d004      	beq.n	8004b32 <runBLTask+0x1a>
 8004b28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004b2c:	f006 fd36 	bl	800b59c <osDelay>
 8004b30:	e7f6      	b.n	8004b20 <runBLTask+0x8>
	  else {
//		  osDelay(3000); // video demo only
		  targetAngle = curCmd.val;
 8004b32:	4b6c      	ldr	r3, [pc, #432]	@ (8004ce4 <runBLTask+0x1cc>)
 8004b34:	885b      	ldrh	r3, [r3, #2]
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ce8 <runBLTask+0x1d0>)
 8004b40:	edc3 7a00 	vstr	s15, [r3]
		  		  if (targetAngle > 2){
 8004b44:	4b68      	ldr	r3, [pc, #416]	@ (8004ce8 <runBLTask+0x1d0>)
 8004b46:	edd3 7a00 	vldr	s15, [r3]
 8004b4a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004b4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b56:	dd09      	ble.n	8004b6c <runBLTask+0x54>
		  			  targetAngle -=  2;
 8004b58:	4b63      	ldr	r3, [pc, #396]	@ (8004ce8 <runBLTask+0x1d0>)
 8004b5a:	edd3 7a00 	vldr	s15, [r3]
 8004b5e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004b62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b66:	4b60      	ldr	r3, [pc, #384]	@ (8004ce8 <runBLTask+0x1d0>)
 8004b68:	edc3 7a00 	vstr	s15, [r3]
		  		  		  }
		  		  uint16_t leftDuty = 670;
 8004b6c:	f240 239e 	movw	r3, #670	@ 0x29e
 8004b70:	84fb      	strh	r3, [r7, #38]	@ 0x26
		  		  uint16_t rightDuty = 2000;
 8004b72:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004b76:	84bb      	strh	r3, [r7, #36]	@ 0x24
		  		  float servoTurnVal = 53;
 8004b78:	4b5c      	ldr	r3, [pc, #368]	@ (8004cec <runBLTask+0x1d4>)
 8004b7a:	623b      	str	r3, [r7, #32]
		  		float negatetargetAngle =  0 - targetAngle;
 8004b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8004ce8 <runBLTask+0x1d0>)
 8004b7e:	edd3 7a00 	vldr	s15, [r3]
 8004b82:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8004cf0 <runBLTask+0x1d8>
 8004b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b8a:	edc7 7a07 	vstr	s15, [r7, #28]
//		  			{2000, 0, 115, 90.5, DIR_BACKWARD}, // BR30

//		  		{1500, 1500, 51, -87.5, DIR_BACKWARD}, // BL30
//		  			{2000, 0, 115, 90.5, DIR_BACKWARD}, // BR30
		  		              // Corrected type declaration for config
		  		  CmdConfig config = {leftDuty, rightDuty, servoTurnVal, negatetargetAngle, DIR_BACKWARD};
 8004b8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004b90:	81bb      	strh	r3, [r7, #12]
 8004b92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b94:	81fb      	strh	r3, [r7, #14]
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	763b      	strb	r3, [r7, #24]

		  		              // Apply the configuration to the motors and steering
		  		  __SET_CMD_CONFIG(config, &htim8, &htim1, targetAngle);
 8004ba2:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ba6:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8004cf4 <runBLTask+0x1dc>
 8004baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb2:	dd01      	ble.n	8004bb8 <runBLTask+0xa0>
 8004bb4:	2373      	movs	r3, #115	@ 0x73
 8004bb6:	e010      	b.n	8004bda <runBLTask+0xc2>
 8004bb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bbc:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8004bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc8:	d501      	bpl.n	8004bce <runBLTask+0xb6>
 8004bca:	2314      	movs	r3, #20
 8004bcc:	e005      	b.n	8004bda <runBLTask+0xc2>
 8004bce:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd6:	ee17 3a90 	vmov	r3, s15
 8004bda:	4a47      	ldr	r2, [pc, #284]	@ (8004cf8 <runBLTask+0x1e0>)
 8004bdc:	6812      	ldr	r2, [r2, #0]
 8004bde:	6413      	str	r3, [r2, #64]	@ 0x40
 8004be0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004be4:	f001 f9de 	bl	8005fa4 <HAL_Delay>
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	4a3f      	ldr	r2, [pc, #252]	@ (8004ce8 <runBLTask+0x1d0>)
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	7e3b      	ldrb	r3, [r7, #24]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	bf0c      	ite	eq
 8004bf4:	2301      	moveq	r3, #1
 8004bf6:	2300      	movne	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2104      	movs	r1, #4
 8004bfe:	483f      	ldr	r0, [pc, #252]	@ (8004cfc <runBLTask+0x1e4>)
 8004c00:	f002 f934 	bl	8006e6c <HAL_GPIO_WritePin>
 8004c04:	7e3b      	ldrb	r3, [r7, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	bf14      	ite	ne
 8004c0a:	2301      	movne	r3, #1
 8004c0c:	2300      	moveq	r3, #0
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	461a      	mov	r2, r3
 8004c12:	2108      	movs	r1, #8
 8004c14:	4839      	ldr	r0, [pc, #228]	@ (8004cfc <runBLTask+0x1e4>)
 8004c16:	f002 f929 	bl	8006e6c <HAL_GPIO_WritePin>
 8004c1a:	7e3b      	ldrb	r3, [r7, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	bf0c      	ite	eq
 8004c20:	2301      	moveq	r3, #1
 8004c22:	2300      	movne	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	461a      	mov	r2, r3
 8004c28:	2120      	movs	r1, #32
 8004c2a:	4834      	ldr	r0, [pc, #208]	@ (8004cfc <runBLTask+0x1e4>)
 8004c2c:	f002 f91e 	bl	8006e6c <HAL_GPIO_WritePin>
 8004c30:	7e3b      	ldrb	r3, [r7, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	bf14      	ite	ne
 8004c36:	2301      	movne	r3, #1
 8004c38:	2300      	moveq	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	2110      	movs	r1, #16
 8004c40:	482e      	ldr	r0, [pc, #184]	@ (8004cfc <runBLTask+0x1e4>)
 8004c42:	f002 f913 	bl	8006e6c <HAL_GPIO_WritePin>
 8004c46:	89ba      	ldrh	r2, [r7, #12]
 8004c48:	4b2d      	ldr	r3, [pc, #180]	@ (8004d00 <runBLTask+0x1e8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c4e:	89fa      	ldrh	r2, [r7, #14]
 8004c50:	4b2b      	ldr	r3, [pc, #172]	@ (8004d00 <runBLTask+0x1e8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	639a      	str	r2, [r3, #56]	@ 0x38
		  		  RobotTurn(&targetAngle);
 8004c56:	4824      	ldr	r0, [pc, #144]	@ (8004ce8 <runBLTask+0x1d0>)
 8004c58:	f7fe fce2 	bl	8003620 <RobotTurn>
//		  		  osDelay(100);
//		  		  targetDist = 4;
//		  		  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
		  		  osDelay(10);
 8004c5c:	200a      	movs	r0, #10
 8004c5e:	f006 fc9d 	bl	800b59c <osDelay>


		  clickOnce = 0;
 8004c62:	4b28      	ldr	r3, [pc, #160]	@ (8004d04 <runBLTask+0x1ec>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8004c68:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce0 <runBLTask+0x1c8>)
 8004c6a:	781a      	ldrb	r2, [r3, #0]
 8004c6c:	4b26      	ldr	r3, [pc, #152]	@ (8004d08 <runBLTask+0x1f0>)
 8004c6e:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8004c70:	4b1b      	ldr	r3, [pc, #108]	@ (8004ce0 <runBLTask+0x1c8>)
 8004c72:	220b      	movs	r2, #11
 8004c74:	701a      	strb	r2, [r3, #0]
		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8004c76:	4b25      	ldr	r3, [pc, #148]	@ (8004d0c <runBLTask+0x1f4>)
 8004c78:	781a      	ldrb	r2, [r3, #0]
 8004c7a:	4b24      	ldr	r3, [pc, #144]	@ (8004d0c <runBLTask+0x1f4>)
 8004c7c:	785b      	ldrb	r3, [r3, #1]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d112      	bne.n	8004ca8 <runBLTask+0x190>
				__CLEAR_CURCMD(curCmd);
 8004c82:	4b18      	ldr	r3, [pc, #96]	@ (8004ce4 <runBLTask+0x1cc>)
 8004c84:	2264      	movs	r2, #100	@ 0x64
 8004c86:	701a      	strb	r2, [r3, #0]
 8004c88:	4b16      	ldr	r3, [pc, #88]	@ (8004ce4 <runBLTask+0x1cc>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8004c8e:	4a20      	ldr	r2, [pc, #128]	@ (8004d10 <runBLTask+0x1f8>)
 8004c90:	210f      	movs	r1, #15
 8004c92:	4820      	ldr	r0, [pc, #128]	@ (8004d14 <runBLTask+0x1fc>)
 8004c94:	f009 ff42 	bl	800eb1c <sniprintf>
 8004c98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c9c:	2206      	movs	r2, #6
 8004c9e:	491e      	ldr	r1, [pc, #120]	@ (8004d18 <runBLTask+0x200>)
 8004ca0:	481e      	ldr	r0, [pc, #120]	@ (8004d1c <runBLTask+0x204>)
 8004ca2:	f005 fb65 	bl	800a370 <HAL_UART_Transmit>
 8004ca6:	e73b      	b.n	8004b20 <runBLTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004ca8:	4b18      	ldr	r3, [pc, #96]	@ (8004d0c <runBLTask+0x1f4>)
 8004caa:	785b      	ldrb	r3, [r3, #1]
 8004cac:	4a0d      	ldr	r2, [pc, #52]	@ (8004ce4 <runBLTask+0x1cc>)
 8004cae:	4917      	ldr	r1, [pc, #92]	@ (8004d0c <runBLTask+0x1f4>)
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	4b14      	ldr	r3, [pc, #80]	@ (8004d0c <runBLTask+0x1f4>)
 8004cba:	785b      	ldrb	r3, [r3, #1]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	4a13      	ldr	r2, [pc, #76]	@ (8004d0c <runBLTask+0x1f4>)
 8004cc0:	7892      	ldrb	r2, [r2, #2]
 8004cc2:	fb93 f1f2 	sdiv	r1, r3, r2
 8004cc6:	fb01 f202 	mul.w	r2, r1, r2
 8004cca:	1a9b      	subs	r3, r3, r2
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	4b0f      	ldr	r3, [pc, #60]	@ (8004d0c <runBLTask+0x1f4>)
 8004cd0:	705a      	strb	r2, [r3, #1]
 8004cd2:	4a13      	ldr	r2, [pc, #76]	@ (8004d20 <runBLTask+0x208>)
 8004cd4:	210f      	movs	r1, #15
 8004cd6:	480f      	ldr	r0, [pc, #60]	@ (8004d14 <runBLTask+0x1fc>)
 8004cd8:	f009 ff20 	bl	800eb1c <sniprintf>
	  if (curTask != TASK_BL) osDelay(1000);
 8004cdc:	e720      	b.n	8004b20 <runBLTask+0x8>
 8004cde:	bf00      	nop
 8004ce0:	20000134 	.word	0x20000134
 8004ce4:	20000694 	.word	0x20000694
 8004ce8:	200006ac 	.word	0x200006ac
 8004cec:	42540000 	.word	0x42540000
 8004cf0:	00000000 	.word	0x00000000
 8004cf4:	42e60000 	.word	0x42e60000
 8004cf8:	20000420 	.word	0x20000420
 8004cfc:	40020000 	.word	0x40020000
 8004d00:	20000588 	.word	0x20000588
 8004d04:	2000074c 	.word	0x2000074c
 8004d08:	20000135 	.word	0x20000135
 8004d0c:	20000660 	.word	0x20000660
 8004d10:	08010ea4 	.word	0x08010ea4
 8004d14:	20000698 	.word	0x20000698
 8004d18:	08010eac 	.word	0x08010eac
 8004d1c:	200005d0 	.word	0x200005d0
 8004d20:	08010eb4 	.word	0x08010eb4

08004d24 <runBRTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBRTask */
void runBRTask(void *argument)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b088      	sub	sp, #32
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBRTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_BR) osDelay(1000);
 8004d2c:	4b6b      	ldr	r3, [pc, #428]	@ (8004edc <runBRTask+0x1b8>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b05      	cmp	r3, #5
 8004d32:	d004      	beq.n	8004d3e <runBRTask+0x1a>
 8004d34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004d38:	f006 fc30 	bl	800b59c <osDelay>
 8004d3c:	e7f6      	b.n	8004d2c <runBRTask+0x8>
	  else {
		  //osDelay(3000); // video demo only
		  targetAngle = curCmd.val;
 8004d3e:	4b68      	ldr	r3, [pc, #416]	@ (8004ee0 <runBRTask+0x1bc>)
 8004d40:	885b      	ldrh	r3, [r3, #2]
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4a:	4b66      	ldr	r3, [pc, #408]	@ (8004ee4 <runBRTask+0x1c0>)
 8004d4c:	edc3 7a00 	vstr	s15, [r3]
		  		  if (targetAngle > 2){
 8004d50:	4b64      	ldr	r3, [pc, #400]	@ (8004ee4 <runBRTask+0x1c0>)
 8004d52:	edd3 7a00 	vldr	s15, [r3]
 8004d56:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d62:	dd09      	ble.n	8004d78 <runBRTask+0x54>
		  			  targetAngle -=  2;
 8004d64:	4b5f      	ldr	r3, [pc, #380]	@ (8004ee4 <runBRTask+0x1c0>)
 8004d66:	edd3 7a00 	vldr	s15, [r3]
 8004d6a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004d6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d72:	4b5c      	ldr	r3, [pc, #368]	@ (8004ee4 <runBRTask+0x1c0>)
 8004d74:	edc3 7a00 	vstr	s15, [r3]
		  		  		  }
		  		  		  uint16_t leftDuty = 2300;
 8004d78:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 8004d7c:	83fb      	strh	r3, [r7, #30]
		  		  		  uint16_t rightDuty = 1050;
 8004d7e:	f240 431a 	movw	r3, #1050	@ 0x41a
 8004d82:	83bb      	strh	r3, [r7, #28]
		  		  		  float servoTurnVal = 300;
 8004d84:	4b58      	ldr	r3, [pc, #352]	@ (8004ee8 <runBRTask+0x1c4>)
 8004d86:	61bb      	str	r3, [r7, #24]
		  //		  		{1500, 1500, 51, -87.5, DIR_BACKWARD}, // BL30
		  //		  			{2000, 0, 115, 90.5, DIR_BACKWARD}, // BR30
		  		  		              // Corrected type declaration for config
		  		  		  CmdConfig config = {leftDuty, rightDuty, servoTurnVal, targetAngle, DIR_BACKWARD};
 8004d88:	8bfb      	ldrh	r3, [r7, #30]
 8004d8a:	813b      	strh	r3, [r7, #8]
 8004d8c:	8bbb      	ldrh	r3, [r7, #28]
 8004d8e:	817b      	strh	r3, [r7, #10]
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	4b53      	ldr	r3, [pc, #332]	@ (8004ee4 <runBRTask+0x1c0>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	753b      	strb	r3, [r7, #20]

		  		  		              // Apply the configuration to the motors and steering
		  		  		  __SET_CMD_CONFIG(config, &htim8, &htim1, targetAngle);
 8004d9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004da2:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8004eec <runBRTask+0x1c8>
 8004da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dae:	dd01      	ble.n	8004db4 <runBRTask+0x90>
 8004db0:	2373      	movs	r3, #115	@ 0x73
 8004db2:	e010      	b.n	8004dd6 <runBRTask+0xb2>
 8004db4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004db8:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8004dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc4:	d501      	bpl.n	8004dca <runBRTask+0xa6>
 8004dc6:	2314      	movs	r3, #20
 8004dc8:	e005      	b.n	8004dd6 <runBRTask+0xb2>
 8004dca:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dd2:	ee17 3a90 	vmov	r3, s15
 8004dd6:	4a46      	ldr	r2, [pc, #280]	@ (8004ef0 <runBRTask+0x1cc>)
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ddc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004de0:	f001 f8e0 	bl	8005fa4 <HAL_Delay>
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	4a3f      	ldr	r2, [pc, #252]	@ (8004ee4 <runBRTask+0x1c0>)
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	7d3b      	ldrb	r3, [r7, #20]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	bf0c      	ite	eq
 8004df0:	2301      	moveq	r3, #1
 8004df2:	2300      	movne	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	461a      	mov	r2, r3
 8004df8:	2104      	movs	r1, #4
 8004dfa:	483e      	ldr	r0, [pc, #248]	@ (8004ef4 <runBRTask+0x1d0>)
 8004dfc:	f002 f836 	bl	8006e6c <HAL_GPIO_WritePin>
 8004e00:	7d3b      	ldrb	r3, [r7, #20]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	bf14      	ite	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	2300      	moveq	r3, #0
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	2108      	movs	r1, #8
 8004e10:	4838      	ldr	r0, [pc, #224]	@ (8004ef4 <runBRTask+0x1d0>)
 8004e12:	f002 f82b 	bl	8006e6c <HAL_GPIO_WritePin>
 8004e16:	7d3b      	ldrb	r3, [r7, #20]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	bf0c      	ite	eq
 8004e1c:	2301      	moveq	r3, #1
 8004e1e:	2300      	movne	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	461a      	mov	r2, r3
 8004e24:	2120      	movs	r1, #32
 8004e26:	4833      	ldr	r0, [pc, #204]	@ (8004ef4 <runBRTask+0x1d0>)
 8004e28:	f002 f820 	bl	8006e6c <HAL_GPIO_WritePin>
 8004e2c:	7d3b      	ldrb	r3, [r7, #20]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	bf14      	ite	ne
 8004e32:	2301      	movne	r3, #1
 8004e34:	2300      	moveq	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	2110      	movs	r1, #16
 8004e3c:	482d      	ldr	r0, [pc, #180]	@ (8004ef4 <runBRTask+0x1d0>)
 8004e3e:	f002 f815 	bl	8006e6c <HAL_GPIO_WritePin>
 8004e42:	893a      	ldrh	r2, [r7, #8]
 8004e44:	4b2c      	ldr	r3, [pc, #176]	@ (8004ef8 <runBRTask+0x1d4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e4a:	897a      	ldrh	r2, [r7, #10]
 8004e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ef8 <runBRTask+0x1d4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	639a      	str	r2, [r3, #56]	@ 0x38
		  		  		  RobotTurn(&targetAngle);
 8004e52:	4824      	ldr	r0, [pc, #144]	@ (8004ee4 <runBRTask+0x1c0>)
 8004e54:	f7fe fbe4 	bl	8003620 <RobotTurn>
//		  		  		  osDelay(100);
//		  		  		  targetDist = 4;
//		  		  		  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
		  		  		  osDelay(10);
 8004e58:	200a      	movs	r0, #10
 8004e5a:	f006 fb9f 	bl	800b59c <osDelay>


		  clickOnce = 0;
 8004e5e:	4b27      	ldr	r3, [pc, #156]	@ (8004efc <runBRTask+0x1d8>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8004e64:	4b1d      	ldr	r3, [pc, #116]	@ (8004edc <runBRTask+0x1b8>)
 8004e66:	781a      	ldrb	r2, [r3, #0]
 8004e68:	4b25      	ldr	r3, [pc, #148]	@ (8004f00 <runBRTask+0x1dc>)
 8004e6a:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8004e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004edc <runBRTask+0x1b8>)
 8004e6e:	220b      	movs	r2, #11
 8004e70:	701a      	strb	r2, [r3, #0]
		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8004e72:	4b24      	ldr	r3, [pc, #144]	@ (8004f04 <runBRTask+0x1e0>)
 8004e74:	781a      	ldrb	r2, [r3, #0]
 8004e76:	4b23      	ldr	r3, [pc, #140]	@ (8004f04 <runBRTask+0x1e0>)
 8004e78:	785b      	ldrb	r3, [r3, #1]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d112      	bne.n	8004ea4 <runBRTask+0x180>
				__CLEAR_CURCMD(curCmd);
 8004e7e:	4b18      	ldr	r3, [pc, #96]	@ (8004ee0 <runBRTask+0x1bc>)
 8004e80:	2264      	movs	r2, #100	@ 0x64
 8004e82:	701a      	strb	r2, [r3, #0]
 8004e84:	4b16      	ldr	r3, [pc, #88]	@ (8004ee0 <runBRTask+0x1bc>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8004e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8004f08 <runBRTask+0x1e4>)
 8004e8c:	210f      	movs	r1, #15
 8004e8e:	481f      	ldr	r0, [pc, #124]	@ (8004f0c <runBRTask+0x1e8>)
 8004e90:	f009 fe44 	bl	800eb1c <sniprintf>
 8004e94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e98:	2206      	movs	r2, #6
 8004e9a:	491d      	ldr	r1, [pc, #116]	@ (8004f10 <runBRTask+0x1ec>)
 8004e9c:	481d      	ldr	r0, [pc, #116]	@ (8004f14 <runBRTask+0x1f0>)
 8004e9e:	f005 fa67 	bl	800a370 <HAL_UART_Transmit>
 8004ea2:	e743      	b.n	8004d2c <runBRTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004ea4:	4b17      	ldr	r3, [pc, #92]	@ (8004f04 <runBRTask+0x1e0>)
 8004ea6:	785b      	ldrb	r3, [r3, #1]
 8004ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8004ee0 <runBRTask+0x1bc>)
 8004eaa:	4916      	ldr	r1, [pc, #88]	@ (8004f04 <runBRTask+0x1e0>)
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	440b      	add	r3, r1
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	4b13      	ldr	r3, [pc, #76]	@ (8004f04 <runBRTask+0x1e0>)
 8004eb6:	785b      	ldrb	r3, [r3, #1]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	4a12      	ldr	r2, [pc, #72]	@ (8004f04 <runBRTask+0x1e0>)
 8004ebc:	7892      	ldrb	r2, [r2, #2]
 8004ebe:	fb93 f1f2 	sdiv	r1, r3, r2
 8004ec2:	fb01 f202 	mul.w	r2, r1, r2
 8004ec6:	1a9b      	subs	r3, r3, r2
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	4b0e      	ldr	r3, [pc, #56]	@ (8004f04 <runBRTask+0x1e0>)
 8004ecc:	705a      	strb	r2, [r3, #1]
 8004ece:	4a12      	ldr	r2, [pc, #72]	@ (8004f18 <runBRTask+0x1f4>)
 8004ed0:	210f      	movs	r1, #15
 8004ed2:	480e      	ldr	r0, [pc, #56]	@ (8004f0c <runBRTask+0x1e8>)
 8004ed4:	f009 fe22 	bl	800eb1c <sniprintf>
	  if (curTask != TASK_BR) osDelay(1000);
 8004ed8:	e728      	b.n	8004d2c <runBRTask+0x8>
 8004eda:	bf00      	nop
 8004edc:	20000134 	.word	0x20000134
 8004ee0:	20000694 	.word	0x20000694
 8004ee4:	200006ac 	.word	0x200006ac
 8004ee8:	43960000 	.word	0x43960000
 8004eec:	42e60000 	.word	0x42e60000
 8004ef0:	20000420 	.word	0x20000420
 8004ef4:	40020000 	.word	0x40020000
 8004ef8:	20000588 	.word	0x20000588
 8004efc:	2000074c 	.word	0x2000074c
 8004f00:	20000135 	.word	0x20000135
 8004f04:	20000660 	.word	0x20000660
 8004f08:	08010ea4 	.word	0x08010ea4
 8004f0c:	20000698 	.word	0x20000698
 8004f10:	08010eac 	.word	0x08010eac
 8004f14:	200005d0 	.word	0x200005d0
 8004f18:	08010eb4 	.word	0x08010eb4

08004f1c <runFastestPathTask_V2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFastestPathTask_V2 */
void runFastestPathTask_V2(void *argument)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFastestPathTask_V2 */
    for(;;) {
//    	RobotMoveUntilIROvershoot();
        if (curTask != TASK_FASTESTPATH_V2) {
 8004f24:	4b12      	ldr	r3, [pc, #72]	@ (8004f70 <runFastestPathTask_V2+0x54>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b09      	cmp	r3, #9
 8004f2a:	d004      	beq.n	8004f36 <runFastestPathTask_V2+0x1a>
            osDelay(1000);
 8004f2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f30:	f006 fb34 	bl	800b59c <osDelay>
 8004f34:	e7f6      	b.n	8004f24 <runFastestPathTask_V2+0x8>
        } else {
            // Call only the RobotMoveUntilIROvershoot function
            RobotMoveUntilIRHit();
 8004f36:	f7fe fdbb 	bl	8003ab0 <RobotMoveUntilIRHit>

            // After finishing the task, clear the task and acknowledge
            prevTask = curTask;
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f70 <runFastestPathTask_V2+0x54>)
 8004f3c:	781a      	ldrb	r2, [r3, #0]
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f74 <runFastestPathTask_V2+0x58>)
 8004f40:	701a      	strb	r2, [r3, #0]
            curTask = TASK_NONE;
 8004f42:	4b0b      	ldr	r3, [pc, #44]	@ (8004f70 <runFastestPathTask_V2+0x54>)
 8004f44:	220b      	movs	r2, #11
 8004f46:	701a      	strb	r2, [r3, #0]
            __CLEAR_CURCMD(curCmd);
 8004f48:	4b0b      	ldr	r3, [pc, #44]	@ (8004f78 <runFastestPathTask_V2+0x5c>)
 8004f4a:	2264      	movs	r2, #100	@ 0x64
 8004f4c:	701a      	strb	r2, [r3, #0]
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f78 <runFastestPathTask_V2+0x5c>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	805a      	strh	r2, [r3, #2]
            __ACK_TASK_DONE(&huart3, rxMsg);
 8004f54:	4a09      	ldr	r2, [pc, #36]	@ (8004f7c <runFastestPathTask_V2+0x60>)
 8004f56:	210f      	movs	r1, #15
 8004f58:	4809      	ldr	r0, [pc, #36]	@ (8004f80 <runFastestPathTask_V2+0x64>)
 8004f5a:	f009 fddf 	bl	800eb1c <sniprintf>
 8004f5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f62:	2206      	movs	r2, #6
 8004f64:	4907      	ldr	r1, [pc, #28]	@ (8004f84 <runFastestPathTask_V2+0x68>)
 8004f66:	4808      	ldr	r0, [pc, #32]	@ (8004f88 <runFastestPathTask_V2+0x6c>)
 8004f68:	f005 fa02 	bl	800a370 <HAL_UART_Transmit>
        if (curTask != TASK_FASTESTPATH_V2) {
 8004f6c:	e7da      	b.n	8004f24 <runFastestPathTask_V2+0x8>
 8004f6e:	bf00      	nop
 8004f70:	20000134 	.word	0x20000134
 8004f74:	20000135 	.word	0x20000135
 8004f78:	20000694 	.word	0x20000694
 8004f7c:	08010ea4 	.word	0x08010ea4
 8004f80:	20000698 	.word	0x20000698
 8004f84:	08010eac 	.word	0x08010eac
 8004f88:	200005d0 	.word	0x200005d0

08004f8c <HCSR04_Read>:
    }
  /* USER CODE END runFastestPathTask_V2 */
}

void HCSR04_Read(void) //Call when u want to get reading from US
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_SET);
 8004f90:	2201      	movs	r2, #1
 8004f92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004f96:	480b      	ldr	r0, [pc, #44]	@ (8004fc4 <HCSR04_Read+0x38>)
 8004f98:	f001 ff68 	bl	8006e6c <HAL_GPIO_WritePin>
	delay_us(10);
 8004f9c:	200a      	movs	r0, #10
 8004f9e:	f000 f815 	bl	8004fcc <delay_us>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004fa8:	4806      	ldr	r0, [pc, #24]	@ (8004fc4 <HCSR04_Read+0x38>)
 8004faa:	f001 ff5f 	bl	8006e6c <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8004fae:	4b06      	ldr	r3, [pc, #24]	@ (8004fc8 <HCSR04_Read+0x3c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	4b04      	ldr	r3, [pc, #16]	@ (8004fc8 <HCSR04_Read+0x3c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0202 	orr.w	r2, r2, #2
 8004fbc:	60da      	str	r2, [r3, #12]
}
 8004fbe:	bf00      	nop
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40020c00 	.word	0x40020c00
 8004fc8:	200004f8 	.word	0x200004f8

08004fcc <delay_us>:
void delay_us(uint16_t us)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 8004fd6:	4b09      	ldr	r3, [pc, #36]	@ (8004ffc <delay_us+0x30>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 8004fde:	bf00      	nop
 8004fe0:	4b06      	ldr	r3, [pc, #24]	@ (8004ffc <delay_us+0x30>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d3f9      	bcc.n	8004fe0 <delay_us+0x14>
}
 8004fec:	bf00      	nop
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	200004f8 	.word	0x200004f8

08005000 <HAL_TIM_IC_CaptureCallback>:
//#define ECHO_PIN PE9
//#define ECHO_PORT PEB
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	7f1b      	ldrb	r3, [r3, #28]
 800500c:	2b01      	cmp	r3, #1
 800500e:	f040 8083 	bne.w	8005118 <HAL_TIM_IC_CaptureCallback+0x118>
		if (Is_First_Captured == 0) {
 8005012:	4b45      	ldr	r3, [pc, #276]	@ (8005128 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d11a      	bne.n	8005050 <HAL_TIM_IC_CaptureCallback+0x50>
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800501a:	2100      	movs	r1, #0
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f004 fbc3 	bl	80097a8 <HAL_TIM_ReadCapturedValue>
 8005022:	4603      	mov	r3, r0
 8005024:	4a41      	ldr	r2, [pc, #260]	@ (800512c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8005026:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;
 8005028:	4b3f      	ldr	r3, [pc, #252]	@ (8005128 <HAL_TIM_IC_CaptureCallback+0x128>)
 800502a:	2201      	movs	r2, #1
 800502c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6a1a      	ldr	r2, [r3, #32]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 020a 	bic.w	r2, r2, #10
 800503c:	621a      	str	r2, [r3, #32]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6a1a      	ldr	r2, [r3, #32]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0202 	orr.w	r2, r2, #2
 800504c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 800504e:	e063      	b.n	8005118 <HAL_TIM_IC_CaptureCallback+0x118>
		} else if (Is_First_Captured == 1) {
 8005050:	4b35      	ldr	r3, [pc, #212]	@ (8005128 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d15f      	bne.n	8005118 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8005058:	2100      	movs	r1, #0
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f004 fba4 	bl	80097a8 <HAL_TIM_ReadCapturedValue>
 8005060:	4603      	mov	r3, r0
 8005062:	4a33      	ldr	r2, [pc, #204]	@ (8005130 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005064:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2200      	movs	r2, #0
 800506c:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2 > IC_Val1) {
 800506e:	4b30      	ldr	r3, [pc, #192]	@ (8005130 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	4b2e      	ldr	r3, [pc, #184]	@ (800512c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d907      	bls.n	800508a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 800507a:	4b2d      	ldr	r3, [pc, #180]	@ (8005130 <HAL_TIM_IC_CaptureCallback+0x130>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b2b      	ldr	r3, [pc, #172]	@ (800512c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	4a2b      	ldr	r2, [pc, #172]	@ (8005134 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	e00f      	b.n	80050aa <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 800508a:	4b28      	ldr	r3, [pc, #160]	@ (800512c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4b28      	ldr	r3, [pc, #160]	@ (8005130 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d909      	bls.n	80050aa <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (65535 - IC_Val1) + IC_Val2;
 8005096:	4b26      	ldr	r3, [pc, #152]	@ (8005130 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4b24      	ldr	r3, [pc, #144]	@ (800512c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80050a4:	33ff      	adds	r3, #255	@ 0xff
 80050a6:	4a23      	ldr	r2, [pc, #140]	@ (8005134 <HAL_TIM_IC_CaptureCallback+0x134>)
 80050a8:	6013      	str	r3, [r2, #0]
			Distance = Difference * .0343 / 2;
 80050aa:	4b22      	ldr	r3, [pc, #136]	@ (8005134 <HAL_TIM_IC_CaptureCallback+0x134>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fb fa28 	bl	8000504 <__aeabi_ui2d>
 80050b4:	a31a      	add	r3, pc, #104	@ (adr r3, 8005120 <HAL_TIM_IC_CaptureCallback+0x120>)
 80050b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ba:	f7fb fa9d 	bl	80005f8 <__aeabi_dmul>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	4610      	mov	r0, r2
 80050c4:	4619      	mov	r1, r3
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80050ce:	f7fb fbbd 	bl	800084c <__aeabi_ddiv>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4610      	mov	r0, r2
 80050d8:	4619      	mov	r1, r3
 80050da:	f7fb fd65 	bl	8000ba8 <__aeabi_d2uiz>
 80050de:	4603      	mov	r3, r0
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	4b15      	ldr	r3, [pc, #84]	@ (8005138 <HAL_TIM_IC_CaptureCallback+0x138>)
 80050e4:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0;
 80050e6:	4b10      	ldr	r3, [pc, #64]	@ (8005128 <HAL_TIM_IC_CaptureCallback+0x128>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6a1a      	ldr	r2, [r3, #32]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 020a 	bic.w	r2, r2, #10
 80050fa:	621a      	str	r2, [r3, #32]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6a12      	ldr	r2, [r2, #32]
 8005106:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8005108:	4b0c      	ldr	r3, [pc, #48]	@ (800513c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	4b0b      	ldr	r3, [pc, #44]	@ (800513c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0202 	bic.w	r2, r2, #2
 8005116:	60da      	str	r2, [r3, #12]
}
 8005118:	bf00      	nop
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	04816f00 	.word	0x04816f00
 8005124:	3fa18fc5 	.word	0x3fa18fc5
 8005128:	2000072c 	.word	0x2000072c
 800512c:	20000724 	.word	0x20000724
 8005130:	20000728 	.word	0x20000728
 8005134:	20000730 	.word	0x20000730
 8005138:	20000734 	.word	0x20000734
 800513c:	200004f8 	.word	0x200004f8

08005140 <sensorTask>:
void sensorTask(void *argument) {
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUltrasonicTask */
	uint8_t usVal[20] = { 0 };
 8005148:	2300      	movs	r3, #0
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	f107 0310 	add.w	r3, r7, #16
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	605a      	str	r2, [r3, #4]
 8005156:	609a      	str	r2, [r3, #8]
 8005158:	60da      	str	r2, [r3, #12]
		HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);  // HC-SR04 Sensor
 800515a:	2100      	movs	r1, #0
 800515c:	4810      	ldr	r0, [pc, #64]	@ (80051a0 <sensorTask+0x60>)
 800515e:	f003 fd03 	bl	8008b68 <HAL_TIM_IC_Start_IT>
		/* Infinite loop */
		for (;;) {
			HCSR04_Read();
 8005162:	f7ff ff13 	bl	8004f8c <HCSR04_Read>
			sprintf(usVal, "Distance: %d \0", (int) Distance);
 8005166:	4b0f      	ldr	r3, [pc, #60]	@ (80051a4 <sensorTask+0x64>)
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	f107 030c 	add.w	r3, r7, #12
 8005170:	490d      	ldr	r1, [pc, #52]	@ (80051a8 <sensorTask+0x68>)
 8005172:	4618      	mov	r0, r3
 8005174:	f009 fd06 	bl	800eb84 <siprintf>
			//OLED_ShowString(0, 20, usVal);

			if (Distance <= usThreshold && usFlag == 1) {
 8005178:	4b0a      	ldr	r3, [pc, #40]	@ (80051a4 <sensorTask+0x64>)
 800517a:	881a      	ldrh	r2, [r3, #0]
 800517c:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <sensorTask+0x6c>)
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d808      	bhi.n	8005196 <sensorTask+0x56>
 8005184:	4b0a      	ldr	r3, [pc, #40]	@ (80051b0 <sensorTask+0x70>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d104      	bne.n	8005196 <sensorTask+0x56>
				usFlag = 0;
 800518c:	4b08      	ldr	r3, [pc, #32]	@ (80051b0 <sensorTask+0x70>)
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
				//moveCarStop();
				motorStop();
 8005192:	f000 f833 	bl	80051fc <motorStop>
			}

			osDelay(100);
 8005196:	2064      	movs	r0, #100	@ 0x64
 8005198:	f006 fa00 	bl	800b59c <osDelay>
			HCSR04_Read();
 800519c:	e7e1      	b.n	8005162 <sensorTask+0x22>
 800519e:	bf00      	nop
 80051a0:	200004f8 	.word	0x200004f8
 80051a4:	20000734 	.word	0x20000734
 80051a8:	08010ee0 	.word	0x08010ee0
 80051ac:	2000013c 	.word	0x2000013c
 80051b0:	20000738 	.word	0x20000738

080051b4 <setLeftPWM>:
		}
		/* USER CODE END StartUltrasonicTask */

}
void setLeftPWM(uint16_t dutyCycle) {
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, dutyCycle);
 80051be:	4b05      	ldr	r3, [pc, #20]	@ (80051d4 <setLeftPWM+0x20>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	88fa      	ldrh	r2, [r7, #6]
 80051c4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000588 	.word	0x20000588

080051d8 <setRightPWM>:

void setRightPWM(uint16_t dutyCycle) {
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, dutyCycle);
 80051e2:	4b05      	ldr	r3, [pc, #20]	@ (80051f8 <setRightPWM+0x20>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	88fa      	ldrh	r2, [r7, #6]
 80051e8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20000588 	.word	0x20000588

080051fc <motorStop>:

void motorStop() {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
	// ------- left motor
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8005200:	2200      	movs	r2, #0
 8005202:	2120      	movs	r1, #32
 8005204:	480c      	ldr	r0, [pc, #48]	@ (8005238 <motorStop+0x3c>)
 8005206:	f001 fe31 	bl	8006e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800520a:	2200      	movs	r2, #0
 800520c:	2110      	movs	r1, #16
 800520e:	480a      	ldr	r0, [pc, #40]	@ (8005238 <motorStop+0x3c>)
 8005210:	f001 fe2c 	bl	8006e6c <HAL_GPIO_WritePin>
	// ------- right motor
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005214:	2200      	movs	r2, #0
 8005216:	2104      	movs	r1, #4
 8005218:	4807      	ldr	r0, [pc, #28]	@ (8005238 <motorStop+0x3c>)
 800521a:	f001 fe27 	bl	8006e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800521e:	2200      	movs	r2, #0
 8005220:	2108      	movs	r1, #8
 8005222:	4805      	ldr	r0, [pc, #20]	@ (8005238 <motorStop+0x3c>)
 8005224:	f001 fe22 	bl	8006e6c <HAL_GPIO_WritePin>
	setLeftPWM(0);
 8005228:	2000      	movs	r0, #0
 800522a:	f7ff ffc3 	bl	80051b4 <setLeftPWM>
	setRightPWM(0);
 800522e:	2000      	movs	r0, #0
 8005230:	f7ff ffd2 	bl	80051d8 <setRightPWM>
}
 8005234:	bf00      	nop
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40020000 	.word	0x40020000
 800523c:	00000000 	.word	0x00000000

08005240 <runBatteryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBatteryTask */
void runBatteryTask(void *argument)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBatteryTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start(&hadc2);
 8005248:	4819      	ldr	r0, [pc, #100]	@ (80052b0 <runBatteryTask+0x70>)
 800524a:	f000 ff13 	bl	8006074 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2,20);
 800524e:	2114      	movs	r1, #20
 8005250:	4817      	ldr	r0, [pc, #92]	@ (80052b0 <runBatteryTask+0x70>)
 8005252:	f001 f814 	bl	800627e <HAL_ADC_PollForConversion>
	batteryVal = HAL_ADC_GetValue(&hadc2) / 1421.752066 * 100;
 8005256:	4816      	ldr	r0, [pc, #88]	@ (80052b0 <runBatteryTask+0x70>)
 8005258:	f001 f89c 	bl	8006394 <HAL_ADC_GetValue>
 800525c:	4603      	mov	r3, r0
 800525e:	4618      	mov	r0, r3
 8005260:	f7fb f950 	bl	8000504 <__aeabi_ui2d>
 8005264:	a310      	add	r3, pc, #64	@ (adr r3, 80052a8 <runBatteryTask+0x68>)
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	f7fb faef 	bl	800084c <__aeabi_ddiv>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4610      	mov	r0, r2
 8005274:	4619      	mov	r1, r3
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	4b0e      	ldr	r3, [pc, #56]	@ (80052b4 <runBatteryTask+0x74>)
 800527c:	f7fb f9bc 	bl	80005f8 <__aeabi_dmul>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4610      	mov	r0, r2
 8005286:	4619      	mov	r1, r3
 8005288:	f7fb fcae 	bl	8000be8 <__aeabi_d2f>
 800528c:	4603      	mov	r3, r0
 800528e:	4a0a      	ldr	r2, [pc, #40]	@ (80052b8 <runBatteryTask+0x78>)
 8005290:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc2);
 8005292:	4807      	ldr	r0, [pc, #28]	@ (80052b0 <runBatteryTask+0x70>)
 8005294:	f000 ffc0 	bl	8006218 <HAL_ADC_Stop>
    osDelay(30000); // check battery level every 30 seconds
 8005298:	f247 5030 	movw	r0, #30000	@ 0x7530
 800529c:	f006 f97e 	bl	800b59c <osDelay>
	HAL_ADC_Start(&hadc2);
 80052a0:	bf00      	nop
 80052a2:	e7d1      	b.n	8005248 <runBatteryTask+0x8>
 80052a4:	f3af 8000 	nop.w
 80052a8:	1d96e9bc 	.word	0x1d96e9bc
 80052ac:	40963702 	.word	0x40963702
 80052b0:	20000384 	.word	0x20000384
 80052b4:	40590000 	.word	0x40590000
 80052b8:	20000720 	.word	0x20000720

080052bc <runMoveDistObsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runMoveDistObsTask */
void runMoveDistObsTask(void *argument)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runMoveDistObsTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_MOVE_OBS) osDelay(1000);
 80052c4:	4b2d      	ldr	r3, [pc, #180]	@ (800537c <runMoveDistObsTask+0xc0>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b07      	cmp	r3, #7
 80052ca:	d004      	beq.n	80052d6 <runMoveDistObsTask+0x1a>
 80052cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80052d0:	f006 f964 	bl	800b59c <osDelay>
 80052d4:	e7f6      	b.n	80052c4 <runMoveDistObsTask+0x8>
	  else {
		  targetDist = (float) curCmd.val;
 80052d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005380 <runMoveDistObsTask+0xc4>)
 80052d8:	885b      	ldrh	r3, [r3, #2]
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e2:	4b28      	ldr	r3, [pc, #160]	@ (8005384 <runMoveDistObsTask+0xc8>)
 80052e4:	edc3 7a00 	vstr	s15, [r3]
		  RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 80052e8:	2102      	movs	r1, #2
 80052ea:	4826      	ldr	r0, [pc, #152]	@ (8005384 <runMoveDistObsTask+0xc8>)
 80052ec:	f7fd fea4 	bl	8003038 <RobotMoveDistObstacle>

		  __ON_TASK_END(&htim8, prevTask, curTask);
 80052f0:	4b25      	ldr	r3, [pc, #148]	@ (8005388 <runMoveDistObsTask+0xcc>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2200      	movs	r2, #0
 80052f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80052f8:	4b23      	ldr	r3, [pc, #140]	@ (8005388 <runMoveDistObsTask+0xcc>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2200      	movs	r2, #0
 80052fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8005300:	4b1e      	ldr	r3, [pc, #120]	@ (800537c <runMoveDistObsTask+0xc0>)
 8005302:	781a      	ldrb	r2, [r3, #0]
 8005304:	4b21      	ldr	r3, [pc, #132]	@ (800538c <runMoveDistObsTask+0xd0>)
 8005306:	701a      	strb	r2, [r3, #0]
 8005308:	4b1c      	ldr	r3, [pc, #112]	@ (800537c <runMoveDistObsTask+0xc0>)
 800530a:	220b      	movs	r2, #11
 800530c:	701a      	strb	r2, [r3, #0]
		  clickOnce = 0;
 800530e:	4b20      	ldr	r3, [pc, #128]	@ (8005390 <runMoveDistObsTask+0xd4>)
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]

		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8005314:	4b1f      	ldr	r3, [pc, #124]	@ (8005394 <runMoveDistObsTask+0xd8>)
 8005316:	781a      	ldrb	r2, [r3, #0]
 8005318:	4b1e      	ldr	r3, [pc, #120]	@ (8005394 <runMoveDistObsTask+0xd8>)
 800531a:	785b      	ldrb	r3, [r3, #1]
 800531c:	429a      	cmp	r2, r3
 800531e:	d112      	bne.n	8005346 <runMoveDistObsTask+0x8a>
			__CLEAR_CURCMD(curCmd);
 8005320:	4b17      	ldr	r3, [pc, #92]	@ (8005380 <runMoveDistObsTask+0xc4>)
 8005322:	2264      	movs	r2, #100	@ 0x64
 8005324:	701a      	strb	r2, [r3, #0]
 8005326:	4b16      	ldr	r3, [pc, #88]	@ (8005380 <runMoveDistObsTask+0xc4>)
 8005328:	2200      	movs	r2, #0
 800532a:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 800532c:	4a1a      	ldr	r2, [pc, #104]	@ (8005398 <runMoveDistObsTask+0xdc>)
 800532e:	210f      	movs	r1, #15
 8005330:	481a      	ldr	r0, [pc, #104]	@ (800539c <runMoveDistObsTask+0xe0>)
 8005332:	f009 fbf3 	bl	800eb1c <sniprintf>
 8005336:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800533a:	2206      	movs	r2, #6
 800533c:	4918      	ldr	r1, [pc, #96]	@ (80053a0 <runMoveDistObsTask+0xe4>)
 800533e:	4819      	ldr	r0, [pc, #100]	@ (80053a4 <runMoveDistObsTask+0xe8>)
 8005340:	f005 f816 	bl	800a370 <HAL_UART_Transmit>
 8005344:	e7be      	b.n	80052c4 <runMoveDistObsTask+0x8>
		} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005346:	4b13      	ldr	r3, [pc, #76]	@ (8005394 <runMoveDistObsTask+0xd8>)
 8005348:	785b      	ldrb	r3, [r3, #1]
 800534a:	4a0d      	ldr	r2, [pc, #52]	@ (8005380 <runMoveDistObsTask+0xc4>)
 800534c:	4911      	ldr	r1, [pc, #68]	@ (8005394 <runMoveDistObsTask+0xd8>)
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	440b      	add	r3, r1
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	4b0f      	ldr	r3, [pc, #60]	@ (8005394 <runMoveDistObsTask+0xd8>)
 8005358:	785b      	ldrb	r3, [r3, #1]
 800535a:	3301      	adds	r3, #1
 800535c:	4a0d      	ldr	r2, [pc, #52]	@ (8005394 <runMoveDistObsTask+0xd8>)
 800535e:	7892      	ldrb	r2, [r2, #2]
 8005360:	fb93 f1f2 	sdiv	r1, r3, r2
 8005364:	fb01 f202 	mul.w	r2, r1, r2
 8005368:	1a9b      	subs	r3, r3, r2
 800536a:	b2da      	uxtb	r2, r3
 800536c:	4b09      	ldr	r3, [pc, #36]	@ (8005394 <runMoveDistObsTask+0xd8>)
 800536e:	705a      	strb	r2, [r3, #1]
 8005370:	4a0d      	ldr	r2, [pc, #52]	@ (80053a8 <runMoveDistObsTask+0xec>)
 8005372:	210f      	movs	r1, #15
 8005374:	4809      	ldr	r0, [pc, #36]	@ (800539c <runMoveDistObsTask+0xe0>)
 8005376:	f009 fbd1 	bl	800eb1c <sniprintf>
	  if (curTask != TASK_MOVE_OBS) osDelay(1000);
 800537a:	e7a3      	b.n	80052c4 <runMoveDistObsTask+0x8>
 800537c:	20000134 	.word	0x20000134
 8005380:	20000694 	.word	0x20000694
 8005384:	200006c0 	.word	0x200006c0
 8005388:	20000588 	.word	0x20000588
 800538c:	20000135 	.word	0x20000135
 8005390:	2000074c 	.word	0x2000074c
 8005394:	20000660 	.word	0x20000660
 8005398:	08010ea4 	.word	0x08010ea4
 800539c:	20000698 	.word	0x20000698
 80053a0:	08010eac 	.word	0x08010eac
 80053a4:	200005d0 	.word	0x200005d0
 80053a8:	08010eb4 	.word	0x08010eb4

080053ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80053b0:	b672      	cpsid	i
}
 80053b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80053b4:	bf00      	nop
 80053b6:	e7fd      	b.n	80053b4 <Error_Handler+0x8>

080053b8 <OLED_Refresh_Gram>:

#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80053be:	2300      	movs	r3, #0
 80053c0:	71fb      	strb	r3, [r7, #7]
 80053c2:	e026      	b.n	8005412 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 80053c4:	79fb      	ldrb	r3, [r7, #7]
 80053c6:	3b50      	subs	r3, #80	@ 0x50
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2100      	movs	r1, #0
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 f82b 	bl	8005428 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80053d2:	2100      	movs	r1, #0
 80053d4:	2000      	movs	r0, #0
 80053d6:	f000 f827 	bl	8005428 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80053da:	2100      	movs	r1, #0
 80053dc:	2010      	movs	r0, #16
 80053de:	f000 f823 	bl	8005428 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80053e2:	2300      	movs	r3, #0
 80053e4:	71bb      	strb	r3, [r7, #6]
 80053e6:	e00d      	b.n	8005404 <OLED_Refresh_Gram+0x4c>
 80053e8:	79ba      	ldrb	r2, [r7, #6]
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	490d      	ldr	r1, [pc, #52]	@ (8005424 <OLED_Refresh_Gram+0x6c>)
 80053ee:	00d2      	lsls	r2, r2, #3
 80053f0:	440a      	add	r2, r1
 80053f2:	4413      	add	r3, r2
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2101      	movs	r1, #1
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 f815 	bl	8005428 <OLED_WR_Byte>
 80053fe:	79bb      	ldrb	r3, [r7, #6]
 8005400:	3301      	adds	r3, #1
 8005402:	71bb      	strb	r3, [r7, #6]
 8005404:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005408:	2b00      	cmp	r3, #0
 800540a:	daed      	bge.n	80053e8 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	3301      	adds	r3, #1
 8005410:	71fb      	strb	r3, [r7, #7]
 8005412:	79fb      	ldrb	r3, [r7, #7]
 8005414:	2b07      	cmp	r3, #7
 8005416:	d9d5      	bls.n	80053c4 <OLED_Refresh_Gram+0xc>
	}   
}
 8005418:	bf00      	nop
 800541a:	bf00      	nop
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20000754 	.word	0x20000754

08005428 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	460a      	mov	r2, r1
 8005432:	71fb      	strb	r3, [r7, #7]
 8005434:	4613      	mov	r3, r2
 8005436:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8005438:	79bb      	ldrb	r3, [r7, #6]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d006      	beq.n	800544c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800543e:	2201      	movs	r2, #1
 8005440:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005444:	481c      	ldr	r0, [pc, #112]	@ (80054b8 <OLED_WR_Byte+0x90>)
 8005446:	f001 fd11 	bl	8006e6c <HAL_GPIO_WritePin>
 800544a:	e005      	b.n	8005458 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800544c:	2200      	movs	r2, #0
 800544e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005452:	4819      	ldr	r0, [pc, #100]	@ (80054b8 <OLED_WR_Byte+0x90>)
 8005454:	f001 fd0a 	bl	8006e6c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8005458:	2300      	movs	r3, #0
 800545a:	73fb      	strb	r3, [r7, #15]
 800545c:	e01e      	b.n	800549c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800545e:	2200      	movs	r2, #0
 8005460:	2120      	movs	r1, #32
 8005462:	4815      	ldr	r0, [pc, #84]	@ (80054b8 <OLED_WR_Byte+0x90>)
 8005464:	f001 fd02 	bl	8006e6c <HAL_GPIO_WritePin>
		if(dat&0x80)
 8005468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800546c:	2b00      	cmp	r3, #0
 800546e:	da05      	bge.n	800547c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8005470:	2201      	movs	r2, #1
 8005472:	2140      	movs	r1, #64	@ 0x40
 8005474:	4810      	ldr	r0, [pc, #64]	@ (80054b8 <OLED_WR_Byte+0x90>)
 8005476:	f001 fcf9 	bl	8006e6c <HAL_GPIO_WritePin>
 800547a:	e004      	b.n	8005486 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800547c:	2200      	movs	r2, #0
 800547e:	2140      	movs	r1, #64	@ 0x40
 8005480:	480d      	ldr	r0, [pc, #52]	@ (80054b8 <OLED_WR_Byte+0x90>)
 8005482:	f001 fcf3 	bl	8006e6c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8005486:	2201      	movs	r2, #1
 8005488:	2120      	movs	r1, #32
 800548a:	480b      	ldr	r0, [pc, #44]	@ (80054b8 <OLED_WR_Byte+0x90>)
 800548c:	f001 fcee 	bl	8006e6c <HAL_GPIO_WritePin>
		dat<<=1;   
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	3301      	adds	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	2b07      	cmp	r3, #7
 80054a0:	d9dd      	bls.n	800545e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 80054a2:	2201      	movs	r2, #1
 80054a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80054a8:	4803      	ldr	r0, [pc, #12]	@ (80054b8 <OLED_WR_Byte+0x90>)
 80054aa:	f001 fcdf 	bl	8006e6c <HAL_GPIO_WritePin>
} 
 80054ae:	bf00      	nop
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	40021000 	.word	0x40021000

080054bc <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 80054c2:	2300      	movs	r3, #0
 80054c4:	71fb      	strb	r3, [r7, #7]
 80054c6:	e014      	b.n	80054f2 <OLED_Clear+0x36>
 80054c8:	2300      	movs	r3, #0
 80054ca:	71bb      	strb	r3, [r7, #6]
 80054cc:	e00a      	b.n	80054e4 <OLED_Clear+0x28>
 80054ce:	79ba      	ldrb	r2, [r7, #6]
 80054d0:	79fb      	ldrb	r3, [r7, #7]
 80054d2:	490c      	ldr	r1, [pc, #48]	@ (8005504 <OLED_Clear+0x48>)
 80054d4:	00d2      	lsls	r2, r2, #3
 80054d6:	440a      	add	r2, r1
 80054d8:	4413      	add	r3, r2
 80054da:	2200      	movs	r2, #0
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	79bb      	ldrb	r3, [r7, #6]
 80054e0:	3301      	adds	r3, #1
 80054e2:	71bb      	strb	r3, [r7, #6]
 80054e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	daf0      	bge.n	80054ce <OLED_Clear+0x12>
 80054ec:	79fb      	ldrb	r3, [r7, #7]
 80054ee:	3301      	adds	r3, #1
 80054f0:	71fb      	strb	r3, [r7, #7]
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	2b07      	cmp	r3, #7
 80054f6:	d9e7      	bls.n	80054c8 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80054f8:	f7ff ff5e 	bl	80053b8 <OLED_Refresh_Gram>
}
 80054fc:	bf00      	nop
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	20000754 	.word	0x20000754

08005508 <OLED_Init>:
        p++;
    }  
}	 

void OLED_Init(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800550c:	f002 fcec 	bl	8007ee8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8005510:	4b41      	ldr	r3, [pc, #260]	@ (8005618 <OLED_Init+0x110>)
 8005512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005514:	4a40      	ldr	r2, [pc, #256]	@ (8005618 <OLED_Init+0x110>)
 8005516:	f023 0301 	bic.w	r3, r3, #1
 800551a:	6713      	str	r3, [r2, #112]	@ 0x70
 800551c:	4b3e      	ldr	r3, [pc, #248]	@ (8005618 <OLED_Init+0x110>)
 800551e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005520:	4a3d      	ldr	r2, [pc, #244]	@ (8005618 <OLED_Init+0x110>)
 8005522:	f023 0304 	bic.w	r3, r3, #4
 8005526:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8005528:	f002 fcf2 	bl	8007f10 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800552c:	2200      	movs	r2, #0
 800552e:	2180      	movs	r1, #128	@ 0x80
 8005530:	483a      	ldr	r0, [pc, #232]	@ (800561c <OLED_Init+0x114>)
 8005532:	f001 fc9b 	bl	8006e6c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005536:	2064      	movs	r0, #100	@ 0x64
 8005538:	f000 fd34 	bl	8005fa4 <HAL_Delay>
	OLED_RST_Set();
 800553c:	2201      	movs	r2, #1
 800553e:	2180      	movs	r1, #128	@ 0x80
 8005540:	4836      	ldr	r0, [pc, #216]	@ (800561c <OLED_Init+0x114>)
 8005542:	f001 fc93 	bl	8006e6c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8005546:	2100      	movs	r1, #0
 8005548:	20ae      	movs	r0, #174	@ 0xae
 800554a:	f7ff ff6d 	bl	8005428 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800554e:	2100      	movs	r1, #0
 8005550:	20d5      	movs	r0, #213	@ 0xd5
 8005552:	f7ff ff69 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8005556:	2100      	movs	r1, #0
 8005558:	2050      	movs	r0, #80	@ 0x50
 800555a:	f7ff ff65 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800555e:	2100      	movs	r1, #0
 8005560:	20a8      	movs	r0, #168	@ 0xa8
 8005562:	f7ff ff61 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8005566:	2100      	movs	r1, #0
 8005568:	203f      	movs	r0, #63	@ 0x3f
 800556a:	f7ff ff5d 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800556e:	2100      	movs	r1, #0
 8005570:	20d3      	movs	r0, #211	@ 0xd3
 8005572:	f7ff ff59 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8005576:	2100      	movs	r1, #0
 8005578:	2000      	movs	r0, #0
 800557a:	f7ff ff55 	bl	8005428 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800557e:	2100      	movs	r1, #0
 8005580:	2040      	movs	r0, #64	@ 0x40
 8005582:	f7ff ff51 	bl	8005428 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8005586:	2100      	movs	r1, #0
 8005588:	208d      	movs	r0, #141	@ 0x8d
 800558a:	f7ff ff4d 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800558e:	2100      	movs	r1, #0
 8005590:	2014      	movs	r0, #20
 8005592:	f7ff ff49 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8005596:	2100      	movs	r1, #0
 8005598:	2020      	movs	r0, #32
 800559a:	f7ff ff45 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800559e:	2100      	movs	r1, #0
 80055a0:	2002      	movs	r0, #2
 80055a2:	f7ff ff41 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80055a6:	2100      	movs	r1, #0
 80055a8:	20a1      	movs	r0, #161	@ 0xa1
 80055aa:	f7ff ff3d 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80055ae:	2100      	movs	r1, #0
 80055b0:	20c0      	movs	r0, #192	@ 0xc0
 80055b2:	f7ff ff39 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80055b6:	2100      	movs	r1, #0
 80055b8:	20da      	movs	r0, #218	@ 0xda
 80055ba:	f7ff ff35 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80055be:	2100      	movs	r1, #0
 80055c0:	2012      	movs	r0, #18
 80055c2:	f7ff ff31 	bl	8005428 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80055c6:	2100      	movs	r1, #0
 80055c8:	2081      	movs	r0, #129	@ 0x81
 80055ca:	f7ff ff2d 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80055ce:	2100      	movs	r1, #0
 80055d0:	20ef      	movs	r0, #239	@ 0xef
 80055d2:	f7ff ff29 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80055d6:	2100      	movs	r1, #0
 80055d8:	20d9      	movs	r0, #217	@ 0xd9
 80055da:	f7ff ff25 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80055de:	2100      	movs	r1, #0
 80055e0:	20f1      	movs	r0, #241	@ 0xf1
 80055e2:	f7ff ff21 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80055e6:	2100      	movs	r1, #0
 80055e8:	20db      	movs	r0, #219	@ 0xdb
 80055ea:	f7ff ff1d 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80055ee:	2100      	movs	r1, #0
 80055f0:	2030      	movs	r0, #48	@ 0x30
 80055f2:	f7ff ff19 	bl	8005428 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80055f6:	2100      	movs	r1, #0
 80055f8:	20a4      	movs	r0, #164	@ 0xa4
 80055fa:	f7ff ff15 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80055fe:	2100      	movs	r1, #0
 8005600:	20a6      	movs	r0, #166	@ 0xa6
 8005602:	f7ff ff11 	bl	8005428 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8005606:	2100      	movs	r1, #0
 8005608:	20af      	movs	r0, #175	@ 0xaf
 800560a:	f7ff ff0d 	bl	8005428 <OLED_WR_Byte>
	OLED_Clear(); 
 800560e:	f7ff ff55 	bl	80054bc <OLED_Clear>
}
 8005612:	bf00      	nop
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	40023800 	.word	0x40023800
 800561c:	40021000 	.word	0x40021000

08005620 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005626:	2300      	movs	r3, #0
 8005628:	607b      	str	r3, [r7, #4]
 800562a:	4b16      	ldr	r3, [pc, #88]	@ (8005684 <HAL_MspInit+0x64>)
 800562c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562e:	4a15      	ldr	r2, [pc, #84]	@ (8005684 <HAL_MspInit+0x64>)
 8005630:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005634:	6453      	str	r3, [r2, #68]	@ 0x44
 8005636:	4b13      	ldr	r3, [pc, #76]	@ (8005684 <HAL_MspInit+0x64>)
 8005638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800563e:	607b      	str	r3, [r7, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005642:	2300      	movs	r3, #0
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	4b0f      	ldr	r3, [pc, #60]	@ (8005684 <HAL_MspInit+0x64>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564a:	4a0e      	ldr	r2, [pc, #56]	@ (8005684 <HAL_MspInit+0x64>)
 800564c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005650:	6413      	str	r3, [r2, #64]	@ 0x40
 8005652:	4b0c      	ldr	r3, [pc, #48]	@ (8005684 <HAL_MspInit+0x64>)
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800565e:	2200      	movs	r2, #0
 8005660:	210f      	movs	r1, #15
 8005662:	f06f 0001 	mvn.w	r0, #1
 8005666:	f001 f99c 	bl	80069a2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800566a:	2200      	movs	r2, #0
 800566c:	2105      	movs	r1, #5
 800566e:	2005      	movs	r0, #5
 8005670:	f001 f997 	bl	80069a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005674:	2005      	movs	r0, #5
 8005676:	f001 f9b0 	bl	80069da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	40023800 	.word	0x40023800

08005688 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08c      	sub	sp, #48	@ 0x30
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005690:	f107 031c 	add.w	r3, r7, #28
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	605a      	str	r2, [r3, #4]
 800569a:	609a      	str	r2, [r3, #8]
 800569c:	60da      	str	r2, [r3, #12]
 800569e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005760 <HAL_ADC_MspInit+0xd8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d128      	bne.n	80056fc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80056aa:	2300      	movs	r3, #0
 80056ac:	61bb      	str	r3, [r7, #24]
 80056ae:	4b2d      	ldr	r3, [pc, #180]	@ (8005764 <HAL_ADC_MspInit+0xdc>)
 80056b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005764 <HAL_ADC_MspInit+0xdc>)
 80056b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80056ba:	4b2a      	ldr	r3, [pc, #168]	@ (8005764 <HAL_ADC_MspInit+0xdc>)
 80056bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c2:	61bb      	str	r3, [r7, #24]
 80056c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	4b26      	ldr	r3, [pc, #152]	@ (8005764 <HAL_ADC_MspInit+0xdc>)
 80056cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ce:	4a25      	ldr	r2, [pc, #148]	@ (8005764 <HAL_ADC_MspInit+0xdc>)
 80056d0:	f043 0304 	orr.w	r3, r3, #4
 80056d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80056d6:	4b23      	ldr	r3, [pc, #140]	@ (8005764 <HAL_ADC_MspInit+0xdc>)
 80056d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80056e2:	2302      	movs	r3, #2
 80056e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80056e6:	2303      	movs	r3, #3
 80056e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056ee:	f107 031c 	add.w	r3, r7, #28
 80056f2:	4619      	mov	r1, r3
 80056f4:	481c      	ldr	r0, [pc, #112]	@ (8005768 <HAL_ADC_MspInit+0xe0>)
 80056f6:	f001 fa1d 	bl	8006b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80056fa:	e02c      	b.n	8005756 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a1a      	ldr	r2, [pc, #104]	@ (800576c <HAL_ADC_MspInit+0xe4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d127      	bne.n	8005756 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005706:	2300      	movs	r3, #0
 8005708:	613b      	str	r3, [r7, #16]
 800570a:	4b16      	ldr	r3, [pc, #88]	@ (8005764 <HAL_ADC_MspInit+0xdc>)
 800570c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570e:	4a15      	ldr	r2, [pc, #84]	@ (8005764 <HAL_ADC_MspInit+0xdc>)
 8005710:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005714:	6453      	str	r3, [r2, #68]	@ 0x44
 8005716:	4b13      	ldr	r3, [pc, #76]	@ (8005764 <HAL_ADC_MspInit+0xdc>)
 8005718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	4b0f      	ldr	r3, [pc, #60]	@ (8005764 <HAL_ADC_MspInit+0xdc>)
 8005728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572a:	4a0e      	ldr	r2, [pc, #56]	@ (8005764 <HAL_ADC_MspInit+0xdc>)
 800572c:	f043 0304 	orr.w	r3, r3, #4
 8005730:	6313      	str	r3, [r2, #48]	@ 0x30
 8005732:	4b0c      	ldr	r3, [pc, #48]	@ (8005764 <HAL_ADC_MspInit+0xdc>)
 8005734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005736:	f003 0304 	and.w	r3, r3, #4
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800573e:	2304      	movs	r3, #4
 8005740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005742:	2303      	movs	r3, #3
 8005744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005746:	2300      	movs	r3, #0
 8005748:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800574a:	f107 031c 	add.w	r3, r7, #28
 800574e:	4619      	mov	r1, r3
 8005750:	4805      	ldr	r0, [pc, #20]	@ (8005768 <HAL_ADC_MspInit+0xe0>)
 8005752:	f001 f9ef 	bl	8006b34 <HAL_GPIO_Init>
}
 8005756:	bf00      	nop
 8005758:	3730      	adds	r7, #48	@ 0x30
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40012000 	.word	0x40012000
 8005764:	40023800 	.word	0x40023800
 8005768:	40020800 	.word	0x40020800
 800576c:	40012100 	.word	0x40012100

08005770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b08a      	sub	sp, #40	@ 0x28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005778:	f107 0314 	add.w	r3, r7, #20
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	605a      	str	r2, [r3, #4]
 8005782:	609a      	str	r2, [r3, #8]
 8005784:	60da      	str	r2, [r3, #12]
 8005786:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a19      	ldr	r2, [pc, #100]	@ (80057f4 <HAL_I2C_MspInit+0x84>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d12c      	bne.n	80057ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005792:	2300      	movs	r3, #0
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	4b18      	ldr	r3, [pc, #96]	@ (80057f8 <HAL_I2C_MspInit+0x88>)
 8005798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579a:	4a17      	ldr	r2, [pc, #92]	@ (80057f8 <HAL_I2C_MspInit+0x88>)
 800579c:	f043 0302 	orr.w	r3, r3, #2
 80057a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80057a2:	4b15      	ldr	r3, [pc, #84]	@ (80057f8 <HAL_I2C_MspInit+0x88>)
 80057a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	613b      	str	r3, [r7, #16]
 80057ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80057ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80057b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057b4:	2312      	movs	r3, #18
 80057b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b8:	2300      	movs	r3, #0
 80057ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057bc:	2303      	movs	r3, #3
 80057be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80057c0:	2304      	movs	r3, #4
 80057c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057c4:	f107 0314 	add.w	r3, r7, #20
 80057c8:	4619      	mov	r1, r3
 80057ca:	480c      	ldr	r0, [pc, #48]	@ (80057fc <HAL_I2C_MspInit+0x8c>)
 80057cc:	f001 f9b2 	bl	8006b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	4b08      	ldr	r3, [pc, #32]	@ (80057f8 <HAL_I2C_MspInit+0x88>)
 80057d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d8:	4a07      	ldr	r2, [pc, #28]	@ (80057f8 <HAL_I2C_MspInit+0x88>)
 80057da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057de:	6413      	str	r3, [r2, #64]	@ 0x40
 80057e0:	4b05      	ldr	r3, [pc, #20]	@ (80057f8 <HAL_I2C_MspInit+0x88>)
 80057e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80057ec:	bf00      	nop
 80057ee:	3728      	adds	r7, #40	@ 0x28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40005400 	.word	0x40005400
 80057f8:	40023800 	.word	0x40023800
 80057fc:	40020400 	.word	0x40020400

08005800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08c      	sub	sp, #48	@ 0x30
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005808:	f107 031c 	add.w	r3, r7, #28
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	605a      	str	r2, [r3, #4]
 8005812:	609a      	str	r2, [r3, #8]
 8005814:	60da      	str	r2, [r3, #12]
 8005816:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a40      	ldr	r2, [pc, #256]	@ (8005920 <HAL_TIM_Base_MspInit+0x120>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d135      	bne.n	800588e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005822:	2300      	movs	r3, #0
 8005824:	61bb      	str	r3, [r7, #24]
 8005826:	4b3f      	ldr	r3, [pc, #252]	@ (8005924 <HAL_TIM_Base_MspInit+0x124>)
 8005828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582a:	4a3e      	ldr	r2, [pc, #248]	@ (8005924 <HAL_TIM_Base_MspInit+0x124>)
 800582c:	f043 0301 	orr.w	r3, r3, #1
 8005830:	6453      	str	r3, [r2, #68]	@ 0x44
 8005832:	4b3c      	ldr	r3, [pc, #240]	@ (8005924 <HAL_TIM_Base_MspInit+0x124>)
 8005834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	61bb      	str	r3, [r7, #24]
 800583c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800583e:	2300      	movs	r3, #0
 8005840:	617b      	str	r3, [r7, #20]
 8005842:	4b38      	ldr	r3, [pc, #224]	@ (8005924 <HAL_TIM_Base_MspInit+0x124>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005846:	4a37      	ldr	r2, [pc, #220]	@ (8005924 <HAL_TIM_Base_MspInit+0x124>)
 8005848:	f043 0310 	orr.w	r3, r3, #16
 800584c:	6313      	str	r3, [r2, #48]	@ 0x30
 800584e:	4b35      	ldr	r3, [pc, #212]	@ (8005924 <HAL_TIM_Base_MspInit+0x124>)
 8005850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005852:	f003 0310 	and.w	r3, r3, #16
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800585a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800585e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005860:	2302      	movs	r3, #2
 8005862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005864:	2300      	movs	r3, #0
 8005866:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005868:	2300      	movs	r3, #0
 800586a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800586c:	2301      	movs	r3, #1
 800586e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005870:	f107 031c 	add.w	r3, r7, #28
 8005874:	4619      	mov	r1, r3
 8005876:	482c      	ldr	r0, [pc, #176]	@ (8005928 <HAL_TIM_Base_MspInit+0x128>)
 8005878:	f001 f95c 	bl	8006b34 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800587c:	2200      	movs	r2, #0
 800587e:	2105      	movs	r1, #5
 8005880:	201b      	movs	r0, #27
 8005882:	f001 f88e 	bl	80069a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005886:	201b      	movs	r0, #27
 8005888:	f001 f8a7 	bl	80069da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800588c:	e044      	b.n	8005918 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM6)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a26      	ldr	r2, [pc, #152]	@ (800592c <HAL_TIM_Base_MspInit+0x12c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d10e      	bne.n	80058b6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005898:	2300      	movs	r3, #0
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	4b21      	ldr	r3, [pc, #132]	@ (8005924 <HAL_TIM_Base_MspInit+0x124>)
 800589e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a0:	4a20      	ldr	r2, [pc, #128]	@ (8005924 <HAL_TIM_Base_MspInit+0x124>)
 80058a2:	f043 0310 	orr.w	r3, r3, #16
 80058a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80058a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005924 <HAL_TIM_Base_MspInit+0x124>)
 80058aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	693b      	ldr	r3, [r7, #16]
}
 80058b4:	e030      	b.n	8005918 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM8)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005930 <HAL_TIM_Base_MspInit+0x130>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d12b      	bne.n	8005918 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80058c0:	2300      	movs	r3, #0
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	4b17      	ldr	r3, [pc, #92]	@ (8005924 <HAL_TIM_Base_MspInit+0x124>)
 80058c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c8:	4a16      	ldr	r2, [pc, #88]	@ (8005924 <HAL_TIM_Base_MspInit+0x124>)
 80058ca:	f043 0302 	orr.w	r3, r3, #2
 80058ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80058d0:	4b14      	ldr	r3, [pc, #80]	@ (8005924 <HAL_TIM_Base_MspInit+0x124>)
 80058d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058dc:	2300      	movs	r3, #0
 80058de:	60bb      	str	r3, [r7, #8]
 80058e0:	4b10      	ldr	r3, [pc, #64]	@ (8005924 <HAL_TIM_Base_MspInit+0x124>)
 80058e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e4:	4a0f      	ldr	r2, [pc, #60]	@ (8005924 <HAL_TIM_Base_MspInit+0x124>)
 80058e6:	f043 0304 	orr.w	r3, r3, #4
 80058ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80058ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005924 <HAL_TIM_Base_MspInit+0x124>)
 80058ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	60bb      	str	r3, [r7, #8]
 80058f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80058f8:	23c0      	movs	r3, #192	@ 0xc0
 80058fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058fc:	2302      	movs	r3, #2
 80058fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005900:	2300      	movs	r3, #0
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005904:	2300      	movs	r3, #0
 8005906:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005908:	2303      	movs	r3, #3
 800590a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800590c:	f107 031c 	add.w	r3, r7, #28
 8005910:	4619      	mov	r1, r3
 8005912:	4808      	ldr	r0, [pc, #32]	@ (8005934 <HAL_TIM_Base_MspInit+0x134>)
 8005914:	f001 f90e 	bl	8006b34 <HAL_GPIO_Init>
}
 8005918:	bf00      	nop
 800591a:	3730      	adds	r7, #48	@ 0x30
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	40010000 	.word	0x40010000
 8005924:	40023800 	.word	0x40023800
 8005928:	40021000 	.word	0x40021000
 800592c:	40001000 	.word	0x40001000
 8005930:	40010400 	.word	0x40010400
 8005934:	40020800 	.word	0x40020800

08005938 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b08c      	sub	sp, #48	@ 0x30
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005940:	f107 031c 	add.w	r3, r7, #28
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	605a      	str	r2, [r3, #4]
 800594a:	609a      	str	r2, [r3, #8]
 800594c:	60da      	str	r2, [r3, #12]
 800594e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005958:	d14b      	bne.n	80059f2 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800595a:	2300      	movs	r3, #0
 800595c:	61bb      	str	r3, [r7, #24]
 800595e:	4b3f      	ldr	r3, [pc, #252]	@ (8005a5c <HAL_TIM_Encoder_MspInit+0x124>)
 8005960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005962:	4a3e      	ldr	r2, [pc, #248]	@ (8005a5c <HAL_TIM_Encoder_MspInit+0x124>)
 8005964:	f043 0301 	orr.w	r3, r3, #1
 8005968:	6413      	str	r3, [r2, #64]	@ 0x40
 800596a:	4b3c      	ldr	r3, [pc, #240]	@ (8005a5c <HAL_TIM_Encoder_MspInit+0x124>)
 800596c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	61bb      	str	r3, [r7, #24]
 8005974:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005976:	2300      	movs	r3, #0
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	4b38      	ldr	r3, [pc, #224]	@ (8005a5c <HAL_TIM_Encoder_MspInit+0x124>)
 800597c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597e:	4a37      	ldr	r2, [pc, #220]	@ (8005a5c <HAL_TIM_Encoder_MspInit+0x124>)
 8005980:	f043 0301 	orr.w	r3, r3, #1
 8005984:	6313      	str	r3, [r2, #48]	@ 0x30
 8005986:	4b35      	ldr	r3, [pc, #212]	@ (8005a5c <HAL_TIM_Encoder_MspInit+0x124>)
 8005988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005992:	2300      	movs	r3, #0
 8005994:	613b      	str	r3, [r7, #16]
 8005996:	4b31      	ldr	r3, [pc, #196]	@ (8005a5c <HAL_TIM_Encoder_MspInit+0x124>)
 8005998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599a:	4a30      	ldr	r2, [pc, #192]	@ (8005a5c <HAL_TIM_Encoder_MspInit+0x124>)
 800599c:	f043 0302 	orr.w	r3, r3, #2
 80059a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80059a2:	4b2e      	ldr	r3, [pc, #184]	@ (8005a5c <HAL_TIM_Encoder_MspInit+0x124>)
 80059a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	613b      	str	r3, [r7, #16]
 80059ac:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_CH1_Pin;
 80059ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059b4:	2302      	movs	r3, #2
 80059b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059b8:	2300      	movs	r3, #0
 80059ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059bc:	2300      	movs	r3, #0
 80059be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80059c0:	2301      	movs	r3, #1
 80059c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(EncoderA_CH1_GPIO_Port, &GPIO_InitStruct);
 80059c4:	f107 031c 	add.w	r3, r7, #28
 80059c8:	4619      	mov	r1, r3
 80059ca:	4825      	ldr	r0, [pc, #148]	@ (8005a60 <HAL_TIM_Encoder_MspInit+0x128>)
 80059cc:	f001 f8b2 	bl	8006b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA_CH2_Pin;
 80059d0:	2308      	movs	r3, #8
 80059d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059d4:	2302      	movs	r3, #2
 80059d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d8:	2300      	movs	r3, #0
 80059da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059dc:	2300      	movs	r3, #0
 80059de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80059e0:	2301      	movs	r3, #1
 80059e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(EncoderA_CH2_GPIO_Port, &GPIO_InitStruct);
 80059e4:	f107 031c 	add.w	r3, r7, #28
 80059e8:	4619      	mov	r1, r3
 80059ea:	481e      	ldr	r0, [pc, #120]	@ (8005a64 <HAL_TIM_Encoder_MspInit+0x12c>)
 80059ec:	f001 f8a2 	bl	8006b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80059f0:	e030      	b.n	8005a54 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005a68 <HAL_TIM_Encoder_MspInit+0x130>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d12b      	bne.n	8005a54 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	4b16      	ldr	r3, [pc, #88]	@ (8005a5c <HAL_TIM_Encoder_MspInit+0x124>)
 8005a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a04:	4a15      	ldr	r2, [pc, #84]	@ (8005a5c <HAL_TIM_Encoder_MspInit+0x124>)
 8005a06:	f043 0302 	orr.w	r3, r3, #2
 8005a0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a0c:	4b13      	ldr	r3, [pc, #76]	@ (8005a5c <HAL_TIM_Encoder_MspInit+0x124>)
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60bb      	str	r3, [r7, #8]
 8005a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a5c <HAL_TIM_Encoder_MspInit+0x124>)
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a20:	4a0e      	ldr	r2, [pc, #56]	@ (8005a5c <HAL_TIM_Encoder_MspInit+0x124>)
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a28:	4b0c      	ldr	r3, [pc, #48]	@ (8005a5c <HAL_TIM_Encoder_MspInit+0x124>)
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	60bb      	str	r3, [r7, #8]
 8005a32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderB_CH1_Pin|EncoderB_CH2_Pin;
 8005a34:	23c0      	movs	r3, #192	@ 0xc0
 8005a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a38:	2302      	movs	r3, #2
 8005a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a40:	2300      	movs	r3, #0
 8005a42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005a44:	2302      	movs	r3, #2
 8005a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a48:	f107 031c 	add.w	r3, r7, #28
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4804      	ldr	r0, [pc, #16]	@ (8005a60 <HAL_TIM_Encoder_MspInit+0x128>)
 8005a50:	f001 f870 	bl	8006b34 <HAL_GPIO_Init>
}
 8005a54:	bf00      	nop
 8005a56:	3730      	adds	r7, #48	@ 0x30
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	40020000 	.word	0x40020000
 8005a64:	40020400 	.word	0x40020400
 8005a68:	40000400 	.word	0x40000400

08005a6c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08a      	sub	sp, #40	@ 0x28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a74:	f107 0314 	add.w	r3, r7, #20
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	605a      	str	r2, [r3, #4]
 8005a7e:	609a      	str	r2, [r3, #8]
 8005a80:	60da      	str	r2, [r3, #12]
 8005a82:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a1d      	ldr	r2, [pc, #116]	@ (8005b00 <HAL_TIM_IC_MspInit+0x94>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d134      	bne.n	8005af8 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005a8e:	2300      	movs	r3, #0
 8005a90:	613b      	str	r3, [r7, #16]
 8005a92:	4b1c      	ldr	r3, [pc, #112]	@ (8005b04 <HAL_TIM_IC_MspInit+0x98>)
 8005a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a96:	4a1b      	ldr	r2, [pc, #108]	@ (8005b04 <HAL_TIM_IC_MspInit+0x98>)
 8005a98:	f043 0304 	orr.w	r3, r3, #4
 8005a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a9e:	4b19      	ldr	r3, [pc, #100]	@ (8005b04 <HAL_TIM_IC_MspInit+0x98>)
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	4b15      	ldr	r3, [pc, #84]	@ (8005b04 <HAL_TIM_IC_MspInit+0x98>)
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab2:	4a14      	ldr	r2, [pc, #80]	@ (8005b04 <HAL_TIM_IC_MspInit+0x98>)
 8005ab4:	f043 0308 	orr.w	r3, r3, #8
 8005ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005aba:	4b12      	ldr	r3, [pc, #72]	@ (8005b04 <HAL_TIM_IC_MspInit+0x98>)
 8005abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8005ac6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005acc:	2302      	movs	r3, #2
 8005ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005ad8:	2302      	movs	r3, #2
 8005ada:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8005adc:	f107 0314 	add.w	r3, r7, #20
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4809      	ldr	r0, [pc, #36]	@ (8005b08 <HAL_TIM_IC_MspInit+0x9c>)
 8005ae4:	f001 f826 	bl	8006b34 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2105      	movs	r1, #5
 8005aec:	201e      	movs	r0, #30
 8005aee:	f000 ff58 	bl	80069a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005af2:	201e      	movs	r0, #30
 8005af4:	f000 ff71 	bl	80069da <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8005af8:	bf00      	nop
 8005afa:	3728      	adds	r7, #40	@ 0x28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40000800 	.word	0x40000800
 8005b04:	40023800 	.word	0x40023800
 8005b08:	40020c00 	.word	0x40020c00

08005b0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b088      	sub	sp, #32
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b14:	f107 030c 	add.w	r3, r7, #12
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	609a      	str	r2, [r3, #8]
 8005b20:	60da      	str	r2, [r3, #12]
 8005b22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a12      	ldr	r2, [pc, #72]	@ (8005b74 <HAL_TIM_MspPostInit+0x68>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d11e      	bne.n	8005b6c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60bb      	str	r3, [r7, #8]
 8005b32:	4b11      	ldr	r3, [pc, #68]	@ (8005b78 <HAL_TIM_MspPostInit+0x6c>)
 8005b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b36:	4a10      	ldr	r2, [pc, #64]	@ (8005b78 <HAL_TIM_MspPostInit+0x6c>)
 8005b38:	f043 0310 	orr.w	r3, r3, #16
 8005b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b78 <HAL_TIM_MspPostInit+0x6c>)
 8005b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b42:	f003 0310 	and.w	r3, r3, #16
 8005b46:	60bb      	str	r3, [r7, #8]
 8005b48:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005b4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005b4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b50:	2302      	movs	r3, #2
 8005b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b60:	f107 030c 	add.w	r3, r7, #12
 8005b64:	4619      	mov	r1, r3
 8005b66:	4805      	ldr	r0, [pc, #20]	@ (8005b7c <HAL_TIM_MspPostInit+0x70>)
 8005b68:	f000 ffe4 	bl	8006b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005b6c:	bf00      	nop
 8005b6e:	3720      	adds	r7, #32
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40010000 	.word	0x40010000
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	40021000 	.word	0x40021000

08005b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08a      	sub	sp, #40	@ 0x28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b88:	f107 0314 	add.w	r3, r7, #20
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	605a      	str	r2, [r3, #4]
 8005b92:	609a      	str	r2, [r3, #8]
 8005b94:	60da      	str	r2, [r3, #12]
 8005b96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c14 <HAL_UART_MspInit+0x94>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d134      	bne.n	8005c0c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	613b      	str	r3, [r7, #16]
 8005ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8005c18 <HAL_UART_MspInit+0x98>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005baa:	4a1b      	ldr	r2, [pc, #108]	@ (8005c18 <HAL_UART_MspInit+0x98>)
 8005bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bb2:	4b19      	ldr	r3, [pc, #100]	@ (8005c18 <HAL_UART_MspInit+0x98>)
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bba:	613b      	str	r3, [r7, #16]
 8005bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60fb      	str	r3, [r7, #12]
 8005bc2:	4b15      	ldr	r3, [pc, #84]	@ (8005c18 <HAL_UART_MspInit+0x98>)
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc6:	4a14      	ldr	r2, [pc, #80]	@ (8005c18 <HAL_UART_MspInit+0x98>)
 8005bc8:	f043 0304 	orr.w	r3, r3, #4
 8005bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bce:	4b12      	ldr	r3, [pc, #72]	@ (8005c18 <HAL_UART_MspInit+0x98>)
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005bda:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005be0:	2302      	movs	r3, #2
 8005be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005be8:	2303      	movs	r3, #3
 8005bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005bec:	2307      	movs	r3, #7
 8005bee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bf0:	f107 0314 	add.w	r3, r7, #20
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4809      	ldr	r0, [pc, #36]	@ (8005c1c <HAL_UART_MspInit+0x9c>)
 8005bf8:	f000 ff9c 	bl	8006b34 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2105      	movs	r1, #5
 8005c00:	2027      	movs	r0, #39	@ 0x27
 8005c02:	f000 fece 	bl	80069a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005c06:	2027      	movs	r0, #39	@ 0x27
 8005c08:	f000 fee7 	bl	80069da <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8005c0c:	bf00      	nop
 8005c0e:	3728      	adds	r7, #40	@ 0x28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40004800 	.word	0x40004800
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	40020800 	.word	0x40020800

08005c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005c24:	bf00      	nop
 8005c26:	e7fd      	b.n	8005c24 <NMI_Handler+0x4>

08005c28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c2c:	bf00      	nop
 8005c2e:	e7fd      	b.n	8005c2c <HardFault_Handler+0x4>

08005c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c34:	bf00      	nop
 8005c36:	e7fd      	b.n	8005c34 <MemManage_Handler+0x4>

08005c38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c3c:	bf00      	nop
 8005c3e:	e7fd      	b.n	8005c3c <BusFault_Handler+0x4>

08005c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c44:	bf00      	nop
 8005c46:	e7fd      	b.n	8005c44 <UsageFault_Handler+0x4>

08005c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c4c:	bf00      	nop
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c5a:	f000 f983 	bl	8005f64 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005c5e:	f007 f93b 	bl	800ced8 <xTaskGetSchedulerState>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d001      	beq.n	8005c6c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8005c68:	f007 ff36 	bl	800dad8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c6c:	bf00      	nop
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005c74:	bf00      	nop
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
	...

08005c80 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005c84:	4802      	ldr	r0, [pc, #8]	@ (8005c90 <TIM1_CC_IRQHandler+0x10>)
 8005c86:	f003 fa79 	bl	800917c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005c8a:	bf00      	nop
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20000420 	.word	0x20000420

08005c94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005c98:	4802      	ldr	r0, [pc, #8]	@ (8005ca4 <TIM4_IRQHandler+0x10>)
 8005c9a:	f003 fa6f 	bl	800917c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005c9e:	bf00      	nop
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	200004f8 	.word	0x200004f8

08005ca8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005cac:	4802      	ldr	r0, [pc, #8]	@ (8005cb8 <USART3_IRQHandler+0x10>)
 8005cae:	f004 fc0f 	bl	800a4d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005cb2:	bf00      	nop
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	200005d0 	.word	0x200005d0

08005cbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
	return 1;
 8005cc0:	2301      	movs	r3, #1
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <_kill>:

int _kill(int pid, int sig)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005cd6:	f009 f80b 	bl	800ecf0 <__errno>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2216      	movs	r2, #22
 8005cde:	601a      	str	r2, [r3, #0]
	return -1;
 8005ce0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <_exit>:

void _exit (int status)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff ffe7 	bl	8005ccc <_kill>
	while (1) {}		/* Make sure we hang here */
 8005cfe:	bf00      	nop
 8005d00:	e7fd      	b.n	8005cfe <_exit+0x12>

08005d02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b086      	sub	sp, #24
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d0e:	2300      	movs	r3, #0
 8005d10:	617b      	str	r3, [r7, #20]
 8005d12:	e00a      	b.n	8005d2a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005d14:	f3af 8000 	nop.w
 8005d18:	4601      	mov	r1, r0
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	60ba      	str	r2, [r7, #8]
 8005d20:	b2ca      	uxtb	r2, r1
 8005d22:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	3301      	adds	r3, #1
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	dbf0      	blt.n	8005d14 <_read+0x12>
	}

return len;
 8005d32:	687b      	ldr	r3, [r7, #4]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d48:	2300      	movs	r3, #0
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	e009      	b.n	8005d62 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	60ba      	str	r2, [r7, #8]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	dbf1      	blt.n	8005d4e <_write+0x12>
	}
	return len;
 8005d6a:	687b      	ldr	r3, [r7, #4]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <_close>:

int _close(int file)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
	return -1;
 8005d7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005d9c:	605a      	str	r2, [r3, #4]
	return 0;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <_isatty>:

int _isatty(int file)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
	return 1;
 8005db4:	2301      	movs	r3, #1
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	607a      	str	r2, [r7, #4]
	return 0;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005de4:	4a14      	ldr	r2, [pc, #80]	@ (8005e38 <_sbrk+0x5c>)
 8005de6:	4b15      	ldr	r3, [pc, #84]	@ (8005e3c <_sbrk+0x60>)
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005df0:	4b13      	ldr	r3, [pc, #76]	@ (8005e40 <_sbrk+0x64>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d102      	bne.n	8005dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005df8:	4b11      	ldr	r3, [pc, #68]	@ (8005e40 <_sbrk+0x64>)
 8005dfa:	4a12      	ldr	r2, [pc, #72]	@ (8005e44 <_sbrk+0x68>)
 8005dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005dfe:	4b10      	ldr	r3, [pc, #64]	@ (8005e40 <_sbrk+0x64>)
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4413      	add	r3, r2
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d207      	bcs.n	8005e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e0c:	f008 ff70 	bl	800ecf0 <__errno>
 8005e10:	4603      	mov	r3, r0
 8005e12:	220c      	movs	r2, #12
 8005e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e16:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1a:	e009      	b.n	8005e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e1c:	4b08      	ldr	r3, [pc, #32]	@ (8005e40 <_sbrk+0x64>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e22:	4b07      	ldr	r3, [pc, #28]	@ (8005e40 <_sbrk+0x64>)
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4413      	add	r3, r2
 8005e2a:	4a05      	ldr	r2, [pc, #20]	@ (8005e40 <_sbrk+0x64>)
 8005e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20020000 	.word	0x20020000
 8005e3c:	00000400 	.word	0x00000400
 8005e40:	20000b54 	.word	0x20000b54
 8005e44:	200055f8 	.word	0x200055f8

08005e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e4c:	4b06      	ldr	r3, [pc, #24]	@ (8005e68 <SystemInit+0x20>)
 8005e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e52:	4a05      	ldr	r2, [pc, #20]	@ (8005e68 <SystemInit+0x20>)
 8005e54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005e5c:	bf00      	nop
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	e000ed00 	.word	0xe000ed00

08005e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005e6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005ea4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005e70:	480d      	ldr	r0, [pc, #52]	@ (8005ea8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005e72:	490e      	ldr	r1, [pc, #56]	@ (8005eac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005e74:	4a0e      	ldr	r2, [pc, #56]	@ (8005eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e78:	e002      	b.n	8005e80 <LoopCopyDataInit>

08005e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e7e:	3304      	adds	r3, #4

08005e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e84:	d3f9      	bcc.n	8005e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e86:	4a0b      	ldr	r2, [pc, #44]	@ (8005eb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005e88:	4c0b      	ldr	r4, [pc, #44]	@ (8005eb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e8c:	e001      	b.n	8005e92 <LoopFillZerobss>

08005e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e90:	3204      	adds	r2, #4

08005e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e94:	d3fb      	bcc.n	8005e8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005e96:	f7ff ffd7 	bl	8005e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e9a:	f008 ff2f 	bl	800ecfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e9e:	f7fb f923 	bl	80010e8 <main>
  bx  lr    
 8005ea2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005ea4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005eac:	20000320 	.word	0x20000320
  ldr r2, =_sidata
 8005eb0:	080114c0 	.word	0x080114c0
  ldr r2, =_sbss
 8005eb4:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8005eb8:	200055f8 	.word	0x200055f8

08005ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ebc:	e7fe      	b.n	8005ebc <ADC_IRQHandler>
	...

08005ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f00 <HAL_Init+0x40>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8005f00 <HAL_Init+0x40>)
 8005eca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f00 <HAL_Init+0x40>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8005f00 <HAL_Init+0x40>)
 8005ed6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005edc:	4b08      	ldr	r3, [pc, #32]	@ (8005f00 <HAL_Init+0x40>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a07      	ldr	r2, [pc, #28]	@ (8005f00 <HAL_Init+0x40>)
 8005ee2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ee8:	2003      	movs	r0, #3
 8005eea:	f000 fd4f 	bl	800698c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005eee:	200f      	movs	r0, #15
 8005ef0:	f000 f808 	bl	8005f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ef4:	f7ff fb94 	bl	8005620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40023c00 	.word	0x40023c00

08005f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f0c:	4b12      	ldr	r3, [pc, #72]	@ (8005f58 <HAL_InitTick+0x54>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	4b12      	ldr	r3, [pc, #72]	@ (8005f5c <HAL_InitTick+0x58>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	4619      	mov	r1, r3
 8005f16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fd67 	bl	80069f6 <HAL_SYSTICK_Config>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e00e      	b.n	8005f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b0f      	cmp	r3, #15
 8005f36:	d80a      	bhi.n	8005f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f38:	2200      	movs	r2, #0
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	f000 fd2f 	bl	80069a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f44:	4a06      	ldr	r2, [pc, #24]	@ (8005f60 <HAL_InitTick+0x5c>)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e000      	b.n	8005f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	20000148 	.word	0x20000148
 8005f5c:	20000150 	.word	0x20000150
 8005f60:	2000014c 	.word	0x2000014c

08005f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f68:	4b06      	ldr	r3, [pc, #24]	@ (8005f84 <HAL_IncTick+0x20>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4b06      	ldr	r3, [pc, #24]	@ (8005f88 <HAL_IncTick+0x24>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4413      	add	r3, r2
 8005f74:	4a04      	ldr	r2, [pc, #16]	@ (8005f88 <HAL_IncTick+0x24>)
 8005f76:	6013      	str	r3, [r2, #0]
}
 8005f78:	bf00      	nop
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	20000150 	.word	0x20000150
 8005f88:	20000b58 	.word	0x20000b58

08005f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8005f90:	4b03      	ldr	r3, [pc, #12]	@ (8005fa0 <HAL_GetTick+0x14>)
 8005f92:	681b      	ldr	r3, [r3, #0]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	20000b58 	.word	0x20000b58

08005fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fac:	f7ff ffee 	bl	8005f8c <HAL_GetTick>
 8005fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d005      	beq.n	8005fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe8 <HAL_Delay+0x44>)
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005fca:	bf00      	nop
 8005fcc:	f7ff ffde 	bl	8005f8c <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d8f7      	bhi.n	8005fcc <HAL_Delay+0x28>
  {
  }
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000150 	.word	0x20000150

08005fec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e033      	b.n	800606a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	d109      	bne.n	800601e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff fb3c 	bl	8005688 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006022:	f003 0310 	and.w	r3, r3, #16
 8006026:	2b00      	cmp	r3, #0
 8006028:	d118      	bne.n	800605c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006032:	f023 0302 	bic.w	r3, r3, #2
 8006036:	f043 0202 	orr.w	r2, r3, #2
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fad8 	bl	80065f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604e:	f023 0303 	bic.w	r3, r3, #3
 8006052:	f043 0201 	orr.w	r2, r3, #1
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	641a      	str	r2, [r3, #64]	@ 0x40
 800605a:	e001      	b.n	8006060 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006068:	7bfb      	ldrb	r3, [r7, #15]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
	...

08006074 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_ADC_Start+0x1a>
 800608a:	2302      	movs	r3, #2
 800608c:	e0b2      	b.n	80061f4 <HAL_ADC_Start+0x180>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d018      	beq.n	80060d6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0201 	orr.w	r2, r2, #1
 80060b2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80060b4:	4b52      	ldr	r3, [pc, #328]	@ (8006200 <HAL_ADC_Start+0x18c>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a52      	ldr	r2, [pc, #328]	@ (8006204 <HAL_ADC_Start+0x190>)
 80060ba:	fba2 2303 	umull	r2, r3, r2, r3
 80060be:	0c9a      	lsrs	r2, r3, #18
 80060c0:	4613      	mov	r3, r2
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	4413      	add	r3, r2
 80060c6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80060c8:	e002      	b.n	80060d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1f9      	bne.n	80060ca <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d17a      	bne.n	80061da <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006102:	2b00      	cmp	r3, #0
 8006104:	d007      	beq.n	8006116 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800610e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800611e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006122:	d106      	bne.n	8006132 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006128:	f023 0206 	bic.w	r2, r3, #6
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	645a      	str	r2, [r3, #68]	@ 0x44
 8006130:	e002      	b.n	8006138 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006140:	4b31      	ldr	r3, [pc, #196]	@ (8006208 <HAL_ADC_Start+0x194>)
 8006142:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800614c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f003 031f 	and.w	r3, r3, #31
 8006156:	2b00      	cmp	r3, #0
 8006158:	d12a      	bne.n	80061b0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a2b      	ldr	r2, [pc, #172]	@ (800620c <HAL_ADC_Start+0x198>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d015      	beq.n	8006190 <HAL_ADC_Start+0x11c>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a29      	ldr	r2, [pc, #164]	@ (8006210 <HAL_ADC_Start+0x19c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d105      	bne.n	800617a <HAL_ADC_Start+0x106>
 800616e:	4b26      	ldr	r3, [pc, #152]	@ (8006208 <HAL_ADC_Start+0x194>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a25      	ldr	r2, [pc, #148]	@ (8006214 <HAL_ADC_Start+0x1a0>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d136      	bne.n	80061f2 <HAL_ADC_Start+0x17e>
 8006184:	4b20      	ldr	r3, [pc, #128]	@ (8006208 <HAL_ADC_Start+0x194>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f003 0310 	and.w	r3, r3, #16
 800618c:	2b00      	cmp	r3, #0
 800618e:	d130      	bne.n	80061f2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d129      	bne.n	80061f2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80061ac:	609a      	str	r2, [r3, #8]
 80061ae:	e020      	b.n	80061f2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a15      	ldr	r2, [pc, #84]	@ (800620c <HAL_ADC_Start+0x198>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d11b      	bne.n	80061f2 <HAL_ADC_Start+0x17e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d114      	bne.n	80061f2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689a      	ldr	r2, [r3, #8]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80061d6:	609a      	str	r2, [r3, #8]
 80061d8:	e00b      	b.n	80061f2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061de:	f043 0210 	orr.w	r2, r3, #16
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ea:	f043 0201 	orr.w	r2, r3, #1
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	20000148 	.word	0x20000148
 8006204:	431bde83 	.word	0x431bde83
 8006208:	40012300 	.word	0x40012300
 800620c:	40012000 	.word	0x40012000
 8006210:	40012100 	.word	0x40012100
 8006214:	40012200 	.word	0x40012200

08006218 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <HAL_ADC_Stop+0x16>
 800622a:	2302      	movs	r3, #2
 800622c:	e021      	b.n	8006272 <HAL_ADC_Stop+0x5a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0201 	bic.w	r2, r2, #1
 8006244:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d109      	bne.n	8006268 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006258:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800625c:	f023 0301 	bic.w	r3, r3, #1
 8006260:	f043 0201 	orr.w	r2, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800629a:	d113      	bne.n	80062c4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80062a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062aa:	d10b      	bne.n	80062c4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b0:	f043 0220 	orr.w	r2, r3, #32
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e063      	b.n	800638c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80062c4:	f7ff fe62 	bl	8005f8c <HAL_GetTick>
 80062c8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80062ca:	e021      	b.n	8006310 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d2:	d01d      	beq.n	8006310 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d007      	beq.n	80062ea <HAL_ADC_PollForConversion+0x6c>
 80062da:	f7ff fe57 	bl	8005f8c <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d212      	bcs.n	8006310 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d00b      	beq.n	8006310 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fc:	f043 0204 	orr.w	r2, r3, #4
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e03d      	b.n	800638c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b02      	cmp	r3, #2
 800631c:	d1d6      	bne.n	80062cc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f06f 0212 	mvn.w	r2, #18
 8006326:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d123      	bne.n	800638a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006346:	2b00      	cmp	r3, #0
 8006348:	d11f      	bne.n	800638a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006350:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006354:	2b00      	cmp	r3, #0
 8006356:	d006      	beq.n	8006366 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006362:	2b00      	cmp	r3, #0
 8006364:	d111      	bne.n	800638a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006376:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d105      	bne.n	800638a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006382:	f043 0201 	orr.w	r2, r3, #1
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
	...

080063b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_ADC_ConfigChannel+0x1c>
 80063c8:	2302      	movs	r3, #2
 80063ca:	e105      	b.n	80065d8 <HAL_ADC_ConfigChannel+0x228>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b09      	cmp	r3, #9
 80063da:	d925      	bls.n	8006428 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68d9      	ldr	r1, [r3, #12]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	4613      	mov	r3, r2
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	4413      	add	r3, r2
 80063f0:	3b1e      	subs	r3, #30
 80063f2:	2207      	movs	r2, #7
 80063f4:	fa02 f303 	lsl.w	r3, r2, r3
 80063f8:	43da      	mvns	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	400a      	ands	r2, r1
 8006400:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68d9      	ldr	r1, [r3, #12]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	b29b      	uxth	r3, r3
 8006412:	4618      	mov	r0, r3
 8006414:	4603      	mov	r3, r0
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	4403      	add	r3, r0
 800641a:	3b1e      	subs	r3, #30
 800641c:	409a      	lsls	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	60da      	str	r2, [r3, #12]
 8006426:	e022      	b.n	800646e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6919      	ldr	r1, [r3, #16]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	461a      	mov	r2, r3
 8006436:	4613      	mov	r3, r2
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	4413      	add	r3, r2
 800643c:	2207      	movs	r2, #7
 800643e:	fa02 f303 	lsl.w	r3, r2, r3
 8006442:	43da      	mvns	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	400a      	ands	r2, r1
 800644a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6919      	ldr	r1, [r3, #16]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	b29b      	uxth	r3, r3
 800645c:	4618      	mov	r0, r3
 800645e:	4603      	mov	r3, r0
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	4403      	add	r3, r0
 8006464:	409a      	lsls	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2b06      	cmp	r3, #6
 8006474:	d824      	bhi.n	80064c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	3b05      	subs	r3, #5
 8006488:	221f      	movs	r2, #31
 800648a:	fa02 f303 	lsl.w	r3, r2, r3
 800648e:	43da      	mvns	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	400a      	ands	r2, r1
 8006496:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	4618      	mov	r0, r3
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	3b05      	subs	r3, #5
 80064b2:	fa00 f203 	lsl.w	r2, r0, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80064be:	e04c      	b.n	800655a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2b0c      	cmp	r3, #12
 80064c6:	d824      	bhi.n	8006512 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	3b23      	subs	r3, #35	@ 0x23
 80064da:	221f      	movs	r2, #31
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	43da      	mvns	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	400a      	ands	r2, r1
 80064e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	4618      	mov	r0, r3
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	3b23      	subs	r3, #35	@ 0x23
 8006504:	fa00 f203 	lsl.w	r2, r0, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006510:	e023      	b.n	800655a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	3b41      	subs	r3, #65	@ 0x41
 8006524:	221f      	movs	r2, #31
 8006526:	fa02 f303 	lsl.w	r3, r2, r3
 800652a:	43da      	mvns	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	400a      	ands	r2, r1
 8006532:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	b29b      	uxth	r3, r3
 8006540:	4618      	mov	r0, r3
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	3b41      	subs	r3, #65	@ 0x41
 800654e:	fa00 f203 	lsl.w	r2, r0, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800655a:	4b22      	ldr	r3, [pc, #136]	@ (80065e4 <HAL_ADC_ConfigChannel+0x234>)
 800655c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a21      	ldr	r2, [pc, #132]	@ (80065e8 <HAL_ADC_ConfigChannel+0x238>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d109      	bne.n	800657c <HAL_ADC_ConfigChannel+0x1cc>
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b12      	cmp	r3, #18
 800656e:	d105      	bne.n	800657c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a19      	ldr	r2, [pc, #100]	@ (80065e8 <HAL_ADC_ConfigChannel+0x238>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d123      	bne.n	80065ce <HAL_ADC_ConfigChannel+0x21e>
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b10      	cmp	r3, #16
 800658c:	d003      	beq.n	8006596 <HAL_ADC_ConfigChannel+0x1e6>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b11      	cmp	r3, #17
 8006594:	d11b      	bne.n	80065ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b10      	cmp	r3, #16
 80065a8:	d111      	bne.n	80065ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80065aa:	4b10      	ldr	r3, [pc, #64]	@ (80065ec <HAL_ADC_ConfigChannel+0x23c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a10      	ldr	r2, [pc, #64]	@ (80065f0 <HAL_ADC_ConfigChannel+0x240>)
 80065b0:	fba2 2303 	umull	r2, r3, r2, r3
 80065b4:	0c9a      	lsrs	r2, r3, #18
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80065c0:	e002      	b.n	80065c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1f9      	bne.n	80065c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	40012300 	.word	0x40012300
 80065e8:	40012000 	.word	0x40012000
 80065ec:	20000148 	.word	0x20000148
 80065f0:	431bde83 	.word	0x431bde83

080065f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80065fc:	4b79      	ldr	r3, [pc, #484]	@ (80067e4 <ADC_Init+0x1f0>)
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	431a      	orrs	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6859      	ldr	r1, [r3, #4]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	021a      	lsls	r2, r3, #8
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800664c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6859      	ldr	r1, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800666e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6899      	ldr	r1, [r3, #8]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006686:	4a58      	ldr	r2, [pc, #352]	@ (80067e8 <ADC_Init+0x1f4>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d022      	beq.n	80066d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800669a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6899      	ldr	r1, [r3, #8]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80066bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6899      	ldr	r1, [r3, #8]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	609a      	str	r2, [r3, #8]
 80066d0:	e00f      	b.n	80066f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80066e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80066f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0202 	bic.w	r2, r2, #2
 8006700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6899      	ldr	r1, [r3, #8]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	7e1b      	ldrb	r3, [r3, #24]
 800670c:	005a      	lsls	r2, r3, #1
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01b      	beq.n	8006758 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800672e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800673e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6859      	ldr	r1, [r3, #4]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674a:	3b01      	subs	r3, #1
 800674c:	035a      	lsls	r2, r3, #13
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	605a      	str	r2, [r3, #4]
 8006756:	e007      	b.n	8006768 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006766:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006776:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	3b01      	subs	r3, #1
 8006784:	051a      	lsls	r2, r3, #20
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800679c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6899      	ldr	r1, [r3, #8]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80067aa:	025a      	lsls	r2, r3, #9
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6899      	ldr	r1, [r3, #8]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	029a      	lsls	r2, r3, #10
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	609a      	str	r2, [r3, #8]
}
 80067d8:	bf00      	nop
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	40012300 	.word	0x40012300
 80067e8:	0f000001 	.word	0x0f000001

080067ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006830 <__NVIC_SetPriorityGrouping+0x44>)
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006808:	4013      	ands	r3, r2
 800680a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006814:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800681c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800681e:	4a04      	ldr	r2, [pc, #16]	@ (8006830 <__NVIC_SetPriorityGrouping+0x44>)
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	60d3      	str	r3, [r2, #12]
}
 8006824:	bf00      	nop
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	e000ed00 	.word	0xe000ed00

08006834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006834:	b480      	push	{r7}
 8006836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006838:	4b04      	ldr	r3, [pc, #16]	@ (800684c <__NVIC_GetPriorityGrouping+0x18>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	0a1b      	lsrs	r3, r3, #8
 800683e:	f003 0307 	and.w	r3, r3, #7
}
 8006842:	4618      	mov	r0, r3
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	e000ed00 	.word	0xe000ed00

08006850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	4603      	mov	r3, r0
 8006858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800685a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685e:	2b00      	cmp	r3, #0
 8006860:	db0b      	blt.n	800687a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006862:	79fb      	ldrb	r3, [r7, #7]
 8006864:	f003 021f 	and.w	r2, r3, #31
 8006868:	4907      	ldr	r1, [pc, #28]	@ (8006888 <__NVIC_EnableIRQ+0x38>)
 800686a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	2001      	movs	r0, #1
 8006872:	fa00 f202 	lsl.w	r2, r0, r2
 8006876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	e000e100 	.word	0xe000e100

0800688c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	4603      	mov	r3, r0
 8006894:	6039      	str	r1, [r7, #0]
 8006896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800689c:	2b00      	cmp	r3, #0
 800689e:	db0a      	blt.n	80068b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	490c      	ldr	r1, [pc, #48]	@ (80068d8 <__NVIC_SetPriority+0x4c>)
 80068a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068aa:	0112      	lsls	r2, r2, #4
 80068ac:	b2d2      	uxtb	r2, r2
 80068ae:	440b      	add	r3, r1
 80068b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068b4:	e00a      	b.n	80068cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	4908      	ldr	r1, [pc, #32]	@ (80068dc <__NVIC_SetPriority+0x50>)
 80068bc:	79fb      	ldrb	r3, [r7, #7]
 80068be:	f003 030f 	and.w	r3, r3, #15
 80068c2:	3b04      	subs	r3, #4
 80068c4:	0112      	lsls	r2, r2, #4
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	440b      	add	r3, r1
 80068ca:	761a      	strb	r2, [r3, #24]
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	e000e100 	.word	0xe000e100
 80068dc:	e000ed00 	.word	0xe000ed00

080068e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b089      	sub	sp, #36	@ 0x24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f003 0307 	and.w	r3, r3, #7
 80068f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	f1c3 0307 	rsb	r3, r3, #7
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	bf28      	it	cs
 80068fe:	2304      	movcs	r3, #4
 8006900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	3304      	adds	r3, #4
 8006906:	2b06      	cmp	r3, #6
 8006908:	d902      	bls.n	8006910 <NVIC_EncodePriority+0x30>
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	3b03      	subs	r3, #3
 800690e:	e000      	b.n	8006912 <NVIC_EncodePriority+0x32>
 8006910:	2300      	movs	r3, #0
 8006912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006914:	f04f 32ff 	mov.w	r2, #4294967295
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	fa02 f303 	lsl.w	r3, r2, r3
 800691e:	43da      	mvns	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	401a      	ands	r2, r3
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006928:	f04f 31ff 	mov.w	r1, #4294967295
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	fa01 f303 	lsl.w	r3, r1, r3
 8006932:	43d9      	mvns	r1, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006938:	4313      	orrs	r3, r2
         );
}
 800693a:	4618      	mov	r0, r3
 800693c:	3724      	adds	r7, #36	@ 0x24
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
	...

08006948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3b01      	subs	r3, #1
 8006954:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006958:	d301      	bcc.n	800695e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800695a:	2301      	movs	r3, #1
 800695c:	e00f      	b.n	800697e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800695e:	4a0a      	ldr	r2, [pc, #40]	@ (8006988 <SysTick_Config+0x40>)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	3b01      	subs	r3, #1
 8006964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006966:	210f      	movs	r1, #15
 8006968:	f04f 30ff 	mov.w	r0, #4294967295
 800696c:	f7ff ff8e 	bl	800688c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006970:	4b05      	ldr	r3, [pc, #20]	@ (8006988 <SysTick_Config+0x40>)
 8006972:	2200      	movs	r2, #0
 8006974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006976:	4b04      	ldr	r3, [pc, #16]	@ (8006988 <SysTick_Config+0x40>)
 8006978:	2207      	movs	r2, #7
 800697a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	e000e010 	.word	0xe000e010

0800698c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7ff ff29 	bl	80067ec <__NVIC_SetPriorityGrouping>
}
 800699a:	bf00      	nop
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b086      	sub	sp, #24
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	4603      	mov	r3, r0
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	607a      	str	r2, [r7, #4]
 80069ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80069b4:	f7ff ff3e 	bl	8006834 <__NVIC_GetPriorityGrouping>
 80069b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	68b9      	ldr	r1, [r7, #8]
 80069be:	6978      	ldr	r0, [r7, #20]
 80069c0:	f7ff ff8e 	bl	80068e0 <NVIC_EncodePriority>
 80069c4:	4602      	mov	r2, r0
 80069c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069ca:	4611      	mov	r1, r2
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff ff5d 	bl	800688c <__NVIC_SetPriority>
}
 80069d2:	bf00      	nop
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
 80069e0:	4603      	mov	r3, r0
 80069e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff ff31 	bl	8006850 <__NVIC_EnableIRQ>
}
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7ff ffa2 	bl	8006948 <SysTick_Config>
 8006a04:	4603      	mov	r3, r0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b084      	sub	sp, #16
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a1a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006a1c:	f7ff fab6 	bl	8005f8c <HAL_GetTick>
 8006a20:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d008      	beq.n	8006a40 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2280      	movs	r2, #128	@ 0x80
 8006a32:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e052      	b.n	8006ae6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0216 	bic.w	r2, r2, #22
 8006a4e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	695a      	ldr	r2, [r3, #20]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a5e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d103      	bne.n	8006a70 <HAL_DMA_Abort+0x62>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d007      	beq.n	8006a80 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0208 	bic.w	r2, r2, #8
 8006a7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0201 	bic.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a90:	e013      	b.n	8006aba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a92:	f7ff fa7b 	bl	8005f8c <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	2b05      	cmp	r3, #5
 8006a9e:	d90c      	bls.n	8006aba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2203      	movs	r2, #3
 8006aaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e015      	b.n	8006ae6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e4      	bne.n	8006a92 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006acc:	223f      	movs	r2, #63	@ 0x3f
 8006ace:	409a      	lsls	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d004      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2280      	movs	r2, #128	@ 0x80
 8006b06:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e00c      	b.n	8006b26 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2205      	movs	r2, #5
 8006b10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 0201 	bic.w	r2, r2, #1
 8006b22:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
	...

08006b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b089      	sub	sp, #36	@ 0x24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	61fb      	str	r3, [r7, #28]
 8006b4e:	e16b      	b.n	8006e28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006b50:	2201      	movs	r2, #1
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	fa02 f303 	lsl.w	r3, r2, r3
 8006b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	4013      	ands	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	f040 815a 	bne.w	8006e22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d005      	beq.n	8006b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d130      	bne.n	8006be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	005b      	lsls	r3, r3, #1
 8006b90:	2203      	movs	r2, #3
 8006b92:	fa02 f303 	lsl.w	r3, r2, r3
 8006b96:	43db      	mvns	r3, r3
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc4:	43db      	mvns	r3, r3
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	4013      	ands	r3, r2
 8006bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	091b      	lsrs	r3, r3, #4
 8006bd2:	f003 0201 	and.w	r2, r3, #1
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f003 0303 	and.w	r3, r3, #3
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d017      	beq.n	8006c24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	2203      	movs	r2, #3
 8006c00:	fa02 f303 	lsl.w	r3, r2, r3
 8006c04:	43db      	mvns	r3, r3
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	fa02 f303 	lsl.w	r3, r2, r3
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f003 0303 	and.w	r3, r3, #3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d123      	bne.n	8006c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	08da      	lsrs	r2, r3, #3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3208      	adds	r2, #8
 8006c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	f003 0307 	and.w	r3, r3, #7
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	220f      	movs	r2, #15
 8006c48:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4c:	43db      	mvns	r3, r3
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	4013      	ands	r3, r2
 8006c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	f003 0307 	and.w	r3, r3, #7
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	fa02 f303 	lsl.w	r3, r2, r3
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	08da      	lsrs	r2, r3, #3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3208      	adds	r2, #8
 8006c72:	69b9      	ldr	r1, [r7, #24]
 8006c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	2203      	movs	r2, #3
 8006c84:	fa02 f303 	lsl.w	r3, r2, r3
 8006c88:	43db      	mvns	r3, r3
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f003 0203 	and.w	r2, r3, #3
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 80b4 	beq.w	8006e22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	4b60      	ldr	r3, [pc, #384]	@ (8006e40 <HAL_GPIO_Init+0x30c>)
 8006cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc2:	4a5f      	ldr	r2, [pc, #380]	@ (8006e40 <HAL_GPIO_Init+0x30c>)
 8006cc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8006cca:	4b5d      	ldr	r3, [pc, #372]	@ (8006e40 <HAL_GPIO_Init+0x30c>)
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006cd6:	4a5b      	ldr	r2, [pc, #364]	@ (8006e44 <HAL_GPIO_Init+0x310>)
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	089b      	lsrs	r3, r3, #2
 8006cdc:	3302      	adds	r3, #2
 8006cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	f003 0303 	and.w	r3, r3, #3
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	220f      	movs	r2, #15
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	43db      	mvns	r3, r3
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a52      	ldr	r2, [pc, #328]	@ (8006e48 <HAL_GPIO_Init+0x314>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d02b      	beq.n	8006d5a <HAL_GPIO_Init+0x226>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a51      	ldr	r2, [pc, #324]	@ (8006e4c <HAL_GPIO_Init+0x318>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d025      	beq.n	8006d56 <HAL_GPIO_Init+0x222>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a50      	ldr	r2, [pc, #320]	@ (8006e50 <HAL_GPIO_Init+0x31c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d01f      	beq.n	8006d52 <HAL_GPIO_Init+0x21e>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a4f      	ldr	r2, [pc, #316]	@ (8006e54 <HAL_GPIO_Init+0x320>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d019      	beq.n	8006d4e <HAL_GPIO_Init+0x21a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a4e      	ldr	r2, [pc, #312]	@ (8006e58 <HAL_GPIO_Init+0x324>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d013      	beq.n	8006d4a <HAL_GPIO_Init+0x216>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a4d      	ldr	r2, [pc, #308]	@ (8006e5c <HAL_GPIO_Init+0x328>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00d      	beq.n	8006d46 <HAL_GPIO_Init+0x212>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a4c      	ldr	r2, [pc, #304]	@ (8006e60 <HAL_GPIO_Init+0x32c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d007      	beq.n	8006d42 <HAL_GPIO_Init+0x20e>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a4b      	ldr	r2, [pc, #300]	@ (8006e64 <HAL_GPIO_Init+0x330>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d101      	bne.n	8006d3e <HAL_GPIO_Init+0x20a>
 8006d3a:	2307      	movs	r3, #7
 8006d3c:	e00e      	b.n	8006d5c <HAL_GPIO_Init+0x228>
 8006d3e:	2308      	movs	r3, #8
 8006d40:	e00c      	b.n	8006d5c <HAL_GPIO_Init+0x228>
 8006d42:	2306      	movs	r3, #6
 8006d44:	e00a      	b.n	8006d5c <HAL_GPIO_Init+0x228>
 8006d46:	2305      	movs	r3, #5
 8006d48:	e008      	b.n	8006d5c <HAL_GPIO_Init+0x228>
 8006d4a:	2304      	movs	r3, #4
 8006d4c:	e006      	b.n	8006d5c <HAL_GPIO_Init+0x228>
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e004      	b.n	8006d5c <HAL_GPIO_Init+0x228>
 8006d52:	2302      	movs	r3, #2
 8006d54:	e002      	b.n	8006d5c <HAL_GPIO_Init+0x228>
 8006d56:	2301      	movs	r3, #1
 8006d58:	e000      	b.n	8006d5c <HAL_GPIO_Init+0x228>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	69fa      	ldr	r2, [r7, #28]
 8006d5e:	f002 0203 	and.w	r2, r2, #3
 8006d62:	0092      	lsls	r2, r2, #2
 8006d64:	4093      	lsls	r3, r2
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d6c:	4935      	ldr	r1, [pc, #212]	@ (8006e44 <HAL_GPIO_Init+0x310>)
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	089b      	lsrs	r3, r3, #2
 8006d72:	3302      	adds	r3, #2
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8006e68 <HAL_GPIO_Init+0x334>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	43db      	mvns	r3, r3
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	4013      	ands	r3, r2
 8006d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006d9e:	4a32      	ldr	r2, [pc, #200]	@ (8006e68 <HAL_GPIO_Init+0x334>)
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006da4:	4b30      	ldr	r3, [pc, #192]	@ (8006e68 <HAL_GPIO_Init+0x334>)
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	43db      	mvns	r3, r3
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	4013      	ands	r3, r2
 8006db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006dc8:	4a27      	ldr	r2, [pc, #156]	@ (8006e68 <HAL_GPIO_Init+0x334>)
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006dce:	4b26      	ldr	r3, [pc, #152]	@ (8006e68 <HAL_GPIO_Init+0x334>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	43db      	mvns	r3, r3
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006dea:	69ba      	ldr	r2, [r7, #24]
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006df2:	4a1d      	ldr	r2, [pc, #116]	@ (8006e68 <HAL_GPIO_Init+0x334>)
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006df8:	4b1b      	ldr	r3, [pc, #108]	@ (8006e68 <HAL_GPIO_Init+0x334>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	43db      	mvns	r3, r3
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	4013      	ands	r3, r2
 8006e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006e1c:	4a12      	ldr	r2, [pc, #72]	@ (8006e68 <HAL_GPIO_Init+0x334>)
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	3301      	adds	r3, #1
 8006e26:	61fb      	str	r3, [r7, #28]
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	2b0f      	cmp	r3, #15
 8006e2c:	f67f ae90 	bls.w	8006b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006e30:	bf00      	nop
 8006e32:	bf00      	nop
 8006e34:	3724      	adds	r7, #36	@ 0x24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40023800 	.word	0x40023800
 8006e44:	40013800 	.word	0x40013800
 8006e48:	40020000 	.word	0x40020000
 8006e4c:	40020400 	.word	0x40020400
 8006e50:	40020800 	.word	0x40020800
 8006e54:	40020c00 	.word	0x40020c00
 8006e58:	40021000 	.word	0x40021000
 8006e5c:	40021400 	.word	0x40021400
 8006e60:	40021800 	.word	0x40021800
 8006e64:	40021c00 	.word	0x40021c00
 8006e68:	40013c00 	.word	0x40013c00

08006e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	807b      	strh	r3, [r7, #2]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e7c:	787b      	ldrb	r3, [r7, #1]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e82:	887a      	ldrh	r2, [r7, #2]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006e88:	e003      	b.n	8006e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006e8a:	887b      	ldrh	r3, [r7, #2]
 8006e8c:	041a      	lsls	r2, r3, #16
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	619a      	str	r2, [r3, #24]
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
	...

08006ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e12b      	b.n	800710a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d106      	bne.n	8006ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7fe fc52 	bl	8005770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2224      	movs	r2, #36	@ 0x24
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 0201 	bic.w	r2, r2, #1
 8006ee2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ef2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006f04:	f001 fc48 	bl	8008798 <HAL_RCC_GetPCLK1Freq>
 8006f08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	4a81      	ldr	r2, [pc, #516]	@ (8007114 <HAL_I2C_Init+0x274>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d807      	bhi.n	8006f24 <HAL_I2C_Init+0x84>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	4a80      	ldr	r2, [pc, #512]	@ (8007118 <HAL_I2C_Init+0x278>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	bf94      	ite	ls
 8006f1c:	2301      	movls	r3, #1
 8006f1e:	2300      	movhi	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	e006      	b.n	8006f32 <HAL_I2C_Init+0x92>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4a7d      	ldr	r2, [pc, #500]	@ (800711c <HAL_I2C_Init+0x27c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	bf94      	ite	ls
 8006f2c:	2301      	movls	r3, #1
 8006f2e:	2300      	movhi	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e0e7      	b.n	800710a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	4a78      	ldr	r2, [pc, #480]	@ (8007120 <HAL_I2C_Init+0x280>)
 8006f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f42:	0c9b      	lsrs	r3, r3, #18
 8006f44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	4a6a      	ldr	r2, [pc, #424]	@ (8007114 <HAL_I2C_Init+0x274>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d802      	bhi.n	8006f74 <HAL_I2C_Init+0xd4>
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	3301      	adds	r3, #1
 8006f72:	e009      	b.n	8006f88 <HAL_I2C_Init+0xe8>
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006f7a:	fb02 f303 	mul.w	r3, r2, r3
 8006f7e:	4a69      	ldr	r2, [pc, #420]	@ (8007124 <HAL_I2C_Init+0x284>)
 8006f80:	fba2 2303 	umull	r2, r3, r2, r3
 8006f84:	099b      	lsrs	r3, r3, #6
 8006f86:	3301      	adds	r3, #1
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6812      	ldr	r2, [r2, #0]
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006f9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	495c      	ldr	r1, [pc, #368]	@ (8007114 <HAL_I2C_Init+0x274>)
 8006fa4:	428b      	cmp	r3, r1
 8006fa6:	d819      	bhi.n	8006fdc <HAL_I2C_Init+0x13c>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	1e59      	subs	r1, r3, #1
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fb6:	1c59      	adds	r1, r3, #1
 8006fb8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006fbc:	400b      	ands	r3, r1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <HAL_I2C_Init+0x138>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	1e59      	subs	r1, r3, #1
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fd6:	e051      	b.n	800707c <HAL_I2C_Init+0x1dc>
 8006fd8:	2304      	movs	r3, #4
 8006fda:	e04f      	b.n	800707c <HAL_I2C_Init+0x1dc>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d111      	bne.n	8007008 <HAL_I2C_Init+0x168>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	1e58      	subs	r0, r3, #1
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6859      	ldr	r1, [r3, #4]
 8006fec:	460b      	mov	r3, r1
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	440b      	add	r3, r1
 8006ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bf0c      	ite	eq
 8007000:	2301      	moveq	r3, #1
 8007002:	2300      	movne	r3, #0
 8007004:	b2db      	uxtb	r3, r3
 8007006:	e012      	b.n	800702e <HAL_I2C_Init+0x18e>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	1e58      	subs	r0, r3, #1
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6859      	ldr	r1, [r3, #4]
 8007010:	460b      	mov	r3, r1
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	440b      	add	r3, r1
 8007016:	0099      	lsls	r1, r3, #2
 8007018:	440b      	add	r3, r1
 800701a:	fbb0 f3f3 	udiv	r3, r0, r3
 800701e:	3301      	adds	r3, #1
 8007020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007024:	2b00      	cmp	r3, #0
 8007026:	bf0c      	ite	eq
 8007028:	2301      	moveq	r3, #1
 800702a:	2300      	movne	r3, #0
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <HAL_I2C_Init+0x196>
 8007032:	2301      	movs	r3, #1
 8007034:	e022      	b.n	800707c <HAL_I2C_Init+0x1dc>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10e      	bne.n	800705c <HAL_I2C_Init+0x1bc>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	1e58      	subs	r0, r3, #1
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6859      	ldr	r1, [r3, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	440b      	add	r3, r1
 800704c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007050:	3301      	adds	r3, #1
 8007052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800705a:	e00f      	b.n	800707c <HAL_I2C_Init+0x1dc>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	1e58      	subs	r0, r3, #1
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6859      	ldr	r1, [r3, #4]
 8007064:	460b      	mov	r3, r1
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	440b      	add	r3, r1
 800706a:	0099      	lsls	r1, r3, #2
 800706c:	440b      	add	r3, r1
 800706e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007072:	3301      	adds	r3, #1
 8007074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007078:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800707c:	6879      	ldr	r1, [r7, #4]
 800707e:	6809      	ldr	r1, [r1, #0]
 8007080:	4313      	orrs	r3, r2
 8007082:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69da      	ldr	r2, [r3, #28]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	431a      	orrs	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80070aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	6911      	ldr	r1, [r2, #16]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	68d2      	ldr	r2, [r2, #12]
 80070b6:	4311      	orrs	r1, r2
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6812      	ldr	r2, [r2, #0]
 80070bc:	430b      	orrs	r3, r1
 80070be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	695a      	ldr	r2, [r3, #20]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	431a      	orrs	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f042 0201 	orr.w	r2, r2, #1
 80070ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	000186a0 	.word	0x000186a0
 8007118:	001e847f 	.word	0x001e847f
 800711c:	003d08ff 	.word	0x003d08ff
 8007120:	431bde83 	.word	0x431bde83
 8007124:	10624dd3 	.word	0x10624dd3

08007128 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af02      	add	r7, sp, #8
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	4608      	mov	r0, r1
 8007132:	4611      	mov	r1, r2
 8007134:	461a      	mov	r2, r3
 8007136:	4603      	mov	r3, r0
 8007138:	817b      	strh	r3, [r7, #10]
 800713a:	460b      	mov	r3, r1
 800713c:	813b      	strh	r3, [r7, #8]
 800713e:	4613      	mov	r3, r2
 8007140:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007142:	f7fe ff23 	bl	8005f8c <HAL_GetTick>
 8007146:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b20      	cmp	r3, #32
 8007152:	f040 80d9 	bne.w	8007308 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	2319      	movs	r3, #25
 800715c:	2201      	movs	r2, #1
 800715e:	496d      	ldr	r1, [pc, #436]	@ (8007314 <HAL_I2C_Mem_Write+0x1ec>)
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f000 fc8b 	bl	8007a7c <I2C_WaitOnFlagUntilTimeout>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800716c:	2302      	movs	r3, #2
 800716e:	e0cc      	b.n	800730a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007176:	2b01      	cmp	r3, #1
 8007178:	d101      	bne.n	800717e <HAL_I2C_Mem_Write+0x56>
 800717a:	2302      	movs	r3, #2
 800717c:	e0c5      	b.n	800730a <HAL_I2C_Mem_Write+0x1e2>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b01      	cmp	r3, #1
 8007192:	d007      	beq.n	80071a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0201 	orr.w	r2, r2, #1
 80071a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2221      	movs	r2, #33	@ 0x21
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2240      	movs	r2, #64	@ 0x40
 80071c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6a3a      	ldr	r2, [r7, #32]
 80071ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80071d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071da:	b29a      	uxth	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	4a4d      	ldr	r2, [pc, #308]	@ (8007318 <HAL_I2C_Mem_Write+0x1f0>)
 80071e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071e6:	88f8      	ldrh	r0, [r7, #6]
 80071e8:	893a      	ldrh	r2, [r7, #8]
 80071ea:	8979      	ldrh	r1, [r7, #10]
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	9301      	str	r3, [sp, #4]
 80071f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	4603      	mov	r3, r0
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 fac2 	bl	8007780 <I2C_RequestMemoryWrite>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d052      	beq.n	80072a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e081      	b.n	800730a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 fd50 	bl	8007cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00d      	beq.n	8007232 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721a:	2b04      	cmp	r3, #4
 800721c:	d107      	bne.n	800722e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800722c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e06b      	b.n	800730a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007236:	781a      	ldrb	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007258:	b29b      	uxth	r3, r3
 800725a:	3b01      	subs	r3, #1
 800725c:	b29a      	uxth	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b04      	cmp	r3, #4
 800726e:	d11b      	bne.n	80072a8 <HAL_I2C_Mem_Write+0x180>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007274:	2b00      	cmp	r3, #0
 8007276:	d017      	beq.n	80072a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727c:	781a      	ldrb	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007288:	1c5a      	adds	r2, r3, #1
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007292:	3b01      	subs	r3, #1
 8007294:	b29a      	uxth	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800729e:	b29b      	uxth	r3, r3
 80072a0:	3b01      	subs	r3, #1
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1aa      	bne.n	8007206 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 fd43 	bl	8007d40 <I2C_WaitOnBTFFlagUntilTimeout>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00d      	beq.n	80072dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	d107      	bne.n	80072d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e016      	b.n	800730a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2220      	movs	r2, #32
 80072f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	e000      	b.n	800730a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007308:	2302      	movs	r3, #2
  }
}
 800730a:	4618      	mov	r0, r3
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	00100002 	.word	0x00100002
 8007318:	ffff0000 	.word	0xffff0000

0800731c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b08c      	sub	sp, #48	@ 0x30
 8007320:	af02      	add	r7, sp, #8
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	4608      	mov	r0, r1
 8007326:	4611      	mov	r1, r2
 8007328:	461a      	mov	r2, r3
 800732a:	4603      	mov	r3, r0
 800732c:	817b      	strh	r3, [r7, #10]
 800732e:	460b      	mov	r3, r1
 8007330:	813b      	strh	r3, [r7, #8]
 8007332:	4613      	mov	r3, r2
 8007334:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007336:	f7fe fe29 	bl	8005f8c <HAL_GetTick>
 800733a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b20      	cmp	r3, #32
 8007346:	f040 8214 	bne.w	8007772 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	2319      	movs	r3, #25
 8007350:	2201      	movs	r2, #1
 8007352:	497b      	ldr	r1, [pc, #492]	@ (8007540 <HAL_I2C_Mem_Read+0x224>)
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 fb91 	bl	8007a7c <I2C_WaitOnFlagUntilTimeout>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007360:	2302      	movs	r3, #2
 8007362:	e207      	b.n	8007774 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800736a:	2b01      	cmp	r3, #1
 800736c:	d101      	bne.n	8007372 <HAL_I2C_Mem_Read+0x56>
 800736e:	2302      	movs	r3, #2
 8007370:	e200      	b.n	8007774 <HAL_I2C_Mem_Read+0x458>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b01      	cmp	r3, #1
 8007386:	d007      	beq.n	8007398 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f042 0201 	orr.w	r2, r2, #1
 8007396:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2222      	movs	r2, #34	@ 0x22
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2240      	movs	r2, #64	@ 0x40
 80073b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80073c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4a5b      	ldr	r2, [pc, #364]	@ (8007544 <HAL_I2C_Mem_Read+0x228>)
 80073d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073da:	88f8      	ldrh	r0, [r7, #6]
 80073dc:	893a      	ldrh	r2, [r7, #8]
 80073de:	8979      	ldrh	r1, [r7, #10]
 80073e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	4603      	mov	r3, r0
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 fa5e 	bl	80078ac <I2C_RequestMemoryRead>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e1bc      	b.n	8007774 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d113      	bne.n	800742a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007402:	2300      	movs	r3, #0
 8007404:	623b      	str	r3, [r7, #32]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	623b      	str	r3, [r7, #32]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	623b      	str	r3, [r7, #32]
 8007416:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	e190      	b.n	800774c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800742e:	2b01      	cmp	r3, #1
 8007430:	d11b      	bne.n	800746a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007440:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007442:	2300      	movs	r3, #0
 8007444:	61fb      	str	r3, [r7, #28]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	61fb      	str	r3, [r7, #28]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	61fb      	str	r3, [r7, #28]
 8007456:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	e170      	b.n	800774c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800746e:	2b02      	cmp	r3, #2
 8007470:	d11b      	bne.n	80074aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007480:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007490:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007492:	2300      	movs	r3, #0
 8007494:	61bb      	str	r3, [r7, #24]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	61bb      	str	r3, [r7, #24]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	61bb      	str	r3, [r7, #24]
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	e150      	b.n	800774c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074aa:	2300      	movs	r3, #0
 80074ac:	617b      	str	r3, [r7, #20]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	617b      	str	r3, [r7, #20]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	617b      	str	r3, [r7, #20]
 80074be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80074c0:	e144      	b.n	800774c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	f200 80f1 	bhi.w	80076ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d123      	bne.n	800751c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 fc79 	bl	8007dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e145      	b.n	8007774 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	691a      	ldr	r2, [r3, #16]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f2:	b2d2      	uxtb	r2, r2
 80074f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007504:	3b01      	subs	r3, #1
 8007506:	b29a      	uxth	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007510:	b29b      	uxth	r3, r3
 8007512:	3b01      	subs	r3, #1
 8007514:	b29a      	uxth	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800751a:	e117      	b.n	800774c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007520:	2b02      	cmp	r3, #2
 8007522:	d14e      	bne.n	80075c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752a:	2200      	movs	r2, #0
 800752c:	4906      	ldr	r1, [pc, #24]	@ (8007548 <HAL_I2C_Mem_Read+0x22c>)
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f000 faa4 	bl	8007a7c <I2C_WaitOnFlagUntilTimeout>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d008      	beq.n	800754c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e11a      	b.n	8007774 <HAL_I2C_Mem_Read+0x458>
 800753e:	bf00      	nop
 8007540:	00100002 	.word	0x00100002
 8007544:	ffff0000 	.word	0xffff0000
 8007548:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800755a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	691a      	ldr	r2, [r3, #16]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007566:	b2d2      	uxtb	r2, r2
 8007568:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007578:	3b01      	subs	r3, #1
 800757a:	b29a      	uxth	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007584:	b29b      	uxth	r3, r3
 8007586:	3b01      	subs	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	691a      	ldr	r2, [r3, #16]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007598:	b2d2      	uxtb	r2, r2
 800759a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075aa:	3b01      	subs	r3, #1
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	3b01      	subs	r3, #1
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80075c0:	e0c4      	b.n	800774c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c8:	2200      	movs	r2, #0
 80075ca:	496c      	ldr	r1, [pc, #432]	@ (800777c <HAL_I2C_Mem_Read+0x460>)
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fa55 	bl	8007a7c <I2C_WaitOnFlagUntilTimeout>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e0cb      	b.n	8007774 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	691a      	ldr	r2, [r3, #16]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f6:	b2d2      	uxtb	r2, r2
 80075f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007614:	b29b      	uxth	r3, r3
 8007616:	3b01      	subs	r3, #1
 8007618:	b29a      	uxth	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800761e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007624:	2200      	movs	r2, #0
 8007626:	4955      	ldr	r1, [pc, #340]	@ (800777c <HAL_I2C_Mem_Read+0x460>)
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 fa27 	bl	8007a7c <I2C_WaitOnFlagUntilTimeout>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e09d      	b.n	8007774 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007646:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	691a      	ldr	r2, [r3, #16]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007652:	b2d2      	uxtb	r2, r2
 8007654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007664:	3b01      	subs	r3, #1
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007670:	b29b      	uxth	r3, r3
 8007672:	3b01      	subs	r3, #1
 8007674:	b29a      	uxth	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	691a      	ldr	r2, [r3, #16]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007684:	b2d2      	uxtb	r2, r2
 8007686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007696:	3b01      	subs	r3, #1
 8007698:	b29a      	uxth	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80076ac:	e04e      	b.n	800774c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 fb8c 	bl	8007dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e058      	b.n	8007774 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	691a      	ldr	r2, [r3, #16]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076cc:	b2d2      	uxtb	r2, r2
 80076ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076de:	3b01      	subs	r3, #1
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	3b01      	subs	r3, #1
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	f003 0304 	and.w	r3, r3, #4
 80076fe:	2b04      	cmp	r3, #4
 8007700:	d124      	bne.n	800774c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007706:	2b03      	cmp	r3, #3
 8007708:	d107      	bne.n	800771a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007718:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	691a      	ldr	r2, [r3, #16]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007724:	b2d2      	uxtb	r2, r2
 8007726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007736:	3b01      	subs	r3, #1
 8007738:	b29a      	uxth	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007742:	b29b      	uxth	r3, r3
 8007744:	3b01      	subs	r3, #1
 8007746:	b29a      	uxth	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007750:	2b00      	cmp	r3, #0
 8007752:	f47f aeb6 	bne.w	80074c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2220      	movs	r2, #32
 800775a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	e000      	b.n	8007774 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007772:	2302      	movs	r3, #2
  }
}
 8007774:	4618      	mov	r0, r3
 8007776:	3728      	adds	r7, #40	@ 0x28
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	00010004 	.word	0x00010004

08007780 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af02      	add	r7, sp, #8
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	4608      	mov	r0, r1
 800778a:	4611      	mov	r1, r2
 800778c:	461a      	mov	r2, r3
 800778e:	4603      	mov	r3, r0
 8007790:	817b      	strh	r3, [r7, #10]
 8007792:	460b      	mov	r3, r1
 8007794:	813b      	strh	r3, [r7, #8]
 8007796:	4613      	mov	r3, r2
 8007798:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 f960 	bl	8007a7c <I2C_WaitOnFlagUntilTimeout>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00d      	beq.n	80077de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077d0:	d103      	bne.n	80077da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e05f      	b.n	800789e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077de:	897b      	ldrh	r3, [r7, #10]
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	461a      	mov	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80077ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f0:	6a3a      	ldr	r2, [r7, #32]
 80077f2:	492d      	ldr	r1, [pc, #180]	@ (80078a8 <I2C_RequestMemoryWrite+0x128>)
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 f9bb 	bl	8007b70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e04c      	b.n	800789e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007804:	2300      	movs	r3, #0
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	617b      	str	r3, [r7, #20]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	617b      	str	r3, [r7, #20]
 8007818:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800781a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800781c:	6a39      	ldr	r1, [r7, #32]
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 fa46 	bl	8007cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00d      	beq.n	8007846 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782e:	2b04      	cmp	r3, #4
 8007830:	d107      	bne.n	8007842 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007840:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e02b      	b.n	800789e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007846:	88fb      	ldrh	r3, [r7, #6]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d105      	bne.n	8007858 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800784c:	893b      	ldrh	r3, [r7, #8]
 800784e:	b2da      	uxtb	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	611a      	str	r2, [r3, #16]
 8007856:	e021      	b.n	800789c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007858:	893b      	ldrh	r3, [r7, #8]
 800785a:	0a1b      	lsrs	r3, r3, #8
 800785c:	b29b      	uxth	r3, r3
 800785e:	b2da      	uxtb	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007868:	6a39      	ldr	r1, [r7, #32]
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 fa20 	bl	8007cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00d      	beq.n	8007892 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800787a:	2b04      	cmp	r3, #4
 800787c:	d107      	bne.n	800788e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800788c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e005      	b.n	800789e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007892:	893b      	ldrh	r3, [r7, #8]
 8007894:	b2da      	uxtb	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	00010002 	.word	0x00010002

080078ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b088      	sub	sp, #32
 80078b0:	af02      	add	r7, sp, #8
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	4608      	mov	r0, r1
 80078b6:	4611      	mov	r1, r2
 80078b8:	461a      	mov	r2, r3
 80078ba:	4603      	mov	r3, r0
 80078bc:	817b      	strh	r3, [r7, #10]
 80078be:	460b      	mov	r3, r1
 80078c0:	813b      	strh	r3, [r7, #8]
 80078c2:	4613      	mov	r3, r2
 80078c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80078d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f000 f8c2 	bl	8007a7c <I2C_WaitOnFlagUntilTimeout>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00d      	beq.n	800791a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800790c:	d103      	bne.n	8007916 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007914:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e0aa      	b.n	8007a70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800791a:	897b      	ldrh	r3, [r7, #10]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	461a      	mov	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007928:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792c:	6a3a      	ldr	r2, [r7, #32]
 800792e:	4952      	ldr	r1, [pc, #328]	@ (8007a78 <I2C_RequestMemoryRead+0x1cc>)
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 f91d 	bl	8007b70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e097      	b.n	8007a70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007940:	2300      	movs	r3, #0
 8007942:	617b      	str	r3, [r7, #20]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	617b      	str	r3, [r7, #20]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	617b      	str	r3, [r7, #20]
 8007954:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007958:	6a39      	ldr	r1, [r7, #32]
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f000 f9a8 	bl	8007cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00d      	beq.n	8007982 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796a:	2b04      	cmp	r3, #4
 800796c:	d107      	bne.n	800797e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800797c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e076      	b.n	8007a70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007982:	88fb      	ldrh	r3, [r7, #6]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d105      	bne.n	8007994 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007988:	893b      	ldrh	r3, [r7, #8]
 800798a:	b2da      	uxtb	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	611a      	str	r2, [r3, #16]
 8007992:	e021      	b.n	80079d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007994:	893b      	ldrh	r3, [r7, #8]
 8007996:	0a1b      	lsrs	r3, r3, #8
 8007998:	b29b      	uxth	r3, r3
 800799a:	b2da      	uxtb	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079a4:	6a39      	ldr	r1, [r7, #32]
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 f982 	bl	8007cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00d      	beq.n	80079ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	d107      	bne.n	80079ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e050      	b.n	8007a70 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079ce:	893b      	ldrh	r3, [r7, #8]
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079da:	6a39      	ldr	r1, [r7, #32]
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f967 	bl	8007cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00d      	beq.n	8007a04 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	d107      	bne.n	8007a00 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e035      	b.n	8007a70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a12:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 f82b 	bl	8007a7c <I2C_WaitOnFlagUntilTimeout>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00d      	beq.n	8007a48 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a3a:	d103      	bne.n	8007a44 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e013      	b.n	8007a70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007a48:	897b      	ldrh	r3, [r7, #10]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	f043 0301 	orr.w	r3, r3, #1
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	6a3a      	ldr	r2, [r7, #32]
 8007a5c:	4906      	ldr	r1, [pc, #24]	@ (8007a78 <I2C_RequestMemoryRead+0x1cc>)
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 f886 	bl	8007b70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e000      	b.n	8007a70 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	00010002 	.word	0x00010002

08007a7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	603b      	str	r3, [r7, #0]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a8c:	e048      	b.n	8007b20 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a94:	d044      	beq.n	8007b20 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a96:	f7fe fa79 	bl	8005f8c <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d302      	bcc.n	8007aac <I2C_WaitOnFlagUntilTimeout+0x30>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d139      	bne.n	8007b20 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	0c1b      	lsrs	r3, r3, #16
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d10d      	bne.n	8007ad2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	43da      	mvns	r2, r3
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	bf0c      	ite	eq
 8007ac8:	2301      	moveq	r3, #1
 8007aca:	2300      	movne	r3, #0
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	461a      	mov	r2, r3
 8007ad0:	e00c      	b.n	8007aec <I2C_WaitOnFlagUntilTimeout+0x70>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	43da      	mvns	r2, r3
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	4013      	ands	r3, r2
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	bf0c      	ite	eq
 8007ae4:	2301      	moveq	r3, #1
 8007ae6:	2300      	movne	r3, #0
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	461a      	mov	r2, r3
 8007aec:	79fb      	ldrb	r3, [r7, #7]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d116      	bne.n	8007b20 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b0c:	f043 0220 	orr.w	r2, r3, #32
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e023      	b.n	8007b68 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	0c1b      	lsrs	r3, r3, #16
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d10d      	bne.n	8007b46 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	43da      	mvns	r2, r3
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	4013      	ands	r3, r2
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	bf0c      	ite	eq
 8007b3c:	2301      	moveq	r3, #1
 8007b3e:	2300      	movne	r3, #0
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	461a      	mov	r2, r3
 8007b44:	e00c      	b.n	8007b60 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	43da      	mvns	r2, r3
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	4013      	ands	r3, r2
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	bf0c      	ite	eq
 8007b58:	2301      	moveq	r3, #1
 8007b5a:	2300      	movne	r3, #0
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	461a      	mov	r2, r3
 8007b60:	79fb      	ldrb	r3, [r7, #7]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d093      	beq.n	8007a8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
 8007b7c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b7e:	e071      	b.n	8007c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b8e:	d123      	bne.n	8007bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b9e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007ba8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc4:	f043 0204 	orr.w	r2, r3, #4
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e067      	b.n	8007ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bde:	d041      	beq.n	8007c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007be0:	f7fe f9d4 	bl	8005f8c <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d302      	bcc.n	8007bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d136      	bne.n	8007c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	0c1b      	lsrs	r3, r3, #16
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d10c      	bne.n	8007c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	43da      	mvns	r2, r3
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	bf14      	ite	ne
 8007c12:	2301      	movne	r3, #1
 8007c14:	2300      	moveq	r3, #0
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	e00b      	b.n	8007c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	43da      	mvns	r2, r3
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	4013      	ands	r3, r2
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	bf14      	ite	ne
 8007c2c:	2301      	movne	r3, #1
 8007c2e:	2300      	moveq	r3, #0
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d016      	beq.n	8007c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c50:	f043 0220 	orr.w	r2, r3, #32
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e021      	b.n	8007ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	0c1b      	lsrs	r3, r3, #16
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d10c      	bne.n	8007c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	43da      	mvns	r2, r3
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	4013      	ands	r3, r2
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	bf14      	ite	ne
 8007c80:	2301      	movne	r3, #1
 8007c82:	2300      	moveq	r3, #0
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	e00b      	b.n	8007ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	43da      	mvns	r2, r3
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	4013      	ands	r3, r2
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	bf14      	ite	ne
 8007c9a:	2301      	movne	r3, #1
 8007c9c:	2300      	moveq	r3, #0
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f47f af6d 	bne.w	8007b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cbc:	e034      	b.n	8007d28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 f8e3 	bl	8007e8a <I2C_IsAcknowledgeFailed>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e034      	b.n	8007d38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd4:	d028      	beq.n	8007d28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cd6:	f7fe f959 	bl	8005f8c <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d302      	bcc.n	8007cec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d11d      	bne.n	8007d28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cf6:	2b80      	cmp	r3, #128	@ 0x80
 8007cf8:	d016      	beq.n	8007d28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2220      	movs	r2, #32
 8007d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d14:	f043 0220 	orr.w	r2, r3, #32
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e007      	b.n	8007d38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d32:	2b80      	cmp	r3, #128	@ 0x80
 8007d34:	d1c3      	bne.n	8007cbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d4c:	e034      	b.n	8007db8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 f89b 	bl	8007e8a <I2C_IsAcknowledgeFailed>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d001      	beq.n	8007d5e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e034      	b.n	8007dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d64:	d028      	beq.n	8007db8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d66:	f7fe f911 	bl	8005f8c <HAL_GetTick>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d302      	bcc.n	8007d7c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d11d      	bne.n	8007db8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	f003 0304 	and.w	r3, r3, #4
 8007d86:	2b04      	cmp	r3, #4
 8007d88:	d016      	beq.n	8007db8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da4:	f043 0220 	orr.w	r2, r3, #32
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e007      	b.n	8007dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	f003 0304 	and.w	r3, r3, #4
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d1c3      	bne.n	8007d4e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ddc:	e049      	b.n	8007e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	f003 0310 	and.w	r3, r3, #16
 8007de8:	2b10      	cmp	r3, #16
 8007dea:	d119      	bne.n	8007e20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f06f 0210 	mvn.w	r2, #16
 8007df4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e030      	b.n	8007e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e20:	f7fe f8b4 	bl	8005f8c <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d302      	bcc.n	8007e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d11d      	bne.n	8007e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e40:	2b40      	cmp	r3, #64	@ 0x40
 8007e42:	d016      	beq.n	8007e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e5e:	f043 0220 	orr.w	r2, r3, #32
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e007      	b.n	8007e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e7c:	2b40      	cmp	r3, #64	@ 0x40
 8007e7e:	d1ae      	bne.n	8007dde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ea0:	d11b      	bne.n	8007eda <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007eaa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec6:	f043 0204 	orr.w	r2, r3, #4
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e000      	b.n	8007edc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8007eee:	4b06      	ldr	r3, [pc, #24]	@ (8007f08 <HAL_PWR_EnableBkUpAccess+0x20>)
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8007ef4:	4b05      	ldr	r3, [pc, #20]	@ (8007f0c <HAL_PWR_EnableBkUpAccess+0x24>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8007efa:	687b      	ldr	r3, [r7, #4]
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	420e0020 	.word	0x420e0020
 8007f0c:	40007000 	.word	0x40007000

08007f10 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8007f16:	4b06      	ldr	r3, [pc, #24]	@ (8007f30 <HAL_PWR_DisableBkUpAccess+0x20>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8007f1c:	4b05      	ldr	r3, [pc, #20]	@ (8007f34 <HAL_PWR_DisableBkUpAccess+0x24>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8007f22:	687b      	ldr	r3, [r7, #4]
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	420e0020 	.word	0x420e0020
 8007f34:	40007000 	.word	0x40007000

08007f38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e267      	b.n	800841a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d075      	beq.n	8008042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007f56:	4b88      	ldr	r3, [pc, #544]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f003 030c 	and.w	r3, r3, #12
 8007f5e:	2b04      	cmp	r3, #4
 8007f60:	d00c      	beq.n	8007f7c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f62:	4b85      	ldr	r3, [pc, #532]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007f6a:	2b08      	cmp	r3, #8
 8007f6c:	d112      	bne.n	8007f94 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f6e:	4b82      	ldr	r3, [pc, #520]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f7a:	d10b      	bne.n	8007f94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f7c:	4b7e      	ldr	r3, [pc, #504]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d05b      	beq.n	8008040 <HAL_RCC_OscConfig+0x108>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d157      	bne.n	8008040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e242      	b.n	800841a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f9c:	d106      	bne.n	8007fac <HAL_RCC_OscConfig+0x74>
 8007f9e:	4b76      	ldr	r3, [pc, #472]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a75      	ldr	r2, [pc, #468]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 8007fa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fa8:	6013      	str	r3, [r2, #0]
 8007faa:	e01d      	b.n	8007fe8 <HAL_RCC_OscConfig+0xb0>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007fb4:	d10c      	bne.n	8007fd0 <HAL_RCC_OscConfig+0x98>
 8007fb6:	4b70      	ldr	r3, [pc, #448]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a6f      	ldr	r2, [pc, #444]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 8007fbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007fc0:	6013      	str	r3, [r2, #0]
 8007fc2:	4b6d      	ldr	r3, [pc, #436]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a6c      	ldr	r2, [pc, #432]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 8007fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fcc:	6013      	str	r3, [r2, #0]
 8007fce:	e00b      	b.n	8007fe8 <HAL_RCC_OscConfig+0xb0>
 8007fd0:	4b69      	ldr	r3, [pc, #420]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a68      	ldr	r2, [pc, #416]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 8007fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fda:	6013      	str	r3, [r2, #0]
 8007fdc:	4b66      	ldr	r3, [pc, #408]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a65      	ldr	r2, [pc, #404]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 8007fe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d013      	beq.n	8008018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ff0:	f7fd ffcc 	bl	8005f8c <HAL_GetTick>
 8007ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ff6:	e008      	b.n	800800a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ff8:	f7fd ffc8 	bl	8005f8c <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	2b64      	cmp	r3, #100	@ 0x64
 8008004:	d901      	bls.n	800800a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e207      	b.n	800841a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800800a:	4b5b      	ldr	r3, [pc, #364]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d0f0      	beq.n	8007ff8 <HAL_RCC_OscConfig+0xc0>
 8008016:	e014      	b.n	8008042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008018:	f7fd ffb8 	bl	8005f8c <HAL_GetTick>
 800801c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800801e:	e008      	b.n	8008032 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008020:	f7fd ffb4 	bl	8005f8c <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	2b64      	cmp	r3, #100	@ 0x64
 800802c:	d901      	bls.n	8008032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	e1f3      	b.n	800841a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008032:	4b51      	ldr	r3, [pc, #324]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1f0      	bne.n	8008020 <HAL_RCC_OscConfig+0xe8>
 800803e:	e000      	b.n	8008042 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0302 	and.w	r3, r3, #2
 800804a:	2b00      	cmp	r3, #0
 800804c:	d063      	beq.n	8008116 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800804e:	4b4a      	ldr	r3, [pc, #296]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f003 030c 	and.w	r3, r3, #12
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00b      	beq.n	8008072 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800805a:	4b47      	ldr	r3, [pc, #284]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008062:	2b08      	cmp	r3, #8
 8008064:	d11c      	bne.n	80080a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008066:	4b44      	ldr	r3, [pc, #272]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d116      	bne.n	80080a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008072:	4b41      	ldr	r3, [pc, #260]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	2b00      	cmp	r3, #0
 800807c:	d005      	beq.n	800808a <HAL_RCC_OscConfig+0x152>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d001      	beq.n	800808a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e1c7      	b.n	800841a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800808a:	4b3b      	ldr	r3, [pc, #236]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	00db      	lsls	r3, r3, #3
 8008098:	4937      	ldr	r1, [pc, #220]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 800809a:	4313      	orrs	r3, r2
 800809c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800809e:	e03a      	b.n	8008116 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d020      	beq.n	80080ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080a8:	4b34      	ldr	r3, [pc, #208]	@ (800817c <HAL_RCC_OscConfig+0x244>)
 80080aa:	2201      	movs	r2, #1
 80080ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ae:	f7fd ff6d 	bl	8005f8c <HAL_GetTick>
 80080b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080b4:	e008      	b.n	80080c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080b6:	f7fd ff69 	bl	8005f8c <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d901      	bls.n	80080c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e1a8      	b.n	800841a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080c8:	4b2b      	ldr	r3, [pc, #172]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0302 	and.w	r3, r3, #2
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d0f0      	beq.n	80080b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080d4:	4b28      	ldr	r3, [pc, #160]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	00db      	lsls	r3, r3, #3
 80080e2:	4925      	ldr	r1, [pc, #148]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	600b      	str	r3, [r1, #0]
 80080e8:	e015      	b.n	8008116 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080ea:	4b24      	ldr	r3, [pc, #144]	@ (800817c <HAL_RCC_OscConfig+0x244>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f0:	f7fd ff4c 	bl	8005f8c <HAL_GetTick>
 80080f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080f6:	e008      	b.n	800810a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080f8:	f7fd ff48 	bl	8005f8c <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e187      	b.n	800841a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800810a:	4b1b      	ldr	r3, [pc, #108]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1f0      	bne.n	80080f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0308 	and.w	r3, r3, #8
 800811e:	2b00      	cmp	r3, #0
 8008120:	d036      	beq.n	8008190 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d016      	beq.n	8008158 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800812a:	4b15      	ldr	r3, [pc, #84]	@ (8008180 <HAL_RCC_OscConfig+0x248>)
 800812c:	2201      	movs	r2, #1
 800812e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008130:	f7fd ff2c 	bl	8005f8c <HAL_GetTick>
 8008134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008136:	e008      	b.n	800814a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008138:	f7fd ff28 	bl	8005f8c <HAL_GetTick>
 800813c:	4602      	mov	r2, r0
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	2b02      	cmp	r3, #2
 8008144:	d901      	bls.n	800814a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e167      	b.n	800841a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800814a:	4b0b      	ldr	r3, [pc, #44]	@ (8008178 <HAL_RCC_OscConfig+0x240>)
 800814c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0f0      	beq.n	8008138 <HAL_RCC_OscConfig+0x200>
 8008156:	e01b      	b.n	8008190 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008158:	4b09      	ldr	r3, [pc, #36]	@ (8008180 <HAL_RCC_OscConfig+0x248>)
 800815a:	2200      	movs	r2, #0
 800815c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800815e:	f7fd ff15 	bl	8005f8c <HAL_GetTick>
 8008162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008164:	e00e      	b.n	8008184 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008166:	f7fd ff11 	bl	8005f8c <HAL_GetTick>
 800816a:	4602      	mov	r2, r0
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	2b02      	cmp	r3, #2
 8008172:	d907      	bls.n	8008184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008174:	2303      	movs	r3, #3
 8008176:	e150      	b.n	800841a <HAL_RCC_OscConfig+0x4e2>
 8008178:	40023800 	.word	0x40023800
 800817c:	42470000 	.word	0x42470000
 8008180:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008184:	4b88      	ldr	r3, [pc, #544]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 8008186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1ea      	bne.n	8008166 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0304 	and.w	r3, r3, #4
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 8097 	beq.w	80082cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800819e:	2300      	movs	r3, #0
 80081a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081a2:	4b81      	ldr	r3, [pc, #516]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 80081a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10f      	bne.n	80081ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081ae:	2300      	movs	r3, #0
 80081b0:	60bb      	str	r3, [r7, #8]
 80081b2:	4b7d      	ldr	r3, [pc, #500]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 80081b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b6:	4a7c      	ldr	r2, [pc, #496]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 80081b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80081be:	4b7a      	ldr	r3, [pc, #488]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 80081c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081c6:	60bb      	str	r3, [r7, #8]
 80081c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081ca:	2301      	movs	r3, #1
 80081cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ce:	4b77      	ldr	r3, [pc, #476]	@ (80083ac <HAL_RCC_OscConfig+0x474>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d118      	bne.n	800820c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081da:	4b74      	ldr	r3, [pc, #464]	@ (80083ac <HAL_RCC_OscConfig+0x474>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a73      	ldr	r2, [pc, #460]	@ (80083ac <HAL_RCC_OscConfig+0x474>)
 80081e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081e6:	f7fd fed1 	bl	8005f8c <HAL_GetTick>
 80081ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ec:	e008      	b.n	8008200 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081ee:	f7fd fecd 	bl	8005f8c <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d901      	bls.n	8008200 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e10c      	b.n	800841a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008200:	4b6a      	ldr	r3, [pc, #424]	@ (80083ac <HAL_RCC_OscConfig+0x474>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008208:	2b00      	cmp	r3, #0
 800820a:	d0f0      	beq.n	80081ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d106      	bne.n	8008222 <HAL_RCC_OscConfig+0x2ea>
 8008214:	4b64      	ldr	r3, [pc, #400]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 8008216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008218:	4a63      	ldr	r2, [pc, #396]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 800821a:	f043 0301 	orr.w	r3, r3, #1
 800821e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008220:	e01c      	b.n	800825c <HAL_RCC_OscConfig+0x324>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	2b05      	cmp	r3, #5
 8008228:	d10c      	bne.n	8008244 <HAL_RCC_OscConfig+0x30c>
 800822a:	4b5f      	ldr	r3, [pc, #380]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 800822c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800822e:	4a5e      	ldr	r2, [pc, #376]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 8008230:	f043 0304 	orr.w	r3, r3, #4
 8008234:	6713      	str	r3, [r2, #112]	@ 0x70
 8008236:	4b5c      	ldr	r3, [pc, #368]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 8008238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800823a:	4a5b      	ldr	r2, [pc, #364]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 800823c:	f043 0301 	orr.w	r3, r3, #1
 8008240:	6713      	str	r3, [r2, #112]	@ 0x70
 8008242:	e00b      	b.n	800825c <HAL_RCC_OscConfig+0x324>
 8008244:	4b58      	ldr	r3, [pc, #352]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 8008246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008248:	4a57      	ldr	r2, [pc, #348]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 800824a:	f023 0301 	bic.w	r3, r3, #1
 800824e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008250:	4b55      	ldr	r3, [pc, #340]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 8008252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008254:	4a54      	ldr	r2, [pc, #336]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 8008256:	f023 0304 	bic.w	r3, r3, #4
 800825a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d015      	beq.n	8008290 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008264:	f7fd fe92 	bl	8005f8c <HAL_GetTick>
 8008268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800826a:	e00a      	b.n	8008282 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800826c:	f7fd fe8e 	bl	8005f8c <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800827a:	4293      	cmp	r3, r2
 800827c:	d901      	bls.n	8008282 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e0cb      	b.n	800841a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008282:	4b49      	ldr	r3, [pc, #292]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 8008284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0ee      	beq.n	800826c <HAL_RCC_OscConfig+0x334>
 800828e:	e014      	b.n	80082ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008290:	f7fd fe7c 	bl	8005f8c <HAL_GetTick>
 8008294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008296:	e00a      	b.n	80082ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008298:	f7fd fe78 	bl	8005f8c <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d901      	bls.n	80082ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e0b5      	b.n	800841a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082ae:	4b3e      	ldr	r3, [pc, #248]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 80082b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082b2:	f003 0302 	and.w	r3, r3, #2
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1ee      	bne.n	8008298 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d105      	bne.n	80082cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082c0:	4b39      	ldr	r3, [pc, #228]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 80082c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c4:	4a38      	ldr	r2, [pc, #224]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 80082c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 80a1 	beq.w	8008418 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082d6:	4b34      	ldr	r3, [pc, #208]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f003 030c 	and.w	r3, r3, #12
 80082de:	2b08      	cmp	r3, #8
 80082e0:	d05c      	beq.n	800839c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d141      	bne.n	800836e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082ea:	4b31      	ldr	r3, [pc, #196]	@ (80083b0 <HAL_RCC_OscConfig+0x478>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082f0:	f7fd fe4c 	bl	8005f8c <HAL_GetTick>
 80082f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082f6:	e008      	b.n	800830a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082f8:	f7fd fe48 	bl	8005f8c <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	2b02      	cmp	r3, #2
 8008304:	d901      	bls.n	800830a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e087      	b.n	800841a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800830a:	4b27      	ldr	r3, [pc, #156]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1f0      	bne.n	80082f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	69da      	ldr	r2, [r3, #28]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	431a      	orrs	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008324:	019b      	lsls	r3, r3, #6
 8008326:	431a      	orrs	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800832c:	085b      	lsrs	r3, r3, #1
 800832e:	3b01      	subs	r3, #1
 8008330:	041b      	lsls	r3, r3, #16
 8008332:	431a      	orrs	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008338:	061b      	lsls	r3, r3, #24
 800833a:	491b      	ldr	r1, [pc, #108]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 800833c:	4313      	orrs	r3, r2
 800833e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008340:	4b1b      	ldr	r3, [pc, #108]	@ (80083b0 <HAL_RCC_OscConfig+0x478>)
 8008342:	2201      	movs	r2, #1
 8008344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008346:	f7fd fe21 	bl	8005f8c <HAL_GetTick>
 800834a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800834c:	e008      	b.n	8008360 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800834e:	f7fd fe1d 	bl	8005f8c <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	2b02      	cmp	r3, #2
 800835a:	d901      	bls.n	8008360 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800835c:	2303      	movs	r3, #3
 800835e:	e05c      	b.n	800841a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008360:	4b11      	ldr	r3, [pc, #68]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d0f0      	beq.n	800834e <HAL_RCC_OscConfig+0x416>
 800836c:	e054      	b.n	8008418 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800836e:	4b10      	ldr	r3, [pc, #64]	@ (80083b0 <HAL_RCC_OscConfig+0x478>)
 8008370:	2200      	movs	r2, #0
 8008372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008374:	f7fd fe0a 	bl	8005f8c <HAL_GetTick>
 8008378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800837a:	e008      	b.n	800838e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800837c:	f7fd fe06 	bl	8005f8c <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	2b02      	cmp	r3, #2
 8008388:	d901      	bls.n	800838e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e045      	b.n	800841a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800838e:	4b06      	ldr	r3, [pc, #24]	@ (80083a8 <HAL_RCC_OscConfig+0x470>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1f0      	bne.n	800837c <HAL_RCC_OscConfig+0x444>
 800839a:	e03d      	b.n	8008418 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d107      	bne.n	80083b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e038      	b.n	800841a <HAL_RCC_OscConfig+0x4e2>
 80083a8:	40023800 	.word	0x40023800
 80083ac:	40007000 	.word	0x40007000
 80083b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083b4:	4b1b      	ldr	r3, [pc, #108]	@ (8008424 <HAL_RCC_OscConfig+0x4ec>)
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d028      	beq.n	8008414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d121      	bne.n	8008414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083da:	429a      	cmp	r2, r3
 80083dc:	d11a      	bne.n	8008414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80083e4:	4013      	ands	r3, r2
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80083ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d111      	bne.n	8008414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fa:	085b      	lsrs	r3, r3, #1
 80083fc:	3b01      	subs	r3, #1
 80083fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008400:	429a      	cmp	r2, r3
 8008402:	d107      	bne.n	8008414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008410:	429a      	cmp	r2, r3
 8008412:	d001      	beq.n	8008418 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e000      	b.n	800841a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3718      	adds	r7, #24
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	40023800 	.word	0x40023800

08008428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e0cc      	b.n	80085d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800843c:	4b68      	ldr	r3, [pc, #416]	@ (80085e0 <HAL_RCC_ClockConfig+0x1b8>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0307 	and.w	r3, r3, #7
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	429a      	cmp	r2, r3
 8008448:	d90c      	bls.n	8008464 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800844a:	4b65      	ldr	r3, [pc, #404]	@ (80085e0 <HAL_RCC_ClockConfig+0x1b8>)
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	b2d2      	uxtb	r2, r2
 8008450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008452:	4b63      	ldr	r3, [pc, #396]	@ (80085e0 <HAL_RCC_ClockConfig+0x1b8>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0307 	and.w	r3, r3, #7
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	429a      	cmp	r2, r3
 800845e:	d001      	beq.n	8008464 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e0b8      	b.n	80085d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0302 	and.w	r3, r3, #2
 800846c:	2b00      	cmp	r3, #0
 800846e:	d020      	beq.n	80084b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0304 	and.w	r3, r3, #4
 8008478:	2b00      	cmp	r3, #0
 800847a:	d005      	beq.n	8008488 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800847c:	4b59      	ldr	r3, [pc, #356]	@ (80085e4 <HAL_RCC_ClockConfig+0x1bc>)
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	4a58      	ldr	r2, [pc, #352]	@ (80085e4 <HAL_RCC_ClockConfig+0x1bc>)
 8008482:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008486:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0308 	and.w	r3, r3, #8
 8008490:	2b00      	cmp	r3, #0
 8008492:	d005      	beq.n	80084a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008494:	4b53      	ldr	r3, [pc, #332]	@ (80085e4 <HAL_RCC_ClockConfig+0x1bc>)
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	4a52      	ldr	r2, [pc, #328]	@ (80085e4 <HAL_RCC_ClockConfig+0x1bc>)
 800849a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800849e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084a0:	4b50      	ldr	r3, [pc, #320]	@ (80085e4 <HAL_RCC_ClockConfig+0x1bc>)
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	494d      	ldr	r1, [pc, #308]	@ (80085e4 <HAL_RCC_ClockConfig+0x1bc>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0301 	and.w	r3, r3, #1
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d044      	beq.n	8008548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d107      	bne.n	80084d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084c6:	4b47      	ldr	r3, [pc, #284]	@ (80085e4 <HAL_RCC_ClockConfig+0x1bc>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d119      	bne.n	8008506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e07f      	b.n	80085d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d003      	beq.n	80084e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d107      	bne.n	80084f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084e6:	4b3f      	ldr	r3, [pc, #252]	@ (80085e4 <HAL_RCC_ClockConfig+0x1bc>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d109      	bne.n	8008506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e06f      	b.n	80085d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084f6:	4b3b      	ldr	r3, [pc, #236]	@ (80085e4 <HAL_RCC_ClockConfig+0x1bc>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e067      	b.n	80085d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008506:	4b37      	ldr	r3, [pc, #220]	@ (80085e4 <HAL_RCC_ClockConfig+0x1bc>)
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	f023 0203 	bic.w	r2, r3, #3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	4934      	ldr	r1, [pc, #208]	@ (80085e4 <HAL_RCC_ClockConfig+0x1bc>)
 8008514:	4313      	orrs	r3, r2
 8008516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008518:	f7fd fd38 	bl	8005f8c <HAL_GetTick>
 800851c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800851e:	e00a      	b.n	8008536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008520:	f7fd fd34 	bl	8005f8c <HAL_GetTick>
 8008524:	4602      	mov	r2, r0
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800852e:	4293      	cmp	r3, r2
 8008530:	d901      	bls.n	8008536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e04f      	b.n	80085d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008536:	4b2b      	ldr	r3, [pc, #172]	@ (80085e4 <HAL_RCC_ClockConfig+0x1bc>)
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f003 020c 	and.w	r2, r3, #12
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	429a      	cmp	r2, r3
 8008546:	d1eb      	bne.n	8008520 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008548:	4b25      	ldr	r3, [pc, #148]	@ (80085e0 <HAL_RCC_ClockConfig+0x1b8>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0307 	and.w	r3, r3, #7
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	429a      	cmp	r2, r3
 8008554:	d20c      	bcs.n	8008570 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008556:	4b22      	ldr	r3, [pc, #136]	@ (80085e0 <HAL_RCC_ClockConfig+0x1b8>)
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	b2d2      	uxtb	r2, r2
 800855c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800855e:	4b20      	ldr	r3, [pc, #128]	@ (80085e0 <HAL_RCC_ClockConfig+0x1b8>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0307 	and.w	r3, r3, #7
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	429a      	cmp	r2, r3
 800856a:	d001      	beq.n	8008570 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e032      	b.n	80085d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0304 	and.w	r3, r3, #4
 8008578:	2b00      	cmp	r3, #0
 800857a:	d008      	beq.n	800858e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800857c:	4b19      	ldr	r3, [pc, #100]	@ (80085e4 <HAL_RCC_ClockConfig+0x1bc>)
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	4916      	ldr	r1, [pc, #88]	@ (80085e4 <HAL_RCC_ClockConfig+0x1bc>)
 800858a:	4313      	orrs	r3, r2
 800858c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0308 	and.w	r3, r3, #8
 8008596:	2b00      	cmp	r3, #0
 8008598:	d009      	beq.n	80085ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800859a:	4b12      	ldr	r3, [pc, #72]	@ (80085e4 <HAL_RCC_ClockConfig+0x1bc>)
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	00db      	lsls	r3, r3, #3
 80085a8:	490e      	ldr	r1, [pc, #56]	@ (80085e4 <HAL_RCC_ClockConfig+0x1bc>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80085ae:	f000 f821 	bl	80085f4 <HAL_RCC_GetSysClockFreq>
 80085b2:	4602      	mov	r2, r0
 80085b4:	4b0b      	ldr	r3, [pc, #44]	@ (80085e4 <HAL_RCC_ClockConfig+0x1bc>)
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	091b      	lsrs	r3, r3, #4
 80085ba:	f003 030f 	and.w	r3, r3, #15
 80085be:	490a      	ldr	r1, [pc, #40]	@ (80085e8 <HAL_RCC_ClockConfig+0x1c0>)
 80085c0:	5ccb      	ldrb	r3, [r1, r3]
 80085c2:	fa22 f303 	lsr.w	r3, r2, r3
 80085c6:	4a09      	ldr	r2, [pc, #36]	@ (80085ec <HAL_RCC_ClockConfig+0x1c4>)
 80085c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80085ca:	4b09      	ldr	r3, [pc, #36]	@ (80085f0 <HAL_RCC_ClockConfig+0x1c8>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fd fc98 	bl	8005f04 <HAL_InitTick>

  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	40023c00 	.word	0x40023c00
 80085e4:	40023800 	.word	0x40023800
 80085e8:	08011124 	.word	0x08011124
 80085ec:	20000148 	.word	0x20000148
 80085f0:	2000014c 	.word	0x2000014c

080085f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085f8:	b090      	sub	sp, #64	@ 0x40
 80085fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008600:	2300      	movs	r3, #0
 8008602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008604:	2300      	movs	r3, #0
 8008606:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008608:	2300      	movs	r3, #0
 800860a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800860c:	4b59      	ldr	r3, [pc, #356]	@ (8008774 <HAL_RCC_GetSysClockFreq+0x180>)
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f003 030c 	and.w	r3, r3, #12
 8008614:	2b08      	cmp	r3, #8
 8008616:	d00d      	beq.n	8008634 <HAL_RCC_GetSysClockFreq+0x40>
 8008618:	2b08      	cmp	r3, #8
 800861a:	f200 80a1 	bhi.w	8008760 <HAL_RCC_GetSysClockFreq+0x16c>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d002      	beq.n	8008628 <HAL_RCC_GetSysClockFreq+0x34>
 8008622:	2b04      	cmp	r3, #4
 8008624:	d003      	beq.n	800862e <HAL_RCC_GetSysClockFreq+0x3a>
 8008626:	e09b      	b.n	8008760 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008628:	4b53      	ldr	r3, [pc, #332]	@ (8008778 <HAL_RCC_GetSysClockFreq+0x184>)
 800862a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800862c:	e09b      	b.n	8008766 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800862e:	4b53      	ldr	r3, [pc, #332]	@ (800877c <HAL_RCC_GetSysClockFreq+0x188>)
 8008630:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008632:	e098      	b.n	8008766 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008634:	4b4f      	ldr	r3, [pc, #316]	@ (8008774 <HAL_RCC_GetSysClockFreq+0x180>)
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800863c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800863e:	4b4d      	ldr	r3, [pc, #308]	@ (8008774 <HAL_RCC_GetSysClockFreq+0x180>)
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d028      	beq.n	800869c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800864a:	4b4a      	ldr	r3, [pc, #296]	@ (8008774 <HAL_RCC_GetSysClockFreq+0x180>)
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	099b      	lsrs	r3, r3, #6
 8008650:	2200      	movs	r2, #0
 8008652:	623b      	str	r3, [r7, #32]
 8008654:	627a      	str	r2, [r7, #36]	@ 0x24
 8008656:	6a3b      	ldr	r3, [r7, #32]
 8008658:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800865c:	2100      	movs	r1, #0
 800865e:	4b47      	ldr	r3, [pc, #284]	@ (800877c <HAL_RCC_GetSysClockFreq+0x188>)
 8008660:	fb03 f201 	mul.w	r2, r3, r1
 8008664:	2300      	movs	r3, #0
 8008666:	fb00 f303 	mul.w	r3, r0, r3
 800866a:	4413      	add	r3, r2
 800866c:	4a43      	ldr	r2, [pc, #268]	@ (800877c <HAL_RCC_GetSysClockFreq+0x188>)
 800866e:	fba0 1202 	umull	r1, r2, r0, r2
 8008672:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008674:	460a      	mov	r2, r1
 8008676:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800867a:	4413      	add	r3, r2
 800867c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800867e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008680:	2200      	movs	r2, #0
 8008682:	61bb      	str	r3, [r7, #24]
 8008684:	61fa      	str	r2, [r7, #28]
 8008686:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800868a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800868e:	f7f8 fafb 	bl	8000c88 <__aeabi_uldivmod>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	4613      	mov	r3, r2
 8008698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800869a:	e053      	b.n	8008744 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800869c:	4b35      	ldr	r3, [pc, #212]	@ (8008774 <HAL_RCC_GetSysClockFreq+0x180>)
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	099b      	lsrs	r3, r3, #6
 80086a2:	2200      	movs	r2, #0
 80086a4:	613b      	str	r3, [r7, #16]
 80086a6:	617a      	str	r2, [r7, #20]
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80086ae:	f04f 0b00 	mov.w	fp, #0
 80086b2:	4652      	mov	r2, sl
 80086b4:	465b      	mov	r3, fp
 80086b6:	f04f 0000 	mov.w	r0, #0
 80086ba:	f04f 0100 	mov.w	r1, #0
 80086be:	0159      	lsls	r1, r3, #5
 80086c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80086c4:	0150      	lsls	r0, r2, #5
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	ebb2 080a 	subs.w	r8, r2, sl
 80086ce:	eb63 090b 	sbc.w	r9, r3, fp
 80086d2:	f04f 0200 	mov.w	r2, #0
 80086d6:	f04f 0300 	mov.w	r3, #0
 80086da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80086de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80086e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80086e6:	ebb2 0408 	subs.w	r4, r2, r8
 80086ea:	eb63 0509 	sbc.w	r5, r3, r9
 80086ee:	f04f 0200 	mov.w	r2, #0
 80086f2:	f04f 0300 	mov.w	r3, #0
 80086f6:	00eb      	lsls	r3, r5, #3
 80086f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80086fc:	00e2      	lsls	r2, r4, #3
 80086fe:	4614      	mov	r4, r2
 8008700:	461d      	mov	r5, r3
 8008702:	eb14 030a 	adds.w	r3, r4, sl
 8008706:	603b      	str	r3, [r7, #0]
 8008708:	eb45 030b 	adc.w	r3, r5, fp
 800870c:	607b      	str	r3, [r7, #4]
 800870e:	f04f 0200 	mov.w	r2, #0
 8008712:	f04f 0300 	mov.w	r3, #0
 8008716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800871a:	4629      	mov	r1, r5
 800871c:	028b      	lsls	r3, r1, #10
 800871e:	4621      	mov	r1, r4
 8008720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008724:	4621      	mov	r1, r4
 8008726:	028a      	lsls	r2, r1, #10
 8008728:	4610      	mov	r0, r2
 800872a:	4619      	mov	r1, r3
 800872c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800872e:	2200      	movs	r2, #0
 8008730:	60bb      	str	r3, [r7, #8]
 8008732:	60fa      	str	r2, [r7, #12]
 8008734:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008738:	f7f8 faa6 	bl	8000c88 <__aeabi_uldivmod>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4613      	mov	r3, r2
 8008742:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008744:	4b0b      	ldr	r3, [pc, #44]	@ (8008774 <HAL_RCC_GetSysClockFreq+0x180>)
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	0c1b      	lsrs	r3, r3, #16
 800874a:	f003 0303 	and.w	r3, r3, #3
 800874e:	3301      	adds	r3, #1
 8008750:	005b      	lsls	r3, r3, #1
 8008752:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008754:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008758:	fbb2 f3f3 	udiv	r3, r2, r3
 800875c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800875e:	e002      	b.n	8008766 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008760:	4b05      	ldr	r3, [pc, #20]	@ (8008778 <HAL_RCC_GetSysClockFreq+0x184>)
 8008762:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008768:	4618      	mov	r0, r3
 800876a:	3740      	adds	r7, #64	@ 0x40
 800876c:	46bd      	mov	sp, r7
 800876e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008772:	bf00      	nop
 8008774:	40023800 	.word	0x40023800
 8008778:	00f42400 	.word	0x00f42400
 800877c:	017d7840 	.word	0x017d7840

08008780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008780:	b480      	push	{r7}
 8008782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008784:	4b03      	ldr	r3, [pc, #12]	@ (8008794 <HAL_RCC_GetHCLKFreq+0x14>)
 8008786:	681b      	ldr	r3, [r3, #0]
}
 8008788:	4618      	mov	r0, r3
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	20000148 	.word	0x20000148

08008798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800879c:	f7ff fff0 	bl	8008780 <HAL_RCC_GetHCLKFreq>
 80087a0:	4602      	mov	r2, r0
 80087a2:	4b05      	ldr	r3, [pc, #20]	@ (80087b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	0a9b      	lsrs	r3, r3, #10
 80087a8:	f003 0307 	and.w	r3, r3, #7
 80087ac:	4903      	ldr	r1, [pc, #12]	@ (80087bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80087ae:	5ccb      	ldrb	r3, [r1, r3]
 80087b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	40023800 	.word	0x40023800
 80087bc:	08011134 	.word	0x08011134

080087c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80087c4:	f7ff ffdc 	bl	8008780 <HAL_RCC_GetHCLKFreq>
 80087c8:	4602      	mov	r2, r0
 80087ca:	4b05      	ldr	r3, [pc, #20]	@ (80087e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	0b5b      	lsrs	r3, r3, #13
 80087d0:	f003 0307 	and.w	r3, r3, #7
 80087d4:	4903      	ldr	r1, [pc, #12]	@ (80087e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80087d6:	5ccb      	ldrb	r3, [r1, r3]
 80087d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087dc:	4618      	mov	r0, r3
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	40023800 	.word	0x40023800
 80087e4:	08011134 	.word	0x08011134

080087e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d101      	bne.n	80087fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e041      	b.n	800887e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d106      	bne.n	8008814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7fc fff6 	bl	8005800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2202      	movs	r2, #2
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3304      	adds	r3, #4
 8008824:	4619      	mov	r1, r3
 8008826:	4610      	mov	r0, r2
 8008828:	f001 f82a 	bl	8009880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b082      	sub	sp, #8
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d101      	bne.n	8008898 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e041      	b.n	800891c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d106      	bne.n	80088b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f839 	bl	8008924 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2202      	movs	r2, #2
 80088b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	3304      	adds	r3, #4
 80088c2:	4619      	mov	r1, r3
 80088c4:	4610      	mov	r0, r2
 80088c6:	f000 ffdb 	bl	8009880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d109      	bne.n	800895c <HAL_TIM_PWM_Start+0x24>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b01      	cmp	r3, #1
 8008952:	bf14      	ite	ne
 8008954:	2301      	movne	r3, #1
 8008956:	2300      	moveq	r3, #0
 8008958:	b2db      	uxtb	r3, r3
 800895a:	e022      	b.n	80089a2 <HAL_TIM_PWM_Start+0x6a>
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2b04      	cmp	r3, #4
 8008960:	d109      	bne.n	8008976 <HAL_TIM_PWM_Start+0x3e>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b01      	cmp	r3, #1
 800896c:	bf14      	ite	ne
 800896e:	2301      	movne	r3, #1
 8008970:	2300      	moveq	r3, #0
 8008972:	b2db      	uxtb	r3, r3
 8008974:	e015      	b.n	80089a2 <HAL_TIM_PWM_Start+0x6a>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b08      	cmp	r3, #8
 800897a:	d109      	bne.n	8008990 <HAL_TIM_PWM_Start+0x58>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b01      	cmp	r3, #1
 8008986:	bf14      	ite	ne
 8008988:	2301      	movne	r3, #1
 800898a:	2300      	moveq	r3, #0
 800898c:	b2db      	uxtb	r3, r3
 800898e:	e008      	b.n	80089a2 <HAL_TIM_PWM_Start+0x6a>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b01      	cmp	r3, #1
 800899a:	bf14      	ite	ne
 800899c:	2301      	movne	r3, #1
 800899e:	2300      	moveq	r3, #0
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e07c      	b.n	8008aa4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d104      	bne.n	80089ba <HAL_TIM_PWM_Start+0x82>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2202      	movs	r2, #2
 80089b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089b8:	e013      	b.n	80089e2 <HAL_TIM_PWM_Start+0xaa>
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b04      	cmp	r3, #4
 80089be:	d104      	bne.n	80089ca <HAL_TIM_PWM_Start+0x92>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2202      	movs	r2, #2
 80089c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089c8:	e00b      	b.n	80089e2 <HAL_TIM_PWM_Start+0xaa>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2b08      	cmp	r3, #8
 80089ce:	d104      	bne.n	80089da <HAL_TIM_PWM_Start+0xa2>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089d8:	e003      	b.n	80089e2 <HAL_TIM_PWM_Start+0xaa>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2202      	movs	r2, #2
 80089de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2201      	movs	r2, #1
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f001 fb68 	bl	800a0c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a2d      	ldr	r2, [pc, #180]	@ (8008aac <HAL_TIM_PWM_Start+0x174>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d004      	beq.n	8008a04 <HAL_TIM_PWM_Start+0xcc>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a2c      	ldr	r2, [pc, #176]	@ (8008ab0 <HAL_TIM_PWM_Start+0x178>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d101      	bne.n	8008a08 <HAL_TIM_PWM_Start+0xd0>
 8008a04:	2301      	movs	r3, #1
 8008a06:	e000      	b.n	8008a0a <HAL_TIM_PWM_Start+0xd2>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d007      	beq.n	8008a1e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a22      	ldr	r2, [pc, #136]	@ (8008aac <HAL_TIM_PWM_Start+0x174>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d022      	beq.n	8008a6e <HAL_TIM_PWM_Start+0x136>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a30:	d01d      	beq.n	8008a6e <HAL_TIM_PWM_Start+0x136>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a1f      	ldr	r2, [pc, #124]	@ (8008ab4 <HAL_TIM_PWM_Start+0x17c>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d018      	beq.n	8008a6e <HAL_TIM_PWM_Start+0x136>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a1d      	ldr	r2, [pc, #116]	@ (8008ab8 <HAL_TIM_PWM_Start+0x180>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d013      	beq.n	8008a6e <HAL_TIM_PWM_Start+0x136>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8008abc <HAL_TIM_PWM_Start+0x184>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d00e      	beq.n	8008a6e <HAL_TIM_PWM_Start+0x136>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a16      	ldr	r2, [pc, #88]	@ (8008ab0 <HAL_TIM_PWM_Start+0x178>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d009      	beq.n	8008a6e <HAL_TIM_PWM_Start+0x136>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a18      	ldr	r2, [pc, #96]	@ (8008ac0 <HAL_TIM_PWM_Start+0x188>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d004      	beq.n	8008a6e <HAL_TIM_PWM_Start+0x136>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a16      	ldr	r2, [pc, #88]	@ (8008ac4 <HAL_TIM_PWM_Start+0x18c>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d111      	bne.n	8008a92 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	f003 0307 	and.w	r3, r3, #7
 8008a78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b06      	cmp	r3, #6
 8008a7e:	d010      	beq.n	8008aa2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f042 0201 	orr.w	r2, r2, #1
 8008a8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a90:	e007      	b.n	8008aa2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f042 0201 	orr.w	r2, r2, #1
 8008aa0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	40010000 	.word	0x40010000
 8008ab0:	40010400 	.word	0x40010400
 8008ab4:	40000400 	.word	0x40000400
 8008ab8:	40000800 	.word	0x40000800
 8008abc:	40000c00 	.word	0x40000c00
 8008ac0:	40014000 	.word	0x40014000
 8008ac4:	40001800 	.word	0x40001800

08008ac8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e041      	b.n	8008b5e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d106      	bne.n	8008af4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7fc ffbc 	bl	8005a6c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2202      	movs	r2, #2
 8008af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	3304      	adds	r3, #4
 8008b04:	4619      	mov	r1, r3
 8008b06:	4610      	mov	r0, r2
 8008b08:	f000 feba 	bl	8009880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
	...

08008b68 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d104      	bne.n	8008b86 <HAL_TIM_IC_Start_IT+0x1e>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	e013      	b.n	8008bae <HAL_TIM_IC_Start_IT+0x46>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	d104      	bne.n	8008b96 <HAL_TIM_IC_Start_IT+0x2e>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	e00b      	b.n	8008bae <HAL_TIM_IC_Start_IT+0x46>
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2b08      	cmp	r3, #8
 8008b9a:	d104      	bne.n	8008ba6 <HAL_TIM_IC_Start_IT+0x3e>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	e003      	b.n	8008bae <HAL_TIM_IC_Start_IT+0x46>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d104      	bne.n	8008bc0 <HAL_TIM_IC_Start_IT+0x58>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	e013      	b.n	8008be8 <HAL_TIM_IC_Start_IT+0x80>
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2b04      	cmp	r3, #4
 8008bc4:	d104      	bne.n	8008bd0 <HAL_TIM_IC_Start_IT+0x68>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	e00b      	b.n	8008be8 <HAL_TIM_IC_Start_IT+0x80>
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	2b08      	cmp	r3, #8
 8008bd4:	d104      	bne.n	8008be0 <HAL_TIM_IC_Start_IT+0x78>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	e003      	b.n	8008be8 <HAL_TIM_IC_Start_IT+0x80>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d102      	bne.n	8008bf6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008bf0:	7b7b      	ldrb	r3, [r7, #13]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d001      	beq.n	8008bfa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e0cc      	b.n	8008d94 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d104      	bne.n	8008c0a <HAL_TIM_IC_Start_IT+0xa2>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2202      	movs	r2, #2
 8008c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c08:	e013      	b.n	8008c32 <HAL_TIM_IC_Start_IT+0xca>
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b04      	cmp	r3, #4
 8008c0e:	d104      	bne.n	8008c1a <HAL_TIM_IC_Start_IT+0xb2>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2202      	movs	r2, #2
 8008c14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c18:	e00b      	b.n	8008c32 <HAL_TIM_IC_Start_IT+0xca>
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2b08      	cmp	r3, #8
 8008c1e:	d104      	bne.n	8008c2a <HAL_TIM_IC_Start_IT+0xc2>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2202      	movs	r2, #2
 8008c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c28:	e003      	b.n	8008c32 <HAL_TIM_IC_Start_IT+0xca>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d104      	bne.n	8008c42 <HAL_TIM_IC_Start_IT+0xda>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c40:	e013      	b.n	8008c6a <HAL_TIM_IC_Start_IT+0x102>
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b04      	cmp	r3, #4
 8008c46:	d104      	bne.n	8008c52 <HAL_TIM_IC_Start_IT+0xea>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c50:	e00b      	b.n	8008c6a <HAL_TIM_IC_Start_IT+0x102>
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	2b08      	cmp	r3, #8
 8008c56:	d104      	bne.n	8008c62 <HAL_TIM_IC_Start_IT+0xfa>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c60:	e003      	b.n	8008c6a <HAL_TIM_IC_Start_IT+0x102>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2202      	movs	r2, #2
 8008c66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b0c      	cmp	r3, #12
 8008c6e:	d841      	bhi.n	8008cf4 <HAL_TIM_IC_Start_IT+0x18c>
 8008c70:	a201      	add	r2, pc, #4	@ (adr r2, 8008c78 <HAL_TIM_IC_Start_IT+0x110>)
 8008c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c76:	bf00      	nop
 8008c78:	08008cad 	.word	0x08008cad
 8008c7c:	08008cf5 	.word	0x08008cf5
 8008c80:	08008cf5 	.word	0x08008cf5
 8008c84:	08008cf5 	.word	0x08008cf5
 8008c88:	08008cbf 	.word	0x08008cbf
 8008c8c:	08008cf5 	.word	0x08008cf5
 8008c90:	08008cf5 	.word	0x08008cf5
 8008c94:	08008cf5 	.word	0x08008cf5
 8008c98:	08008cd1 	.word	0x08008cd1
 8008c9c:	08008cf5 	.word	0x08008cf5
 8008ca0:	08008cf5 	.word	0x08008cf5
 8008ca4:	08008cf5 	.word	0x08008cf5
 8008ca8:	08008ce3 	.word	0x08008ce3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68da      	ldr	r2, [r3, #12]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f042 0202 	orr.w	r2, r2, #2
 8008cba:	60da      	str	r2, [r3, #12]
      break;
 8008cbc:	e01d      	b.n	8008cfa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68da      	ldr	r2, [r3, #12]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f042 0204 	orr.w	r2, r2, #4
 8008ccc:	60da      	str	r2, [r3, #12]
      break;
 8008cce:	e014      	b.n	8008cfa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68da      	ldr	r2, [r3, #12]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f042 0208 	orr.w	r2, r2, #8
 8008cde:	60da      	str	r2, [r3, #12]
      break;
 8008ce0:	e00b      	b.n	8008cfa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68da      	ldr	r2, [r3, #12]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f042 0210 	orr.w	r2, r2, #16
 8008cf0:	60da      	str	r2, [r3, #12]
      break;
 8008cf2:	e002      	b.n	8008cfa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8008cf8:	bf00      	nop
  }

  if (status == HAL_OK)
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d148      	bne.n	8008d92 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2201      	movs	r2, #1
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f001 f9d9 	bl	800a0c0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a22      	ldr	r2, [pc, #136]	@ (8008d9c <HAL_TIM_IC_Start_IT+0x234>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d022      	beq.n	8008d5e <HAL_TIM_IC_Start_IT+0x1f6>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d20:	d01d      	beq.n	8008d5e <HAL_TIM_IC_Start_IT+0x1f6>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a1e      	ldr	r2, [pc, #120]	@ (8008da0 <HAL_TIM_IC_Start_IT+0x238>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d018      	beq.n	8008d5e <HAL_TIM_IC_Start_IT+0x1f6>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a1c      	ldr	r2, [pc, #112]	@ (8008da4 <HAL_TIM_IC_Start_IT+0x23c>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d013      	beq.n	8008d5e <HAL_TIM_IC_Start_IT+0x1f6>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8008da8 <HAL_TIM_IC_Start_IT+0x240>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d00e      	beq.n	8008d5e <HAL_TIM_IC_Start_IT+0x1f6>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a19      	ldr	r2, [pc, #100]	@ (8008dac <HAL_TIM_IC_Start_IT+0x244>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d009      	beq.n	8008d5e <HAL_TIM_IC_Start_IT+0x1f6>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a18      	ldr	r2, [pc, #96]	@ (8008db0 <HAL_TIM_IC_Start_IT+0x248>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d004      	beq.n	8008d5e <HAL_TIM_IC_Start_IT+0x1f6>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a16      	ldr	r2, [pc, #88]	@ (8008db4 <HAL_TIM_IC_Start_IT+0x24c>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d111      	bne.n	8008d82 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f003 0307 	and.w	r3, r3, #7
 8008d68:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2b06      	cmp	r3, #6
 8008d6e:	d010      	beq.n	8008d92 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f042 0201 	orr.w	r2, r2, #1
 8008d7e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d80:	e007      	b.n	8008d92 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f042 0201 	orr.w	r2, r2, #1
 8008d90:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	40010000 	.word	0x40010000
 8008da0:	40000400 	.word	0x40000400
 8008da4:	40000800 	.word	0x40000800
 8008da8:	40000c00 	.word	0x40000c00
 8008dac:	40010400 	.word	0x40010400
 8008db0:	40014000 	.word	0x40014000
 8008db4:	40001800 	.word	0x40001800

08008db8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	2b0c      	cmp	r3, #12
 8008dca:	d841      	bhi.n	8008e50 <HAL_TIM_IC_Stop_IT+0x98>
 8008dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd4 <HAL_TIM_IC_Stop_IT+0x1c>)
 8008dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd2:	bf00      	nop
 8008dd4:	08008e09 	.word	0x08008e09
 8008dd8:	08008e51 	.word	0x08008e51
 8008ddc:	08008e51 	.word	0x08008e51
 8008de0:	08008e51 	.word	0x08008e51
 8008de4:	08008e1b 	.word	0x08008e1b
 8008de8:	08008e51 	.word	0x08008e51
 8008dec:	08008e51 	.word	0x08008e51
 8008df0:	08008e51 	.word	0x08008e51
 8008df4:	08008e2d 	.word	0x08008e2d
 8008df8:	08008e51 	.word	0x08008e51
 8008dfc:	08008e51 	.word	0x08008e51
 8008e00:	08008e51 	.word	0x08008e51
 8008e04:	08008e3f 	.word	0x08008e3f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68da      	ldr	r2, [r3, #12]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f022 0202 	bic.w	r2, r2, #2
 8008e16:	60da      	str	r2, [r3, #12]
      break;
 8008e18:	e01d      	b.n	8008e56 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68da      	ldr	r2, [r3, #12]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f022 0204 	bic.w	r2, r2, #4
 8008e28:	60da      	str	r2, [r3, #12]
      break;
 8008e2a:	e014      	b.n	8008e56 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68da      	ldr	r2, [r3, #12]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f022 0208 	bic.w	r2, r2, #8
 8008e3a:	60da      	str	r2, [r3, #12]
      break;
 8008e3c:	e00b      	b.n	8008e56 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68da      	ldr	r2, [r3, #12]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f022 0210 	bic.w	r2, r2, #16
 8008e4c:	60da      	str	r2, [r3, #12]
      break;
 8008e4e:	e002      	b.n	8008e56 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	73fb      	strb	r3, [r7, #15]
      break;
 8008e54:	bf00      	nop
  }

  if (status == HAL_OK)
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d156      	bne.n	8008f0a <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2200      	movs	r2, #0
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	4618      	mov	r0, r3
 8008e66:	f001 f92b 	bl	800a0c0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6a1a      	ldr	r2, [r3, #32]
 8008e70:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008e74:	4013      	ands	r3, r2
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10f      	bne.n	8008e9a <HAL_TIM_IC_Stop_IT+0xe2>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6a1a      	ldr	r2, [r3, #32]
 8008e80:	f240 4344 	movw	r3, #1092	@ 0x444
 8008e84:	4013      	ands	r3, r2
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d107      	bne.n	8008e9a <HAL_TIM_IC_Stop_IT+0xe2>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f022 0201 	bic.w	r2, r2, #1
 8008e98:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d104      	bne.n	8008eaa <HAL_TIM_IC_Stop_IT+0xf2>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ea8:	e013      	b.n	8008ed2 <HAL_TIM_IC_Stop_IT+0x11a>
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	d104      	bne.n	8008eba <HAL_TIM_IC_Stop_IT+0x102>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008eb8:	e00b      	b.n	8008ed2 <HAL_TIM_IC_Stop_IT+0x11a>
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2b08      	cmp	r3, #8
 8008ebe:	d104      	bne.n	8008eca <HAL_TIM_IC_Stop_IT+0x112>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ec8:	e003      	b.n	8008ed2 <HAL_TIM_IC_Stop_IT+0x11a>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d104      	bne.n	8008ee2 <HAL_TIM_IC_Stop_IT+0x12a>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ee0:	e013      	b.n	8008f0a <HAL_TIM_IC_Stop_IT+0x152>
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2b04      	cmp	r3, #4
 8008ee6:	d104      	bne.n	8008ef2 <HAL_TIM_IC_Stop_IT+0x13a>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ef0:	e00b      	b.n	8008f0a <HAL_TIM_IC_Stop_IT+0x152>
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	2b08      	cmp	r3, #8
 8008ef6:	d104      	bne.n	8008f02 <HAL_TIM_IC_Stop_IT+0x14a>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f00:	e003      	b.n	8008f0a <HAL_TIM_IC_Stop_IT+0x152>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e097      	b.n	8009058 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d106      	bne.n	8008f42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7fc fcfb 	bl	8005938 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2202      	movs	r2, #2
 8008f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	6812      	ldr	r2, [r2, #0]
 8008f54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f58:	f023 0307 	bic.w	r3, r3, #7
 8008f5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	3304      	adds	r3, #4
 8008f66:	4619      	mov	r1, r3
 8008f68:	4610      	mov	r0, r2
 8008f6a:	f000 fc89 	bl	8009880 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	6a1b      	ldr	r3, [r3, #32]
 8008f84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	697a      	ldr	r2, [r7, #20]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f96:	f023 0303 	bic.w	r3, r3, #3
 8008f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	689a      	ldr	r2, [r3, #8]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	021b      	lsls	r3, r3, #8
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008fb4:	f023 030c 	bic.w	r3, r3, #12
 8008fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008fc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008fc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	68da      	ldr	r2, [r3, #12]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	021b      	lsls	r3, r3, #8
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	693a      	ldr	r2, [r7, #16]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	011a      	lsls	r2, r3, #4
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	031b      	lsls	r3, r3, #12
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008ff2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008ffa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	685a      	ldr	r2, [r3, #4]
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	011b      	lsls	r3, r3, #4
 8009006:	4313      	orrs	r3, r2
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	4313      	orrs	r3, r2
 800900c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3718      	adds	r7, #24
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009070:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009078:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009080:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009088:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d110      	bne.n	80090b2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009090:	7bfb      	ldrb	r3, [r7, #15]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d102      	bne.n	800909c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009096:	7b7b      	ldrb	r3, [r7, #13]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d001      	beq.n	80090a0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e069      	b.n	8009174 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2202      	movs	r2, #2
 80090a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2202      	movs	r2, #2
 80090ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80090b0:	e031      	b.n	8009116 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	2b04      	cmp	r3, #4
 80090b6:	d110      	bne.n	80090da <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80090b8:	7bbb      	ldrb	r3, [r7, #14]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d102      	bne.n	80090c4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80090be:	7b3b      	ldrb	r3, [r7, #12]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d001      	beq.n	80090c8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e055      	b.n	8009174 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2202      	movs	r2, #2
 80090d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80090d8:	e01d      	b.n	8009116 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090da:	7bfb      	ldrb	r3, [r7, #15]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d108      	bne.n	80090f2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d105      	bne.n	80090f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090e6:	7b7b      	ldrb	r3, [r7, #13]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d102      	bne.n	80090f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80090ec:	7b3b      	ldrb	r3, [r7, #12]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d001      	beq.n	80090f6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e03e      	b.n	8009174 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2202      	movs	r2, #2
 80090fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2202      	movs	r2, #2
 8009102:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2202      	movs	r2, #2
 800910a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2202      	movs	r2, #2
 8009112:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <HAL_TIM_Encoder_Start+0xc4>
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	2b04      	cmp	r3, #4
 8009120:	d008      	beq.n	8009134 <HAL_TIM_Encoder_Start+0xd4>
 8009122:	e00f      	b.n	8009144 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2201      	movs	r2, #1
 800912a:	2100      	movs	r1, #0
 800912c:	4618      	mov	r0, r3
 800912e:	f000 ffc7 	bl	800a0c0 <TIM_CCxChannelCmd>
      break;
 8009132:	e016      	b.n	8009162 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2201      	movs	r2, #1
 800913a:	2104      	movs	r1, #4
 800913c:	4618      	mov	r0, r3
 800913e:	f000 ffbf 	bl	800a0c0 <TIM_CCxChannelCmd>
      break;
 8009142:	e00e      	b.n	8009162 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2201      	movs	r2, #1
 800914a:	2100      	movs	r1, #0
 800914c:	4618      	mov	r0, r3
 800914e:	f000 ffb7 	bl	800a0c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2201      	movs	r2, #1
 8009158:	2104      	movs	r1, #4
 800915a:	4618      	mov	r0, r3
 800915c:	f000 ffb0 	bl	800a0c0 <TIM_CCxChannelCmd>
      break;
 8009160:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f042 0201 	orr.w	r2, r2, #1
 8009170:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	f003 0302 	and.w	r3, r3, #2
 800919a:	2b00      	cmp	r3, #0
 800919c:	d020      	beq.n	80091e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f003 0302 	and.w	r3, r3, #2
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d01b      	beq.n	80091e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f06f 0202 	mvn.w	r2, #2
 80091b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	f003 0303 	and.w	r3, r3, #3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d003      	beq.n	80091ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f7fb ff1a 	bl	8005000 <HAL_TIM_IC_CaptureCallback>
 80091cc:	e005      	b.n	80091da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fb38 	bl	8009844 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fb3f 	bl	8009858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	f003 0304 	and.w	r3, r3, #4
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d020      	beq.n	800922c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f003 0304 	and.w	r3, r3, #4
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d01b      	beq.n	800922c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f06f 0204 	mvn.w	r2, #4
 80091fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2202      	movs	r2, #2
 8009202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	699b      	ldr	r3, [r3, #24]
 800920a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800920e:	2b00      	cmp	r3, #0
 8009210:	d003      	beq.n	800921a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7fb fef4 	bl	8005000 <HAL_TIM_IC_CaptureCallback>
 8009218:	e005      	b.n	8009226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fb12 	bl	8009844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fb19 	bl	8009858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	f003 0308 	and.w	r3, r3, #8
 8009232:	2b00      	cmp	r3, #0
 8009234:	d020      	beq.n	8009278 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f003 0308 	and.w	r3, r3, #8
 800923c:	2b00      	cmp	r3, #0
 800923e:	d01b      	beq.n	8009278 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f06f 0208 	mvn.w	r2, #8
 8009248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2204      	movs	r2, #4
 800924e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	69db      	ldr	r3, [r3, #28]
 8009256:	f003 0303 	and.w	r3, r3, #3
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7fb fece 	bl	8005000 <HAL_TIM_IC_CaptureCallback>
 8009264:	e005      	b.n	8009272 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 faec 	bl	8009844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 faf3 	bl	8009858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	f003 0310 	and.w	r3, r3, #16
 800927e:	2b00      	cmp	r3, #0
 8009280:	d020      	beq.n	80092c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f003 0310 	and.w	r3, r3, #16
 8009288:	2b00      	cmp	r3, #0
 800928a:	d01b      	beq.n	80092c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f06f 0210 	mvn.w	r2, #16
 8009294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2208      	movs	r2, #8
 800929a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7fb fea8 	bl	8005000 <HAL_TIM_IC_CaptureCallback>
 80092b0:	e005      	b.n	80092be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fac6 	bl	8009844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 facd 	bl	8009858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	f003 0301 	and.w	r3, r3, #1
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00c      	beq.n	80092e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d007      	beq.n	80092e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f06f 0201 	mvn.w	r2, #1
 80092e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 faa4 	bl	8009830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00c      	beq.n	800930c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d007      	beq.n	800930c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 ffd8 	bl	800a2bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00c      	beq.n	8009330 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800931c:	2b00      	cmp	r3, #0
 800931e:	d007      	beq.n	8009330 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fa9e 	bl	800986c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	f003 0320 	and.w	r3, r3, #32
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00c      	beq.n	8009354 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f003 0320 	and.w	r3, r3, #32
 8009340:	2b00      	cmp	r3, #0
 8009342:	d007      	beq.n	8009354 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f06f 0220 	mvn.w	r2, #32
 800934c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 ffaa 	bl	800a2a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009354:	bf00      	nop
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009368:	2300      	movs	r3, #0
 800936a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009372:	2b01      	cmp	r3, #1
 8009374:	d101      	bne.n	800937a <HAL_TIM_IC_ConfigChannel+0x1e>
 8009376:	2302      	movs	r3, #2
 8009378:	e088      	b.n	800948c <HAL_TIM_IC_ConfigChannel+0x130>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d11b      	bne.n	80093c0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009398:	f000 fcce 	bl	8009d38 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	699a      	ldr	r2, [r3, #24]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 020c 	bic.w	r2, r2, #12
 80093aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6999      	ldr	r1, [r3, #24]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	689a      	ldr	r2, [r3, #8]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	430a      	orrs	r2, r1
 80093bc:	619a      	str	r2, [r3, #24]
 80093be:	e060      	b.n	8009482 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b04      	cmp	r3, #4
 80093c4:	d11c      	bne.n	8009400 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80093d6:	f000 fd52 	bl	8009e7e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	699a      	ldr	r2, [r3, #24]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80093e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6999      	ldr	r1, [r3, #24]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	021a      	lsls	r2, r3, #8
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	619a      	str	r2, [r3, #24]
 80093fe:	e040      	b.n	8009482 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2b08      	cmp	r3, #8
 8009404:	d11b      	bne.n	800943e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009416:	f000 fd9f 	bl	8009f58 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	69da      	ldr	r2, [r3, #28]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 020c 	bic.w	r2, r2, #12
 8009428:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	69d9      	ldr	r1, [r3, #28]
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	689a      	ldr	r2, [r3, #8]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	430a      	orrs	r2, r1
 800943a:	61da      	str	r2, [r3, #28]
 800943c:	e021      	b.n	8009482 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b0c      	cmp	r3, #12
 8009442:	d11c      	bne.n	800947e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009454:	f000 fdbc 	bl	8009fd0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	69da      	ldr	r2, [r3, #28]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009466:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	69d9      	ldr	r1, [r3, #28]
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	021a      	lsls	r2, r3, #8
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	430a      	orrs	r2, r1
 800947a:	61da      	str	r2, [r3, #28]
 800947c:	e001      	b.n	8009482 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800948a:	7dfb      	ldrb	r3, [r7, #23]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3718      	adds	r7, #24
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094a0:	2300      	movs	r3, #0
 80094a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d101      	bne.n	80094b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094ae:	2302      	movs	r3, #2
 80094b0:	e0ae      	b.n	8009610 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2b0c      	cmp	r3, #12
 80094be:	f200 809f 	bhi.w	8009600 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80094c2:	a201      	add	r2, pc, #4	@ (adr r2, 80094c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c8:	080094fd 	.word	0x080094fd
 80094cc:	08009601 	.word	0x08009601
 80094d0:	08009601 	.word	0x08009601
 80094d4:	08009601 	.word	0x08009601
 80094d8:	0800953d 	.word	0x0800953d
 80094dc:	08009601 	.word	0x08009601
 80094e0:	08009601 	.word	0x08009601
 80094e4:	08009601 	.word	0x08009601
 80094e8:	0800957f 	.word	0x0800957f
 80094ec:	08009601 	.word	0x08009601
 80094f0:	08009601 	.word	0x08009601
 80094f4:	08009601 	.word	0x08009601
 80094f8:	080095bf 	.word	0x080095bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68b9      	ldr	r1, [r7, #8]
 8009502:	4618      	mov	r0, r3
 8009504:	f000 fa68 	bl	80099d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	699a      	ldr	r2, [r3, #24]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f042 0208 	orr.w	r2, r2, #8
 8009516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	699a      	ldr	r2, [r3, #24]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f022 0204 	bic.w	r2, r2, #4
 8009526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6999      	ldr	r1, [r3, #24]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	691a      	ldr	r2, [r3, #16]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	430a      	orrs	r2, r1
 8009538:	619a      	str	r2, [r3, #24]
      break;
 800953a:	e064      	b.n	8009606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68b9      	ldr	r1, [r7, #8]
 8009542:	4618      	mov	r0, r3
 8009544:	f000 fab8 	bl	8009ab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	699a      	ldr	r2, [r3, #24]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	699a      	ldr	r2, [r3, #24]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6999      	ldr	r1, [r3, #24]
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	021a      	lsls	r2, r3, #8
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	430a      	orrs	r2, r1
 800957a:	619a      	str	r2, [r3, #24]
      break;
 800957c:	e043      	b.n	8009606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68b9      	ldr	r1, [r7, #8]
 8009584:	4618      	mov	r0, r3
 8009586:	f000 fb0d 	bl	8009ba4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	69da      	ldr	r2, [r3, #28]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f042 0208 	orr.w	r2, r2, #8
 8009598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	69da      	ldr	r2, [r3, #28]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f022 0204 	bic.w	r2, r2, #4
 80095a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	69d9      	ldr	r1, [r3, #28]
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	691a      	ldr	r2, [r3, #16]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	430a      	orrs	r2, r1
 80095ba:	61da      	str	r2, [r3, #28]
      break;
 80095bc:	e023      	b.n	8009606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	68b9      	ldr	r1, [r7, #8]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 fb61 	bl	8009c8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	69da      	ldr	r2, [r3, #28]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	69da      	ldr	r2, [r3, #28]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	69d9      	ldr	r1, [r3, #28]
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	021a      	lsls	r2, r3, #8
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	430a      	orrs	r2, r1
 80095fc:	61da      	str	r2, [r3, #28]
      break;
 80095fe:	e002      	b.n	8009606 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	75fb      	strb	r3, [r7, #23]
      break;
 8009604:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800960e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3718      	adds	r7, #24
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800962c:	2b01      	cmp	r3, #1
 800962e:	d101      	bne.n	8009634 <HAL_TIM_ConfigClockSource+0x1c>
 8009630:	2302      	movs	r3, #2
 8009632:	e0b4      	b.n	800979e <HAL_TIM_ConfigClockSource+0x186>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2202      	movs	r2, #2
 8009640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800965a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800966c:	d03e      	beq.n	80096ec <HAL_TIM_ConfigClockSource+0xd4>
 800966e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009672:	f200 8087 	bhi.w	8009784 <HAL_TIM_ConfigClockSource+0x16c>
 8009676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800967a:	f000 8086 	beq.w	800978a <HAL_TIM_ConfigClockSource+0x172>
 800967e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009682:	d87f      	bhi.n	8009784 <HAL_TIM_ConfigClockSource+0x16c>
 8009684:	2b70      	cmp	r3, #112	@ 0x70
 8009686:	d01a      	beq.n	80096be <HAL_TIM_ConfigClockSource+0xa6>
 8009688:	2b70      	cmp	r3, #112	@ 0x70
 800968a:	d87b      	bhi.n	8009784 <HAL_TIM_ConfigClockSource+0x16c>
 800968c:	2b60      	cmp	r3, #96	@ 0x60
 800968e:	d050      	beq.n	8009732 <HAL_TIM_ConfigClockSource+0x11a>
 8009690:	2b60      	cmp	r3, #96	@ 0x60
 8009692:	d877      	bhi.n	8009784 <HAL_TIM_ConfigClockSource+0x16c>
 8009694:	2b50      	cmp	r3, #80	@ 0x50
 8009696:	d03c      	beq.n	8009712 <HAL_TIM_ConfigClockSource+0xfa>
 8009698:	2b50      	cmp	r3, #80	@ 0x50
 800969a:	d873      	bhi.n	8009784 <HAL_TIM_ConfigClockSource+0x16c>
 800969c:	2b40      	cmp	r3, #64	@ 0x40
 800969e:	d058      	beq.n	8009752 <HAL_TIM_ConfigClockSource+0x13a>
 80096a0:	2b40      	cmp	r3, #64	@ 0x40
 80096a2:	d86f      	bhi.n	8009784 <HAL_TIM_ConfigClockSource+0x16c>
 80096a4:	2b30      	cmp	r3, #48	@ 0x30
 80096a6:	d064      	beq.n	8009772 <HAL_TIM_ConfigClockSource+0x15a>
 80096a8:	2b30      	cmp	r3, #48	@ 0x30
 80096aa:	d86b      	bhi.n	8009784 <HAL_TIM_ConfigClockSource+0x16c>
 80096ac:	2b20      	cmp	r3, #32
 80096ae:	d060      	beq.n	8009772 <HAL_TIM_ConfigClockSource+0x15a>
 80096b0:	2b20      	cmp	r3, #32
 80096b2:	d867      	bhi.n	8009784 <HAL_TIM_ConfigClockSource+0x16c>
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d05c      	beq.n	8009772 <HAL_TIM_ConfigClockSource+0x15a>
 80096b8:	2b10      	cmp	r3, #16
 80096ba:	d05a      	beq.n	8009772 <HAL_TIM_ConfigClockSource+0x15a>
 80096bc:	e062      	b.n	8009784 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80096ce:	f000 fcd7 	bl	800a080 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80096e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	609a      	str	r2, [r3, #8]
      break;
 80096ea:	e04f      	b.n	800978c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80096fc:	f000 fcc0 	bl	800a080 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	689a      	ldr	r2, [r3, #8]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800970e:	609a      	str	r2, [r3, #8]
      break;
 8009710:	e03c      	b.n	800978c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800971e:	461a      	mov	r2, r3
 8009720:	f000 fb7e 	bl	8009e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2150      	movs	r1, #80	@ 0x50
 800972a:	4618      	mov	r0, r3
 800972c:	f000 fc8d 	bl	800a04a <TIM_ITRx_SetConfig>
      break;
 8009730:	e02c      	b.n	800978c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800973e:	461a      	mov	r2, r3
 8009740:	f000 fbda 	bl	8009ef8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2160      	movs	r1, #96	@ 0x60
 800974a:	4618      	mov	r0, r3
 800974c:	f000 fc7d 	bl	800a04a <TIM_ITRx_SetConfig>
      break;
 8009750:	e01c      	b.n	800978c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800975e:	461a      	mov	r2, r3
 8009760:	f000 fb5e 	bl	8009e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2140      	movs	r1, #64	@ 0x40
 800976a:	4618      	mov	r0, r3
 800976c:	f000 fc6d 	bl	800a04a <TIM_ITRx_SetConfig>
      break;
 8009770:	e00c      	b.n	800978c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4619      	mov	r1, r3
 800977c:	4610      	mov	r0, r2
 800977e:	f000 fc64 	bl	800a04a <TIM_ITRx_SetConfig>
      break;
 8009782:	e003      	b.n	800978c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	73fb      	strb	r3, [r7, #15]
      break;
 8009788:	e000      	b.n	800978c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800978a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800979c:	7bfb      	ldrb	r3, [r7, #15]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
	...

080097a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80097b2:	2300      	movs	r3, #0
 80097b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	2b0c      	cmp	r3, #12
 80097ba:	d831      	bhi.n	8009820 <HAL_TIM_ReadCapturedValue+0x78>
 80097bc:	a201      	add	r2, pc, #4	@ (adr r2, 80097c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80097be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c2:	bf00      	nop
 80097c4:	080097f9 	.word	0x080097f9
 80097c8:	08009821 	.word	0x08009821
 80097cc:	08009821 	.word	0x08009821
 80097d0:	08009821 	.word	0x08009821
 80097d4:	08009803 	.word	0x08009803
 80097d8:	08009821 	.word	0x08009821
 80097dc:	08009821 	.word	0x08009821
 80097e0:	08009821 	.word	0x08009821
 80097e4:	0800980d 	.word	0x0800980d
 80097e8:	08009821 	.word	0x08009821
 80097ec:	08009821 	.word	0x08009821
 80097f0:	08009821 	.word	0x08009821
 80097f4:	08009817 	.word	0x08009817
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097fe:	60fb      	str	r3, [r7, #12]

      break;
 8009800:	e00f      	b.n	8009822 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009808:	60fb      	str	r3, [r7, #12]

      break;
 800980a:	e00a      	b.n	8009822 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009812:	60fb      	str	r3, [r7, #12]

      break;
 8009814:	e005      	b.n	8009822 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800981c:	60fb      	str	r3, [r7, #12]

      break;
 800981e:	e000      	b.n	8009822 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009820:	bf00      	nop
  }

  return tmpreg;
 8009822:	68fb      	ldr	r3, [r7, #12]
}
 8009824:	4618      	mov	r0, r3
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a46      	ldr	r2, [pc, #280]	@ (80099ac <TIM_Base_SetConfig+0x12c>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d013      	beq.n	80098c0 <TIM_Base_SetConfig+0x40>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800989e:	d00f      	beq.n	80098c0 <TIM_Base_SetConfig+0x40>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a43      	ldr	r2, [pc, #268]	@ (80099b0 <TIM_Base_SetConfig+0x130>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d00b      	beq.n	80098c0 <TIM_Base_SetConfig+0x40>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a42      	ldr	r2, [pc, #264]	@ (80099b4 <TIM_Base_SetConfig+0x134>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d007      	beq.n	80098c0 <TIM_Base_SetConfig+0x40>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a41      	ldr	r2, [pc, #260]	@ (80099b8 <TIM_Base_SetConfig+0x138>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d003      	beq.n	80098c0 <TIM_Base_SetConfig+0x40>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a40      	ldr	r2, [pc, #256]	@ (80099bc <TIM_Base_SetConfig+0x13c>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d108      	bne.n	80098d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a35      	ldr	r2, [pc, #212]	@ (80099ac <TIM_Base_SetConfig+0x12c>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d02b      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098e0:	d027      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a32      	ldr	r2, [pc, #200]	@ (80099b0 <TIM_Base_SetConfig+0x130>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d023      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a31      	ldr	r2, [pc, #196]	@ (80099b4 <TIM_Base_SetConfig+0x134>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d01f      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a30      	ldr	r2, [pc, #192]	@ (80099b8 <TIM_Base_SetConfig+0x138>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d01b      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a2f      	ldr	r2, [pc, #188]	@ (80099bc <TIM_Base_SetConfig+0x13c>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d017      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a2e      	ldr	r2, [pc, #184]	@ (80099c0 <TIM_Base_SetConfig+0x140>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d013      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a2d      	ldr	r2, [pc, #180]	@ (80099c4 <TIM_Base_SetConfig+0x144>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d00f      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a2c      	ldr	r2, [pc, #176]	@ (80099c8 <TIM_Base_SetConfig+0x148>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d00b      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a2b      	ldr	r2, [pc, #172]	@ (80099cc <TIM_Base_SetConfig+0x14c>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d007      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a2a      	ldr	r2, [pc, #168]	@ (80099d0 <TIM_Base_SetConfig+0x150>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d003      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a29      	ldr	r2, [pc, #164]	@ (80099d4 <TIM_Base_SetConfig+0x154>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d108      	bne.n	8009944 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	4313      	orrs	r3, r2
 8009942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	4313      	orrs	r3, r2
 8009950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	689a      	ldr	r2, [r3, #8]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a10      	ldr	r2, [pc, #64]	@ (80099ac <TIM_Base_SetConfig+0x12c>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d003      	beq.n	8009978 <TIM_Base_SetConfig+0xf8>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a12      	ldr	r2, [pc, #72]	@ (80099bc <TIM_Base_SetConfig+0x13c>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d103      	bne.n	8009980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	691a      	ldr	r2, [r3, #16]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	2b01      	cmp	r3, #1
 8009990:	d105      	bne.n	800999e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	f023 0201 	bic.w	r2, r3, #1
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	611a      	str	r2, [r3, #16]
  }
}
 800999e:	bf00      	nop
 80099a0:	3714      	adds	r7, #20
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	40010000 	.word	0x40010000
 80099b0:	40000400 	.word	0x40000400
 80099b4:	40000800 	.word	0x40000800
 80099b8:	40000c00 	.word	0x40000c00
 80099bc:	40010400 	.word	0x40010400
 80099c0:	40014000 	.word	0x40014000
 80099c4:	40014400 	.word	0x40014400
 80099c8:	40014800 	.word	0x40014800
 80099cc:	40001800 	.word	0x40001800
 80099d0:	40001c00 	.word	0x40001c00
 80099d4:	40002000 	.word	0x40002000

080099d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099d8:	b480      	push	{r7}
 80099da:	b087      	sub	sp, #28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a1b      	ldr	r3, [r3, #32]
 80099e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a1b      	ldr	r3, [r3, #32]
 80099ec:	f023 0201 	bic.w	r2, r3, #1
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f023 0303 	bic.w	r3, r3, #3
 8009a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f023 0302 	bic.w	r3, r3, #2
 8009a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a20      	ldr	r2, [pc, #128]	@ (8009ab0 <TIM_OC1_SetConfig+0xd8>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d003      	beq.n	8009a3c <TIM_OC1_SetConfig+0x64>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a1f      	ldr	r2, [pc, #124]	@ (8009ab4 <TIM_OC1_SetConfig+0xdc>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d10c      	bne.n	8009a56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f023 0308 	bic.w	r3, r3, #8
 8009a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	697a      	ldr	r2, [r7, #20]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	f023 0304 	bic.w	r3, r3, #4
 8009a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a15      	ldr	r2, [pc, #84]	@ (8009ab0 <TIM_OC1_SetConfig+0xd8>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d003      	beq.n	8009a66 <TIM_OC1_SetConfig+0x8e>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4a14      	ldr	r2, [pc, #80]	@ (8009ab4 <TIM_OC1_SetConfig+0xdc>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d111      	bne.n	8009a8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	693a      	ldr	r2, [r7, #16]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	693a      	ldr	r2, [r7, #16]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	693a      	ldr	r2, [r7, #16]
 8009a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	685a      	ldr	r2, [r3, #4]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	621a      	str	r2, [r3, #32]
}
 8009aa4:	bf00      	nop
 8009aa6:	371c      	adds	r7, #28
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	40010000 	.word	0x40010000
 8009ab4:	40010400 	.word	0x40010400

08009ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b087      	sub	sp, #28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a1b      	ldr	r3, [r3, #32]
 8009ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6a1b      	ldr	r3, [r3, #32]
 8009acc:	f023 0210 	bic.w	r2, r3, #16
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	021b      	lsls	r3, r3, #8
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	f023 0320 	bic.w	r3, r3, #32
 8009b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	011b      	lsls	r3, r3, #4
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a22      	ldr	r2, [pc, #136]	@ (8009b9c <TIM_OC2_SetConfig+0xe4>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d003      	beq.n	8009b20 <TIM_OC2_SetConfig+0x68>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a21      	ldr	r2, [pc, #132]	@ (8009ba0 <TIM_OC2_SetConfig+0xe8>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d10d      	bne.n	8009b3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	011b      	lsls	r3, r3, #4
 8009b2e:	697a      	ldr	r2, [r7, #20]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a17      	ldr	r2, [pc, #92]	@ (8009b9c <TIM_OC2_SetConfig+0xe4>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d003      	beq.n	8009b4c <TIM_OC2_SetConfig+0x94>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a16      	ldr	r2, [pc, #88]	@ (8009ba0 <TIM_OC2_SetConfig+0xe8>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d113      	bne.n	8009b74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009b52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	695b      	ldr	r3, [r3, #20]
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	693a      	ldr	r2, [r7, #16]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	685a      	ldr	r2, [r3, #4]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	621a      	str	r2, [r3, #32]
}
 8009b8e:	bf00      	nop
 8009b90:	371c      	adds	r7, #28
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	40010000 	.word	0x40010000
 8009ba0:	40010400 	.word	0x40010400

08009ba4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b087      	sub	sp, #28
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a1b      	ldr	r3, [r3, #32]
 8009bb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	69db      	ldr	r3, [r3, #28]
 8009bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f023 0303 	bic.w	r3, r3, #3
 8009bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	021b      	lsls	r3, r3, #8
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a21      	ldr	r2, [pc, #132]	@ (8009c84 <TIM_OC3_SetConfig+0xe0>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d003      	beq.n	8009c0a <TIM_OC3_SetConfig+0x66>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a20      	ldr	r2, [pc, #128]	@ (8009c88 <TIM_OC3_SetConfig+0xe4>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d10d      	bne.n	8009c26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	021b      	lsls	r3, r3, #8
 8009c18:	697a      	ldr	r2, [r7, #20]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a16      	ldr	r2, [pc, #88]	@ (8009c84 <TIM_OC3_SetConfig+0xe0>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d003      	beq.n	8009c36 <TIM_OC3_SetConfig+0x92>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a15      	ldr	r2, [pc, #84]	@ (8009c88 <TIM_OC3_SetConfig+0xe4>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d113      	bne.n	8009c5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	695b      	ldr	r3, [r3, #20]
 8009c4a:	011b      	lsls	r3, r3, #4
 8009c4c:	693a      	ldr	r2, [r7, #16]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	699b      	ldr	r3, [r3, #24]
 8009c56:	011b      	lsls	r3, r3, #4
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	693a      	ldr	r2, [r7, #16]
 8009c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	685a      	ldr	r2, [r3, #4]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	697a      	ldr	r2, [r7, #20]
 8009c76:	621a      	str	r2, [r3, #32]
}
 8009c78:	bf00      	nop
 8009c7a:	371c      	adds	r7, #28
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr
 8009c84:	40010000 	.word	0x40010000
 8009c88:	40010400 	.word	0x40010400

08009c8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b087      	sub	sp, #28
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a1b      	ldr	r3, [r3, #32]
 8009c9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6a1b      	ldr	r3, [r3, #32]
 8009ca0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	021b      	lsls	r3, r3, #8
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009cd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	031b      	lsls	r3, r3, #12
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a12      	ldr	r2, [pc, #72]	@ (8009d30 <TIM_OC4_SetConfig+0xa4>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d003      	beq.n	8009cf4 <TIM_OC4_SetConfig+0x68>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a11      	ldr	r2, [pc, #68]	@ (8009d34 <TIM_OC4_SetConfig+0xa8>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d109      	bne.n	8009d08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009cfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	695b      	ldr	r3, [r3, #20]
 8009d00:	019b      	lsls	r3, r3, #6
 8009d02:	697a      	ldr	r2, [r7, #20]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	685a      	ldr	r2, [r3, #4]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	621a      	str	r2, [r3, #32]
}
 8009d22:	bf00      	nop
 8009d24:	371c      	adds	r7, #28
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	40010000 	.word	0x40010000
 8009d34:	40010400 	.word	0x40010400

08009d38 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b087      	sub	sp, #28
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
 8009d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6a1b      	ldr	r3, [r3, #32]
 8009d4a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6a1b      	ldr	r3, [r3, #32]
 8009d50:	f023 0201 	bic.w	r2, r3, #1
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	699b      	ldr	r3, [r3, #24]
 8009d5c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	4a28      	ldr	r2, [pc, #160]	@ (8009e04 <TIM_TI1_SetConfig+0xcc>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d01b      	beq.n	8009d9e <TIM_TI1_SetConfig+0x66>
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d6c:	d017      	beq.n	8009d9e <TIM_TI1_SetConfig+0x66>
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	4a25      	ldr	r2, [pc, #148]	@ (8009e08 <TIM_TI1_SetConfig+0xd0>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d013      	beq.n	8009d9e <TIM_TI1_SetConfig+0x66>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	4a24      	ldr	r2, [pc, #144]	@ (8009e0c <TIM_TI1_SetConfig+0xd4>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d00f      	beq.n	8009d9e <TIM_TI1_SetConfig+0x66>
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	4a23      	ldr	r2, [pc, #140]	@ (8009e10 <TIM_TI1_SetConfig+0xd8>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d00b      	beq.n	8009d9e <TIM_TI1_SetConfig+0x66>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	4a22      	ldr	r2, [pc, #136]	@ (8009e14 <TIM_TI1_SetConfig+0xdc>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d007      	beq.n	8009d9e <TIM_TI1_SetConfig+0x66>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	4a21      	ldr	r2, [pc, #132]	@ (8009e18 <TIM_TI1_SetConfig+0xe0>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d003      	beq.n	8009d9e <TIM_TI1_SetConfig+0x66>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	4a20      	ldr	r2, [pc, #128]	@ (8009e1c <TIM_TI1_SetConfig+0xe4>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d101      	bne.n	8009da2 <TIM_TI1_SetConfig+0x6a>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e000      	b.n	8009da4 <TIM_TI1_SetConfig+0x6c>
 8009da2:	2300      	movs	r3, #0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d008      	beq.n	8009dba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	f023 0303 	bic.w	r3, r3, #3
 8009dae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009db0:	697a      	ldr	r2, [r7, #20]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	617b      	str	r3, [r7, #20]
 8009db8:	e003      	b.n	8009dc2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f043 0301 	orr.w	r3, r3, #1
 8009dc0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	011b      	lsls	r3, r3, #4
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	f023 030a 	bic.w	r3, r3, #10
 8009ddc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	f003 030a 	and.w	r3, r3, #10
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	621a      	str	r2, [r3, #32]
}
 8009df6:	bf00      	nop
 8009df8:	371c      	adds	r7, #28
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	40010000 	.word	0x40010000
 8009e08:	40000400 	.word	0x40000400
 8009e0c:	40000800 	.word	0x40000800
 8009e10:	40000c00 	.word	0x40000c00
 8009e14:	40010400 	.word	0x40010400
 8009e18:	40014000 	.word	0x40014000
 8009e1c:	40001800 	.word	0x40001800

08009e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b087      	sub	sp, #28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6a1b      	ldr	r3, [r3, #32]
 8009e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6a1b      	ldr	r3, [r3, #32]
 8009e36:	f023 0201 	bic.w	r2, r3, #1
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	011b      	lsls	r3, r3, #4
 8009e50:	693a      	ldr	r2, [r7, #16]
 8009e52:	4313      	orrs	r3, r2
 8009e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	f023 030a 	bic.w	r3, r3, #10
 8009e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	693a      	ldr	r2, [r7, #16]
 8009e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	621a      	str	r2, [r3, #32]
}
 8009e72:	bf00      	nop
 8009e74:	371c      	adds	r7, #28
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b087      	sub	sp, #28
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	60f8      	str	r0, [r7, #12]
 8009e86:	60b9      	str	r1, [r7, #8]
 8009e88:	607a      	str	r2, [r7, #4]
 8009e8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6a1b      	ldr	r3, [r3, #32]
 8009e90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6a1b      	ldr	r3, [r3, #32]
 8009e96:	f023 0210 	bic.w	r2, r3, #16
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	021b      	lsls	r3, r3, #8
 8009eb0:	693a      	ldr	r2, [r7, #16]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	031b      	lsls	r3, r3, #12
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	011b      	lsls	r3, r3, #4
 8009ed6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	697a      	ldr	r2, [r7, #20]
 8009eea:	621a      	str	r2, [r3, #32]
}
 8009eec:	bf00      	nop
 8009eee:	371c      	adds	r7, #28
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b087      	sub	sp, #28
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6a1b      	ldr	r3, [r3, #32]
 8009f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	f023 0210 	bic.w	r2, r3, #16
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	031b      	lsls	r3, r3, #12
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009f34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	011b      	lsls	r3, r3, #4
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	693a      	ldr	r2, [r7, #16]
 8009f44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	697a      	ldr	r2, [r7, #20]
 8009f4a:	621a      	str	r2, [r3, #32]
}
 8009f4c:	bf00      	nop
 8009f4e:	371c      	adds	r7, #28
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b087      	sub	sp, #28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
 8009f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6a1b      	ldr	r3, [r3, #32]
 8009f70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	69db      	ldr	r3, [r3, #28]
 8009f7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	f023 0303 	bic.w	r3, r3, #3
 8009f84:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009f86:	693a      	ldr	r2, [r7, #16]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f94:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	011b      	lsls	r3, r3, #4
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	021b      	lsls	r3, r3, #8
 8009fae:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009fb2:	697a      	ldr	r2, [r7, #20]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	693a      	ldr	r2, [r7, #16]
 8009fbc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	697a      	ldr	r2, [r7, #20]
 8009fc2:	621a      	str	r2, [r3, #32]
}
 8009fc4:	bf00      	nop
 8009fc6:	371c      	adds	r7, #28
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b087      	sub	sp, #28
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
 8009fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6a1b      	ldr	r3, [r3, #32]
 8009fe2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6a1b      	ldr	r3, [r3, #32]
 8009fe8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	69db      	ldr	r3, [r3, #28]
 8009ff4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ffc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	021b      	lsls	r3, r3, #8
 800a002:	693a      	ldr	r2, [r7, #16]
 800a004:	4313      	orrs	r3, r2
 800a006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a00e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	031b      	lsls	r3, r3, #12
 800a014:	b29b      	uxth	r3, r3
 800a016:	693a      	ldr	r2, [r7, #16]
 800a018:	4313      	orrs	r3, r2
 800a01a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a022:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	031b      	lsls	r3, r3, #12
 800a028:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	4313      	orrs	r3, r2
 800a030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	621a      	str	r2, [r3, #32]
}
 800a03e:	bf00      	nop
 800a040:	371c      	adds	r7, #28
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b085      	sub	sp, #20
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
 800a052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a062:	683a      	ldr	r2, [r7, #0]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	4313      	orrs	r3, r2
 800a068:	f043 0307 	orr.w	r3, r3, #7
 800a06c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	609a      	str	r2, [r3, #8]
}
 800a074:	bf00      	nop
 800a076:	3714      	adds	r7, #20
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a080:	b480      	push	{r7}
 800a082:	b087      	sub	sp, #28
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
 800a08c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a09a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	021a      	lsls	r2, r3, #8
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	431a      	orrs	r2, r3
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	609a      	str	r2, [r3, #8]
}
 800a0b4:	bf00      	nop
 800a0b6:	371c      	adds	r7, #28
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b087      	sub	sp, #28
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	f003 031f 	and.w	r3, r3, #31
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6a1a      	ldr	r2, [r3, #32]
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	43db      	mvns	r3, r3
 800a0e2:	401a      	ands	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6a1a      	ldr	r2, [r3, #32]
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	f003 031f 	and.w	r3, r3, #31
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a0f8:	431a      	orrs	r2, r3
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	621a      	str	r2, [r3, #32]
}
 800a0fe:	bf00      	nop
 800a100:	371c      	adds	r7, #28
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
	...

0800a10c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d101      	bne.n	800a124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a120:	2302      	movs	r3, #2
 800a122:	e05a      	b.n	800a1da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2202      	movs	r2, #2
 800a130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a14a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	4313      	orrs	r3, r2
 800a154:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a21      	ldr	r2, [pc, #132]	@ (800a1e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d022      	beq.n	800a1ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a170:	d01d      	beq.n	800a1ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a1d      	ldr	r2, [pc, #116]	@ (800a1ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d018      	beq.n	800a1ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a1b      	ldr	r2, [pc, #108]	@ (800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d013      	beq.n	800a1ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a1a      	ldr	r2, [pc, #104]	@ (800a1f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d00e      	beq.n	800a1ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a18      	ldr	r2, [pc, #96]	@ (800a1f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d009      	beq.n	800a1ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a17      	ldr	r2, [pc, #92]	@ (800a1fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d004      	beq.n	800a1ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a15      	ldr	r2, [pc, #84]	@ (800a200 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d10c      	bne.n	800a1c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3714      	adds	r7, #20
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	40010000 	.word	0x40010000
 800a1ec:	40000400 	.word	0x40000400
 800a1f0:	40000800 	.word	0x40000800
 800a1f4:	40000c00 	.word	0x40000c00
 800a1f8:	40010400 	.word	0x40010400
 800a1fc:	40014000 	.word	0x40014000
 800a200:	40001800 	.word	0x40001800

0800a204 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a20e:	2300      	movs	r3, #0
 800a210:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d101      	bne.n	800a220 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a21c:	2302      	movs	r3, #2
 800a21e:	e03d      	b.n	800a29c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	4313      	orrs	r3, r2
 800a234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	4313      	orrs	r3, r2
 800a242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	4313      	orrs	r3, r2
 800a250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	695b      	ldr	r3, [r3, #20]
 800a278:	4313      	orrs	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	69db      	ldr	r3, [r3, #28]
 800a286:	4313      	orrs	r3, r2
 800a288:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2c4:	bf00      	nop
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d101      	bne.n	800a2e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e042      	b.n	800a368 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d106      	bne.n	800a2fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f7fb fc42 	bl	8005b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2224      	movs	r2, #36	@ 0x24
 800a300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	68da      	ldr	r2, [r3, #12]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a312:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 fdbd 	bl	800ae94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	691a      	ldr	r2, [r3, #16]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a328:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	695a      	ldr	r2, [r3, #20]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a338:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68da      	ldr	r2, [r3, #12]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a348:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2220      	movs	r2, #32
 800a354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2220      	movs	r2, #32
 800a35c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3708      	adds	r7, #8
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b08a      	sub	sp, #40	@ 0x28
 800a374:	af02      	add	r7, sp, #8
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	603b      	str	r3, [r7, #0]
 800a37c:	4613      	mov	r3, r2
 800a37e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a380:	2300      	movs	r3, #0
 800a382:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	2b20      	cmp	r3, #32
 800a38e:	d175      	bne.n	800a47c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d002      	beq.n	800a39c <HAL_UART_Transmit+0x2c>
 800a396:	88fb      	ldrh	r3, [r7, #6]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d101      	bne.n	800a3a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	e06e      	b.n	800a47e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2221      	movs	r2, #33	@ 0x21
 800a3aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a3ae:	f7fb fded 	bl	8005f8c <HAL_GetTick>
 800a3b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	88fa      	ldrh	r2, [r7, #6]
 800a3b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	88fa      	ldrh	r2, [r7, #6]
 800a3be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3c8:	d108      	bne.n	800a3dc <HAL_UART_Transmit+0x6c>
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d104      	bne.n	800a3dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	61bb      	str	r3, [r7, #24]
 800a3da:	e003      	b.n	800a3e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a3e4:	e02e      	b.n	800a444 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2180      	movs	r1, #128	@ 0x80
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f000 fb1f 	bl	800aa34 <UART_WaitOnFlagUntilTimeout>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d005      	beq.n	800a408 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2220      	movs	r2, #32
 800a400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a404:	2303      	movs	r3, #3
 800a406:	e03a      	b.n	800a47e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d10b      	bne.n	800a426 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	461a      	mov	r2, r3
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a41c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	3302      	adds	r3, #2
 800a422:	61bb      	str	r3, [r7, #24]
 800a424:	e007      	b.n	800a436 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	781a      	ldrb	r2, [r3, #0]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	3301      	adds	r3, #1
 800a434:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	3b01      	subs	r3, #1
 800a43e:	b29a      	uxth	r2, r3
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a448:	b29b      	uxth	r3, r3
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1cb      	bne.n	800a3e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	2200      	movs	r2, #0
 800a456:	2140      	movs	r1, #64	@ 0x40
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f000 faeb 	bl	800aa34 <UART_WaitOnFlagUntilTimeout>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d005      	beq.n	800a470 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2220      	movs	r2, #32
 800a468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e006      	b.n	800a47e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2220      	movs	r2, #32
 800a474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a478:	2300      	movs	r3, #0
 800a47a:	e000      	b.n	800a47e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a47c:	2302      	movs	r3, #2
  }
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3720      	adds	r7, #32
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b084      	sub	sp, #16
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	60f8      	str	r0, [r7, #12]
 800a48e:	60b9      	str	r1, [r7, #8]
 800a490:	4613      	mov	r3, r2
 800a492:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b20      	cmp	r3, #32
 800a49e:	d112      	bne.n	800a4c6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d002      	beq.n	800a4ac <HAL_UART_Receive_IT+0x26>
 800a4a6:	88fb      	ldrh	r3, [r7, #6]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d101      	bne.n	800a4b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e00b      	b.n	800a4c8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a4b6:	88fb      	ldrh	r3, [r7, #6]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	68b9      	ldr	r1, [r7, #8]
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 fb12 	bl	800aae6 <UART_Start_Receive_IT>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	e000      	b.n	800a4c8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a4c6:	2302      	movs	r3, #2
  }
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b0ba      	sub	sp, #232	@ 0xe8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a506:	f003 030f 	and.w	r3, r3, #15
 800a50a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a50e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10f      	bne.n	800a536 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a51a:	f003 0320 	and.w	r3, r3, #32
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d009      	beq.n	800a536 <HAL_UART_IRQHandler+0x66>
 800a522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a526:	f003 0320 	and.w	r3, r3, #32
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d003      	beq.n	800a536 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fbf2 	bl	800ad18 <UART_Receive_IT>
      return;
 800a534:	e25b      	b.n	800a9ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f000 80de 	beq.w	800a6fc <HAL_UART_IRQHandler+0x22c>
 800a540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a544:	f003 0301 	and.w	r3, r3, #1
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d106      	bne.n	800a55a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a54c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a550:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a554:	2b00      	cmp	r3, #0
 800a556:	f000 80d1 	beq.w	800a6fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a55a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a55e:	f003 0301 	and.w	r3, r3, #1
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00b      	beq.n	800a57e <HAL_UART_IRQHandler+0xae>
 800a566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a56a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d005      	beq.n	800a57e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a576:	f043 0201 	orr.w	r2, r3, #1
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a57e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a582:	f003 0304 	and.w	r3, r3, #4
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00b      	beq.n	800a5a2 <HAL_UART_IRQHandler+0xd2>
 800a58a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a58e:	f003 0301 	and.w	r3, r3, #1
 800a592:	2b00      	cmp	r3, #0
 800a594:	d005      	beq.n	800a5a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a59a:	f043 0202 	orr.w	r2, r3, #2
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5a6:	f003 0302 	and.w	r3, r3, #2
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00b      	beq.n	800a5c6 <HAL_UART_IRQHandler+0xf6>
 800a5ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5b2:	f003 0301 	and.w	r3, r3, #1
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d005      	beq.n	800a5c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5be:	f043 0204 	orr.w	r2, r3, #4
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a5c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5ca:	f003 0308 	and.w	r3, r3, #8
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d011      	beq.n	800a5f6 <HAL_UART_IRQHandler+0x126>
 800a5d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5d6:	f003 0320 	and.w	r3, r3, #32
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d105      	bne.n	800a5ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a5de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5e2:	f003 0301 	and.w	r3, r3, #1
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d005      	beq.n	800a5f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5ee:	f043 0208 	orr.w	r2, r3, #8
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f000 81f2 	beq.w	800a9e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a604:	f003 0320 	and.w	r3, r3, #32
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d008      	beq.n	800a61e <HAL_UART_IRQHandler+0x14e>
 800a60c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a610:	f003 0320 	and.w	r3, r3, #32
 800a614:	2b00      	cmp	r3, #0
 800a616:	d002      	beq.n	800a61e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 fb7d 	bl	800ad18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	695b      	ldr	r3, [r3, #20]
 800a624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a628:	2b40      	cmp	r3, #64	@ 0x40
 800a62a:	bf0c      	ite	eq
 800a62c:	2301      	moveq	r3, #1
 800a62e:	2300      	movne	r3, #0
 800a630:	b2db      	uxtb	r3, r3
 800a632:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a63a:	f003 0308 	and.w	r3, r3, #8
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d103      	bne.n	800a64a <HAL_UART_IRQHandler+0x17a>
 800a642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a646:	2b00      	cmp	r3, #0
 800a648:	d04f      	beq.n	800a6ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 fa85 	bl	800ab5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	695b      	ldr	r3, [r3, #20]
 800a656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a65a:	2b40      	cmp	r3, #64	@ 0x40
 800a65c:	d141      	bne.n	800a6e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	3314      	adds	r3, #20
 800a664:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a668:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a66c:	e853 3f00 	ldrex	r3, [r3]
 800a670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a674:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a678:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a67c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	3314      	adds	r3, #20
 800a686:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a68a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a68e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a692:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a696:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a69a:	e841 2300 	strex	r3, r2, [r1]
 800a69e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a6a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1d9      	bne.n	800a65e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d013      	beq.n	800a6da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6b6:	4a7e      	ldr	r2, [pc, #504]	@ (800a8b0 <HAL_UART_IRQHandler+0x3e0>)
 800a6b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fc fa15 	bl	8006aee <HAL_DMA_Abort_IT>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d016      	beq.n	800a6f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a6d4:	4610      	mov	r0, r2
 800a6d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6d8:	e00e      	b.n	800a6f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 f994 	bl	800aa08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6e0:	e00a      	b.n	800a6f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f990 	bl	800aa08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6e8:	e006      	b.n	800a6f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 f98c 	bl	800aa08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a6f6:	e175      	b.n	800a9e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6f8:	bf00      	nop
    return;
 800a6fa:	e173      	b.n	800a9e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a700:	2b01      	cmp	r3, #1
 800a702:	f040 814f 	bne.w	800a9a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a70a:	f003 0310 	and.w	r3, r3, #16
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f000 8148 	beq.w	800a9a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a718:	f003 0310 	and.w	r3, r3, #16
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 8141 	beq.w	800a9a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a722:	2300      	movs	r3, #0
 800a724:	60bb      	str	r3, [r7, #8]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	60bb      	str	r3, [r7, #8]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	60bb      	str	r3, [r7, #8]
 800a736:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	695b      	ldr	r3, [r3, #20]
 800a73e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a742:	2b40      	cmp	r3, #64	@ 0x40
 800a744:	f040 80b6 	bne.w	800a8b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a754:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f000 8145 	beq.w	800a9e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a766:	429a      	cmp	r2, r3
 800a768:	f080 813e 	bcs.w	800a9e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a772:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a778:	69db      	ldr	r3, [r3, #28]
 800a77a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a77e:	f000 8088 	beq.w	800a892 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	330c      	adds	r3, #12
 800a788:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a78c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a790:	e853 3f00 	ldrex	r3, [r3]
 800a794:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a798:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a79c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	330c      	adds	r3, #12
 800a7aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a7ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a7b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a7ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a7be:	e841 2300 	strex	r3, r2, [r1]
 800a7c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a7c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1d9      	bne.n	800a782 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	3314      	adds	r3, #20
 800a7d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7d8:	e853 3f00 	ldrex	r3, [r3]
 800a7dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a7de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a7e0:	f023 0301 	bic.w	r3, r3, #1
 800a7e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3314      	adds	r3, #20
 800a7ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a7f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a7f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a7fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a7fe:	e841 2300 	strex	r3, r2, [r1]
 800a802:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a804:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1e1      	bne.n	800a7ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3314      	adds	r3, #20
 800a810:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a812:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a814:	e853 3f00 	ldrex	r3, [r3]
 800a818:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a81a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a81c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a820:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	3314      	adds	r3, #20
 800a82a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a82e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a830:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a832:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a834:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a836:	e841 2300 	strex	r3, r2, [r1]
 800a83a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a83c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1e3      	bne.n	800a80a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2220      	movs	r2, #32
 800a846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	330c      	adds	r3, #12
 800a856:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a85a:	e853 3f00 	ldrex	r3, [r3]
 800a85e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a862:	f023 0310 	bic.w	r3, r3, #16
 800a866:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	330c      	adds	r3, #12
 800a870:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a874:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a876:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a878:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a87a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a87c:	e841 2300 	strex	r3, r2, [r1]
 800a880:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a884:	2b00      	cmp	r3, #0
 800a886:	d1e3      	bne.n	800a850 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7fc f8be 	bl	8006a0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2202      	movs	r2, #2
 800a896:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f8b7 	bl	800aa1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a8ae:	e09b      	b.n	800a9e8 <HAL_UART_IRQHandler+0x518>
 800a8b0:	0800ac21 	.word	0x0800ac21
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	1ad3      	subs	r3, r2, r3
 800a8c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f000 808e 	beq.w	800a9ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a8d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f000 8089 	beq.w	800a9ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	330c      	adds	r3, #12
 800a8e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e4:	e853 3f00 	ldrex	r3, [r3]
 800a8e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a8ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	330c      	adds	r3, #12
 800a8fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a8fe:	647a      	str	r2, [r7, #68]	@ 0x44
 800a900:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a902:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a904:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a906:	e841 2300 	strex	r3, r2, [r1]
 800a90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a90c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1e3      	bne.n	800a8da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	3314      	adds	r3, #20
 800a918:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91c:	e853 3f00 	ldrex	r3, [r3]
 800a920:	623b      	str	r3, [r7, #32]
   return(result);
 800a922:	6a3b      	ldr	r3, [r7, #32]
 800a924:	f023 0301 	bic.w	r3, r3, #1
 800a928:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	3314      	adds	r3, #20
 800a932:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a936:	633a      	str	r2, [r7, #48]	@ 0x30
 800a938:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a93c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a93e:	e841 2300 	strex	r3, r2, [r1]
 800a942:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1e3      	bne.n	800a912 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2220      	movs	r2, #32
 800a94e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	330c      	adds	r3, #12
 800a95e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	e853 3f00 	ldrex	r3, [r3]
 800a966:	60fb      	str	r3, [r7, #12]
   return(result);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f023 0310 	bic.w	r3, r3, #16
 800a96e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	330c      	adds	r3, #12
 800a978:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a97c:	61fa      	str	r2, [r7, #28]
 800a97e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a980:	69b9      	ldr	r1, [r7, #24]
 800a982:	69fa      	ldr	r2, [r7, #28]
 800a984:	e841 2300 	strex	r3, r2, [r1]
 800a988:	617b      	str	r3, [r7, #20]
   return(result);
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d1e3      	bne.n	800a958 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2202      	movs	r2, #2
 800a994:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a996:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a99a:	4619      	mov	r1, r3
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f83d 	bl	800aa1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a9a2:	e023      	b.n	800a9ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a9a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d009      	beq.n	800a9c4 <HAL_UART_IRQHandler+0x4f4>
 800a9b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d003      	beq.n	800a9c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f943 	bl	800ac48 <UART_Transmit_IT>
    return;
 800a9c2:	e014      	b.n	800a9ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a9c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00e      	beq.n	800a9ee <HAL_UART_IRQHandler+0x51e>
 800a9d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d008      	beq.n	800a9ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 f983 	bl	800ace8 <UART_EndTransmit_IT>
    return;
 800a9e2:	e004      	b.n	800a9ee <HAL_UART_IRQHandler+0x51e>
    return;
 800a9e4:	bf00      	nop
 800a9e6:	e002      	b.n	800a9ee <HAL_UART_IRQHandler+0x51e>
      return;
 800a9e8:	bf00      	nop
 800a9ea:	e000      	b.n	800a9ee <HAL_UART_IRQHandler+0x51e>
      return;
 800a9ec:	bf00      	nop
  }
}
 800a9ee:	37e8      	adds	r7, #232	@ 0xe8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a9fc:	bf00      	nop
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa10:	bf00      	nop
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	460b      	mov	r3, r1
 800aa26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa28:	bf00      	nop
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b086      	sub	sp, #24
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	603b      	str	r3, [r7, #0]
 800aa40:	4613      	mov	r3, r2
 800aa42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa44:	e03b      	b.n	800aabe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa4c:	d037      	beq.n	800aabe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa4e:	f7fb fa9d 	bl	8005f8c <HAL_GetTick>
 800aa52:	4602      	mov	r2, r0
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	1ad3      	subs	r3, r2, r3
 800aa58:	6a3a      	ldr	r2, [r7, #32]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d302      	bcc.n	800aa64 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa5e:	6a3b      	ldr	r3, [r7, #32]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d101      	bne.n	800aa68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aa64:	2303      	movs	r3, #3
 800aa66:	e03a      	b.n	800aade <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	f003 0304 	and.w	r3, r3, #4
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d023      	beq.n	800aabe <UART_WaitOnFlagUntilTimeout+0x8a>
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	2b80      	cmp	r3, #128	@ 0x80
 800aa7a:	d020      	beq.n	800aabe <UART_WaitOnFlagUntilTimeout+0x8a>
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	2b40      	cmp	r3, #64	@ 0x40
 800aa80:	d01d      	beq.n	800aabe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 0308 	and.w	r3, r3, #8
 800aa8c:	2b08      	cmp	r3, #8
 800aa8e:	d116      	bne.n	800aabe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800aa90:	2300      	movs	r3, #0
 800aa92:	617b      	str	r3, [r7, #20]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	617b      	str	r3, [r7, #20]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	617b      	str	r3, [r7, #20]
 800aaa4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f000 f857 	bl	800ab5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2208      	movs	r2, #8
 800aab0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e00f      	b.n	800aade <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	4013      	ands	r3, r2
 800aac8:	68ba      	ldr	r2, [r7, #8]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	bf0c      	ite	eq
 800aace:	2301      	moveq	r3, #1
 800aad0:	2300      	movne	r3, #0
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	461a      	mov	r2, r3
 800aad6:	79fb      	ldrb	r3, [r7, #7]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d0b4      	beq.n	800aa46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3718      	adds	r7, #24
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b085      	sub	sp, #20
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	60f8      	str	r0, [r7, #12]
 800aaee:	60b9      	str	r1, [r7, #8]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	88fa      	ldrh	r2, [r7, #6]
 800aafe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	88fa      	ldrh	r2, [r7, #6]
 800ab04:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2222      	movs	r2, #34	@ 0x22
 800ab10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d007      	beq.n	800ab2c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68da      	ldr	r2, [r3, #12]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab2a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	695a      	ldr	r2, [r3, #20]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f042 0201 	orr.w	r2, r2, #1
 800ab3a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68da      	ldr	r2, [r3, #12]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f042 0220 	orr.w	r2, r2, #32
 800ab4a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3714      	adds	r7, #20
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b095      	sub	sp, #84	@ 0x54
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	330c      	adds	r3, #12
 800ab68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab6c:	e853 3f00 	ldrex	r3, [r3]
 800ab70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	330c      	adds	r3, #12
 800ab80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ab82:	643a      	str	r2, [r7, #64]	@ 0x40
 800ab84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ab88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab8a:	e841 2300 	strex	r3, r2, [r1]
 800ab8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d1e5      	bne.n	800ab62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	3314      	adds	r3, #20
 800ab9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9e:	6a3b      	ldr	r3, [r7, #32]
 800aba0:	e853 3f00 	ldrex	r3, [r3]
 800aba4:	61fb      	str	r3, [r7, #28]
   return(result);
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	f023 0301 	bic.w	r3, r3, #1
 800abac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	3314      	adds	r3, #20
 800abb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800abb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abbe:	e841 2300 	strex	r3, r2, [r1]
 800abc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800abc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1e5      	bne.n	800ab96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d119      	bne.n	800ac06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	330c      	adds	r3, #12
 800abd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	e853 3f00 	ldrex	r3, [r3]
 800abe0:	60bb      	str	r3, [r7, #8]
   return(result);
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	f023 0310 	bic.w	r3, r3, #16
 800abe8:	647b      	str	r3, [r7, #68]	@ 0x44
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	330c      	adds	r3, #12
 800abf0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abf2:	61ba      	str	r2, [r7, #24]
 800abf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf6:	6979      	ldr	r1, [r7, #20]
 800abf8:	69ba      	ldr	r2, [r7, #24]
 800abfa:	e841 2300 	strex	r3, r2, [r1]
 800abfe:	613b      	str	r3, [r7, #16]
   return(result);
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d1e5      	bne.n	800abd2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2220      	movs	r2, #32
 800ac0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ac14:	bf00      	nop
 800ac16:	3754      	adds	r7, #84	@ 0x54
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f7ff fee4 	bl	800aa08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac40:	bf00      	nop
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	2b21      	cmp	r3, #33	@ 0x21
 800ac5a:	d13e      	bne.n	800acda <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac64:	d114      	bne.n	800ac90 <UART_Transmit_IT+0x48>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d110      	bne.n	800ac90 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6a1b      	ldr	r3, [r3, #32]
 800ac72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	881b      	ldrh	r3, [r3, #0]
 800ac78:	461a      	mov	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac82:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a1b      	ldr	r3, [r3, #32]
 800ac88:	1c9a      	adds	r2, r3, #2
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	621a      	str	r2, [r3, #32]
 800ac8e:	e008      	b.n	800aca2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a1b      	ldr	r3, [r3, #32]
 800ac94:	1c59      	adds	r1, r3, #1
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	6211      	str	r1, [r2, #32]
 800ac9a:	781a      	ldrb	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	3b01      	subs	r3, #1
 800acaa:	b29b      	uxth	r3, r3
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	4619      	mov	r1, r3
 800acb0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10f      	bne.n	800acd6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	68da      	ldr	r2, [r3, #12]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800acc4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68da      	ldr	r2, [r3, #12]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acd4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800acd6:	2300      	movs	r3, #0
 800acd8:	e000      	b.n	800acdc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800acda:	2302      	movs	r3, #2
  }
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3714      	adds	r7, #20
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68da      	ldr	r2, [r3, #12]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800acfe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2220      	movs	r2, #32
 800ad04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f7ff fe73 	bl	800a9f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b08c      	sub	sp, #48	@ 0x30
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	2b22      	cmp	r3, #34	@ 0x22
 800ad2a:	f040 80ae 	bne.w	800ae8a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad36:	d117      	bne.n	800ad68 <UART_Receive_IT+0x50>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d113      	bne.n	800ad68 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ad40:	2300      	movs	r3, #0
 800ad42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad48:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad60:	1c9a      	adds	r2, r3, #2
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	629a      	str	r2, [r3, #40]	@ 0x28
 800ad66:	e026      	b.n	800adb6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad7a:	d007      	beq.n	800ad8c <UART_Receive_IT+0x74>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d10a      	bne.n	800ad9a <UART_Receive_IT+0x82>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d106      	bne.n	800ad9a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	b2da      	uxtb	r2, r3
 800ad94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad96:	701a      	strb	r2, [r3, #0]
 800ad98:	e008      	b.n	800adac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ada6:	b2da      	uxtb	r2, r3
 800ada8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adaa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adb0:	1c5a      	adds	r2, r3, #1
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800adba:	b29b      	uxth	r3, r3
 800adbc:	3b01      	subs	r3, #1
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	4619      	mov	r1, r3
 800adc4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d15d      	bne.n	800ae86 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	68da      	ldr	r2, [r3, #12]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f022 0220 	bic.w	r2, r2, #32
 800add8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	68da      	ldr	r2, [r3, #12]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ade8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	695a      	ldr	r2, [r3, #20]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f022 0201 	bic.w	r2, r2, #1
 800adf8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2220      	movs	r2, #32
 800adfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d135      	bne.n	800ae7c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	330c      	adds	r3, #12
 800ae1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	e853 3f00 	ldrex	r3, [r3]
 800ae24:	613b      	str	r3, [r7, #16]
   return(result);
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	f023 0310 	bic.w	r3, r3, #16
 800ae2c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	330c      	adds	r3, #12
 800ae34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae36:	623a      	str	r2, [r7, #32]
 800ae38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3a:	69f9      	ldr	r1, [r7, #28]
 800ae3c:	6a3a      	ldr	r2, [r7, #32]
 800ae3e:	e841 2300 	strex	r3, r2, [r1]
 800ae42:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1e5      	bne.n	800ae16 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 0310 	and.w	r3, r3, #16
 800ae54:	2b10      	cmp	r3, #16
 800ae56:	d10a      	bne.n	800ae6e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ae58:	2300      	movs	r3, #0
 800ae5a:	60fb      	str	r3, [r7, #12]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	60fb      	str	r3, [r7, #12]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	60fb      	str	r3, [r7, #12]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ae72:	4619      	mov	r1, r3
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7ff fdd1 	bl	800aa1c <HAL_UARTEx_RxEventCallback>
 800ae7a:	e002      	b.n	800ae82 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7f6 ff5b 	bl	8001d38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	e002      	b.n	800ae8c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ae86:	2300      	movs	r3, #0
 800ae88:	e000      	b.n	800ae8c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ae8a:	2302      	movs	r3, #2
  }
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3730      	adds	r7, #48	@ 0x30
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae98:	b0c0      	sub	sp, #256	@ 0x100
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800aeac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeb0:	68d9      	ldr	r1, [r3, #12]
 800aeb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	ea40 0301 	orr.w	r3, r0, r1
 800aebc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aec2:	689a      	ldr	r2, [r3, #8]
 800aec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	431a      	orrs	r2, r3
 800aecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aed0:	695b      	ldr	r3, [r3, #20]
 800aed2:	431a      	orrs	r2, r3
 800aed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aed8:	69db      	ldr	r3, [r3, #28]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800aeec:	f021 010c 	bic.w	r1, r1, #12
 800aef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800aefa:	430b      	orrs	r3, r1
 800aefc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aefe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	695b      	ldr	r3, [r3, #20]
 800af06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800af0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af0e:	6999      	ldr	r1, [r3, #24]
 800af10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	ea40 0301 	orr.w	r3, r0, r1
 800af1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800af1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	4b8f      	ldr	r3, [pc, #572]	@ (800b160 <UART_SetConfig+0x2cc>)
 800af24:	429a      	cmp	r2, r3
 800af26:	d005      	beq.n	800af34 <UART_SetConfig+0xa0>
 800af28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	4b8d      	ldr	r3, [pc, #564]	@ (800b164 <UART_SetConfig+0x2d0>)
 800af30:	429a      	cmp	r2, r3
 800af32:	d104      	bne.n	800af3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800af34:	f7fd fc44 	bl	80087c0 <HAL_RCC_GetPCLK2Freq>
 800af38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800af3c:	e003      	b.n	800af46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800af3e:	f7fd fc2b 	bl	8008798 <HAL_RCC_GetPCLK1Freq>
 800af42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af4a:	69db      	ldr	r3, [r3, #28]
 800af4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af50:	f040 810c 	bne.w	800b16c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af58:	2200      	movs	r2, #0
 800af5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800af5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800af62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800af66:	4622      	mov	r2, r4
 800af68:	462b      	mov	r3, r5
 800af6a:	1891      	adds	r1, r2, r2
 800af6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800af6e:	415b      	adcs	r3, r3
 800af70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800af76:	4621      	mov	r1, r4
 800af78:	eb12 0801 	adds.w	r8, r2, r1
 800af7c:	4629      	mov	r1, r5
 800af7e:	eb43 0901 	adc.w	r9, r3, r1
 800af82:	f04f 0200 	mov.w	r2, #0
 800af86:	f04f 0300 	mov.w	r3, #0
 800af8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800af96:	4690      	mov	r8, r2
 800af98:	4699      	mov	r9, r3
 800af9a:	4623      	mov	r3, r4
 800af9c:	eb18 0303 	adds.w	r3, r8, r3
 800afa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800afa4:	462b      	mov	r3, r5
 800afa6:	eb49 0303 	adc.w	r3, r9, r3
 800afaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800afae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800afba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800afbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800afc2:	460b      	mov	r3, r1
 800afc4:	18db      	adds	r3, r3, r3
 800afc6:	653b      	str	r3, [r7, #80]	@ 0x50
 800afc8:	4613      	mov	r3, r2
 800afca:	eb42 0303 	adc.w	r3, r2, r3
 800afce:	657b      	str	r3, [r7, #84]	@ 0x54
 800afd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800afd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800afd8:	f7f5 fe56 	bl	8000c88 <__aeabi_uldivmod>
 800afdc:	4602      	mov	r2, r0
 800afde:	460b      	mov	r3, r1
 800afe0:	4b61      	ldr	r3, [pc, #388]	@ (800b168 <UART_SetConfig+0x2d4>)
 800afe2:	fba3 2302 	umull	r2, r3, r3, r2
 800afe6:	095b      	lsrs	r3, r3, #5
 800afe8:	011c      	lsls	r4, r3, #4
 800afea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800afee:	2200      	movs	r2, #0
 800aff0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aff4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800aff8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800affc:	4642      	mov	r2, r8
 800affe:	464b      	mov	r3, r9
 800b000:	1891      	adds	r1, r2, r2
 800b002:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b004:	415b      	adcs	r3, r3
 800b006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b008:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b00c:	4641      	mov	r1, r8
 800b00e:	eb12 0a01 	adds.w	sl, r2, r1
 800b012:	4649      	mov	r1, r9
 800b014:	eb43 0b01 	adc.w	fp, r3, r1
 800b018:	f04f 0200 	mov.w	r2, #0
 800b01c:	f04f 0300 	mov.w	r3, #0
 800b020:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b024:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b02c:	4692      	mov	sl, r2
 800b02e:	469b      	mov	fp, r3
 800b030:	4643      	mov	r3, r8
 800b032:	eb1a 0303 	adds.w	r3, sl, r3
 800b036:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b03a:	464b      	mov	r3, r9
 800b03c:	eb4b 0303 	adc.w	r3, fp, r3
 800b040:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b050:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b054:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b058:	460b      	mov	r3, r1
 800b05a:	18db      	adds	r3, r3, r3
 800b05c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b05e:	4613      	mov	r3, r2
 800b060:	eb42 0303 	adc.w	r3, r2, r3
 800b064:	647b      	str	r3, [r7, #68]	@ 0x44
 800b066:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b06a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b06e:	f7f5 fe0b 	bl	8000c88 <__aeabi_uldivmod>
 800b072:	4602      	mov	r2, r0
 800b074:	460b      	mov	r3, r1
 800b076:	4611      	mov	r1, r2
 800b078:	4b3b      	ldr	r3, [pc, #236]	@ (800b168 <UART_SetConfig+0x2d4>)
 800b07a:	fba3 2301 	umull	r2, r3, r3, r1
 800b07e:	095b      	lsrs	r3, r3, #5
 800b080:	2264      	movs	r2, #100	@ 0x64
 800b082:	fb02 f303 	mul.w	r3, r2, r3
 800b086:	1acb      	subs	r3, r1, r3
 800b088:	00db      	lsls	r3, r3, #3
 800b08a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b08e:	4b36      	ldr	r3, [pc, #216]	@ (800b168 <UART_SetConfig+0x2d4>)
 800b090:	fba3 2302 	umull	r2, r3, r3, r2
 800b094:	095b      	lsrs	r3, r3, #5
 800b096:	005b      	lsls	r3, r3, #1
 800b098:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b09c:	441c      	add	r4, r3
 800b09e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b0a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b0ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b0b0:	4642      	mov	r2, r8
 800b0b2:	464b      	mov	r3, r9
 800b0b4:	1891      	adds	r1, r2, r2
 800b0b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b0b8:	415b      	adcs	r3, r3
 800b0ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b0c0:	4641      	mov	r1, r8
 800b0c2:	1851      	adds	r1, r2, r1
 800b0c4:	6339      	str	r1, [r7, #48]	@ 0x30
 800b0c6:	4649      	mov	r1, r9
 800b0c8:	414b      	adcs	r3, r1
 800b0ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0cc:	f04f 0200 	mov.w	r2, #0
 800b0d0:	f04f 0300 	mov.w	r3, #0
 800b0d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b0d8:	4659      	mov	r1, fp
 800b0da:	00cb      	lsls	r3, r1, #3
 800b0dc:	4651      	mov	r1, sl
 800b0de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0e2:	4651      	mov	r1, sl
 800b0e4:	00ca      	lsls	r2, r1, #3
 800b0e6:	4610      	mov	r0, r2
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	4642      	mov	r2, r8
 800b0ee:	189b      	adds	r3, r3, r2
 800b0f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b0f4:	464b      	mov	r3, r9
 800b0f6:	460a      	mov	r2, r1
 800b0f8:	eb42 0303 	adc.w	r3, r2, r3
 800b0fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b10c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b110:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b114:	460b      	mov	r3, r1
 800b116:	18db      	adds	r3, r3, r3
 800b118:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b11a:	4613      	mov	r3, r2
 800b11c:	eb42 0303 	adc.w	r3, r2, r3
 800b120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b122:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b126:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b12a:	f7f5 fdad 	bl	8000c88 <__aeabi_uldivmod>
 800b12e:	4602      	mov	r2, r0
 800b130:	460b      	mov	r3, r1
 800b132:	4b0d      	ldr	r3, [pc, #52]	@ (800b168 <UART_SetConfig+0x2d4>)
 800b134:	fba3 1302 	umull	r1, r3, r3, r2
 800b138:	095b      	lsrs	r3, r3, #5
 800b13a:	2164      	movs	r1, #100	@ 0x64
 800b13c:	fb01 f303 	mul.w	r3, r1, r3
 800b140:	1ad3      	subs	r3, r2, r3
 800b142:	00db      	lsls	r3, r3, #3
 800b144:	3332      	adds	r3, #50	@ 0x32
 800b146:	4a08      	ldr	r2, [pc, #32]	@ (800b168 <UART_SetConfig+0x2d4>)
 800b148:	fba2 2303 	umull	r2, r3, r2, r3
 800b14c:	095b      	lsrs	r3, r3, #5
 800b14e:	f003 0207 	and.w	r2, r3, #7
 800b152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4422      	add	r2, r4
 800b15a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b15c:	e106      	b.n	800b36c <UART_SetConfig+0x4d8>
 800b15e:	bf00      	nop
 800b160:	40011000 	.word	0x40011000
 800b164:	40011400 	.word	0x40011400
 800b168:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b16c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b170:	2200      	movs	r2, #0
 800b172:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b176:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b17a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b17e:	4642      	mov	r2, r8
 800b180:	464b      	mov	r3, r9
 800b182:	1891      	adds	r1, r2, r2
 800b184:	6239      	str	r1, [r7, #32]
 800b186:	415b      	adcs	r3, r3
 800b188:	627b      	str	r3, [r7, #36]	@ 0x24
 800b18a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b18e:	4641      	mov	r1, r8
 800b190:	1854      	adds	r4, r2, r1
 800b192:	4649      	mov	r1, r9
 800b194:	eb43 0501 	adc.w	r5, r3, r1
 800b198:	f04f 0200 	mov.w	r2, #0
 800b19c:	f04f 0300 	mov.w	r3, #0
 800b1a0:	00eb      	lsls	r3, r5, #3
 800b1a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b1a6:	00e2      	lsls	r2, r4, #3
 800b1a8:	4614      	mov	r4, r2
 800b1aa:	461d      	mov	r5, r3
 800b1ac:	4643      	mov	r3, r8
 800b1ae:	18e3      	adds	r3, r4, r3
 800b1b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b1b4:	464b      	mov	r3, r9
 800b1b6:	eb45 0303 	adc.w	r3, r5, r3
 800b1ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b1be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b1ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b1ce:	f04f 0200 	mov.w	r2, #0
 800b1d2:	f04f 0300 	mov.w	r3, #0
 800b1d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b1da:	4629      	mov	r1, r5
 800b1dc:	008b      	lsls	r3, r1, #2
 800b1de:	4621      	mov	r1, r4
 800b1e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1e4:	4621      	mov	r1, r4
 800b1e6:	008a      	lsls	r2, r1, #2
 800b1e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b1ec:	f7f5 fd4c 	bl	8000c88 <__aeabi_uldivmod>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	4b60      	ldr	r3, [pc, #384]	@ (800b378 <UART_SetConfig+0x4e4>)
 800b1f6:	fba3 2302 	umull	r2, r3, r3, r2
 800b1fa:	095b      	lsrs	r3, r3, #5
 800b1fc:	011c      	lsls	r4, r3, #4
 800b1fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b202:	2200      	movs	r2, #0
 800b204:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b208:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b20c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b210:	4642      	mov	r2, r8
 800b212:	464b      	mov	r3, r9
 800b214:	1891      	adds	r1, r2, r2
 800b216:	61b9      	str	r1, [r7, #24]
 800b218:	415b      	adcs	r3, r3
 800b21a:	61fb      	str	r3, [r7, #28]
 800b21c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b220:	4641      	mov	r1, r8
 800b222:	1851      	adds	r1, r2, r1
 800b224:	6139      	str	r1, [r7, #16]
 800b226:	4649      	mov	r1, r9
 800b228:	414b      	adcs	r3, r1
 800b22a:	617b      	str	r3, [r7, #20]
 800b22c:	f04f 0200 	mov.w	r2, #0
 800b230:	f04f 0300 	mov.w	r3, #0
 800b234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b238:	4659      	mov	r1, fp
 800b23a:	00cb      	lsls	r3, r1, #3
 800b23c:	4651      	mov	r1, sl
 800b23e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b242:	4651      	mov	r1, sl
 800b244:	00ca      	lsls	r2, r1, #3
 800b246:	4610      	mov	r0, r2
 800b248:	4619      	mov	r1, r3
 800b24a:	4603      	mov	r3, r0
 800b24c:	4642      	mov	r2, r8
 800b24e:	189b      	adds	r3, r3, r2
 800b250:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b254:	464b      	mov	r3, r9
 800b256:	460a      	mov	r2, r1
 800b258:	eb42 0303 	adc.w	r3, r2, r3
 800b25c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b26a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b26c:	f04f 0200 	mov.w	r2, #0
 800b270:	f04f 0300 	mov.w	r3, #0
 800b274:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b278:	4649      	mov	r1, r9
 800b27a:	008b      	lsls	r3, r1, #2
 800b27c:	4641      	mov	r1, r8
 800b27e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b282:	4641      	mov	r1, r8
 800b284:	008a      	lsls	r2, r1, #2
 800b286:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b28a:	f7f5 fcfd 	bl	8000c88 <__aeabi_uldivmod>
 800b28e:	4602      	mov	r2, r0
 800b290:	460b      	mov	r3, r1
 800b292:	4611      	mov	r1, r2
 800b294:	4b38      	ldr	r3, [pc, #224]	@ (800b378 <UART_SetConfig+0x4e4>)
 800b296:	fba3 2301 	umull	r2, r3, r3, r1
 800b29a:	095b      	lsrs	r3, r3, #5
 800b29c:	2264      	movs	r2, #100	@ 0x64
 800b29e:	fb02 f303 	mul.w	r3, r2, r3
 800b2a2:	1acb      	subs	r3, r1, r3
 800b2a4:	011b      	lsls	r3, r3, #4
 800b2a6:	3332      	adds	r3, #50	@ 0x32
 800b2a8:	4a33      	ldr	r2, [pc, #204]	@ (800b378 <UART_SetConfig+0x4e4>)
 800b2aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ae:	095b      	lsrs	r3, r3, #5
 800b2b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b2b4:	441c      	add	r4, r3
 800b2b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	673b      	str	r3, [r7, #112]	@ 0x70
 800b2be:	677a      	str	r2, [r7, #116]	@ 0x74
 800b2c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b2c4:	4642      	mov	r2, r8
 800b2c6:	464b      	mov	r3, r9
 800b2c8:	1891      	adds	r1, r2, r2
 800b2ca:	60b9      	str	r1, [r7, #8]
 800b2cc:	415b      	adcs	r3, r3
 800b2ce:	60fb      	str	r3, [r7, #12]
 800b2d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b2d4:	4641      	mov	r1, r8
 800b2d6:	1851      	adds	r1, r2, r1
 800b2d8:	6039      	str	r1, [r7, #0]
 800b2da:	4649      	mov	r1, r9
 800b2dc:	414b      	adcs	r3, r1
 800b2de:	607b      	str	r3, [r7, #4]
 800b2e0:	f04f 0200 	mov.w	r2, #0
 800b2e4:	f04f 0300 	mov.w	r3, #0
 800b2e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b2ec:	4659      	mov	r1, fp
 800b2ee:	00cb      	lsls	r3, r1, #3
 800b2f0:	4651      	mov	r1, sl
 800b2f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2f6:	4651      	mov	r1, sl
 800b2f8:	00ca      	lsls	r2, r1, #3
 800b2fa:	4610      	mov	r0, r2
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	4603      	mov	r3, r0
 800b300:	4642      	mov	r2, r8
 800b302:	189b      	adds	r3, r3, r2
 800b304:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b306:	464b      	mov	r3, r9
 800b308:	460a      	mov	r2, r1
 800b30a:	eb42 0303 	adc.w	r3, r2, r3
 800b30e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	663b      	str	r3, [r7, #96]	@ 0x60
 800b31a:	667a      	str	r2, [r7, #100]	@ 0x64
 800b31c:	f04f 0200 	mov.w	r2, #0
 800b320:	f04f 0300 	mov.w	r3, #0
 800b324:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b328:	4649      	mov	r1, r9
 800b32a:	008b      	lsls	r3, r1, #2
 800b32c:	4641      	mov	r1, r8
 800b32e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b332:	4641      	mov	r1, r8
 800b334:	008a      	lsls	r2, r1, #2
 800b336:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b33a:	f7f5 fca5 	bl	8000c88 <__aeabi_uldivmod>
 800b33e:	4602      	mov	r2, r0
 800b340:	460b      	mov	r3, r1
 800b342:	4b0d      	ldr	r3, [pc, #52]	@ (800b378 <UART_SetConfig+0x4e4>)
 800b344:	fba3 1302 	umull	r1, r3, r3, r2
 800b348:	095b      	lsrs	r3, r3, #5
 800b34a:	2164      	movs	r1, #100	@ 0x64
 800b34c:	fb01 f303 	mul.w	r3, r1, r3
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	011b      	lsls	r3, r3, #4
 800b354:	3332      	adds	r3, #50	@ 0x32
 800b356:	4a08      	ldr	r2, [pc, #32]	@ (800b378 <UART_SetConfig+0x4e4>)
 800b358:	fba2 2303 	umull	r2, r3, r2, r3
 800b35c:	095b      	lsrs	r3, r3, #5
 800b35e:	f003 020f 	and.w	r2, r3, #15
 800b362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4422      	add	r2, r4
 800b36a:	609a      	str	r2, [r3, #8]
}
 800b36c:	bf00      	nop
 800b36e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b372:	46bd      	mov	sp, r7
 800b374:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b378:	51eb851f 	.word	0x51eb851f

0800b37c <__NVIC_SetPriority>:
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	4603      	mov	r3, r0
 800b384:	6039      	str	r1, [r7, #0]
 800b386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	db0a      	blt.n	800b3a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	b2da      	uxtb	r2, r3
 800b394:	490c      	ldr	r1, [pc, #48]	@ (800b3c8 <__NVIC_SetPriority+0x4c>)
 800b396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b39a:	0112      	lsls	r2, r2, #4
 800b39c:	b2d2      	uxtb	r2, r2
 800b39e:	440b      	add	r3, r1
 800b3a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b3a4:	e00a      	b.n	800b3bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	b2da      	uxtb	r2, r3
 800b3aa:	4908      	ldr	r1, [pc, #32]	@ (800b3cc <__NVIC_SetPriority+0x50>)
 800b3ac:	79fb      	ldrb	r3, [r7, #7]
 800b3ae:	f003 030f 	and.w	r3, r3, #15
 800b3b2:	3b04      	subs	r3, #4
 800b3b4:	0112      	lsls	r2, r2, #4
 800b3b6:	b2d2      	uxtb	r2, r2
 800b3b8:	440b      	add	r3, r1
 800b3ba:	761a      	strb	r2, [r3, #24]
}
 800b3bc:	bf00      	nop
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr
 800b3c8:	e000e100 	.word	0xe000e100
 800b3cc:	e000ed00 	.word	0xe000ed00

0800b3d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	f06f 0004 	mvn.w	r0, #4
 800b3da:	f7ff ffcf 	bl	800b37c <__NVIC_SetPriority>
#endif
}
 800b3de:	bf00      	nop
 800b3e0:	bd80      	pop	{r7, pc}
	...

0800b3e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3ea:	f3ef 8305 	mrs	r3, IPSR
 800b3ee:	603b      	str	r3, [r7, #0]
  return(result);
 800b3f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d003      	beq.n	800b3fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b3f6:	f06f 0305 	mvn.w	r3, #5
 800b3fa:	607b      	str	r3, [r7, #4]
 800b3fc:	e00c      	b.n	800b418 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b3fe:	4b0a      	ldr	r3, [pc, #40]	@ (800b428 <osKernelInitialize+0x44>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d105      	bne.n	800b412 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b406:	4b08      	ldr	r3, [pc, #32]	@ (800b428 <osKernelInitialize+0x44>)
 800b408:	2201      	movs	r2, #1
 800b40a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b40c:	2300      	movs	r3, #0
 800b40e:	607b      	str	r3, [r7, #4]
 800b410:	e002      	b.n	800b418 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b412:	f04f 33ff 	mov.w	r3, #4294967295
 800b416:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b418:	687b      	ldr	r3, [r7, #4]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	370c      	adds	r7, #12
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	20000b5c 	.word	0x20000b5c

0800b42c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b432:	f3ef 8305 	mrs	r3, IPSR
 800b436:	603b      	str	r3, [r7, #0]
  return(result);
 800b438:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d003      	beq.n	800b446 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b43e:	f06f 0305 	mvn.w	r3, #5
 800b442:	607b      	str	r3, [r7, #4]
 800b444:	e010      	b.n	800b468 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b446:	4b0b      	ldr	r3, [pc, #44]	@ (800b474 <osKernelStart+0x48>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d109      	bne.n	800b462 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b44e:	f7ff ffbf 	bl	800b3d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b452:	4b08      	ldr	r3, [pc, #32]	@ (800b474 <osKernelStart+0x48>)
 800b454:	2202      	movs	r2, #2
 800b456:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b458:	f001 f8f0 	bl	800c63c <vTaskStartScheduler>
      stat = osOK;
 800b45c:	2300      	movs	r3, #0
 800b45e:	607b      	str	r3, [r7, #4]
 800b460:	e002      	b.n	800b468 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b462:	f04f 33ff 	mov.w	r3, #4294967295
 800b466:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b468:	687b      	ldr	r3, [r7, #4]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	20000b5c 	.word	0x20000b5c

0800b478 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b478:	b580      	push	{r7, lr}
 800b47a:	b08e      	sub	sp, #56	@ 0x38
 800b47c:	af04      	add	r7, sp, #16
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b484:	2300      	movs	r3, #0
 800b486:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b488:	f3ef 8305 	mrs	r3, IPSR
 800b48c:	617b      	str	r3, [r7, #20]
  return(result);
 800b48e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b490:	2b00      	cmp	r3, #0
 800b492:	d17e      	bne.n	800b592 <osThreadNew+0x11a>
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d07b      	beq.n	800b592 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b49a:	2380      	movs	r3, #128	@ 0x80
 800b49c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b49e:	2318      	movs	r3, #24
 800b4a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d045      	beq.n	800b53e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d002      	beq.n	800b4c0 <osThreadNew+0x48>
        name = attr->name;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	699b      	ldr	r3, [r3, #24]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d002      	beq.n	800b4ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	699b      	ldr	r3, [r3, #24]
 800b4cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d008      	beq.n	800b4e6 <osThreadNew+0x6e>
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	2b38      	cmp	r3, #56	@ 0x38
 800b4d8:	d805      	bhi.n	800b4e6 <osThreadNew+0x6e>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	f003 0301 	and.w	r3, r3, #1
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d001      	beq.n	800b4ea <osThreadNew+0x72>
        return (NULL);
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	e054      	b.n	800b594 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	695b      	ldr	r3, [r3, #20]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d003      	beq.n	800b4fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	695b      	ldr	r3, [r3, #20]
 800b4f6:	089b      	lsrs	r3, r3, #2
 800b4f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	689b      	ldr	r3, [r3, #8]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00e      	beq.n	800b520 <osThreadNew+0xa8>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	2b5b      	cmp	r3, #91	@ 0x5b
 800b508:	d90a      	bls.n	800b520 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d006      	beq.n	800b520 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d002      	beq.n	800b520 <osThreadNew+0xa8>
        mem = 1;
 800b51a:	2301      	movs	r3, #1
 800b51c:	61bb      	str	r3, [r7, #24]
 800b51e:	e010      	b.n	800b542 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d10c      	bne.n	800b542 <osThreadNew+0xca>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d108      	bne.n	800b542 <osThreadNew+0xca>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d104      	bne.n	800b542 <osThreadNew+0xca>
          mem = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	61bb      	str	r3, [r7, #24]
 800b53c:	e001      	b.n	800b542 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b53e:	2300      	movs	r3, #0
 800b540:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b542:	69bb      	ldr	r3, [r7, #24]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d110      	bne.n	800b56a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b550:	9202      	str	r2, [sp, #8]
 800b552:	9301      	str	r3, [sp, #4]
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	9300      	str	r3, [sp, #0]
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	6a3a      	ldr	r2, [r7, #32]
 800b55c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f000 fe1a 	bl	800c198 <xTaskCreateStatic>
 800b564:	4603      	mov	r3, r0
 800b566:	613b      	str	r3, [r7, #16]
 800b568:	e013      	b.n	800b592 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d110      	bne.n	800b592 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b570:	6a3b      	ldr	r3, [r7, #32]
 800b572:	b29a      	uxth	r2, r3
 800b574:	f107 0310 	add.w	r3, r7, #16
 800b578:	9301      	str	r3, [sp, #4]
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f000 fe68 	bl	800c258 <xTaskCreate>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d001      	beq.n	800b592 <osThreadNew+0x11a>
            hTask = NULL;
 800b58e:	2300      	movs	r3, #0
 800b590:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b592:	693b      	ldr	r3, [r7, #16]
}
 800b594:	4618      	mov	r0, r3
 800b596:	3728      	adds	r7, #40	@ 0x28
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5a4:	f3ef 8305 	mrs	r3, IPSR
 800b5a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d003      	beq.n	800b5b8 <osDelay+0x1c>
    stat = osErrorISR;
 800b5b0:	f06f 0305 	mvn.w	r3, #5
 800b5b4:	60fb      	str	r3, [r7, #12]
 800b5b6:	e007      	b.n	800b5c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d002      	beq.n	800b5c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 ff8e 	bl	800c4e4 <vTaskDelay>
    }
  }

  return (stat);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3710      	adds	r7, #16
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
	...

0800b5d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	4a07      	ldr	r2, [pc, #28]	@ (800b600 <vApplicationGetIdleTaskMemory+0x2c>)
 800b5e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	4a06      	ldr	r2, [pc, #24]	@ (800b604 <vApplicationGetIdleTaskMemory+0x30>)
 800b5ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2280      	movs	r2, #128	@ 0x80
 800b5f0:	601a      	str	r2, [r3, #0]
}
 800b5f2:	bf00      	nop
 800b5f4:	3714      	adds	r7, #20
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr
 800b5fe:	bf00      	nop
 800b600:	20000b60 	.word	0x20000b60
 800b604:	20000bbc 	.word	0x20000bbc

0800b608 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	4a07      	ldr	r2, [pc, #28]	@ (800b634 <vApplicationGetTimerTaskMemory+0x2c>)
 800b618:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	4a06      	ldr	r2, [pc, #24]	@ (800b638 <vApplicationGetTimerTaskMemory+0x30>)
 800b61e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b626:	601a      	str	r2, [r3, #0]
}
 800b628:	bf00      	nop
 800b62a:	3714      	adds	r7, #20
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr
 800b634:	20000dbc 	.word	0x20000dbc
 800b638:	20000e18 	.word	0x20000e18

0800b63c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f103 0208 	add.w	r2, r3, #8
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f04f 32ff 	mov.w	r2, #4294967295
 800b654:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f103 0208 	add.w	r2, r3, #8
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f103 0208 	add.w	r2, r3, #8
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b670:	bf00      	nop
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b68a:	bf00      	nop
 800b68c:	370c      	adds	r7, #12
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr

0800b696 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b696:	b480      	push	{r7}
 800b698:	b085      	sub	sp, #20
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
 800b69e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	689a      	ldr	r2, [r3, #8]
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	683a      	ldr	r2, [r7, #0]
 800b6ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	1c5a      	adds	r2, r3, #1
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	601a      	str	r2, [r3, #0]
}
 800b6d2:	bf00      	nop
 800b6d4:	3714      	adds	r7, #20
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b085      	sub	sp, #20
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
 800b6e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f4:	d103      	bne.n	800b6fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	60fb      	str	r3, [r7, #12]
 800b6fc:	e00c      	b.n	800b718 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	3308      	adds	r3, #8
 800b702:	60fb      	str	r3, [r7, #12]
 800b704:	e002      	b.n	800b70c <vListInsert+0x2e>
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	60fb      	str	r3, [r7, #12]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	68ba      	ldr	r2, [r7, #8]
 800b714:	429a      	cmp	r2, r3
 800b716:	d2f6      	bcs.n	800b706 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	685a      	ldr	r2, [r3, #4]
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	683a      	ldr	r2, [r7, #0]
 800b726:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	683a      	ldr	r2, [r7, #0]
 800b732:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	1c5a      	adds	r2, r3, #1
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	601a      	str	r2, [r3, #0]
}
 800b744:	bf00      	nop
 800b746:	3714      	adds	r7, #20
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	691b      	ldr	r3, [r3, #16]
 800b75c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	6892      	ldr	r2, [r2, #8]
 800b766:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	6852      	ldr	r2, [r2, #4]
 800b770:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d103      	bne.n	800b784 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	689a      	ldr	r2, [r3, #8]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	1e5a      	subs	r2, r3, #1
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3714      	adds	r7, #20
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d10b      	bne.n	800b7d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b7b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7bc:	f383 8811 	msr	BASEPRI, r3
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b7ca:	bf00      	nop
 800b7cc:	bf00      	nop
 800b7ce:	e7fd      	b.n	800b7cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b7d0:	f002 f8f2 	bl	800d9b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7dc:	68f9      	ldr	r1, [r7, #12]
 800b7de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b7e0:	fb01 f303 	mul.w	r3, r1, r3
 800b7e4:	441a      	add	r2, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b800:	3b01      	subs	r3, #1
 800b802:	68f9      	ldr	r1, [r7, #12]
 800b804:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b806:	fb01 f303 	mul.w	r3, r1, r3
 800b80a:	441a      	add	r2, r3
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	22ff      	movs	r2, #255	@ 0xff
 800b814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	22ff      	movs	r2, #255	@ 0xff
 800b81c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d114      	bne.n	800b850 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	691b      	ldr	r3, [r3, #16]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d01a      	beq.n	800b864 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	3310      	adds	r3, #16
 800b832:	4618      	mov	r0, r3
 800b834:	f001 f990 	bl	800cb58 <xTaskRemoveFromEventList>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d012      	beq.n	800b864 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b83e:	4b0d      	ldr	r3, [pc, #52]	@ (800b874 <xQueueGenericReset+0xd0>)
 800b840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b844:	601a      	str	r2, [r3, #0]
 800b846:	f3bf 8f4f 	dsb	sy
 800b84a:	f3bf 8f6f 	isb	sy
 800b84e:	e009      	b.n	800b864 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	3310      	adds	r3, #16
 800b854:	4618      	mov	r0, r3
 800b856:	f7ff fef1 	bl	800b63c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3324      	adds	r3, #36	@ 0x24
 800b85e:	4618      	mov	r0, r3
 800b860:	f7ff feec 	bl	800b63c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b864:	f002 f8da 	bl	800da1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b868:	2301      	movs	r3, #1
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	e000ed04 	.word	0xe000ed04

0800b878 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b08e      	sub	sp, #56	@ 0x38
 800b87c:	af02      	add	r7, sp, #8
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
 800b884:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d10b      	bne.n	800b8a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b890:	f383 8811 	msr	BASEPRI, r3
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b89e:	bf00      	nop
 800b8a0:	bf00      	nop
 800b8a2:	e7fd      	b.n	800b8a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d10b      	bne.n	800b8c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b8aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ae:	f383 8811 	msr	BASEPRI, r3
 800b8b2:	f3bf 8f6f 	isb	sy
 800b8b6:	f3bf 8f4f 	dsb	sy
 800b8ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b8bc:	bf00      	nop
 800b8be:	bf00      	nop
 800b8c0:	e7fd      	b.n	800b8be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d002      	beq.n	800b8ce <xQueueGenericCreateStatic+0x56>
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d001      	beq.n	800b8d2 <xQueueGenericCreateStatic+0x5a>
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e000      	b.n	800b8d4 <xQueueGenericCreateStatic+0x5c>
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d10b      	bne.n	800b8f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8dc:	f383 8811 	msr	BASEPRI, r3
 800b8e0:	f3bf 8f6f 	isb	sy
 800b8e4:	f3bf 8f4f 	dsb	sy
 800b8e8:	623b      	str	r3, [r7, #32]
}
 800b8ea:	bf00      	nop
 800b8ec:	bf00      	nop
 800b8ee:	e7fd      	b.n	800b8ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d102      	bne.n	800b8fc <xQueueGenericCreateStatic+0x84>
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d101      	bne.n	800b900 <xQueueGenericCreateStatic+0x88>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e000      	b.n	800b902 <xQueueGenericCreateStatic+0x8a>
 800b900:	2300      	movs	r3, #0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d10b      	bne.n	800b91e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	61fb      	str	r3, [r7, #28]
}
 800b918:	bf00      	nop
 800b91a:	bf00      	nop
 800b91c:	e7fd      	b.n	800b91a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b91e:	2350      	movs	r3, #80	@ 0x50
 800b920:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	2b50      	cmp	r3, #80	@ 0x50
 800b926:	d00b      	beq.n	800b940 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b92c:	f383 8811 	msr	BASEPRI, r3
 800b930:	f3bf 8f6f 	isb	sy
 800b934:	f3bf 8f4f 	dsb	sy
 800b938:	61bb      	str	r3, [r7, #24]
}
 800b93a:	bf00      	nop
 800b93c:	bf00      	nop
 800b93e:	e7fd      	b.n	800b93c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b940:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00d      	beq.n	800b968 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b94e:	2201      	movs	r2, #1
 800b950:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b954:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	4613      	mov	r3, r2
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	68b9      	ldr	r1, [r7, #8]
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f000 f805 	bl	800b972 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3730      	adds	r7, #48	@ 0x30
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b972:	b580      	push	{r7, lr}
 800b974:	b084      	sub	sp, #16
 800b976:	af00      	add	r7, sp, #0
 800b978:	60f8      	str	r0, [r7, #12]
 800b97a:	60b9      	str	r1, [r7, #8]
 800b97c:	607a      	str	r2, [r7, #4]
 800b97e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d103      	bne.n	800b98e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	69ba      	ldr	r2, [r7, #24]
 800b98a:	601a      	str	r2, [r3, #0]
 800b98c:	e002      	b.n	800b994 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	68ba      	ldr	r2, [r7, #8]
 800b99e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b9a0:	2101      	movs	r1, #1
 800b9a2:	69b8      	ldr	r0, [r7, #24]
 800b9a4:	f7ff fefe 	bl	800b7a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b9a8:	69bb      	ldr	r3, [r7, #24]
 800b9aa:	78fa      	ldrb	r2, [r7, #3]
 800b9ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b9b0:	bf00      	nop
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b08e      	sub	sp, #56	@ 0x38
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
 800b9c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10b      	bne.n	800b9ec <xQueueGenericSend+0x34>
	__asm volatile
 800b9d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d8:	f383 8811 	msr	BASEPRI, r3
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b9e6:	bf00      	nop
 800b9e8:	bf00      	nop
 800b9ea:	e7fd      	b.n	800b9e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d103      	bne.n	800b9fa <xQueueGenericSend+0x42>
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d101      	bne.n	800b9fe <xQueueGenericSend+0x46>
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e000      	b.n	800ba00 <xQueueGenericSend+0x48>
 800b9fe:	2300      	movs	r3, #0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d10b      	bne.n	800ba1c <xQueueGenericSend+0x64>
	__asm volatile
 800ba04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba08:	f383 8811 	msr	BASEPRI, r3
 800ba0c:	f3bf 8f6f 	isb	sy
 800ba10:	f3bf 8f4f 	dsb	sy
 800ba14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ba16:	bf00      	nop
 800ba18:	bf00      	nop
 800ba1a:	e7fd      	b.n	800ba18 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	d103      	bne.n	800ba2a <xQueueGenericSend+0x72>
 800ba22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d101      	bne.n	800ba2e <xQueueGenericSend+0x76>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e000      	b.n	800ba30 <xQueueGenericSend+0x78>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10b      	bne.n	800ba4c <xQueueGenericSend+0x94>
	__asm volatile
 800ba34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba38:	f383 8811 	msr	BASEPRI, r3
 800ba3c:	f3bf 8f6f 	isb	sy
 800ba40:	f3bf 8f4f 	dsb	sy
 800ba44:	623b      	str	r3, [r7, #32]
}
 800ba46:	bf00      	nop
 800ba48:	bf00      	nop
 800ba4a:	e7fd      	b.n	800ba48 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba4c:	f001 fa44 	bl	800ced8 <xTaskGetSchedulerState>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d102      	bne.n	800ba5c <xQueueGenericSend+0xa4>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d101      	bne.n	800ba60 <xQueueGenericSend+0xa8>
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e000      	b.n	800ba62 <xQueueGenericSend+0xaa>
 800ba60:	2300      	movs	r3, #0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10b      	bne.n	800ba7e <xQueueGenericSend+0xc6>
	__asm volatile
 800ba66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba6a:	f383 8811 	msr	BASEPRI, r3
 800ba6e:	f3bf 8f6f 	isb	sy
 800ba72:	f3bf 8f4f 	dsb	sy
 800ba76:	61fb      	str	r3, [r7, #28]
}
 800ba78:	bf00      	nop
 800ba7a:	bf00      	nop
 800ba7c:	e7fd      	b.n	800ba7a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba7e:	f001 ff9b 	bl	800d9b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d302      	bcc.n	800ba94 <xQueueGenericSend+0xdc>
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d129      	bne.n	800bae8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba94:	683a      	ldr	r2, [r7, #0]
 800ba96:	68b9      	ldr	r1, [r7, #8]
 800ba98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ba9a:	f000 fa0f 	bl	800bebc <prvCopyDataToQueue>
 800ba9e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800baa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d010      	beq.n	800baca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800baa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baaa:	3324      	adds	r3, #36	@ 0x24
 800baac:	4618      	mov	r0, r3
 800baae:	f001 f853 	bl	800cb58 <xTaskRemoveFromEventList>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d013      	beq.n	800bae0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bab8:	4b3f      	ldr	r3, [pc, #252]	@ (800bbb8 <xQueueGenericSend+0x200>)
 800baba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800babe:	601a      	str	r2, [r3, #0]
 800bac0:	f3bf 8f4f 	dsb	sy
 800bac4:	f3bf 8f6f 	isb	sy
 800bac8:	e00a      	b.n	800bae0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800baca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d007      	beq.n	800bae0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bad0:	4b39      	ldr	r3, [pc, #228]	@ (800bbb8 <xQueueGenericSend+0x200>)
 800bad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bad6:	601a      	str	r2, [r3, #0]
 800bad8:	f3bf 8f4f 	dsb	sy
 800badc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bae0:	f001 ff9c 	bl	800da1c <vPortExitCritical>
				return pdPASS;
 800bae4:	2301      	movs	r3, #1
 800bae6:	e063      	b.n	800bbb0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d103      	bne.n	800baf6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800baee:	f001 ff95 	bl	800da1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800baf2:	2300      	movs	r3, #0
 800baf4:	e05c      	b.n	800bbb0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800baf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d106      	bne.n	800bb0a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bafc:	f107 0314 	add.w	r3, r7, #20
 800bb00:	4618      	mov	r0, r3
 800bb02:	f001 f88d 	bl	800cc20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb06:	2301      	movs	r3, #1
 800bb08:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb0a:	f001 ff87 	bl	800da1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb0e:	f000 fdfd 	bl	800c70c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb12:	f001 ff51 	bl	800d9b8 <vPortEnterCritical>
 800bb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bb1c:	b25b      	sxtb	r3, r3
 800bb1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb22:	d103      	bne.n	800bb2c <xQueueGenericSend+0x174>
 800bb24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb32:	b25b      	sxtb	r3, r3
 800bb34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb38:	d103      	bne.n	800bb42 <xQueueGenericSend+0x18a>
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb42:	f001 ff6b 	bl	800da1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb46:	1d3a      	adds	r2, r7, #4
 800bb48:	f107 0314 	add.w	r3, r7, #20
 800bb4c:	4611      	mov	r1, r2
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f001 f87c 	bl	800cc4c <xTaskCheckForTimeOut>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d124      	bne.n	800bba4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bb5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb5c:	f000 faa6 	bl	800c0ac <prvIsQueueFull>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d018      	beq.n	800bb98 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bb66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb68:	3310      	adds	r3, #16
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f000 ffa0 	bl	800cab4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bb74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb76:	f000 fa31 	bl	800bfdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bb7a:	f000 fdd5 	bl	800c728 <xTaskResumeAll>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	f47f af7c 	bne.w	800ba7e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800bb86:	4b0c      	ldr	r3, [pc, #48]	@ (800bbb8 <xQueueGenericSend+0x200>)
 800bb88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb8c:	601a      	str	r2, [r3, #0]
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	e772      	b.n	800ba7e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bb98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb9a:	f000 fa1f 	bl	800bfdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb9e:	f000 fdc3 	bl	800c728 <xTaskResumeAll>
 800bba2:	e76c      	b.n	800ba7e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bba4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bba6:	f000 fa19 	bl	800bfdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbaa:	f000 fdbd 	bl	800c728 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bbae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3738      	adds	r7, #56	@ 0x38
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	e000ed04 	.word	0xe000ed04

0800bbbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b090      	sub	sp, #64	@ 0x40
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	607a      	str	r2, [r7, #4]
 800bbc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800bbce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d10b      	bne.n	800bbec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800bbd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd8:	f383 8811 	msr	BASEPRI, r3
 800bbdc:	f3bf 8f6f 	isb	sy
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bbe6:	bf00      	nop
 800bbe8:	bf00      	nop
 800bbea:	e7fd      	b.n	800bbe8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d103      	bne.n	800bbfa <xQueueGenericSendFromISR+0x3e>
 800bbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d101      	bne.n	800bbfe <xQueueGenericSendFromISR+0x42>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e000      	b.n	800bc00 <xQueueGenericSendFromISR+0x44>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10b      	bne.n	800bc1c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800bc04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc08:	f383 8811 	msr	BASEPRI, r3
 800bc0c:	f3bf 8f6f 	isb	sy
 800bc10:	f3bf 8f4f 	dsb	sy
 800bc14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bc16:	bf00      	nop
 800bc18:	bf00      	nop
 800bc1a:	e7fd      	b.n	800bc18 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d103      	bne.n	800bc2a <xQueueGenericSendFromISR+0x6e>
 800bc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d101      	bne.n	800bc2e <xQueueGenericSendFromISR+0x72>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e000      	b.n	800bc30 <xQueueGenericSendFromISR+0x74>
 800bc2e:	2300      	movs	r3, #0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10b      	bne.n	800bc4c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	623b      	str	r3, [r7, #32]
}
 800bc46:	bf00      	nop
 800bc48:	bf00      	nop
 800bc4a:	e7fd      	b.n	800bc48 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc4c:	f001 ff94 	bl	800db78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bc50:	f3ef 8211 	mrs	r2, BASEPRI
 800bc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	61fa      	str	r2, [r7, #28]
 800bc66:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bc68:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc6a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d302      	bcc.n	800bc7e <xQueueGenericSendFromISR+0xc2>
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	d12f      	bne.n	800bcde <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc8e:	683a      	ldr	r2, [r7, #0]
 800bc90:	68b9      	ldr	r1, [r7, #8]
 800bc92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bc94:	f000 f912 	bl	800bebc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bc98:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800bc9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca0:	d112      	bne.n	800bcc8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d016      	beq.n	800bcd8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcac:	3324      	adds	r3, #36	@ 0x24
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f000 ff52 	bl	800cb58 <xTaskRemoveFromEventList>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00e      	beq.n	800bcd8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00b      	beq.n	800bcd8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	601a      	str	r2, [r3, #0]
 800bcc6:	e007      	b.n	800bcd8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bcc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bccc:	3301      	adds	r3, #1
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	b25a      	sxtb	r2, r3
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800bcdc:	e001      	b.n	800bce2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bcde:	2300      	movs	r3, #0
 800bce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bce4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bcec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bcee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3740      	adds	r7, #64	@ 0x40
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b08c      	sub	sp, #48	@ 0x30
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd04:	2300      	movs	r3, #0
 800bd06:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d10b      	bne.n	800bd2a <xQueueReceive+0x32>
	__asm volatile
 800bd12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd16:	f383 8811 	msr	BASEPRI, r3
 800bd1a:	f3bf 8f6f 	isb	sy
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	623b      	str	r3, [r7, #32]
}
 800bd24:	bf00      	nop
 800bd26:	bf00      	nop
 800bd28:	e7fd      	b.n	800bd26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d103      	bne.n	800bd38 <xQueueReceive+0x40>
 800bd30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d101      	bne.n	800bd3c <xQueueReceive+0x44>
 800bd38:	2301      	movs	r3, #1
 800bd3a:	e000      	b.n	800bd3e <xQueueReceive+0x46>
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10b      	bne.n	800bd5a <xQueueReceive+0x62>
	__asm volatile
 800bd42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd46:	f383 8811 	msr	BASEPRI, r3
 800bd4a:	f3bf 8f6f 	isb	sy
 800bd4e:	f3bf 8f4f 	dsb	sy
 800bd52:	61fb      	str	r3, [r7, #28]
}
 800bd54:	bf00      	nop
 800bd56:	bf00      	nop
 800bd58:	e7fd      	b.n	800bd56 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd5a:	f001 f8bd 	bl	800ced8 <xTaskGetSchedulerState>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d102      	bne.n	800bd6a <xQueueReceive+0x72>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d101      	bne.n	800bd6e <xQueueReceive+0x76>
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e000      	b.n	800bd70 <xQueueReceive+0x78>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d10b      	bne.n	800bd8c <xQueueReceive+0x94>
	__asm volatile
 800bd74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	61bb      	str	r3, [r7, #24]
}
 800bd86:	bf00      	nop
 800bd88:	bf00      	nop
 800bd8a:	e7fd      	b.n	800bd88 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd8c:	f001 fe14 	bl	800d9b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd94:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d01f      	beq.n	800bddc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd9c:	68b9      	ldr	r1, [r7, #8]
 800bd9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bda0:	f000 f8f6 	bl	800bf90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda6:	1e5a      	subs	r2, r3, #1
 800bda8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdaa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00f      	beq.n	800bdd4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdb6:	3310      	adds	r3, #16
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f000 fecd 	bl	800cb58 <xTaskRemoveFromEventList>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d007      	beq.n	800bdd4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bdc4:	4b3c      	ldr	r3, [pc, #240]	@ (800beb8 <xQueueReceive+0x1c0>)
 800bdc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdca:	601a      	str	r2, [r3, #0]
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bdd4:	f001 fe22 	bl	800da1c <vPortExitCritical>
				return pdPASS;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e069      	b.n	800beb0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d103      	bne.n	800bdea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bde2:	f001 fe1b 	bl	800da1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bde6:	2300      	movs	r3, #0
 800bde8:	e062      	b.n	800beb0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bdea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d106      	bne.n	800bdfe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdf0:	f107 0310 	add.w	r3, r7, #16
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f000 ff13 	bl	800cc20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdfe:	f001 fe0d 	bl	800da1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be02:	f000 fc83 	bl	800c70c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be06:	f001 fdd7 	bl	800d9b8 <vPortEnterCritical>
 800be0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800be10:	b25b      	sxtb	r3, r3
 800be12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be16:	d103      	bne.n	800be20 <xQueueReceive+0x128>
 800be18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800be20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be26:	b25b      	sxtb	r3, r3
 800be28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be2c:	d103      	bne.n	800be36 <xQueueReceive+0x13e>
 800be2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be30:	2200      	movs	r2, #0
 800be32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800be36:	f001 fdf1 	bl	800da1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be3a:	1d3a      	adds	r2, r7, #4
 800be3c:	f107 0310 	add.w	r3, r7, #16
 800be40:	4611      	mov	r1, r2
 800be42:	4618      	mov	r0, r3
 800be44:	f000 ff02 	bl	800cc4c <xTaskCheckForTimeOut>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d123      	bne.n	800be96 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be50:	f000 f916 	bl	800c080 <prvIsQueueEmpty>
 800be54:	4603      	mov	r3, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d017      	beq.n	800be8a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be5c:	3324      	adds	r3, #36	@ 0x24
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	4611      	mov	r1, r2
 800be62:	4618      	mov	r0, r3
 800be64:	f000 fe26 	bl	800cab4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be6a:	f000 f8b7 	bl	800bfdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be6e:	f000 fc5b 	bl	800c728 <xTaskResumeAll>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d189      	bne.n	800bd8c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800be78:	4b0f      	ldr	r3, [pc, #60]	@ (800beb8 <xQueueReceive+0x1c0>)
 800be7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be7e:	601a      	str	r2, [r3, #0]
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	f3bf 8f6f 	isb	sy
 800be88:	e780      	b.n	800bd8c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800be8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be8c:	f000 f8a6 	bl	800bfdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be90:	f000 fc4a 	bl	800c728 <xTaskResumeAll>
 800be94:	e77a      	b.n	800bd8c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800be96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be98:	f000 f8a0 	bl	800bfdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be9c:	f000 fc44 	bl	800c728 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bea0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bea2:	f000 f8ed 	bl	800c080 <prvIsQueueEmpty>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f43f af6f 	beq.w	800bd8c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800beae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3730      	adds	r7, #48	@ 0x30
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	e000ed04 	.word	0xe000ed04

0800bebc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b086      	sub	sp, #24
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bec8:	2300      	movs	r3, #0
 800beca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bed0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d10d      	bne.n	800bef6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d14d      	bne.n	800bf7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	4618      	mov	r0, r3
 800bee8:	f001 f814 	bl	800cf14 <xTaskPriorityDisinherit>
 800beec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2200      	movs	r2, #0
 800bef2:	609a      	str	r2, [r3, #8]
 800bef4:	e043      	b.n	800bf7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d119      	bne.n	800bf30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	6858      	ldr	r0, [r3, #4]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf04:	461a      	mov	r2, r3
 800bf06:	68b9      	ldr	r1, [r7, #8]
 800bf08:	f002 ff1f 	bl	800ed4a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	685a      	ldr	r2, [r3, #4]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf14:	441a      	add	r2, r3
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	685a      	ldr	r2, [r3, #4]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d32b      	bcc.n	800bf7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	605a      	str	r2, [r3, #4]
 800bf2e:	e026      	b.n	800bf7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	68d8      	ldr	r0, [r3, #12]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf38:	461a      	mov	r2, r3
 800bf3a:	68b9      	ldr	r1, [r7, #8]
 800bf3c:	f002 ff05 	bl	800ed4a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	68da      	ldr	r2, [r3, #12]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf48:	425b      	negs	r3, r3
 800bf4a:	441a      	add	r2, r3
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	68da      	ldr	r2, [r3, #12]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d207      	bcs.n	800bf6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	689a      	ldr	r2, [r3, #8]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf64:	425b      	negs	r3, r3
 800bf66:	441a      	add	r2, r3
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b02      	cmp	r3, #2
 800bf70:	d105      	bne.n	800bf7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d002      	beq.n	800bf7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	1c5a      	adds	r2, r3, #1
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bf86:	697b      	ldr	r3, [r7, #20]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3718      	adds	r7, #24
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d018      	beq.n	800bfd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	68da      	ldr	r2, [r3, #12]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfaa:	441a      	add	r2, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	68da      	ldr	r2, [r3, #12]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d303      	bcc.n	800bfc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	68d9      	ldr	r1, [r3, #12]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfcc:	461a      	mov	r2, r3
 800bfce:	6838      	ldr	r0, [r7, #0]
 800bfd0:	f002 febb 	bl	800ed4a <memcpy>
	}
}
 800bfd4:	bf00      	nop
 800bfd6:	3708      	adds	r7, #8
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bfe4:	f001 fce8 	bl	800d9b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bfee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bff0:	e011      	b.n	800c016 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d012      	beq.n	800c020 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	3324      	adds	r3, #36	@ 0x24
 800bffe:	4618      	mov	r0, r3
 800c000:	f000 fdaa 	bl	800cb58 <xTaskRemoveFromEventList>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d001      	beq.n	800c00e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c00a:	f000 fe83 	bl	800cd14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
 800c010:	3b01      	subs	r3, #1
 800c012:	b2db      	uxtb	r3, r3
 800c014:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	dce9      	bgt.n	800bff2 <prvUnlockQueue+0x16>
 800c01e:	e000      	b.n	800c022 <prvUnlockQueue+0x46>
					break;
 800c020:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	22ff      	movs	r2, #255	@ 0xff
 800c026:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c02a:	f001 fcf7 	bl	800da1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c02e:	f001 fcc3 	bl	800d9b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c038:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c03a:	e011      	b.n	800c060 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	691b      	ldr	r3, [r3, #16]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d012      	beq.n	800c06a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	3310      	adds	r3, #16
 800c048:	4618      	mov	r0, r3
 800c04a:	f000 fd85 	bl	800cb58 <xTaskRemoveFromEventList>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d001      	beq.n	800c058 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c054:	f000 fe5e 	bl	800cd14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c058:	7bbb      	ldrb	r3, [r7, #14]
 800c05a:	3b01      	subs	r3, #1
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c064:	2b00      	cmp	r3, #0
 800c066:	dce9      	bgt.n	800c03c <prvUnlockQueue+0x60>
 800c068:	e000      	b.n	800c06c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c06a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	22ff      	movs	r2, #255	@ 0xff
 800c070:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c074:	f001 fcd2 	bl	800da1c <vPortExitCritical>
}
 800c078:	bf00      	nop
 800c07a:	3710      	adds	r7, #16
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c088:	f001 fc96 	bl	800d9b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c090:	2b00      	cmp	r3, #0
 800c092:	d102      	bne.n	800c09a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c094:	2301      	movs	r3, #1
 800c096:	60fb      	str	r3, [r7, #12]
 800c098:	e001      	b.n	800c09e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c09a:	2300      	movs	r3, #0
 800c09c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c09e:	f001 fcbd 	bl	800da1c <vPortExitCritical>

	return xReturn;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3710      	adds	r7, #16
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0b4:	f001 fc80 	bl	800d9b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d102      	bne.n	800c0ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	60fb      	str	r3, [r7, #12]
 800c0c8:	e001      	b.n	800c0ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0ce:	f001 fca5 	bl	800da1c <vPortExitCritical>

	return xReturn;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	60fb      	str	r3, [r7, #12]
 800c0ea:	e014      	b.n	800c116 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c0ec:	4a0f      	ldr	r2, [pc, #60]	@ (800c12c <vQueueAddToRegistry+0x50>)
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d10b      	bne.n	800c110 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c0f8:	490c      	ldr	r1, [pc, #48]	@ (800c12c <vQueueAddToRegistry+0x50>)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	683a      	ldr	r2, [r7, #0]
 800c0fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c102:	4a0a      	ldr	r2, [pc, #40]	@ (800c12c <vQueueAddToRegistry+0x50>)
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	00db      	lsls	r3, r3, #3
 800c108:	4413      	add	r3, r2
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c10e:	e006      	b.n	800c11e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	3301      	adds	r3, #1
 800c114:	60fb      	str	r3, [r7, #12]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2b07      	cmp	r3, #7
 800c11a:	d9e7      	bls.n	800c0ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c11c:	bf00      	nop
 800c11e:	bf00      	nop
 800c120:	3714      	adds	r7, #20
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	20001218 	.word	0x20001218

0800c130 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c130:	b580      	push	{r7, lr}
 800c132:	b086      	sub	sp, #24
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c140:	f001 fc3a 	bl	800d9b8 <vPortEnterCritical>
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c14a:	b25b      	sxtb	r3, r3
 800c14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c150:	d103      	bne.n	800c15a <vQueueWaitForMessageRestricted+0x2a>
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	2200      	movs	r2, #0
 800c156:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c160:	b25b      	sxtb	r3, r3
 800c162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c166:	d103      	bne.n	800c170 <vQueueWaitForMessageRestricted+0x40>
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	2200      	movs	r2, #0
 800c16c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c170:	f001 fc54 	bl	800da1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d106      	bne.n	800c18a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	3324      	adds	r3, #36	@ 0x24
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	68b9      	ldr	r1, [r7, #8]
 800c184:	4618      	mov	r0, r3
 800c186:	f000 fcbb 	bl	800cb00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c18a:	6978      	ldr	r0, [r7, #20]
 800c18c:	f7ff ff26 	bl	800bfdc <prvUnlockQueue>
	}
 800c190:	bf00      	nop
 800c192:	3718      	adds	r7, #24
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b08e      	sub	sp, #56	@ 0x38
 800c19c:	af04      	add	r7, sp, #16
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
 800c1a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c1a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10b      	bne.n	800c1c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b0:	f383 8811 	msr	BASEPRI, r3
 800c1b4:	f3bf 8f6f 	isb	sy
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	623b      	str	r3, [r7, #32]
}
 800c1be:	bf00      	nop
 800c1c0:	bf00      	nop
 800c1c2:	e7fd      	b.n	800c1c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d10b      	bne.n	800c1e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	61fb      	str	r3, [r7, #28]
}
 800c1dc:	bf00      	nop
 800c1de:	bf00      	nop
 800c1e0:	e7fd      	b.n	800c1de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c1e2:	235c      	movs	r3, #92	@ 0x5c
 800c1e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	2b5c      	cmp	r3, #92	@ 0x5c
 800c1ea:	d00b      	beq.n	800c204 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c1ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	61bb      	str	r3, [r7, #24]
}
 800c1fe:	bf00      	nop
 800c200:	bf00      	nop
 800c202:	e7fd      	b.n	800c200 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c204:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d01e      	beq.n	800c24a <xTaskCreateStatic+0xb2>
 800c20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d01b      	beq.n	800c24a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c214:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c218:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c21a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21e:	2202      	movs	r2, #2
 800c220:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c224:	2300      	movs	r3, #0
 800c226:	9303      	str	r3, [sp, #12]
 800c228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c22a:	9302      	str	r3, [sp, #8]
 800c22c:	f107 0314 	add.w	r3, r7, #20
 800c230:	9301      	str	r3, [sp, #4]
 800c232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	68b9      	ldr	r1, [r7, #8]
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	f000 f850 	bl	800c2e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c242:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c244:	f000 f8de 	bl	800c404 <prvAddNewTaskToReadyList>
 800c248:	e001      	b.n	800c24e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c24a:	2300      	movs	r3, #0
 800c24c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c24e:	697b      	ldr	r3, [r7, #20]
	}
 800c250:	4618      	mov	r0, r3
 800c252:	3728      	adds	r7, #40	@ 0x28
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b08c      	sub	sp, #48	@ 0x30
 800c25c:	af04      	add	r7, sp, #16
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	603b      	str	r3, [r7, #0]
 800c264:	4613      	mov	r3, r2
 800c266:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c268:	88fb      	ldrh	r3, [r7, #6]
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	4618      	mov	r0, r3
 800c26e:	f001 fcc5 	bl	800dbfc <pvPortMalloc>
 800c272:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00e      	beq.n	800c298 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c27a:	205c      	movs	r0, #92	@ 0x5c
 800c27c:	f001 fcbe 	bl	800dbfc <pvPortMalloc>
 800c280:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d003      	beq.n	800c290 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	697a      	ldr	r2, [r7, #20]
 800c28c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c28e:	e005      	b.n	800c29c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c290:	6978      	ldr	r0, [r7, #20]
 800c292:	f001 fd81 	bl	800dd98 <vPortFree>
 800c296:	e001      	b.n	800c29c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c298:	2300      	movs	r3, #0
 800c29a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d017      	beq.n	800c2d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c2aa:	88fa      	ldrh	r2, [r7, #6]
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	9303      	str	r3, [sp, #12]
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	9302      	str	r3, [sp, #8]
 800c2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b6:	9301      	str	r3, [sp, #4]
 800c2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ba:	9300      	str	r3, [sp, #0]
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	68b9      	ldr	r1, [r7, #8]
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f000 f80e 	bl	800c2e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2c6:	69f8      	ldr	r0, [r7, #28]
 800c2c8:	f000 f89c 	bl	800c404 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	61bb      	str	r3, [r7, #24]
 800c2d0:	e002      	b.n	800c2d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c2d8:	69bb      	ldr	r3, [r7, #24]
	}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3720      	adds	r7, #32
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b088      	sub	sp, #32
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	60f8      	str	r0, [r7, #12]
 800c2ea:	60b9      	str	r1, [r7, #8]
 800c2ec:	607a      	str	r2, [r7, #4]
 800c2ee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	21a5      	movs	r1, #165	@ 0xa5
 800c2fc:	f002 fca5 	bl	800ec4a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c302:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c30a:	3b01      	subs	r3, #1
 800c30c:	009b      	lsls	r3, r3, #2
 800c30e:	4413      	add	r3, r2
 800c310:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	f023 0307 	bic.w	r3, r3, #7
 800c318:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	f003 0307 	and.w	r3, r3, #7
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00b      	beq.n	800c33c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c328:	f383 8811 	msr	BASEPRI, r3
 800c32c:	f3bf 8f6f 	isb	sy
 800c330:	f3bf 8f4f 	dsb	sy
 800c334:	617b      	str	r3, [r7, #20]
}
 800c336:	bf00      	nop
 800c338:	bf00      	nop
 800c33a:	e7fd      	b.n	800c338 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d01f      	beq.n	800c382 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c342:	2300      	movs	r3, #0
 800c344:	61fb      	str	r3, [r7, #28]
 800c346:	e012      	b.n	800c36e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	69fb      	ldr	r3, [r7, #28]
 800c34c:	4413      	add	r3, r2
 800c34e:	7819      	ldrb	r1, [r3, #0]
 800c350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	4413      	add	r3, r2
 800c356:	3334      	adds	r3, #52	@ 0x34
 800c358:	460a      	mov	r2, r1
 800c35a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c35c:	68ba      	ldr	r2, [r7, #8]
 800c35e:	69fb      	ldr	r3, [r7, #28]
 800c360:	4413      	add	r3, r2
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d006      	beq.n	800c376 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	3301      	adds	r3, #1
 800c36c:	61fb      	str	r3, [r7, #28]
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	2b0f      	cmp	r3, #15
 800c372:	d9e9      	bls.n	800c348 <prvInitialiseNewTask+0x66>
 800c374:	e000      	b.n	800c378 <prvInitialiseNewTask+0x96>
			{
				break;
 800c376:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c380:	e003      	b.n	800c38a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c384:	2200      	movs	r2, #0
 800c386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c38c:	2b37      	cmp	r3, #55	@ 0x37
 800c38e:	d901      	bls.n	800c394 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c390:	2337      	movs	r3, #55	@ 0x37
 800c392:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c396:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c398:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c39c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c39e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a8:	3304      	adds	r3, #4
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff f966 	bl	800b67c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b2:	3318      	adds	r3, #24
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7ff f961 	bl	800b67c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3ce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c3de:	683a      	ldr	r2, [r7, #0]
 800c3e0:	68f9      	ldr	r1, [r7, #12]
 800c3e2:	69b8      	ldr	r0, [r7, #24]
 800c3e4:	f001 f9b4 	bl	800d750 <pxPortInitialiseStack>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d002      	beq.n	800c3fa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c3f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3fa:	bf00      	nop
 800c3fc:	3720      	adds	r7, #32
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
	...

0800c404 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c40c:	f001 fad4 	bl	800d9b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c410:	4b2d      	ldr	r3, [pc, #180]	@ (800c4c8 <prvAddNewTaskToReadyList+0xc4>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	3301      	adds	r3, #1
 800c416:	4a2c      	ldr	r2, [pc, #176]	@ (800c4c8 <prvAddNewTaskToReadyList+0xc4>)
 800c418:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c41a:	4b2c      	ldr	r3, [pc, #176]	@ (800c4cc <prvAddNewTaskToReadyList+0xc8>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d109      	bne.n	800c436 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c422:	4a2a      	ldr	r2, [pc, #168]	@ (800c4cc <prvAddNewTaskToReadyList+0xc8>)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c428:	4b27      	ldr	r3, [pc, #156]	@ (800c4c8 <prvAddNewTaskToReadyList+0xc4>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d110      	bne.n	800c452 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c430:	f000 fc94 	bl	800cd5c <prvInitialiseTaskLists>
 800c434:	e00d      	b.n	800c452 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c436:	4b26      	ldr	r3, [pc, #152]	@ (800c4d0 <prvAddNewTaskToReadyList+0xcc>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d109      	bne.n	800c452 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c43e:	4b23      	ldr	r3, [pc, #140]	@ (800c4cc <prvAddNewTaskToReadyList+0xc8>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c448:	429a      	cmp	r2, r3
 800c44a:	d802      	bhi.n	800c452 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c44c:	4a1f      	ldr	r2, [pc, #124]	@ (800c4cc <prvAddNewTaskToReadyList+0xc8>)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c452:	4b20      	ldr	r3, [pc, #128]	@ (800c4d4 <prvAddNewTaskToReadyList+0xd0>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	3301      	adds	r3, #1
 800c458:	4a1e      	ldr	r2, [pc, #120]	@ (800c4d4 <prvAddNewTaskToReadyList+0xd0>)
 800c45a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c45c:	4b1d      	ldr	r3, [pc, #116]	@ (800c4d4 <prvAddNewTaskToReadyList+0xd0>)
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c468:	4b1b      	ldr	r3, [pc, #108]	@ (800c4d8 <prvAddNewTaskToReadyList+0xd4>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d903      	bls.n	800c478 <prvAddNewTaskToReadyList+0x74>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c474:	4a18      	ldr	r2, [pc, #96]	@ (800c4d8 <prvAddNewTaskToReadyList+0xd4>)
 800c476:	6013      	str	r3, [r2, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c47c:	4613      	mov	r3, r2
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	4413      	add	r3, r2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	4a15      	ldr	r2, [pc, #84]	@ (800c4dc <prvAddNewTaskToReadyList+0xd8>)
 800c486:	441a      	add	r2, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	3304      	adds	r3, #4
 800c48c:	4619      	mov	r1, r3
 800c48e:	4610      	mov	r0, r2
 800c490:	f7ff f901 	bl	800b696 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c494:	f001 fac2 	bl	800da1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c498:	4b0d      	ldr	r3, [pc, #52]	@ (800c4d0 <prvAddNewTaskToReadyList+0xcc>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00e      	beq.n	800c4be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c4a0:	4b0a      	ldr	r3, [pc, #40]	@ (800c4cc <prvAddNewTaskToReadyList+0xc8>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d207      	bcs.n	800c4be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c4ae:	4b0c      	ldr	r3, [pc, #48]	@ (800c4e0 <prvAddNewTaskToReadyList+0xdc>)
 800c4b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4b4:	601a      	str	r2, [r3, #0]
 800c4b6:	f3bf 8f4f 	dsb	sy
 800c4ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4be:	bf00      	nop
 800c4c0:	3708      	adds	r7, #8
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	2000172c 	.word	0x2000172c
 800c4cc:	20001258 	.word	0x20001258
 800c4d0:	20001738 	.word	0x20001738
 800c4d4:	20001748 	.word	0x20001748
 800c4d8:	20001734 	.word	0x20001734
 800c4dc:	2000125c 	.word	0x2000125c
 800c4e0:	e000ed04 	.word	0xe000ed04

0800c4e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d018      	beq.n	800c528 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c4f6:	4b14      	ldr	r3, [pc, #80]	@ (800c548 <vTaskDelay+0x64>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00b      	beq.n	800c516 <vTaskDelay+0x32>
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	60bb      	str	r3, [r7, #8]
}
 800c510:	bf00      	nop
 800c512:	bf00      	nop
 800c514:	e7fd      	b.n	800c512 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c516:	f000 f8f9 	bl	800c70c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c51a:	2100      	movs	r1, #0
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 fd69 	bl	800cff4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c522:	f000 f901 	bl	800c728 <xTaskResumeAll>
 800c526:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d107      	bne.n	800c53e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c52e:	4b07      	ldr	r3, [pc, #28]	@ (800c54c <vTaskDelay+0x68>)
 800c530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c534:	601a      	str	r2, [r3, #0]
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c53e:	bf00      	nop
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	20001754 	.word	0x20001754
 800c54c:	e000ed04 	.word	0xe000ed04

0800c550 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c558:	f001 fa2e 	bl	800d9b8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d102      	bne.n	800c568 <vTaskSuspend+0x18>
 800c562:	4b30      	ldr	r3, [pc, #192]	@ (800c624 <vTaskSuspend+0xd4>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	e000      	b.n	800c56a <vTaskSuspend+0x1a>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	3304      	adds	r3, #4
 800c570:	4618      	mov	r0, r3
 800c572:	f7ff f8ed 	bl	800b750 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d004      	beq.n	800c588 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	3318      	adds	r3, #24
 800c582:	4618      	mov	r0, r3
 800c584:	f7ff f8e4 	bl	800b750 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	3304      	adds	r3, #4
 800c58c:	4619      	mov	r1, r3
 800c58e:	4826      	ldr	r0, [pc, #152]	@ (800c628 <vTaskSuspend+0xd8>)
 800c590:	f7ff f881 	bl	800b696 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d103      	bne.n	800c5a8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c5a8:	f001 fa38 	bl	800da1c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c5ac:	4b1f      	ldr	r3, [pc, #124]	@ (800c62c <vTaskSuspend+0xdc>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d005      	beq.n	800c5c0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c5b4:	f001 fa00 	bl	800d9b8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c5b8:	f000 fc6e 	bl	800ce98 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c5bc:	f001 fa2e 	bl	800da1c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c5c0:	4b18      	ldr	r3, [pc, #96]	@ (800c624 <vTaskSuspend+0xd4>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	68fa      	ldr	r2, [r7, #12]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d128      	bne.n	800c61c <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800c5ca:	4b18      	ldr	r3, [pc, #96]	@ (800c62c <vTaskSuspend+0xdc>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d018      	beq.n	800c604 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c5d2:	4b17      	ldr	r3, [pc, #92]	@ (800c630 <vTaskSuspend+0xe0>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d00b      	beq.n	800c5f2 <vTaskSuspend+0xa2>
	__asm volatile
 800c5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	f3bf 8f4f 	dsb	sy
 800c5ea:	60bb      	str	r3, [r7, #8]
}
 800c5ec:	bf00      	nop
 800c5ee:	bf00      	nop
 800c5f0:	e7fd      	b.n	800c5ee <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800c5f2:	4b10      	ldr	r3, [pc, #64]	@ (800c634 <vTaskSuspend+0xe4>)
 800c5f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5f8:	601a      	str	r2, [r3, #0]
 800c5fa:	f3bf 8f4f 	dsb	sy
 800c5fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c602:	e00b      	b.n	800c61c <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c604:	4b08      	ldr	r3, [pc, #32]	@ (800c628 <vTaskSuspend+0xd8>)
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	4b0b      	ldr	r3, [pc, #44]	@ (800c638 <vTaskSuspend+0xe8>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d103      	bne.n	800c618 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800c610:	4b04      	ldr	r3, [pc, #16]	@ (800c624 <vTaskSuspend+0xd4>)
 800c612:	2200      	movs	r2, #0
 800c614:	601a      	str	r2, [r3, #0]
	}
 800c616:	e001      	b.n	800c61c <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800c618:	f000 f9ee 	bl	800c9f8 <vTaskSwitchContext>
	}
 800c61c:	bf00      	nop
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	20001258 	.word	0x20001258
 800c628:	20001718 	.word	0x20001718
 800c62c:	20001738 	.word	0x20001738
 800c630:	20001754 	.word	0x20001754
 800c634:	e000ed04 	.word	0xe000ed04
 800c638:	2000172c 	.word	0x2000172c

0800c63c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b08a      	sub	sp, #40	@ 0x28
 800c640:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c642:	2300      	movs	r3, #0
 800c644:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c646:	2300      	movs	r3, #0
 800c648:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c64a:	463a      	mov	r2, r7
 800c64c:	1d39      	adds	r1, r7, #4
 800c64e:	f107 0308 	add.w	r3, r7, #8
 800c652:	4618      	mov	r0, r3
 800c654:	f7fe ffbe 	bl	800b5d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c658:	6839      	ldr	r1, [r7, #0]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	68ba      	ldr	r2, [r7, #8]
 800c65e:	9202      	str	r2, [sp, #8]
 800c660:	9301      	str	r3, [sp, #4]
 800c662:	2300      	movs	r3, #0
 800c664:	9300      	str	r3, [sp, #0]
 800c666:	2300      	movs	r3, #0
 800c668:	460a      	mov	r2, r1
 800c66a:	4922      	ldr	r1, [pc, #136]	@ (800c6f4 <vTaskStartScheduler+0xb8>)
 800c66c:	4822      	ldr	r0, [pc, #136]	@ (800c6f8 <vTaskStartScheduler+0xbc>)
 800c66e:	f7ff fd93 	bl	800c198 <xTaskCreateStatic>
 800c672:	4603      	mov	r3, r0
 800c674:	4a21      	ldr	r2, [pc, #132]	@ (800c6fc <vTaskStartScheduler+0xc0>)
 800c676:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c678:	4b20      	ldr	r3, [pc, #128]	@ (800c6fc <vTaskStartScheduler+0xc0>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d002      	beq.n	800c686 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c680:	2301      	movs	r3, #1
 800c682:	617b      	str	r3, [r7, #20]
 800c684:	e001      	b.n	800c68a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c686:	2300      	movs	r3, #0
 800c688:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d102      	bne.n	800c696 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c690:	f000 fd04 	bl	800d09c <xTimerCreateTimerTask>
 800c694:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d116      	bne.n	800c6ca <vTaskStartScheduler+0x8e>
	__asm volatile
 800c69c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a0:	f383 8811 	msr	BASEPRI, r3
 800c6a4:	f3bf 8f6f 	isb	sy
 800c6a8:	f3bf 8f4f 	dsb	sy
 800c6ac:	613b      	str	r3, [r7, #16]
}
 800c6ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c6b0:	4b13      	ldr	r3, [pc, #76]	@ (800c700 <vTaskStartScheduler+0xc4>)
 800c6b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c6b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c6b8:	4b12      	ldr	r3, [pc, #72]	@ (800c704 <vTaskStartScheduler+0xc8>)
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c6be:	4b12      	ldr	r3, [pc, #72]	@ (800c708 <vTaskStartScheduler+0xcc>)
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c6c4:	f001 f8d4 	bl	800d870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c6c8:	e00f      	b.n	800c6ea <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6d0:	d10b      	bne.n	800c6ea <vTaskStartScheduler+0xae>
	__asm volatile
 800c6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d6:	f383 8811 	msr	BASEPRI, r3
 800c6da:	f3bf 8f6f 	isb	sy
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	60fb      	str	r3, [r7, #12]
}
 800c6e4:	bf00      	nop
 800c6e6:	bf00      	nop
 800c6e8:	e7fd      	b.n	800c6e6 <vTaskStartScheduler+0xaa>
}
 800c6ea:	bf00      	nop
 800c6ec:	3718      	adds	r7, #24
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	08010ef0 	.word	0x08010ef0
 800c6f8:	0800cd2d 	.word	0x0800cd2d
 800c6fc:	20001750 	.word	0x20001750
 800c700:	2000174c 	.word	0x2000174c
 800c704:	20001738 	.word	0x20001738
 800c708:	20001730 	.word	0x20001730

0800c70c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c70c:	b480      	push	{r7}
 800c70e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c710:	4b04      	ldr	r3, [pc, #16]	@ (800c724 <vTaskSuspendAll+0x18>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	3301      	adds	r3, #1
 800c716:	4a03      	ldr	r2, [pc, #12]	@ (800c724 <vTaskSuspendAll+0x18>)
 800c718:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c71a:	bf00      	nop
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr
 800c724:	20001754 	.word	0x20001754

0800c728 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c72e:	2300      	movs	r3, #0
 800c730:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c732:	2300      	movs	r3, #0
 800c734:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c736:	4b42      	ldr	r3, [pc, #264]	@ (800c840 <xTaskResumeAll+0x118>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d10b      	bne.n	800c756 <xTaskResumeAll+0x2e>
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	603b      	str	r3, [r7, #0]
}
 800c750:	bf00      	nop
 800c752:	bf00      	nop
 800c754:	e7fd      	b.n	800c752 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c756:	f001 f92f 	bl	800d9b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c75a:	4b39      	ldr	r3, [pc, #228]	@ (800c840 <xTaskResumeAll+0x118>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	3b01      	subs	r3, #1
 800c760:	4a37      	ldr	r2, [pc, #220]	@ (800c840 <xTaskResumeAll+0x118>)
 800c762:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c764:	4b36      	ldr	r3, [pc, #216]	@ (800c840 <xTaskResumeAll+0x118>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d162      	bne.n	800c832 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c76c:	4b35      	ldr	r3, [pc, #212]	@ (800c844 <xTaskResumeAll+0x11c>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d05e      	beq.n	800c832 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c774:	e02f      	b.n	800c7d6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c776:	4b34      	ldr	r3, [pc, #208]	@ (800c848 <xTaskResumeAll+0x120>)
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	3318      	adds	r3, #24
 800c782:	4618      	mov	r0, r3
 800c784:	f7fe ffe4 	bl	800b750 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	3304      	adds	r3, #4
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7fe ffdf 	bl	800b750 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c796:	4b2d      	ldr	r3, [pc, #180]	@ (800c84c <xTaskResumeAll+0x124>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d903      	bls.n	800c7a6 <xTaskResumeAll+0x7e>
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7a2:	4a2a      	ldr	r2, [pc, #168]	@ (800c84c <xTaskResumeAll+0x124>)
 800c7a4:	6013      	str	r3, [r2, #0]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	009b      	lsls	r3, r3, #2
 800c7ae:	4413      	add	r3, r2
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	4a27      	ldr	r2, [pc, #156]	@ (800c850 <xTaskResumeAll+0x128>)
 800c7b4:	441a      	add	r2, r3
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	3304      	adds	r3, #4
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	4610      	mov	r0, r2
 800c7be:	f7fe ff6a 	bl	800b696 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7c6:	4b23      	ldr	r3, [pc, #140]	@ (800c854 <xTaskResumeAll+0x12c>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d302      	bcc.n	800c7d6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c7d0:	4b21      	ldr	r3, [pc, #132]	@ (800c858 <xTaskResumeAll+0x130>)
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7d6:	4b1c      	ldr	r3, [pc, #112]	@ (800c848 <xTaskResumeAll+0x120>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d1cb      	bne.n	800c776 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d001      	beq.n	800c7e8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c7e4:	f000 fb58 	bl	800ce98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c7e8:	4b1c      	ldr	r3, [pc, #112]	@ (800c85c <xTaskResumeAll+0x134>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d010      	beq.n	800c816 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c7f4:	f000 f846 	bl	800c884 <xTaskIncrementTick>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d002      	beq.n	800c804 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c7fe:	4b16      	ldr	r3, [pc, #88]	@ (800c858 <xTaskResumeAll+0x130>)
 800c800:	2201      	movs	r2, #1
 800c802:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	3b01      	subs	r3, #1
 800c808:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d1f1      	bne.n	800c7f4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c810:	4b12      	ldr	r3, [pc, #72]	@ (800c85c <xTaskResumeAll+0x134>)
 800c812:	2200      	movs	r2, #0
 800c814:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c816:	4b10      	ldr	r3, [pc, #64]	@ (800c858 <xTaskResumeAll+0x130>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d009      	beq.n	800c832 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c81e:	2301      	movs	r3, #1
 800c820:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c822:	4b0f      	ldr	r3, [pc, #60]	@ (800c860 <xTaskResumeAll+0x138>)
 800c824:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c828:	601a      	str	r2, [r3, #0]
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c832:	f001 f8f3 	bl	800da1c <vPortExitCritical>

	return xAlreadyYielded;
 800c836:	68bb      	ldr	r3, [r7, #8]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3710      	adds	r7, #16
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	20001754 	.word	0x20001754
 800c844:	2000172c 	.word	0x2000172c
 800c848:	200016ec 	.word	0x200016ec
 800c84c:	20001734 	.word	0x20001734
 800c850:	2000125c 	.word	0x2000125c
 800c854:	20001258 	.word	0x20001258
 800c858:	20001740 	.word	0x20001740
 800c85c:	2000173c 	.word	0x2000173c
 800c860:	e000ed04 	.word	0xe000ed04

0800c864 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c86a:	4b05      	ldr	r3, [pc, #20]	@ (800c880 <xTaskGetTickCount+0x1c>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c870:	687b      	ldr	r3, [r7, #4]
}
 800c872:	4618      	mov	r0, r3
 800c874:	370c      	adds	r7, #12
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	20001730 	.word	0x20001730

0800c884 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b086      	sub	sp, #24
 800c888:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c88a:	2300      	movs	r3, #0
 800c88c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c88e:	4b4f      	ldr	r3, [pc, #316]	@ (800c9cc <xTaskIncrementTick+0x148>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	f040 8090 	bne.w	800c9b8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c898:	4b4d      	ldr	r3, [pc, #308]	@ (800c9d0 <xTaskIncrementTick+0x14c>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	3301      	adds	r3, #1
 800c89e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c8a0:	4a4b      	ldr	r2, [pc, #300]	@ (800c9d0 <xTaskIncrementTick+0x14c>)
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d121      	bne.n	800c8f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c8ac:	4b49      	ldr	r3, [pc, #292]	@ (800c9d4 <xTaskIncrementTick+0x150>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d00b      	beq.n	800c8ce <xTaskIncrementTick+0x4a>
	__asm volatile
 800c8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ba:	f383 8811 	msr	BASEPRI, r3
 800c8be:	f3bf 8f6f 	isb	sy
 800c8c2:	f3bf 8f4f 	dsb	sy
 800c8c6:	603b      	str	r3, [r7, #0]
}
 800c8c8:	bf00      	nop
 800c8ca:	bf00      	nop
 800c8cc:	e7fd      	b.n	800c8ca <xTaskIncrementTick+0x46>
 800c8ce:	4b41      	ldr	r3, [pc, #260]	@ (800c9d4 <xTaskIncrementTick+0x150>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	60fb      	str	r3, [r7, #12]
 800c8d4:	4b40      	ldr	r3, [pc, #256]	@ (800c9d8 <xTaskIncrementTick+0x154>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a3e      	ldr	r2, [pc, #248]	@ (800c9d4 <xTaskIncrementTick+0x150>)
 800c8da:	6013      	str	r3, [r2, #0]
 800c8dc:	4a3e      	ldr	r2, [pc, #248]	@ (800c9d8 <xTaskIncrementTick+0x154>)
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	6013      	str	r3, [r2, #0]
 800c8e2:	4b3e      	ldr	r3, [pc, #248]	@ (800c9dc <xTaskIncrementTick+0x158>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	4a3c      	ldr	r2, [pc, #240]	@ (800c9dc <xTaskIncrementTick+0x158>)
 800c8ea:	6013      	str	r3, [r2, #0]
 800c8ec:	f000 fad4 	bl	800ce98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c8f0:	4b3b      	ldr	r3, [pc, #236]	@ (800c9e0 <xTaskIncrementTick+0x15c>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	693a      	ldr	r2, [r7, #16]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d349      	bcc.n	800c98e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8fa:	4b36      	ldr	r3, [pc, #216]	@ (800c9d4 <xTaskIncrementTick+0x150>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d104      	bne.n	800c90e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c904:	4b36      	ldr	r3, [pc, #216]	@ (800c9e0 <xTaskIncrementTick+0x15c>)
 800c906:	f04f 32ff 	mov.w	r2, #4294967295
 800c90a:	601a      	str	r2, [r3, #0]
					break;
 800c90c:	e03f      	b.n	800c98e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c90e:	4b31      	ldr	r3, [pc, #196]	@ (800c9d4 <xTaskIncrementTick+0x150>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	68db      	ldr	r3, [r3, #12]
 800c916:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c91e:	693a      	ldr	r2, [r7, #16]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	429a      	cmp	r2, r3
 800c924:	d203      	bcs.n	800c92e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c926:	4a2e      	ldr	r2, [pc, #184]	@ (800c9e0 <xTaskIncrementTick+0x15c>)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c92c:	e02f      	b.n	800c98e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	3304      	adds	r3, #4
 800c932:	4618      	mov	r0, r3
 800c934:	f7fe ff0c 	bl	800b750 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d004      	beq.n	800c94a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	3318      	adds	r3, #24
 800c944:	4618      	mov	r0, r3
 800c946:	f7fe ff03 	bl	800b750 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c94e:	4b25      	ldr	r3, [pc, #148]	@ (800c9e4 <xTaskIncrementTick+0x160>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	429a      	cmp	r2, r3
 800c954:	d903      	bls.n	800c95e <xTaskIncrementTick+0xda>
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c95a:	4a22      	ldr	r2, [pc, #136]	@ (800c9e4 <xTaskIncrementTick+0x160>)
 800c95c:	6013      	str	r3, [r2, #0]
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c962:	4613      	mov	r3, r2
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	4413      	add	r3, r2
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	4a1f      	ldr	r2, [pc, #124]	@ (800c9e8 <xTaskIncrementTick+0x164>)
 800c96c:	441a      	add	r2, r3
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	3304      	adds	r3, #4
 800c972:	4619      	mov	r1, r3
 800c974:	4610      	mov	r0, r2
 800c976:	f7fe fe8e 	bl	800b696 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c97e:	4b1b      	ldr	r3, [pc, #108]	@ (800c9ec <xTaskIncrementTick+0x168>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c984:	429a      	cmp	r2, r3
 800c986:	d3b8      	bcc.n	800c8fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c988:	2301      	movs	r3, #1
 800c98a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c98c:	e7b5      	b.n	800c8fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c98e:	4b17      	ldr	r3, [pc, #92]	@ (800c9ec <xTaskIncrementTick+0x168>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c994:	4914      	ldr	r1, [pc, #80]	@ (800c9e8 <xTaskIncrementTick+0x164>)
 800c996:	4613      	mov	r3, r2
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	4413      	add	r3, r2
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	440b      	add	r3, r1
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d901      	bls.n	800c9aa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c9aa:	4b11      	ldr	r3, [pc, #68]	@ (800c9f0 <xTaskIncrementTick+0x16c>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d007      	beq.n	800c9c2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	617b      	str	r3, [r7, #20]
 800c9b6:	e004      	b.n	800c9c2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c9b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c9f4 <xTaskIncrementTick+0x170>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	3301      	adds	r3, #1
 800c9be:	4a0d      	ldr	r2, [pc, #52]	@ (800c9f4 <xTaskIncrementTick+0x170>)
 800c9c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c9c2:	697b      	ldr	r3, [r7, #20]
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3718      	adds	r7, #24
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	20001754 	.word	0x20001754
 800c9d0:	20001730 	.word	0x20001730
 800c9d4:	200016e4 	.word	0x200016e4
 800c9d8:	200016e8 	.word	0x200016e8
 800c9dc:	20001744 	.word	0x20001744
 800c9e0:	2000174c 	.word	0x2000174c
 800c9e4:	20001734 	.word	0x20001734
 800c9e8:	2000125c 	.word	0x2000125c
 800c9ec:	20001258 	.word	0x20001258
 800c9f0:	20001740 	.word	0x20001740
 800c9f4:	2000173c 	.word	0x2000173c

0800c9f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c9fe:	4b28      	ldr	r3, [pc, #160]	@ (800caa0 <vTaskSwitchContext+0xa8>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d003      	beq.n	800ca0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ca06:	4b27      	ldr	r3, [pc, #156]	@ (800caa4 <vTaskSwitchContext+0xac>)
 800ca08:	2201      	movs	r2, #1
 800ca0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ca0c:	e042      	b.n	800ca94 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800ca0e:	4b25      	ldr	r3, [pc, #148]	@ (800caa4 <vTaskSwitchContext+0xac>)
 800ca10:	2200      	movs	r2, #0
 800ca12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca14:	4b24      	ldr	r3, [pc, #144]	@ (800caa8 <vTaskSwitchContext+0xb0>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	60fb      	str	r3, [r7, #12]
 800ca1a:	e011      	b.n	800ca40 <vTaskSwitchContext+0x48>
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d10b      	bne.n	800ca3a <vTaskSwitchContext+0x42>
	__asm volatile
 800ca22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca26:	f383 8811 	msr	BASEPRI, r3
 800ca2a:	f3bf 8f6f 	isb	sy
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	607b      	str	r3, [r7, #4]
}
 800ca34:	bf00      	nop
 800ca36:	bf00      	nop
 800ca38:	e7fd      	b.n	800ca36 <vTaskSwitchContext+0x3e>
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	3b01      	subs	r3, #1
 800ca3e:	60fb      	str	r3, [r7, #12]
 800ca40:	491a      	ldr	r1, [pc, #104]	@ (800caac <vTaskSwitchContext+0xb4>)
 800ca42:	68fa      	ldr	r2, [r7, #12]
 800ca44:	4613      	mov	r3, r2
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	4413      	add	r3, r2
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	440b      	add	r3, r1
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d0e3      	beq.n	800ca1c <vTaskSwitchContext+0x24>
 800ca54:	68fa      	ldr	r2, [r7, #12]
 800ca56:	4613      	mov	r3, r2
 800ca58:	009b      	lsls	r3, r3, #2
 800ca5a:	4413      	add	r3, r2
 800ca5c:	009b      	lsls	r3, r3, #2
 800ca5e:	4a13      	ldr	r2, [pc, #76]	@ (800caac <vTaskSwitchContext+0xb4>)
 800ca60:	4413      	add	r3, r2
 800ca62:	60bb      	str	r3, [r7, #8]
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	685a      	ldr	r2, [r3, #4]
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	605a      	str	r2, [r3, #4]
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	685a      	ldr	r2, [r3, #4]
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	3308      	adds	r3, #8
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d104      	bne.n	800ca84 <vTaskSwitchContext+0x8c>
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	685a      	ldr	r2, [r3, #4]
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	605a      	str	r2, [r3, #4]
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	68db      	ldr	r3, [r3, #12]
 800ca8a:	4a09      	ldr	r2, [pc, #36]	@ (800cab0 <vTaskSwitchContext+0xb8>)
 800ca8c:	6013      	str	r3, [r2, #0]
 800ca8e:	4a06      	ldr	r2, [pc, #24]	@ (800caa8 <vTaskSwitchContext+0xb0>)
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6013      	str	r3, [r2, #0]
}
 800ca94:	bf00      	nop
 800ca96:	3714      	adds	r7, #20
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr
 800caa0:	20001754 	.word	0x20001754
 800caa4:	20001740 	.word	0x20001740
 800caa8:	20001734 	.word	0x20001734
 800caac:	2000125c 	.word	0x2000125c
 800cab0:	20001258 	.word	0x20001258

0800cab4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d10b      	bne.n	800cadc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cac8:	f383 8811 	msr	BASEPRI, r3
 800cacc:	f3bf 8f6f 	isb	sy
 800cad0:	f3bf 8f4f 	dsb	sy
 800cad4:	60fb      	str	r3, [r7, #12]
}
 800cad6:	bf00      	nop
 800cad8:	bf00      	nop
 800cada:	e7fd      	b.n	800cad8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cadc:	4b07      	ldr	r3, [pc, #28]	@ (800cafc <vTaskPlaceOnEventList+0x48>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	3318      	adds	r3, #24
 800cae2:	4619      	mov	r1, r3
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f7fe fdfa 	bl	800b6de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800caea:	2101      	movs	r1, #1
 800caec:	6838      	ldr	r0, [r7, #0]
 800caee:	f000 fa81 	bl	800cff4 <prvAddCurrentTaskToDelayedList>
}
 800caf2:	bf00      	nop
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	20001258 	.word	0x20001258

0800cb00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d10b      	bne.n	800cb2a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800cb12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb16:	f383 8811 	msr	BASEPRI, r3
 800cb1a:	f3bf 8f6f 	isb	sy
 800cb1e:	f3bf 8f4f 	dsb	sy
 800cb22:	617b      	str	r3, [r7, #20]
}
 800cb24:	bf00      	nop
 800cb26:	bf00      	nop
 800cb28:	e7fd      	b.n	800cb26 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb2a:	4b0a      	ldr	r3, [pc, #40]	@ (800cb54 <vTaskPlaceOnEventListRestricted+0x54>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	3318      	adds	r3, #24
 800cb30:	4619      	mov	r1, r3
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	f7fe fdaf 	bl	800b696 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d002      	beq.n	800cb44 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800cb3e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb42:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cb44:	6879      	ldr	r1, [r7, #4]
 800cb46:	68b8      	ldr	r0, [r7, #8]
 800cb48:	f000 fa54 	bl	800cff4 <prvAddCurrentTaskToDelayedList>
	}
 800cb4c:	bf00      	nop
 800cb4e:	3718      	adds	r7, #24
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	20001258 	.word	0x20001258

0800cb58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b086      	sub	sp, #24
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	68db      	ldr	r3, [r3, #12]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d10b      	bne.n	800cb86 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800cb6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb72:	f383 8811 	msr	BASEPRI, r3
 800cb76:	f3bf 8f6f 	isb	sy
 800cb7a:	f3bf 8f4f 	dsb	sy
 800cb7e:	60fb      	str	r3, [r7, #12]
}
 800cb80:	bf00      	nop
 800cb82:	bf00      	nop
 800cb84:	e7fd      	b.n	800cb82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	3318      	adds	r3, #24
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7fe fde0 	bl	800b750 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb90:	4b1d      	ldr	r3, [pc, #116]	@ (800cc08 <xTaskRemoveFromEventList+0xb0>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d11d      	bne.n	800cbd4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	3304      	adds	r3, #4
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7fe fdd7 	bl	800b750 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cba6:	4b19      	ldr	r3, [pc, #100]	@ (800cc0c <xTaskRemoveFromEventList+0xb4>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d903      	bls.n	800cbb6 <xTaskRemoveFromEventList+0x5e>
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbb2:	4a16      	ldr	r2, [pc, #88]	@ (800cc0c <xTaskRemoveFromEventList+0xb4>)
 800cbb4:	6013      	str	r3, [r2, #0]
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbba:	4613      	mov	r3, r2
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	4413      	add	r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	4a13      	ldr	r2, [pc, #76]	@ (800cc10 <xTaskRemoveFromEventList+0xb8>)
 800cbc4:	441a      	add	r2, r3
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	3304      	adds	r3, #4
 800cbca:	4619      	mov	r1, r3
 800cbcc:	4610      	mov	r0, r2
 800cbce:	f7fe fd62 	bl	800b696 <vListInsertEnd>
 800cbd2:	e005      	b.n	800cbe0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	3318      	adds	r3, #24
 800cbd8:	4619      	mov	r1, r3
 800cbda:	480e      	ldr	r0, [pc, #56]	@ (800cc14 <xTaskRemoveFromEventList+0xbc>)
 800cbdc:	f7fe fd5b 	bl	800b696 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbe4:	4b0c      	ldr	r3, [pc, #48]	@ (800cc18 <xTaskRemoveFromEventList+0xc0>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d905      	bls.n	800cbfa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cbf2:	4b0a      	ldr	r3, [pc, #40]	@ (800cc1c <xTaskRemoveFromEventList+0xc4>)
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	601a      	str	r2, [r3, #0]
 800cbf8:	e001      	b.n	800cbfe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cbfe:	697b      	ldr	r3, [r7, #20]
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3718      	adds	r7, #24
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	20001754 	.word	0x20001754
 800cc0c:	20001734 	.word	0x20001734
 800cc10:	2000125c 	.word	0x2000125c
 800cc14:	200016ec 	.word	0x200016ec
 800cc18:	20001258 	.word	0x20001258
 800cc1c:	20001740 	.word	0x20001740

0800cc20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cc28:	4b06      	ldr	r3, [pc, #24]	@ (800cc44 <vTaskInternalSetTimeOutState+0x24>)
 800cc2a:	681a      	ldr	r2, [r3, #0]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cc30:	4b05      	ldr	r3, [pc, #20]	@ (800cc48 <vTaskInternalSetTimeOutState+0x28>)
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	605a      	str	r2, [r3, #4]
}
 800cc38:	bf00      	nop
 800cc3a:	370c      	adds	r7, #12
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr
 800cc44:	20001744 	.word	0x20001744
 800cc48:	20001730 	.word	0x20001730

0800cc4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b088      	sub	sp, #32
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d10b      	bne.n	800cc74 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800cc5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc60:	f383 8811 	msr	BASEPRI, r3
 800cc64:	f3bf 8f6f 	isb	sy
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	613b      	str	r3, [r7, #16]
}
 800cc6e:	bf00      	nop
 800cc70:	bf00      	nop
 800cc72:	e7fd      	b.n	800cc70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d10b      	bne.n	800cc92 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800cc7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc7e:	f383 8811 	msr	BASEPRI, r3
 800cc82:	f3bf 8f6f 	isb	sy
 800cc86:	f3bf 8f4f 	dsb	sy
 800cc8a:	60fb      	str	r3, [r7, #12]
}
 800cc8c:	bf00      	nop
 800cc8e:	bf00      	nop
 800cc90:	e7fd      	b.n	800cc8e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800cc92:	f000 fe91 	bl	800d9b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cc96:	4b1d      	ldr	r3, [pc, #116]	@ (800cd0c <xTaskCheckForTimeOut+0xc0>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	69ba      	ldr	r2, [r7, #24]
 800cca2:	1ad3      	subs	r3, r2, r3
 800cca4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccae:	d102      	bne.n	800ccb6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	61fb      	str	r3, [r7, #28]
 800ccb4:	e023      	b.n	800ccfe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	4b15      	ldr	r3, [pc, #84]	@ (800cd10 <xTaskCheckForTimeOut+0xc4>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d007      	beq.n	800ccd2 <xTaskCheckForTimeOut+0x86>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	69ba      	ldr	r2, [r7, #24]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d302      	bcc.n	800ccd2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cccc:	2301      	movs	r3, #1
 800ccce:	61fb      	str	r3, [r7, #28]
 800ccd0:	e015      	b.n	800ccfe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	697a      	ldr	r2, [r7, #20]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d20b      	bcs.n	800ccf4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	1ad2      	subs	r2, r2, r3
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f7ff ff99 	bl	800cc20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	61fb      	str	r3, [r7, #28]
 800ccf2:	e004      	b.n	800ccfe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ccfe:	f000 fe8d 	bl	800da1c <vPortExitCritical>

	return xReturn;
 800cd02:	69fb      	ldr	r3, [r7, #28]
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3720      	adds	r7, #32
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	20001730 	.word	0x20001730
 800cd10:	20001744 	.word	0x20001744

0800cd14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cd14:	b480      	push	{r7}
 800cd16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cd18:	4b03      	ldr	r3, [pc, #12]	@ (800cd28 <vTaskMissedYield+0x14>)
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	601a      	str	r2, [r3, #0]
}
 800cd1e:	bf00      	nop
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr
 800cd28:	20001740 	.word	0x20001740

0800cd2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cd34:	f000 f852 	bl	800cddc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cd38:	4b06      	ldr	r3, [pc, #24]	@ (800cd54 <prvIdleTask+0x28>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d9f9      	bls.n	800cd34 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cd40:	4b05      	ldr	r3, [pc, #20]	@ (800cd58 <prvIdleTask+0x2c>)
 800cd42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd46:	601a      	str	r2, [r3, #0]
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cd50:	e7f0      	b.n	800cd34 <prvIdleTask+0x8>
 800cd52:	bf00      	nop
 800cd54:	2000125c 	.word	0x2000125c
 800cd58:	e000ed04 	.word	0xe000ed04

0800cd5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd62:	2300      	movs	r3, #0
 800cd64:	607b      	str	r3, [r7, #4]
 800cd66:	e00c      	b.n	800cd82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	4413      	add	r3, r2
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	4a12      	ldr	r2, [pc, #72]	@ (800cdbc <prvInitialiseTaskLists+0x60>)
 800cd74:	4413      	add	r3, r2
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7fe fc60 	bl	800b63c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	607b      	str	r3, [r7, #4]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2b37      	cmp	r3, #55	@ 0x37
 800cd86:	d9ef      	bls.n	800cd68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cd88:	480d      	ldr	r0, [pc, #52]	@ (800cdc0 <prvInitialiseTaskLists+0x64>)
 800cd8a:	f7fe fc57 	bl	800b63c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cd8e:	480d      	ldr	r0, [pc, #52]	@ (800cdc4 <prvInitialiseTaskLists+0x68>)
 800cd90:	f7fe fc54 	bl	800b63c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cd94:	480c      	ldr	r0, [pc, #48]	@ (800cdc8 <prvInitialiseTaskLists+0x6c>)
 800cd96:	f7fe fc51 	bl	800b63c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cd9a:	480c      	ldr	r0, [pc, #48]	@ (800cdcc <prvInitialiseTaskLists+0x70>)
 800cd9c:	f7fe fc4e 	bl	800b63c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cda0:	480b      	ldr	r0, [pc, #44]	@ (800cdd0 <prvInitialiseTaskLists+0x74>)
 800cda2:	f7fe fc4b 	bl	800b63c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cda6:	4b0b      	ldr	r3, [pc, #44]	@ (800cdd4 <prvInitialiseTaskLists+0x78>)
 800cda8:	4a05      	ldr	r2, [pc, #20]	@ (800cdc0 <prvInitialiseTaskLists+0x64>)
 800cdaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cdac:	4b0a      	ldr	r3, [pc, #40]	@ (800cdd8 <prvInitialiseTaskLists+0x7c>)
 800cdae:	4a05      	ldr	r2, [pc, #20]	@ (800cdc4 <prvInitialiseTaskLists+0x68>)
 800cdb0:	601a      	str	r2, [r3, #0]
}
 800cdb2:	bf00      	nop
 800cdb4:	3708      	adds	r7, #8
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	2000125c 	.word	0x2000125c
 800cdc0:	200016bc 	.word	0x200016bc
 800cdc4:	200016d0 	.word	0x200016d0
 800cdc8:	200016ec 	.word	0x200016ec
 800cdcc:	20001700 	.word	0x20001700
 800cdd0:	20001718 	.word	0x20001718
 800cdd4:	200016e4 	.word	0x200016e4
 800cdd8:	200016e8 	.word	0x200016e8

0800cddc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cde2:	e019      	b.n	800ce18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cde4:	f000 fde8 	bl	800d9b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cde8:	4b10      	ldr	r3, [pc, #64]	@ (800ce2c <prvCheckTasksWaitingTermination+0x50>)
 800cdea:	68db      	ldr	r3, [r3, #12]
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	3304      	adds	r3, #4
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7fe fcab 	bl	800b750 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cdfa:	4b0d      	ldr	r3, [pc, #52]	@ (800ce30 <prvCheckTasksWaitingTermination+0x54>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	4a0b      	ldr	r2, [pc, #44]	@ (800ce30 <prvCheckTasksWaitingTermination+0x54>)
 800ce02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ce04:	4b0b      	ldr	r3, [pc, #44]	@ (800ce34 <prvCheckTasksWaitingTermination+0x58>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	3b01      	subs	r3, #1
 800ce0a:	4a0a      	ldr	r2, [pc, #40]	@ (800ce34 <prvCheckTasksWaitingTermination+0x58>)
 800ce0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ce0e:	f000 fe05 	bl	800da1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 f810 	bl	800ce38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce18:	4b06      	ldr	r3, [pc, #24]	@ (800ce34 <prvCheckTasksWaitingTermination+0x58>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1e1      	bne.n	800cde4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ce20:	bf00      	nop
 800ce22:	bf00      	nop
 800ce24:	3708      	adds	r7, #8
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	20001700 	.word	0x20001700
 800ce30:	2000172c 	.word	0x2000172c
 800ce34:	20001714 	.word	0x20001714

0800ce38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d108      	bne.n	800ce5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f000 ffa2 	bl	800dd98 <vPortFree>
				vPortFree( pxTCB );
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 ff9f 	bl	800dd98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ce5a:	e019      	b.n	800ce90 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d103      	bne.n	800ce6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f000 ff96 	bl	800dd98 <vPortFree>
	}
 800ce6c:	e010      	b.n	800ce90 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ce74:	2b02      	cmp	r3, #2
 800ce76:	d00b      	beq.n	800ce90 <prvDeleteTCB+0x58>
	__asm volatile
 800ce78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce7c:	f383 8811 	msr	BASEPRI, r3
 800ce80:	f3bf 8f6f 	isb	sy
 800ce84:	f3bf 8f4f 	dsb	sy
 800ce88:	60fb      	str	r3, [r7, #12]
}
 800ce8a:	bf00      	nop
 800ce8c:	bf00      	nop
 800ce8e:	e7fd      	b.n	800ce8c <prvDeleteTCB+0x54>
	}
 800ce90:	bf00      	nop
 800ce92:	3710      	adds	r7, #16
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce9e:	4b0c      	ldr	r3, [pc, #48]	@ (800ced0 <prvResetNextTaskUnblockTime+0x38>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d104      	bne.n	800ceb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cea8:	4b0a      	ldr	r3, [pc, #40]	@ (800ced4 <prvResetNextTaskUnblockTime+0x3c>)
 800ceaa:	f04f 32ff 	mov.w	r2, #4294967295
 800ceae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ceb0:	e008      	b.n	800cec4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceb2:	4b07      	ldr	r3, [pc, #28]	@ (800ced0 <prvResetNextTaskUnblockTime+0x38>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	68db      	ldr	r3, [r3, #12]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	4a04      	ldr	r2, [pc, #16]	@ (800ced4 <prvResetNextTaskUnblockTime+0x3c>)
 800cec2:	6013      	str	r3, [r2, #0]
}
 800cec4:	bf00      	nop
 800cec6:	370c      	adds	r7, #12
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr
 800ced0:	200016e4 	.word	0x200016e4
 800ced4:	2000174c 	.word	0x2000174c

0800ced8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cede:	4b0b      	ldr	r3, [pc, #44]	@ (800cf0c <xTaskGetSchedulerState+0x34>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d102      	bne.n	800ceec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cee6:	2301      	movs	r3, #1
 800cee8:	607b      	str	r3, [r7, #4]
 800ceea:	e008      	b.n	800cefe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ceec:	4b08      	ldr	r3, [pc, #32]	@ (800cf10 <xTaskGetSchedulerState+0x38>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d102      	bne.n	800cefa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cef4:	2302      	movs	r3, #2
 800cef6:	607b      	str	r3, [r7, #4]
 800cef8:	e001      	b.n	800cefe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cefa:	2300      	movs	r3, #0
 800cefc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cefe:	687b      	ldr	r3, [r7, #4]
	}
 800cf00:	4618      	mov	r0, r3
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr
 800cf0c:	20001738 	.word	0x20001738
 800cf10:	20001754 	.word	0x20001754

0800cf14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b086      	sub	sp, #24
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cf20:	2300      	movs	r3, #0
 800cf22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d058      	beq.n	800cfdc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cf2a:	4b2f      	ldr	r3, [pc, #188]	@ (800cfe8 <xTaskPriorityDisinherit+0xd4>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	693a      	ldr	r2, [r7, #16]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d00b      	beq.n	800cf4c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cf34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf38:	f383 8811 	msr	BASEPRI, r3
 800cf3c:	f3bf 8f6f 	isb	sy
 800cf40:	f3bf 8f4f 	dsb	sy
 800cf44:	60fb      	str	r3, [r7, #12]
}
 800cf46:	bf00      	nop
 800cf48:	bf00      	nop
 800cf4a:	e7fd      	b.n	800cf48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d10b      	bne.n	800cf6c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800cf54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf58:	f383 8811 	msr	BASEPRI, r3
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	60bb      	str	r3, [r7, #8]
}
 800cf66:	bf00      	nop
 800cf68:	bf00      	nop
 800cf6a:	e7fd      	b.n	800cf68 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf70:	1e5a      	subs	r2, r3, #1
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d02c      	beq.n	800cfdc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d128      	bne.n	800cfdc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	3304      	adds	r3, #4
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7fe fbde 	bl	800b750 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfa0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfac:	4b0f      	ldr	r3, [pc, #60]	@ (800cfec <xTaskPriorityDisinherit+0xd8>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d903      	bls.n	800cfbc <xTaskPriorityDisinherit+0xa8>
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfb8:	4a0c      	ldr	r2, [pc, #48]	@ (800cfec <xTaskPriorityDisinherit+0xd8>)
 800cfba:	6013      	str	r3, [r2, #0]
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4413      	add	r3, r2
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	4a09      	ldr	r2, [pc, #36]	@ (800cff0 <xTaskPriorityDisinherit+0xdc>)
 800cfca:	441a      	add	r2, r3
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	3304      	adds	r3, #4
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	4610      	mov	r0, r2
 800cfd4:	f7fe fb5f 	bl	800b696 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cfdc:	697b      	ldr	r3, [r7, #20]
	}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3718      	adds	r7, #24
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	20001258 	.word	0x20001258
 800cfec:	20001734 	.word	0x20001734
 800cff0:	2000125c 	.word	0x2000125c

0800cff4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cffe:	4b21      	ldr	r3, [pc, #132]	@ (800d084 <prvAddCurrentTaskToDelayedList+0x90>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d004:	4b20      	ldr	r3, [pc, #128]	@ (800d088 <prvAddCurrentTaskToDelayedList+0x94>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	3304      	adds	r3, #4
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7fe fba0 	bl	800b750 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d016:	d10a      	bne.n	800d02e <prvAddCurrentTaskToDelayedList+0x3a>
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d007      	beq.n	800d02e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d01e:	4b1a      	ldr	r3, [pc, #104]	@ (800d088 <prvAddCurrentTaskToDelayedList+0x94>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	3304      	adds	r3, #4
 800d024:	4619      	mov	r1, r3
 800d026:	4819      	ldr	r0, [pc, #100]	@ (800d08c <prvAddCurrentTaskToDelayedList+0x98>)
 800d028:	f7fe fb35 	bl	800b696 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d02c:	e026      	b.n	800d07c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d02e:	68fa      	ldr	r2, [r7, #12]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	4413      	add	r3, r2
 800d034:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d036:	4b14      	ldr	r3, [pc, #80]	@ (800d088 <prvAddCurrentTaskToDelayedList+0x94>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	68ba      	ldr	r2, [r7, #8]
 800d03c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d03e:	68ba      	ldr	r2, [r7, #8]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	429a      	cmp	r2, r3
 800d044:	d209      	bcs.n	800d05a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d046:	4b12      	ldr	r3, [pc, #72]	@ (800d090 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	4b0f      	ldr	r3, [pc, #60]	@ (800d088 <prvAddCurrentTaskToDelayedList+0x94>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	3304      	adds	r3, #4
 800d050:	4619      	mov	r1, r3
 800d052:	4610      	mov	r0, r2
 800d054:	f7fe fb43 	bl	800b6de <vListInsert>
}
 800d058:	e010      	b.n	800d07c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d05a:	4b0e      	ldr	r3, [pc, #56]	@ (800d094 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d05c:	681a      	ldr	r2, [r3, #0]
 800d05e:	4b0a      	ldr	r3, [pc, #40]	@ (800d088 <prvAddCurrentTaskToDelayedList+0x94>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	3304      	adds	r3, #4
 800d064:	4619      	mov	r1, r3
 800d066:	4610      	mov	r0, r2
 800d068:	f7fe fb39 	bl	800b6de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d06c:	4b0a      	ldr	r3, [pc, #40]	@ (800d098 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	68ba      	ldr	r2, [r7, #8]
 800d072:	429a      	cmp	r2, r3
 800d074:	d202      	bcs.n	800d07c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d076:	4a08      	ldr	r2, [pc, #32]	@ (800d098 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	6013      	str	r3, [r2, #0]
}
 800d07c:	bf00      	nop
 800d07e:	3710      	adds	r7, #16
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	20001730 	.word	0x20001730
 800d088:	20001258 	.word	0x20001258
 800d08c:	20001718 	.word	0x20001718
 800d090:	200016e8 	.word	0x200016e8
 800d094:	200016e4 	.word	0x200016e4
 800d098:	2000174c 	.word	0x2000174c

0800d09c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b08a      	sub	sp, #40	@ 0x28
 800d0a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d0a6:	f000 fb13 	bl	800d6d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d0aa:	4b1d      	ldr	r3, [pc, #116]	@ (800d120 <xTimerCreateTimerTask+0x84>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d021      	beq.n	800d0f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d0ba:	1d3a      	adds	r2, r7, #4
 800d0bc:	f107 0108 	add.w	r1, r7, #8
 800d0c0:	f107 030c 	add.w	r3, r7, #12
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7fe fa9f 	bl	800b608 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d0ca:	6879      	ldr	r1, [r7, #4]
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	9202      	str	r2, [sp, #8]
 800d0d2:	9301      	str	r3, [sp, #4]
 800d0d4:	2302      	movs	r3, #2
 800d0d6:	9300      	str	r3, [sp, #0]
 800d0d8:	2300      	movs	r3, #0
 800d0da:	460a      	mov	r2, r1
 800d0dc:	4911      	ldr	r1, [pc, #68]	@ (800d124 <xTimerCreateTimerTask+0x88>)
 800d0de:	4812      	ldr	r0, [pc, #72]	@ (800d128 <xTimerCreateTimerTask+0x8c>)
 800d0e0:	f7ff f85a 	bl	800c198 <xTaskCreateStatic>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	4a11      	ldr	r2, [pc, #68]	@ (800d12c <xTimerCreateTimerTask+0x90>)
 800d0e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d0ea:	4b10      	ldr	r3, [pc, #64]	@ (800d12c <xTimerCreateTimerTask+0x90>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d001      	beq.n	800d0f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d10b      	bne.n	800d114 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d0fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d100:	f383 8811 	msr	BASEPRI, r3
 800d104:	f3bf 8f6f 	isb	sy
 800d108:	f3bf 8f4f 	dsb	sy
 800d10c:	613b      	str	r3, [r7, #16]
}
 800d10e:	bf00      	nop
 800d110:	bf00      	nop
 800d112:	e7fd      	b.n	800d110 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d114:	697b      	ldr	r3, [r7, #20]
}
 800d116:	4618      	mov	r0, r3
 800d118:	3718      	adds	r7, #24
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	20001788 	.word	0x20001788
 800d124:	08010ef8 	.word	0x08010ef8
 800d128:	0800d269 	.word	0x0800d269
 800d12c:	2000178c 	.word	0x2000178c

0800d130 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b08a      	sub	sp, #40	@ 0x28
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	607a      	str	r2, [r7, #4]
 800d13c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d13e:	2300      	movs	r3, #0
 800d140:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d10b      	bne.n	800d160 <xTimerGenericCommand+0x30>
	__asm volatile
 800d148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d14c:	f383 8811 	msr	BASEPRI, r3
 800d150:	f3bf 8f6f 	isb	sy
 800d154:	f3bf 8f4f 	dsb	sy
 800d158:	623b      	str	r3, [r7, #32]
}
 800d15a:	bf00      	nop
 800d15c:	bf00      	nop
 800d15e:	e7fd      	b.n	800d15c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d160:	4b19      	ldr	r3, [pc, #100]	@ (800d1c8 <xTimerGenericCommand+0x98>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d02a      	beq.n	800d1be <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	2b05      	cmp	r3, #5
 800d178:	dc18      	bgt.n	800d1ac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d17a:	f7ff fead 	bl	800ced8 <xTaskGetSchedulerState>
 800d17e:	4603      	mov	r3, r0
 800d180:	2b02      	cmp	r3, #2
 800d182:	d109      	bne.n	800d198 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d184:	4b10      	ldr	r3, [pc, #64]	@ (800d1c8 <xTimerGenericCommand+0x98>)
 800d186:	6818      	ldr	r0, [r3, #0]
 800d188:	f107 0110 	add.w	r1, r7, #16
 800d18c:	2300      	movs	r3, #0
 800d18e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d190:	f7fe fc12 	bl	800b9b8 <xQueueGenericSend>
 800d194:	6278      	str	r0, [r7, #36]	@ 0x24
 800d196:	e012      	b.n	800d1be <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d198:	4b0b      	ldr	r3, [pc, #44]	@ (800d1c8 <xTimerGenericCommand+0x98>)
 800d19a:	6818      	ldr	r0, [r3, #0]
 800d19c:	f107 0110 	add.w	r1, r7, #16
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f7fe fc08 	bl	800b9b8 <xQueueGenericSend>
 800d1a8:	6278      	str	r0, [r7, #36]	@ 0x24
 800d1aa:	e008      	b.n	800d1be <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d1ac:	4b06      	ldr	r3, [pc, #24]	@ (800d1c8 <xTimerGenericCommand+0x98>)
 800d1ae:	6818      	ldr	r0, [r3, #0]
 800d1b0:	f107 0110 	add.w	r1, r7, #16
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	683a      	ldr	r2, [r7, #0]
 800d1b8:	f7fe fd00 	bl	800bbbc <xQueueGenericSendFromISR>
 800d1bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3728      	adds	r7, #40	@ 0x28
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}
 800d1c8:	20001788 	.word	0x20001788

0800d1cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b088      	sub	sp, #32
 800d1d0:	af02      	add	r7, sp, #8
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1d6:	4b23      	ldr	r3, [pc, #140]	@ (800d264 <prvProcessExpiredTimer+0x98>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	3304      	adds	r3, #4
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7fe fab3 	bl	800b750 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d1f0:	f003 0304 	and.w	r3, r3, #4
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d023      	beq.n	800d240 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	699a      	ldr	r2, [r3, #24]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	18d1      	adds	r1, r2, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	683a      	ldr	r2, [r7, #0]
 800d204:	6978      	ldr	r0, [r7, #20]
 800d206:	f000 f8d5 	bl	800d3b4 <prvInsertTimerInActiveList>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d020      	beq.n	800d252 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d210:	2300      	movs	r3, #0
 800d212:	9300      	str	r3, [sp, #0]
 800d214:	2300      	movs	r3, #0
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	2100      	movs	r1, #0
 800d21a:	6978      	ldr	r0, [r7, #20]
 800d21c:	f7ff ff88 	bl	800d130 <xTimerGenericCommand>
 800d220:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d114      	bne.n	800d252 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d22c:	f383 8811 	msr	BASEPRI, r3
 800d230:	f3bf 8f6f 	isb	sy
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	60fb      	str	r3, [r7, #12]
}
 800d23a:	bf00      	nop
 800d23c:	bf00      	nop
 800d23e:	e7fd      	b.n	800d23c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d246:	f023 0301 	bic.w	r3, r3, #1
 800d24a:	b2da      	uxtb	r2, r3
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	6a1b      	ldr	r3, [r3, #32]
 800d256:	6978      	ldr	r0, [r7, #20]
 800d258:	4798      	blx	r3
}
 800d25a:	bf00      	nop
 800d25c:	3718      	adds	r7, #24
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	20001780 	.word	0x20001780

0800d268 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d270:	f107 0308 	add.w	r3, r7, #8
 800d274:	4618      	mov	r0, r3
 800d276:	f000 f859 	bl	800d32c <prvGetNextExpireTime>
 800d27a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	4619      	mov	r1, r3
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f000 f805 	bl	800d290 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d286:	f000 f8d7 	bl	800d438 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d28a:	bf00      	nop
 800d28c:	e7f0      	b.n	800d270 <prvTimerTask+0x8>
	...

0800d290 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d29a:	f7ff fa37 	bl	800c70c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d29e:	f107 0308 	add.w	r3, r7, #8
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f000 f866 	bl	800d374 <prvSampleTimeNow>
 800d2a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d130      	bne.n	800d312 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d10a      	bne.n	800d2cc <prvProcessTimerOrBlockTask+0x3c>
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d806      	bhi.n	800d2cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d2be:	f7ff fa33 	bl	800c728 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d2c2:	68f9      	ldr	r1, [r7, #12]
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f7ff ff81 	bl	800d1cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d2ca:	e024      	b.n	800d316 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d008      	beq.n	800d2e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d2d2:	4b13      	ldr	r3, [pc, #76]	@ (800d320 <prvProcessTimerOrBlockTask+0x90>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d101      	bne.n	800d2e0 <prvProcessTimerOrBlockTask+0x50>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	e000      	b.n	800d2e2 <prvProcessTimerOrBlockTask+0x52>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d2e4:	4b0f      	ldr	r3, [pc, #60]	@ (800d324 <prvProcessTimerOrBlockTask+0x94>)
 800d2e6:	6818      	ldr	r0, [r3, #0]
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	1ad3      	subs	r3, r2, r3
 800d2ee:	683a      	ldr	r2, [r7, #0]
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	f7fe ff1d 	bl	800c130 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d2f6:	f7ff fa17 	bl	800c728 <xTaskResumeAll>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d10a      	bne.n	800d316 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d300:	4b09      	ldr	r3, [pc, #36]	@ (800d328 <prvProcessTimerOrBlockTask+0x98>)
 800d302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d306:	601a      	str	r2, [r3, #0]
 800d308:	f3bf 8f4f 	dsb	sy
 800d30c:	f3bf 8f6f 	isb	sy
}
 800d310:	e001      	b.n	800d316 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d312:	f7ff fa09 	bl	800c728 <xTaskResumeAll>
}
 800d316:	bf00      	nop
 800d318:	3710      	adds	r7, #16
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	20001784 	.word	0x20001784
 800d324:	20001788 	.word	0x20001788
 800d328:	e000ed04 	.word	0xe000ed04

0800d32c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d32c:	b480      	push	{r7}
 800d32e:	b085      	sub	sp, #20
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d334:	4b0e      	ldr	r3, [pc, #56]	@ (800d370 <prvGetNextExpireTime+0x44>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d101      	bne.n	800d342 <prvGetNextExpireTime+0x16>
 800d33e:	2201      	movs	r2, #1
 800d340:	e000      	b.n	800d344 <prvGetNextExpireTime+0x18>
 800d342:	2200      	movs	r2, #0
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d105      	bne.n	800d35c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d350:	4b07      	ldr	r3, [pc, #28]	@ (800d370 <prvGetNextExpireTime+0x44>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	68db      	ldr	r3, [r3, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	60fb      	str	r3, [r7, #12]
 800d35a:	e001      	b.n	800d360 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d35c:	2300      	movs	r3, #0
 800d35e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d360:	68fb      	ldr	r3, [r7, #12]
}
 800d362:	4618      	mov	r0, r3
 800d364:	3714      	adds	r7, #20
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop
 800d370:	20001780 	.word	0x20001780

0800d374 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d37c:	f7ff fa72 	bl	800c864 <xTaskGetTickCount>
 800d380:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d382:	4b0b      	ldr	r3, [pc, #44]	@ (800d3b0 <prvSampleTimeNow+0x3c>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	68fa      	ldr	r2, [r7, #12]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d205      	bcs.n	800d398 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d38c:	f000 f93a 	bl	800d604 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2201      	movs	r2, #1
 800d394:	601a      	str	r2, [r3, #0]
 800d396:	e002      	b.n	800d39e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d39e:	4a04      	ldr	r2, [pc, #16]	@ (800d3b0 <prvSampleTimeNow+0x3c>)
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3710      	adds	r7, #16
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	20001790 	.word	0x20001790

0800d3b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b086      	sub	sp, #24
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	607a      	str	r2, [r7, #4]
 800d3c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	68ba      	ldr	r2, [r7, #8]
 800d3ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	68fa      	ldr	r2, [r7, #12]
 800d3d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d3d2:	68ba      	ldr	r2, [r7, #8]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d812      	bhi.n	800d400 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	1ad2      	subs	r2, r2, r3
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	699b      	ldr	r3, [r3, #24]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d302      	bcc.n	800d3ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	617b      	str	r3, [r7, #20]
 800d3ec:	e01b      	b.n	800d426 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d3ee:	4b10      	ldr	r3, [pc, #64]	@ (800d430 <prvInsertTimerInActiveList+0x7c>)
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	3304      	adds	r3, #4
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	4610      	mov	r0, r2
 800d3fa:	f7fe f970 	bl	800b6de <vListInsert>
 800d3fe:	e012      	b.n	800d426 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	429a      	cmp	r2, r3
 800d406:	d206      	bcs.n	800d416 <prvInsertTimerInActiveList+0x62>
 800d408:	68ba      	ldr	r2, [r7, #8]
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d302      	bcc.n	800d416 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d410:	2301      	movs	r3, #1
 800d412:	617b      	str	r3, [r7, #20]
 800d414:	e007      	b.n	800d426 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d416:	4b07      	ldr	r3, [pc, #28]	@ (800d434 <prvInsertTimerInActiveList+0x80>)
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	3304      	adds	r3, #4
 800d41e:	4619      	mov	r1, r3
 800d420:	4610      	mov	r0, r2
 800d422:	f7fe f95c 	bl	800b6de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d426:	697b      	ldr	r3, [r7, #20]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3718      	adds	r7, #24
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	20001784 	.word	0x20001784
 800d434:	20001780 	.word	0x20001780

0800d438 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b08e      	sub	sp, #56	@ 0x38
 800d43c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d43e:	e0ce      	b.n	800d5de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2b00      	cmp	r3, #0
 800d444:	da19      	bge.n	800d47a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d446:	1d3b      	adds	r3, r7, #4
 800d448:	3304      	adds	r3, #4
 800d44a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d10b      	bne.n	800d46a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d456:	f383 8811 	msr	BASEPRI, r3
 800d45a:	f3bf 8f6f 	isb	sy
 800d45e:	f3bf 8f4f 	dsb	sy
 800d462:	61fb      	str	r3, [r7, #28]
}
 800d464:	bf00      	nop
 800d466:	bf00      	nop
 800d468:	e7fd      	b.n	800d466 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d470:	6850      	ldr	r0, [r2, #4]
 800d472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d474:	6892      	ldr	r2, [r2, #8]
 800d476:	4611      	mov	r1, r2
 800d478:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	f2c0 80ae 	blt.w	800d5de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d488:	695b      	ldr	r3, [r3, #20]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d004      	beq.n	800d498 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d490:	3304      	adds	r3, #4
 800d492:	4618      	mov	r0, r3
 800d494:	f7fe f95c 	bl	800b750 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d498:	463b      	mov	r3, r7
 800d49a:	4618      	mov	r0, r3
 800d49c:	f7ff ff6a 	bl	800d374 <prvSampleTimeNow>
 800d4a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2b09      	cmp	r3, #9
 800d4a6:	f200 8097 	bhi.w	800d5d8 <prvProcessReceivedCommands+0x1a0>
 800d4aa:	a201      	add	r2, pc, #4	@ (adr r2, 800d4b0 <prvProcessReceivedCommands+0x78>)
 800d4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b0:	0800d4d9 	.word	0x0800d4d9
 800d4b4:	0800d4d9 	.word	0x0800d4d9
 800d4b8:	0800d4d9 	.word	0x0800d4d9
 800d4bc:	0800d54f 	.word	0x0800d54f
 800d4c0:	0800d563 	.word	0x0800d563
 800d4c4:	0800d5af 	.word	0x0800d5af
 800d4c8:	0800d4d9 	.word	0x0800d4d9
 800d4cc:	0800d4d9 	.word	0x0800d4d9
 800d4d0:	0800d54f 	.word	0x0800d54f
 800d4d4:	0800d563 	.word	0x0800d563
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d4de:	f043 0301 	orr.w	r3, r3, #1
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d4ea:	68ba      	ldr	r2, [r7, #8]
 800d4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ee:	699b      	ldr	r3, [r3, #24]
 800d4f0:	18d1      	adds	r1, r2, r3
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4f8:	f7ff ff5c 	bl	800d3b4 <prvInsertTimerInActiveList>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d06c      	beq.n	800d5dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d504:	6a1b      	ldr	r3, [r3, #32]
 800d506:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d508:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d50c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d510:	f003 0304 	and.w	r3, r3, #4
 800d514:	2b00      	cmp	r3, #0
 800d516:	d061      	beq.n	800d5dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d518:	68ba      	ldr	r2, [r7, #8]
 800d51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d51c:	699b      	ldr	r3, [r3, #24]
 800d51e:	441a      	add	r2, r3
 800d520:	2300      	movs	r3, #0
 800d522:	9300      	str	r3, [sp, #0]
 800d524:	2300      	movs	r3, #0
 800d526:	2100      	movs	r1, #0
 800d528:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d52a:	f7ff fe01 	bl	800d130 <xTimerGenericCommand>
 800d52e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d530:	6a3b      	ldr	r3, [r7, #32]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d152      	bne.n	800d5dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d53a:	f383 8811 	msr	BASEPRI, r3
 800d53e:	f3bf 8f6f 	isb	sy
 800d542:	f3bf 8f4f 	dsb	sy
 800d546:	61bb      	str	r3, [r7, #24]
}
 800d548:	bf00      	nop
 800d54a:	bf00      	nop
 800d54c:	e7fd      	b.n	800d54a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d550:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d554:	f023 0301 	bic.w	r3, r3, #1
 800d558:	b2da      	uxtb	r2, r3
 800d55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d55c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d560:	e03d      	b.n	800d5de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d568:	f043 0301 	orr.w	r3, r3, #1
 800d56c:	b2da      	uxtb	r2, r3
 800d56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d570:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d574:	68ba      	ldr	r2, [r7, #8]
 800d576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d578:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d57c:	699b      	ldr	r3, [r3, #24]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d10b      	bne.n	800d59a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d586:	f383 8811 	msr	BASEPRI, r3
 800d58a:	f3bf 8f6f 	isb	sy
 800d58e:	f3bf 8f4f 	dsb	sy
 800d592:	617b      	str	r3, [r7, #20]
}
 800d594:	bf00      	nop
 800d596:	bf00      	nop
 800d598:	e7fd      	b.n	800d596 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d59c:	699a      	ldr	r2, [r3, #24]
 800d59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a0:	18d1      	adds	r1, r2, r3
 800d5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5a8:	f7ff ff04 	bl	800d3b4 <prvInsertTimerInActiveList>
					break;
 800d5ac:	e017      	b.n	800d5de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d5b4:	f003 0302 	and.w	r3, r3, #2
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d103      	bne.n	800d5c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d5bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5be:	f000 fbeb 	bl	800dd98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d5c2:	e00c      	b.n	800d5de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d5ca:	f023 0301 	bic.w	r3, r3, #1
 800d5ce:	b2da      	uxtb	r2, r3
 800d5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d5d6:	e002      	b.n	800d5de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d5d8:	bf00      	nop
 800d5da:	e000      	b.n	800d5de <prvProcessReceivedCommands+0x1a6>
					break;
 800d5dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d5de:	4b08      	ldr	r3, [pc, #32]	@ (800d600 <prvProcessReceivedCommands+0x1c8>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	1d39      	adds	r1, r7, #4
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7fe fb86 	bl	800bcf8 <xQueueReceive>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	f47f af26 	bne.w	800d440 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d5f4:	bf00      	nop
 800d5f6:	bf00      	nop
 800d5f8:	3730      	adds	r7, #48	@ 0x30
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	20001788 	.word	0x20001788

0800d604 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b088      	sub	sp, #32
 800d608:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d60a:	e049      	b.n	800d6a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d60c:	4b2e      	ldr	r3, [pc, #184]	@ (800d6c8 <prvSwitchTimerLists+0xc4>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	68db      	ldr	r3, [r3, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d616:	4b2c      	ldr	r3, [pc, #176]	@ (800d6c8 <prvSwitchTimerLists+0xc4>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	68db      	ldr	r3, [r3, #12]
 800d61e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	3304      	adds	r3, #4
 800d624:	4618      	mov	r0, r3
 800d626:	f7fe f893 	bl	800b750 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	6a1b      	ldr	r3, [r3, #32]
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d638:	f003 0304 	and.w	r3, r3, #4
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d02f      	beq.n	800d6a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	699b      	ldr	r3, [r3, #24]
 800d644:	693a      	ldr	r2, [r7, #16]
 800d646:	4413      	add	r3, r2
 800d648:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d64a:	68ba      	ldr	r2, [r7, #8]
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d90e      	bls.n	800d670 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	68ba      	ldr	r2, [r7, #8]
 800d656:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	68fa      	ldr	r2, [r7, #12]
 800d65c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d65e:	4b1a      	ldr	r3, [pc, #104]	@ (800d6c8 <prvSwitchTimerLists+0xc4>)
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	3304      	adds	r3, #4
 800d666:	4619      	mov	r1, r3
 800d668:	4610      	mov	r0, r2
 800d66a:	f7fe f838 	bl	800b6de <vListInsert>
 800d66e:	e017      	b.n	800d6a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d670:	2300      	movs	r3, #0
 800d672:	9300      	str	r3, [sp, #0]
 800d674:	2300      	movs	r3, #0
 800d676:	693a      	ldr	r2, [r7, #16]
 800d678:	2100      	movs	r1, #0
 800d67a:	68f8      	ldr	r0, [r7, #12]
 800d67c:	f7ff fd58 	bl	800d130 <xTimerGenericCommand>
 800d680:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d10b      	bne.n	800d6a0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d68c:	f383 8811 	msr	BASEPRI, r3
 800d690:	f3bf 8f6f 	isb	sy
 800d694:	f3bf 8f4f 	dsb	sy
 800d698:	603b      	str	r3, [r7, #0]
}
 800d69a:	bf00      	nop
 800d69c:	bf00      	nop
 800d69e:	e7fd      	b.n	800d69c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d6a0:	4b09      	ldr	r3, [pc, #36]	@ (800d6c8 <prvSwitchTimerLists+0xc4>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1b0      	bne.n	800d60c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d6aa:	4b07      	ldr	r3, [pc, #28]	@ (800d6c8 <prvSwitchTimerLists+0xc4>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d6b0:	4b06      	ldr	r3, [pc, #24]	@ (800d6cc <prvSwitchTimerLists+0xc8>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4a04      	ldr	r2, [pc, #16]	@ (800d6c8 <prvSwitchTimerLists+0xc4>)
 800d6b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d6b8:	4a04      	ldr	r2, [pc, #16]	@ (800d6cc <prvSwitchTimerLists+0xc8>)
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	6013      	str	r3, [r2, #0]
}
 800d6be:	bf00      	nop
 800d6c0:	3718      	adds	r7, #24
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	20001780 	.word	0x20001780
 800d6cc:	20001784 	.word	0x20001784

0800d6d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d6d6:	f000 f96f 	bl	800d9b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d6da:	4b15      	ldr	r3, [pc, #84]	@ (800d730 <prvCheckForValidListAndQueue+0x60>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d120      	bne.n	800d724 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d6e2:	4814      	ldr	r0, [pc, #80]	@ (800d734 <prvCheckForValidListAndQueue+0x64>)
 800d6e4:	f7fd ffaa 	bl	800b63c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d6e8:	4813      	ldr	r0, [pc, #76]	@ (800d738 <prvCheckForValidListAndQueue+0x68>)
 800d6ea:	f7fd ffa7 	bl	800b63c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d6ee:	4b13      	ldr	r3, [pc, #76]	@ (800d73c <prvCheckForValidListAndQueue+0x6c>)
 800d6f0:	4a10      	ldr	r2, [pc, #64]	@ (800d734 <prvCheckForValidListAndQueue+0x64>)
 800d6f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d6f4:	4b12      	ldr	r3, [pc, #72]	@ (800d740 <prvCheckForValidListAndQueue+0x70>)
 800d6f6:	4a10      	ldr	r2, [pc, #64]	@ (800d738 <prvCheckForValidListAndQueue+0x68>)
 800d6f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	9300      	str	r3, [sp, #0]
 800d6fe:	4b11      	ldr	r3, [pc, #68]	@ (800d744 <prvCheckForValidListAndQueue+0x74>)
 800d700:	4a11      	ldr	r2, [pc, #68]	@ (800d748 <prvCheckForValidListAndQueue+0x78>)
 800d702:	2110      	movs	r1, #16
 800d704:	200a      	movs	r0, #10
 800d706:	f7fe f8b7 	bl	800b878 <xQueueGenericCreateStatic>
 800d70a:	4603      	mov	r3, r0
 800d70c:	4a08      	ldr	r2, [pc, #32]	@ (800d730 <prvCheckForValidListAndQueue+0x60>)
 800d70e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d710:	4b07      	ldr	r3, [pc, #28]	@ (800d730 <prvCheckForValidListAndQueue+0x60>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d005      	beq.n	800d724 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d718:	4b05      	ldr	r3, [pc, #20]	@ (800d730 <prvCheckForValidListAndQueue+0x60>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	490b      	ldr	r1, [pc, #44]	@ (800d74c <prvCheckForValidListAndQueue+0x7c>)
 800d71e:	4618      	mov	r0, r3
 800d720:	f7fe fcdc 	bl	800c0dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d724:	f000 f97a 	bl	800da1c <vPortExitCritical>
}
 800d728:	bf00      	nop
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	20001788 	.word	0x20001788
 800d734:	20001758 	.word	0x20001758
 800d738:	2000176c 	.word	0x2000176c
 800d73c:	20001780 	.word	0x20001780
 800d740:	20001784 	.word	0x20001784
 800d744:	20001834 	.word	0x20001834
 800d748:	20001794 	.word	0x20001794
 800d74c:	08010f00 	.word	0x08010f00

0800d750 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d750:	b480      	push	{r7}
 800d752:	b085      	sub	sp, #20
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	60b9      	str	r1, [r7, #8]
 800d75a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	3b04      	subs	r3, #4
 800d760:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	3b04      	subs	r3, #4
 800d76e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	f023 0201 	bic.w	r2, r3, #1
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	3b04      	subs	r3, #4
 800d77e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d780:	4a0c      	ldr	r2, [pc, #48]	@ (800d7b4 <pxPortInitialiseStack+0x64>)
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	3b14      	subs	r3, #20
 800d78a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	3b04      	subs	r3, #4
 800d796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f06f 0202 	mvn.w	r2, #2
 800d79e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	3b20      	subs	r3, #32
 800d7a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3714      	adds	r7, #20
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr
 800d7b4:	0800d7b9 	.word	0x0800d7b9

0800d7b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b085      	sub	sp, #20
 800d7bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d7c2:	4b13      	ldr	r3, [pc, #76]	@ (800d810 <prvTaskExitError+0x58>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ca:	d00b      	beq.n	800d7e4 <prvTaskExitError+0x2c>
	__asm volatile
 800d7cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d0:	f383 8811 	msr	BASEPRI, r3
 800d7d4:	f3bf 8f6f 	isb	sy
 800d7d8:	f3bf 8f4f 	dsb	sy
 800d7dc:	60fb      	str	r3, [r7, #12]
}
 800d7de:	bf00      	nop
 800d7e0:	bf00      	nop
 800d7e2:	e7fd      	b.n	800d7e0 <prvTaskExitError+0x28>
	__asm volatile
 800d7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7e8:	f383 8811 	msr	BASEPRI, r3
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	60bb      	str	r3, [r7, #8]
}
 800d7f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d7f8:	bf00      	nop
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d0fc      	beq.n	800d7fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d800:	bf00      	nop
 800d802:	bf00      	nop
 800d804:	3714      	adds	r7, #20
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr
 800d80e:	bf00      	nop
 800d810:	20000154 	.word	0x20000154
	...

0800d820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d820:	4b07      	ldr	r3, [pc, #28]	@ (800d840 <pxCurrentTCBConst2>)
 800d822:	6819      	ldr	r1, [r3, #0]
 800d824:	6808      	ldr	r0, [r1, #0]
 800d826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82a:	f380 8809 	msr	PSP, r0
 800d82e:	f3bf 8f6f 	isb	sy
 800d832:	f04f 0000 	mov.w	r0, #0
 800d836:	f380 8811 	msr	BASEPRI, r0
 800d83a:	4770      	bx	lr
 800d83c:	f3af 8000 	nop.w

0800d840 <pxCurrentTCBConst2>:
 800d840:	20001258 	.word	0x20001258
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d844:	bf00      	nop
 800d846:	bf00      	nop

0800d848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d848:	4808      	ldr	r0, [pc, #32]	@ (800d86c <prvPortStartFirstTask+0x24>)
 800d84a:	6800      	ldr	r0, [r0, #0]
 800d84c:	6800      	ldr	r0, [r0, #0]
 800d84e:	f380 8808 	msr	MSP, r0
 800d852:	f04f 0000 	mov.w	r0, #0
 800d856:	f380 8814 	msr	CONTROL, r0
 800d85a:	b662      	cpsie	i
 800d85c:	b661      	cpsie	f
 800d85e:	f3bf 8f4f 	dsb	sy
 800d862:	f3bf 8f6f 	isb	sy
 800d866:	df00      	svc	0
 800d868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d86a:	bf00      	nop
 800d86c:	e000ed08 	.word	0xe000ed08

0800d870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b086      	sub	sp, #24
 800d874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d876:	4b47      	ldr	r3, [pc, #284]	@ (800d994 <xPortStartScheduler+0x124>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4a47      	ldr	r2, [pc, #284]	@ (800d998 <xPortStartScheduler+0x128>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d10b      	bne.n	800d898 <xPortStartScheduler+0x28>
	__asm volatile
 800d880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d884:	f383 8811 	msr	BASEPRI, r3
 800d888:	f3bf 8f6f 	isb	sy
 800d88c:	f3bf 8f4f 	dsb	sy
 800d890:	613b      	str	r3, [r7, #16]
}
 800d892:	bf00      	nop
 800d894:	bf00      	nop
 800d896:	e7fd      	b.n	800d894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d898:	4b3e      	ldr	r3, [pc, #248]	@ (800d994 <xPortStartScheduler+0x124>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a3f      	ldr	r2, [pc, #252]	@ (800d99c <xPortStartScheduler+0x12c>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d10b      	bne.n	800d8ba <xPortStartScheduler+0x4a>
	__asm volatile
 800d8a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a6:	f383 8811 	msr	BASEPRI, r3
 800d8aa:	f3bf 8f6f 	isb	sy
 800d8ae:	f3bf 8f4f 	dsb	sy
 800d8b2:	60fb      	str	r3, [r7, #12]
}
 800d8b4:	bf00      	nop
 800d8b6:	bf00      	nop
 800d8b8:	e7fd      	b.n	800d8b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d8ba:	4b39      	ldr	r3, [pc, #228]	@ (800d9a0 <xPortStartScheduler+0x130>)
 800d8bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	22ff      	movs	r2, #255	@ 0xff
 800d8ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d8d4:	78fb      	ldrb	r3, [r7, #3]
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d8dc:	b2da      	uxtb	r2, r3
 800d8de:	4b31      	ldr	r3, [pc, #196]	@ (800d9a4 <xPortStartScheduler+0x134>)
 800d8e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d8e2:	4b31      	ldr	r3, [pc, #196]	@ (800d9a8 <xPortStartScheduler+0x138>)
 800d8e4:	2207      	movs	r2, #7
 800d8e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8e8:	e009      	b.n	800d8fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d8ea:	4b2f      	ldr	r3, [pc, #188]	@ (800d9a8 <xPortStartScheduler+0x138>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	3b01      	subs	r3, #1
 800d8f0:	4a2d      	ldr	r2, [pc, #180]	@ (800d9a8 <xPortStartScheduler+0x138>)
 800d8f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d8f4:	78fb      	ldrb	r3, [r7, #3]
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	005b      	lsls	r3, r3, #1
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8fe:	78fb      	ldrb	r3, [r7, #3]
 800d900:	b2db      	uxtb	r3, r3
 800d902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d906:	2b80      	cmp	r3, #128	@ 0x80
 800d908:	d0ef      	beq.n	800d8ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d90a:	4b27      	ldr	r3, [pc, #156]	@ (800d9a8 <xPortStartScheduler+0x138>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f1c3 0307 	rsb	r3, r3, #7
 800d912:	2b04      	cmp	r3, #4
 800d914:	d00b      	beq.n	800d92e <xPortStartScheduler+0xbe>
	__asm volatile
 800d916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d91a:	f383 8811 	msr	BASEPRI, r3
 800d91e:	f3bf 8f6f 	isb	sy
 800d922:	f3bf 8f4f 	dsb	sy
 800d926:	60bb      	str	r3, [r7, #8]
}
 800d928:	bf00      	nop
 800d92a:	bf00      	nop
 800d92c:	e7fd      	b.n	800d92a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d92e:	4b1e      	ldr	r3, [pc, #120]	@ (800d9a8 <xPortStartScheduler+0x138>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	021b      	lsls	r3, r3, #8
 800d934:	4a1c      	ldr	r2, [pc, #112]	@ (800d9a8 <xPortStartScheduler+0x138>)
 800d936:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d938:	4b1b      	ldr	r3, [pc, #108]	@ (800d9a8 <xPortStartScheduler+0x138>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d940:	4a19      	ldr	r2, [pc, #100]	@ (800d9a8 <xPortStartScheduler+0x138>)
 800d942:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	b2da      	uxtb	r2, r3
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d94c:	4b17      	ldr	r3, [pc, #92]	@ (800d9ac <xPortStartScheduler+0x13c>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a16      	ldr	r2, [pc, #88]	@ (800d9ac <xPortStartScheduler+0x13c>)
 800d952:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d956:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d958:	4b14      	ldr	r3, [pc, #80]	@ (800d9ac <xPortStartScheduler+0x13c>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4a13      	ldr	r2, [pc, #76]	@ (800d9ac <xPortStartScheduler+0x13c>)
 800d95e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d962:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d964:	f000 f8da 	bl	800db1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d968:	4b11      	ldr	r3, [pc, #68]	@ (800d9b0 <xPortStartScheduler+0x140>)
 800d96a:	2200      	movs	r2, #0
 800d96c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d96e:	f000 f8f9 	bl	800db64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d972:	4b10      	ldr	r3, [pc, #64]	@ (800d9b4 <xPortStartScheduler+0x144>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4a0f      	ldr	r2, [pc, #60]	@ (800d9b4 <xPortStartScheduler+0x144>)
 800d978:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d97c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d97e:	f7ff ff63 	bl	800d848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d982:	f7ff f839 	bl	800c9f8 <vTaskSwitchContext>
	prvTaskExitError();
 800d986:	f7ff ff17 	bl	800d7b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d98a:	2300      	movs	r3, #0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3718      	adds	r7, #24
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}
 800d994:	e000ed00 	.word	0xe000ed00
 800d998:	410fc271 	.word	0x410fc271
 800d99c:	410fc270 	.word	0x410fc270
 800d9a0:	e000e400 	.word	0xe000e400
 800d9a4:	20001884 	.word	0x20001884
 800d9a8:	20001888 	.word	0x20001888
 800d9ac:	e000ed20 	.word	0xe000ed20
 800d9b0:	20000154 	.word	0x20000154
 800d9b4:	e000ef34 	.word	0xe000ef34

0800d9b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b083      	sub	sp, #12
 800d9bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9c2:	f383 8811 	msr	BASEPRI, r3
 800d9c6:	f3bf 8f6f 	isb	sy
 800d9ca:	f3bf 8f4f 	dsb	sy
 800d9ce:	607b      	str	r3, [r7, #4]
}
 800d9d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d9d2:	4b10      	ldr	r3, [pc, #64]	@ (800da14 <vPortEnterCritical+0x5c>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	4a0e      	ldr	r2, [pc, #56]	@ (800da14 <vPortEnterCritical+0x5c>)
 800d9da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d9dc:	4b0d      	ldr	r3, [pc, #52]	@ (800da14 <vPortEnterCritical+0x5c>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d110      	bne.n	800da06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d9e4:	4b0c      	ldr	r3, [pc, #48]	@ (800da18 <vPortEnterCritical+0x60>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d00b      	beq.n	800da06 <vPortEnterCritical+0x4e>
	__asm volatile
 800d9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9f2:	f383 8811 	msr	BASEPRI, r3
 800d9f6:	f3bf 8f6f 	isb	sy
 800d9fa:	f3bf 8f4f 	dsb	sy
 800d9fe:	603b      	str	r3, [r7, #0]
}
 800da00:	bf00      	nop
 800da02:	bf00      	nop
 800da04:	e7fd      	b.n	800da02 <vPortEnterCritical+0x4a>
	}
}
 800da06:	bf00      	nop
 800da08:	370c      	adds	r7, #12
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	20000154 	.word	0x20000154
 800da18:	e000ed04 	.word	0xe000ed04

0800da1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800da22:	4b12      	ldr	r3, [pc, #72]	@ (800da6c <vPortExitCritical+0x50>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d10b      	bne.n	800da42 <vPortExitCritical+0x26>
	__asm volatile
 800da2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da2e:	f383 8811 	msr	BASEPRI, r3
 800da32:	f3bf 8f6f 	isb	sy
 800da36:	f3bf 8f4f 	dsb	sy
 800da3a:	607b      	str	r3, [r7, #4]
}
 800da3c:	bf00      	nop
 800da3e:	bf00      	nop
 800da40:	e7fd      	b.n	800da3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800da42:	4b0a      	ldr	r3, [pc, #40]	@ (800da6c <vPortExitCritical+0x50>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	3b01      	subs	r3, #1
 800da48:	4a08      	ldr	r2, [pc, #32]	@ (800da6c <vPortExitCritical+0x50>)
 800da4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800da4c:	4b07      	ldr	r3, [pc, #28]	@ (800da6c <vPortExitCritical+0x50>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d105      	bne.n	800da60 <vPortExitCritical+0x44>
 800da54:	2300      	movs	r3, #0
 800da56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	f383 8811 	msr	BASEPRI, r3
}
 800da5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800da60:	bf00      	nop
 800da62:	370c      	adds	r7, #12
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr
 800da6c:	20000154 	.word	0x20000154

0800da70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800da70:	f3ef 8009 	mrs	r0, PSP
 800da74:	f3bf 8f6f 	isb	sy
 800da78:	4b15      	ldr	r3, [pc, #84]	@ (800dad0 <pxCurrentTCBConst>)
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	f01e 0f10 	tst.w	lr, #16
 800da80:	bf08      	it	eq
 800da82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800da86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da8a:	6010      	str	r0, [r2, #0]
 800da8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800da90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800da94:	f380 8811 	msr	BASEPRI, r0
 800da98:	f3bf 8f4f 	dsb	sy
 800da9c:	f3bf 8f6f 	isb	sy
 800daa0:	f7fe ffaa 	bl	800c9f8 <vTaskSwitchContext>
 800daa4:	f04f 0000 	mov.w	r0, #0
 800daa8:	f380 8811 	msr	BASEPRI, r0
 800daac:	bc09      	pop	{r0, r3}
 800daae:	6819      	ldr	r1, [r3, #0]
 800dab0:	6808      	ldr	r0, [r1, #0]
 800dab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab6:	f01e 0f10 	tst.w	lr, #16
 800daba:	bf08      	it	eq
 800dabc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dac0:	f380 8809 	msr	PSP, r0
 800dac4:	f3bf 8f6f 	isb	sy
 800dac8:	4770      	bx	lr
 800daca:	bf00      	nop
 800dacc:	f3af 8000 	nop.w

0800dad0 <pxCurrentTCBConst>:
 800dad0:	20001258 	.word	0x20001258
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dad4:	bf00      	nop
 800dad6:	bf00      	nop

0800dad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
	__asm volatile
 800dade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dae2:	f383 8811 	msr	BASEPRI, r3
 800dae6:	f3bf 8f6f 	isb	sy
 800daea:	f3bf 8f4f 	dsb	sy
 800daee:	607b      	str	r3, [r7, #4]
}
 800daf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800daf2:	f7fe fec7 	bl	800c884 <xTaskIncrementTick>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d003      	beq.n	800db04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dafc:	4b06      	ldr	r3, [pc, #24]	@ (800db18 <xPortSysTickHandler+0x40>)
 800dafe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db02:	601a      	str	r2, [r3, #0]
 800db04:	2300      	movs	r3, #0
 800db06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	f383 8811 	msr	BASEPRI, r3
}
 800db0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800db10:	bf00      	nop
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	e000ed04 	.word	0xe000ed04

0800db1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800db1c:	b480      	push	{r7}
 800db1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800db20:	4b0b      	ldr	r3, [pc, #44]	@ (800db50 <vPortSetupTimerInterrupt+0x34>)
 800db22:	2200      	movs	r2, #0
 800db24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800db26:	4b0b      	ldr	r3, [pc, #44]	@ (800db54 <vPortSetupTimerInterrupt+0x38>)
 800db28:	2200      	movs	r2, #0
 800db2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800db2c:	4b0a      	ldr	r3, [pc, #40]	@ (800db58 <vPortSetupTimerInterrupt+0x3c>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4a0a      	ldr	r2, [pc, #40]	@ (800db5c <vPortSetupTimerInterrupt+0x40>)
 800db32:	fba2 2303 	umull	r2, r3, r2, r3
 800db36:	099b      	lsrs	r3, r3, #6
 800db38:	4a09      	ldr	r2, [pc, #36]	@ (800db60 <vPortSetupTimerInterrupt+0x44>)
 800db3a:	3b01      	subs	r3, #1
 800db3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800db3e:	4b04      	ldr	r3, [pc, #16]	@ (800db50 <vPortSetupTimerInterrupt+0x34>)
 800db40:	2207      	movs	r2, #7
 800db42:	601a      	str	r2, [r3, #0]
}
 800db44:	bf00      	nop
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr
 800db4e:	bf00      	nop
 800db50:	e000e010 	.word	0xe000e010
 800db54:	e000e018 	.word	0xe000e018
 800db58:	20000148 	.word	0x20000148
 800db5c:	10624dd3 	.word	0x10624dd3
 800db60:	e000e014 	.word	0xe000e014

0800db64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800db64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800db74 <vPortEnableVFP+0x10>
 800db68:	6801      	ldr	r1, [r0, #0]
 800db6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800db6e:	6001      	str	r1, [r0, #0]
 800db70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800db72:	bf00      	nop
 800db74:	e000ed88 	.word	0xe000ed88

0800db78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800db78:	b480      	push	{r7}
 800db7a:	b085      	sub	sp, #20
 800db7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800db7e:	f3ef 8305 	mrs	r3, IPSR
 800db82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2b0f      	cmp	r3, #15
 800db88:	d915      	bls.n	800dbb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800db8a:	4a18      	ldr	r2, [pc, #96]	@ (800dbec <vPortValidateInterruptPriority+0x74>)
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	4413      	add	r3, r2
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800db94:	4b16      	ldr	r3, [pc, #88]	@ (800dbf0 <vPortValidateInterruptPriority+0x78>)
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	7afa      	ldrb	r2, [r7, #11]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d20b      	bcs.n	800dbb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800db9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dba2:	f383 8811 	msr	BASEPRI, r3
 800dba6:	f3bf 8f6f 	isb	sy
 800dbaa:	f3bf 8f4f 	dsb	sy
 800dbae:	607b      	str	r3, [r7, #4]
}
 800dbb0:	bf00      	nop
 800dbb2:	bf00      	nop
 800dbb4:	e7fd      	b.n	800dbb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dbb6:	4b0f      	ldr	r3, [pc, #60]	@ (800dbf4 <vPortValidateInterruptPriority+0x7c>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800dbbe:	4b0e      	ldr	r3, [pc, #56]	@ (800dbf8 <vPortValidateInterruptPriority+0x80>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d90b      	bls.n	800dbde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800dbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbca:	f383 8811 	msr	BASEPRI, r3
 800dbce:	f3bf 8f6f 	isb	sy
 800dbd2:	f3bf 8f4f 	dsb	sy
 800dbd6:	603b      	str	r3, [r7, #0]
}
 800dbd8:	bf00      	nop
 800dbda:	bf00      	nop
 800dbdc:	e7fd      	b.n	800dbda <vPortValidateInterruptPriority+0x62>
	}
 800dbde:	bf00      	nop
 800dbe0:	3714      	adds	r7, #20
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop
 800dbec:	e000e3f0 	.word	0xe000e3f0
 800dbf0:	20001884 	.word	0x20001884
 800dbf4:	e000ed0c 	.word	0xe000ed0c
 800dbf8:	20001888 	.word	0x20001888

0800dbfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b08a      	sub	sp, #40	@ 0x28
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dc04:	2300      	movs	r3, #0
 800dc06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dc08:	f7fe fd80 	bl	800c70c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dc0c:	4b5c      	ldr	r3, [pc, #368]	@ (800dd80 <pvPortMalloc+0x184>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d101      	bne.n	800dc18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dc14:	f000 f924 	bl	800de60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dc18:	4b5a      	ldr	r3, [pc, #360]	@ (800dd84 <pvPortMalloc+0x188>)
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	4013      	ands	r3, r2
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	f040 8095 	bne.w	800dd50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d01e      	beq.n	800dc6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800dc2c:	2208      	movs	r2, #8
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	4413      	add	r3, r2
 800dc32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f003 0307 	and.w	r3, r3, #7
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d015      	beq.n	800dc6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f023 0307 	bic.w	r3, r3, #7
 800dc44:	3308      	adds	r3, #8
 800dc46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f003 0307 	and.w	r3, r3, #7
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00b      	beq.n	800dc6a <pvPortMalloc+0x6e>
	__asm volatile
 800dc52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc56:	f383 8811 	msr	BASEPRI, r3
 800dc5a:	f3bf 8f6f 	isb	sy
 800dc5e:	f3bf 8f4f 	dsb	sy
 800dc62:	617b      	str	r3, [r7, #20]
}
 800dc64:	bf00      	nop
 800dc66:	bf00      	nop
 800dc68:	e7fd      	b.n	800dc66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d06f      	beq.n	800dd50 <pvPortMalloc+0x154>
 800dc70:	4b45      	ldr	r3, [pc, #276]	@ (800dd88 <pvPortMalloc+0x18c>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	687a      	ldr	r2, [r7, #4]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d86a      	bhi.n	800dd50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dc7a:	4b44      	ldr	r3, [pc, #272]	@ (800dd8c <pvPortMalloc+0x190>)
 800dc7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dc7e:	4b43      	ldr	r3, [pc, #268]	@ (800dd8c <pvPortMalloc+0x190>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc84:	e004      	b.n	800dc90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800dc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dc8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d903      	bls.n	800dca2 <pvPortMalloc+0xa6>
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d1f1      	bne.n	800dc86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dca2:	4b37      	ldr	r3, [pc, #220]	@ (800dd80 <pvPortMalloc+0x184>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d051      	beq.n	800dd50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dcac:	6a3b      	ldr	r3, [r7, #32]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	2208      	movs	r2, #8
 800dcb2:	4413      	add	r3, r2
 800dcb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dcb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	6a3b      	ldr	r3, [r7, #32]
 800dcbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dcbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcc0:	685a      	ldr	r2, [r3, #4]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	1ad2      	subs	r2, r2, r3
 800dcc6:	2308      	movs	r3, #8
 800dcc8:	005b      	lsls	r3, r3, #1
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d920      	bls.n	800dd10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dcce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	f003 0307 	and.w	r3, r3, #7
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d00b      	beq.n	800dcf8 <pvPortMalloc+0xfc>
	__asm volatile
 800dce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce4:	f383 8811 	msr	BASEPRI, r3
 800dce8:	f3bf 8f6f 	isb	sy
 800dcec:	f3bf 8f4f 	dsb	sy
 800dcf0:	613b      	str	r3, [r7, #16]
}
 800dcf2:	bf00      	nop
 800dcf4:	bf00      	nop
 800dcf6:	e7fd      	b.n	800dcf4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dcf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcfa:	685a      	ldr	r2, [r3, #4]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	1ad2      	subs	r2, r2, r3
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd06:	687a      	ldr	r2, [r7, #4]
 800dd08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dd0a:	69b8      	ldr	r0, [r7, #24]
 800dd0c:	f000 f90a 	bl	800df24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dd10:	4b1d      	ldr	r3, [pc, #116]	@ (800dd88 <pvPortMalloc+0x18c>)
 800dd12:	681a      	ldr	r2, [r3, #0]
 800dd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	1ad3      	subs	r3, r2, r3
 800dd1a:	4a1b      	ldr	r2, [pc, #108]	@ (800dd88 <pvPortMalloc+0x18c>)
 800dd1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dd1e:	4b1a      	ldr	r3, [pc, #104]	@ (800dd88 <pvPortMalloc+0x18c>)
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	4b1b      	ldr	r3, [pc, #108]	@ (800dd90 <pvPortMalloc+0x194>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d203      	bcs.n	800dd32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dd2a:	4b17      	ldr	r3, [pc, #92]	@ (800dd88 <pvPortMalloc+0x18c>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4a18      	ldr	r2, [pc, #96]	@ (800dd90 <pvPortMalloc+0x194>)
 800dd30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd34:	685a      	ldr	r2, [r3, #4]
 800dd36:	4b13      	ldr	r3, [pc, #76]	@ (800dd84 <pvPortMalloc+0x188>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	431a      	orrs	r2, r3
 800dd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dd40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd42:	2200      	movs	r2, #0
 800dd44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dd46:	4b13      	ldr	r3, [pc, #76]	@ (800dd94 <pvPortMalloc+0x198>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	4a11      	ldr	r2, [pc, #68]	@ (800dd94 <pvPortMalloc+0x198>)
 800dd4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dd50:	f7fe fcea 	bl	800c728 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd54:	69fb      	ldr	r3, [r7, #28]
 800dd56:	f003 0307 	and.w	r3, r3, #7
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d00b      	beq.n	800dd76 <pvPortMalloc+0x17a>
	__asm volatile
 800dd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	f3bf 8f4f 	dsb	sy
 800dd6e:	60fb      	str	r3, [r7, #12]
}
 800dd70:	bf00      	nop
 800dd72:	bf00      	nop
 800dd74:	e7fd      	b.n	800dd72 <pvPortMalloc+0x176>
	return pvReturn;
 800dd76:	69fb      	ldr	r3, [r7, #28]
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3728      	adds	r7, #40	@ 0x28
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	20005494 	.word	0x20005494
 800dd84:	200054a8 	.word	0x200054a8
 800dd88:	20005498 	.word	0x20005498
 800dd8c:	2000548c 	.word	0x2000548c
 800dd90:	2000549c 	.word	0x2000549c
 800dd94:	200054a0 	.word	0x200054a0

0800dd98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b086      	sub	sp, #24
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d04f      	beq.n	800de4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ddaa:	2308      	movs	r3, #8
 800ddac:	425b      	negs	r3, r3
 800ddae:	697a      	ldr	r2, [r7, #20]
 800ddb0:	4413      	add	r3, r2
 800ddb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	685a      	ldr	r2, [r3, #4]
 800ddbc:	4b25      	ldr	r3, [pc, #148]	@ (800de54 <vPortFree+0xbc>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4013      	ands	r3, r2
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d10b      	bne.n	800ddde <vPortFree+0x46>
	__asm volatile
 800ddc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddca:	f383 8811 	msr	BASEPRI, r3
 800ddce:	f3bf 8f6f 	isb	sy
 800ddd2:	f3bf 8f4f 	dsb	sy
 800ddd6:	60fb      	str	r3, [r7, #12]
}
 800ddd8:	bf00      	nop
 800ddda:	bf00      	nop
 800dddc:	e7fd      	b.n	800ddda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d00b      	beq.n	800ddfe <vPortFree+0x66>
	__asm volatile
 800dde6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddea:	f383 8811 	msr	BASEPRI, r3
 800ddee:	f3bf 8f6f 	isb	sy
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	60bb      	str	r3, [r7, #8]
}
 800ddf8:	bf00      	nop
 800ddfa:	bf00      	nop
 800ddfc:	e7fd      	b.n	800ddfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	685a      	ldr	r2, [r3, #4]
 800de02:	4b14      	ldr	r3, [pc, #80]	@ (800de54 <vPortFree+0xbc>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4013      	ands	r3, r2
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d01e      	beq.n	800de4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d11a      	bne.n	800de4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	685a      	ldr	r2, [r3, #4]
 800de18:	4b0e      	ldr	r3, [pc, #56]	@ (800de54 <vPortFree+0xbc>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	43db      	mvns	r3, r3
 800de1e:	401a      	ands	r2, r3
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800de24:	f7fe fc72 	bl	800c70c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	685a      	ldr	r2, [r3, #4]
 800de2c:	4b0a      	ldr	r3, [pc, #40]	@ (800de58 <vPortFree+0xc0>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4413      	add	r3, r2
 800de32:	4a09      	ldr	r2, [pc, #36]	@ (800de58 <vPortFree+0xc0>)
 800de34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800de36:	6938      	ldr	r0, [r7, #16]
 800de38:	f000 f874 	bl	800df24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800de3c:	4b07      	ldr	r3, [pc, #28]	@ (800de5c <vPortFree+0xc4>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	3301      	adds	r3, #1
 800de42:	4a06      	ldr	r2, [pc, #24]	@ (800de5c <vPortFree+0xc4>)
 800de44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800de46:	f7fe fc6f 	bl	800c728 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800de4a:	bf00      	nop
 800de4c:	3718      	adds	r7, #24
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	200054a8 	.word	0x200054a8
 800de58:	20005498 	.word	0x20005498
 800de5c:	200054a4 	.word	0x200054a4

0800de60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800de60:	b480      	push	{r7}
 800de62:	b085      	sub	sp, #20
 800de64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800de66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800de6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800de6c:	4b27      	ldr	r3, [pc, #156]	@ (800df0c <prvHeapInit+0xac>)
 800de6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f003 0307 	and.w	r3, r3, #7
 800de76:	2b00      	cmp	r3, #0
 800de78:	d00c      	beq.n	800de94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	3307      	adds	r3, #7
 800de7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f023 0307 	bic.w	r3, r3, #7
 800de86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800de88:	68ba      	ldr	r2, [r7, #8]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	1ad3      	subs	r3, r2, r3
 800de8e:	4a1f      	ldr	r2, [pc, #124]	@ (800df0c <prvHeapInit+0xac>)
 800de90:	4413      	add	r3, r2
 800de92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800de98:	4a1d      	ldr	r2, [pc, #116]	@ (800df10 <prvHeapInit+0xb0>)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800de9e:	4b1c      	ldr	r3, [pc, #112]	@ (800df10 <prvHeapInit+0xb0>)
 800dea0:	2200      	movs	r2, #0
 800dea2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	68ba      	ldr	r2, [r7, #8]
 800dea8:	4413      	add	r3, r2
 800deaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800deac:	2208      	movs	r2, #8
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	1a9b      	subs	r3, r3, r2
 800deb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f023 0307 	bic.w	r3, r3, #7
 800deba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	4a15      	ldr	r2, [pc, #84]	@ (800df14 <prvHeapInit+0xb4>)
 800dec0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dec2:	4b14      	ldr	r3, [pc, #80]	@ (800df14 <prvHeapInit+0xb4>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2200      	movs	r2, #0
 800dec8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800deca:	4b12      	ldr	r3, [pc, #72]	@ (800df14 <prvHeapInit+0xb4>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2200      	movs	r2, #0
 800ded0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	68fa      	ldr	r2, [r7, #12]
 800deda:	1ad2      	subs	r2, r2, r3
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dee0:	4b0c      	ldr	r3, [pc, #48]	@ (800df14 <prvHeapInit+0xb4>)
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	4a0a      	ldr	r2, [pc, #40]	@ (800df18 <prvHeapInit+0xb8>)
 800deee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	4a09      	ldr	r2, [pc, #36]	@ (800df1c <prvHeapInit+0xbc>)
 800def6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800def8:	4b09      	ldr	r3, [pc, #36]	@ (800df20 <prvHeapInit+0xc0>)
 800defa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800defe:	601a      	str	r2, [r3, #0]
}
 800df00:	bf00      	nop
 800df02:	3714      	adds	r7, #20
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr
 800df0c:	2000188c 	.word	0x2000188c
 800df10:	2000548c 	.word	0x2000548c
 800df14:	20005494 	.word	0x20005494
 800df18:	2000549c 	.word	0x2000549c
 800df1c:	20005498 	.word	0x20005498
 800df20:	200054a8 	.word	0x200054a8

0800df24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800df24:	b480      	push	{r7}
 800df26:	b085      	sub	sp, #20
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800df2c:	4b28      	ldr	r3, [pc, #160]	@ (800dfd0 <prvInsertBlockIntoFreeList+0xac>)
 800df2e:	60fb      	str	r3, [r7, #12]
 800df30:	e002      	b.n	800df38 <prvInsertBlockIntoFreeList+0x14>
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	60fb      	str	r3, [r7, #12]
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	687a      	ldr	r2, [r7, #4]
 800df3e:	429a      	cmp	r2, r3
 800df40:	d8f7      	bhi.n	800df32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	68ba      	ldr	r2, [r7, #8]
 800df4c:	4413      	add	r3, r2
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	429a      	cmp	r2, r3
 800df52:	d108      	bne.n	800df66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	685a      	ldr	r2, [r3, #4]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	441a      	add	r2, r3
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	68ba      	ldr	r2, [r7, #8]
 800df70:	441a      	add	r2, r3
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	429a      	cmp	r2, r3
 800df78:	d118      	bne.n	800dfac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	4b15      	ldr	r3, [pc, #84]	@ (800dfd4 <prvInsertBlockIntoFreeList+0xb0>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	429a      	cmp	r2, r3
 800df84:	d00d      	beq.n	800dfa2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	685a      	ldr	r2, [r3, #4]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	441a      	add	r2, r3
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	601a      	str	r2, [r3, #0]
 800dfa0:	e008      	b.n	800dfb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dfa2:	4b0c      	ldr	r3, [pc, #48]	@ (800dfd4 <prvInsertBlockIntoFreeList+0xb0>)
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	601a      	str	r2, [r3, #0]
 800dfaa:	e003      	b.n	800dfb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681a      	ldr	r2, [r3, #0]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dfb4:	68fa      	ldr	r2, [r7, #12]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d002      	beq.n	800dfc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dfc2:	bf00      	nop
 800dfc4:	3714      	adds	r7, #20
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop
 800dfd0:	2000548c 	.word	0x2000548c
 800dfd4:	20005494 	.word	0x20005494

0800dfd8 <atoi>:
 800dfd8:	220a      	movs	r2, #10
 800dfda:	2100      	movs	r1, #0
 800dfdc:	f000 b87a 	b.w	800e0d4 <strtol>

0800dfe0 <_strtol_l.constprop.0>:
 800dfe0:	2b24      	cmp	r3, #36	@ 0x24
 800dfe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfe6:	4686      	mov	lr, r0
 800dfe8:	4690      	mov	r8, r2
 800dfea:	d801      	bhi.n	800dff0 <_strtol_l.constprop.0+0x10>
 800dfec:	2b01      	cmp	r3, #1
 800dfee:	d106      	bne.n	800dffe <_strtol_l.constprop.0+0x1e>
 800dff0:	f000 fe7e 	bl	800ecf0 <__errno>
 800dff4:	2316      	movs	r3, #22
 800dff6:	6003      	str	r3, [r0, #0]
 800dff8:	2000      	movs	r0, #0
 800dffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dffe:	4834      	ldr	r0, [pc, #208]	@ (800e0d0 <_strtol_l.constprop.0+0xf0>)
 800e000:	460d      	mov	r5, r1
 800e002:	462a      	mov	r2, r5
 800e004:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e008:	5d06      	ldrb	r6, [r0, r4]
 800e00a:	f016 0608 	ands.w	r6, r6, #8
 800e00e:	d1f8      	bne.n	800e002 <_strtol_l.constprop.0+0x22>
 800e010:	2c2d      	cmp	r4, #45	@ 0x2d
 800e012:	d12d      	bne.n	800e070 <_strtol_l.constprop.0+0x90>
 800e014:	782c      	ldrb	r4, [r5, #0]
 800e016:	2601      	movs	r6, #1
 800e018:	1c95      	adds	r5, r2, #2
 800e01a:	f033 0210 	bics.w	r2, r3, #16
 800e01e:	d109      	bne.n	800e034 <_strtol_l.constprop.0+0x54>
 800e020:	2c30      	cmp	r4, #48	@ 0x30
 800e022:	d12a      	bne.n	800e07a <_strtol_l.constprop.0+0x9a>
 800e024:	782a      	ldrb	r2, [r5, #0]
 800e026:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e02a:	2a58      	cmp	r2, #88	@ 0x58
 800e02c:	d125      	bne.n	800e07a <_strtol_l.constprop.0+0x9a>
 800e02e:	786c      	ldrb	r4, [r5, #1]
 800e030:	2310      	movs	r3, #16
 800e032:	3502      	adds	r5, #2
 800e034:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e038:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e03c:	2200      	movs	r2, #0
 800e03e:	fbbc f9f3 	udiv	r9, ip, r3
 800e042:	4610      	mov	r0, r2
 800e044:	fb03 ca19 	mls	sl, r3, r9, ip
 800e048:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e04c:	2f09      	cmp	r7, #9
 800e04e:	d81b      	bhi.n	800e088 <_strtol_l.constprop.0+0xa8>
 800e050:	463c      	mov	r4, r7
 800e052:	42a3      	cmp	r3, r4
 800e054:	dd27      	ble.n	800e0a6 <_strtol_l.constprop.0+0xc6>
 800e056:	1c57      	adds	r7, r2, #1
 800e058:	d007      	beq.n	800e06a <_strtol_l.constprop.0+0x8a>
 800e05a:	4581      	cmp	r9, r0
 800e05c:	d320      	bcc.n	800e0a0 <_strtol_l.constprop.0+0xc0>
 800e05e:	d101      	bne.n	800e064 <_strtol_l.constprop.0+0x84>
 800e060:	45a2      	cmp	sl, r4
 800e062:	db1d      	blt.n	800e0a0 <_strtol_l.constprop.0+0xc0>
 800e064:	fb00 4003 	mla	r0, r0, r3, r4
 800e068:	2201      	movs	r2, #1
 800e06a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e06e:	e7eb      	b.n	800e048 <_strtol_l.constprop.0+0x68>
 800e070:	2c2b      	cmp	r4, #43	@ 0x2b
 800e072:	bf04      	itt	eq
 800e074:	782c      	ldrbeq	r4, [r5, #0]
 800e076:	1c95      	addeq	r5, r2, #2
 800e078:	e7cf      	b.n	800e01a <_strtol_l.constprop.0+0x3a>
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d1da      	bne.n	800e034 <_strtol_l.constprop.0+0x54>
 800e07e:	2c30      	cmp	r4, #48	@ 0x30
 800e080:	bf0c      	ite	eq
 800e082:	2308      	moveq	r3, #8
 800e084:	230a      	movne	r3, #10
 800e086:	e7d5      	b.n	800e034 <_strtol_l.constprop.0+0x54>
 800e088:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e08c:	2f19      	cmp	r7, #25
 800e08e:	d801      	bhi.n	800e094 <_strtol_l.constprop.0+0xb4>
 800e090:	3c37      	subs	r4, #55	@ 0x37
 800e092:	e7de      	b.n	800e052 <_strtol_l.constprop.0+0x72>
 800e094:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e098:	2f19      	cmp	r7, #25
 800e09a:	d804      	bhi.n	800e0a6 <_strtol_l.constprop.0+0xc6>
 800e09c:	3c57      	subs	r4, #87	@ 0x57
 800e09e:	e7d8      	b.n	800e052 <_strtol_l.constprop.0+0x72>
 800e0a0:	f04f 32ff 	mov.w	r2, #4294967295
 800e0a4:	e7e1      	b.n	800e06a <_strtol_l.constprop.0+0x8a>
 800e0a6:	1c53      	adds	r3, r2, #1
 800e0a8:	d108      	bne.n	800e0bc <_strtol_l.constprop.0+0xdc>
 800e0aa:	2322      	movs	r3, #34	@ 0x22
 800e0ac:	f8ce 3000 	str.w	r3, [lr]
 800e0b0:	4660      	mov	r0, ip
 800e0b2:	f1b8 0f00 	cmp.w	r8, #0
 800e0b6:	d0a0      	beq.n	800dffa <_strtol_l.constprop.0+0x1a>
 800e0b8:	1e69      	subs	r1, r5, #1
 800e0ba:	e006      	b.n	800e0ca <_strtol_l.constprop.0+0xea>
 800e0bc:	b106      	cbz	r6, 800e0c0 <_strtol_l.constprop.0+0xe0>
 800e0be:	4240      	negs	r0, r0
 800e0c0:	f1b8 0f00 	cmp.w	r8, #0
 800e0c4:	d099      	beq.n	800dffa <_strtol_l.constprop.0+0x1a>
 800e0c6:	2a00      	cmp	r2, #0
 800e0c8:	d1f6      	bne.n	800e0b8 <_strtol_l.constprop.0+0xd8>
 800e0ca:	f8c8 1000 	str.w	r1, [r8]
 800e0ce:	e794      	b.n	800dffa <_strtol_l.constprop.0+0x1a>
 800e0d0:	0801113d 	.word	0x0801113d

0800e0d4 <strtol>:
 800e0d4:	4613      	mov	r3, r2
 800e0d6:	460a      	mov	r2, r1
 800e0d8:	4601      	mov	r1, r0
 800e0da:	4802      	ldr	r0, [pc, #8]	@ (800e0e4 <strtol+0x10>)
 800e0dc:	6800      	ldr	r0, [r0, #0]
 800e0de:	f7ff bf7f 	b.w	800dfe0 <_strtol_l.constprop.0>
 800e0e2:	bf00      	nop
 800e0e4:	20000164 	.word	0x20000164

0800e0e8 <__cvt>:
 800e0e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0ec:	ec57 6b10 	vmov	r6, r7, d0
 800e0f0:	2f00      	cmp	r7, #0
 800e0f2:	460c      	mov	r4, r1
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	463b      	mov	r3, r7
 800e0f8:	bfbb      	ittet	lt
 800e0fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e0fe:	461f      	movlt	r7, r3
 800e100:	2300      	movge	r3, #0
 800e102:	232d      	movlt	r3, #45	@ 0x2d
 800e104:	700b      	strb	r3, [r1, #0]
 800e106:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e108:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e10c:	4691      	mov	r9, r2
 800e10e:	f023 0820 	bic.w	r8, r3, #32
 800e112:	bfbc      	itt	lt
 800e114:	4632      	movlt	r2, r6
 800e116:	4616      	movlt	r6, r2
 800e118:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e11c:	d005      	beq.n	800e12a <__cvt+0x42>
 800e11e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e122:	d100      	bne.n	800e126 <__cvt+0x3e>
 800e124:	3401      	adds	r4, #1
 800e126:	2102      	movs	r1, #2
 800e128:	e000      	b.n	800e12c <__cvt+0x44>
 800e12a:	2103      	movs	r1, #3
 800e12c:	ab03      	add	r3, sp, #12
 800e12e:	9301      	str	r3, [sp, #4]
 800e130:	ab02      	add	r3, sp, #8
 800e132:	9300      	str	r3, [sp, #0]
 800e134:	ec47 6b10 	vmov	d0, r6, r7
 800e138:	4653      	mov	r3, sl
 800e13a:	4622      	mov	r2, r4
 800e13c:	f000 fe9c 	bl	800ee78 <_dtoa_r>
 800e140:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e144:	4605      	mov	r5, r0
 800e146:	d119      	bne.n	800e17c <__cvt+0x94>
 800e148:	f019 0f01 	tst.w	r9, #1
 800e14c:	d00e      	beq.n	800e16c <__cvt+0x84>
 800e14e:	eb00 0904 	add.w	r9, r0, r4
 800e152:	2200      	movs	r2, #0
 800e154:	2300      	movs	r3, #0
 800e156:	4630      	mov	r0, r6
 800e158:	4639      	mov	r1, r7
 800e15a:	f7f2 fcb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e15e:	b108      	cbz	r0, 800e164 <__cvt+0x7c>
 800e160:	f8cd 900c 	str.w	r9, [sp, #12]
 800e164:	2230      	movs	r2, #48	@ 0x30
 800e166:	9b03      	ldr	r3, [sp, #12]
 800e168:	454b      	cmp	r3, r9
 800e16a:	d31e      	bcc.n	800e1aa <__cvt+0xc2>
 800e16c:	9b03      	ldr	r3, [sp, #12]
 800e16e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e170:	1b5b      	subs	r3, r3, r5
 800e172:	4628      	mov	r0, r5
 800e174:	6013      	str	r3, [r2, #0]
 800e176:	b004      	add	sp, #16
 800e178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e17c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e180:	eb00 0904 	add.w	r9, r0, r4
 800e184:	d1e5      	bne.n	800e152 <__cvt+0x6a>
 800e186:	7803      	ldrb	r3, [r0, #0]
 800e188:	2b30      	cmp	r3, #48	@ 0x30
 800e18a:	d10a      	bne.n	800e1a2 <__cvt+0xba>
 800e18c:	2200      	movs	r2, #0
 800e18e:	2300      	movs	r3, #0
 800e190:	4630      	mov	r0, r6
 800e192:	4639      	mov	r1, r7
 800e194:	f7f2 fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 800e198:	b918      	cbnz	r0, 800e1a2 <__cvt+0xba>
 800e19a:	f1c4 0401 	rsb	r4, r4, #1
 800e19e:	f8ca 4000 	str.w	r4, [sl]
 800e1a2:	f8da 3000 	ldr.w	r3, [sl]
 800e1a6:	4499      	add	r9, r3
 800e1a8:	e7d3      	b.n	800e152 <__cvt+0x6a>
 800e1aa:	1c59      	adds	r1, r3, #1
 800e1ac:	9103      	str	r1, [sp, #12]
 800e1ae:	701a      	strb	r2, [r3, #0]
 800e1b0:	e7d9      	b.n	800e166 <__cvt+0x7e>

0800e1b2 <__exponent>:
 800e1b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1b4:	2900      	cmp	r1, #0
 800e1b6:	bfba      	itte	lt
 800e1b8:	4249      	neglt	r1, r1
 800e1ba:	232d      	movlt	r3, #45	@ 0x2d
 800e1bc:	232b      	movge	r3, #43	@ 0x2b
 800e1be:	2909      	cmp	r1, #9
 800e1c0:	7002      	strb	r2, [r0, #0]
 800e1c2:	7043      	strb	r3, [r0, #1]
 800e1c4:	dd29      	ble.n	800e21a <__exponent+0x68>
 800e1c6:	f10d 0307 	add.w	r3, sp, #7
 800e1ca:	461d      	mov	r5, r3
 800e1cc:	270a      	movs	r7, #10
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	fbb1 f6f7 	udiv	r6, r1, r7
 800e1d4:	fb07 1416 	mls	r4, r7, r6, r1
 800e1d8:	3430      	adds	r4, #48	@ 0x30
 800e1da:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e1de:	460c      	mov	r4, r1
 800e1e0:	2c63      	cmp	r4, #99	@ 0x63
 800e1e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e1e6:	4631      	mov	r1, r6
 800e1e8:	dcf1      	bgt.n	800e1ce <__exponent+0x1c>
 800e1ea:	3130      	adds	r1, #48	@ 0x30
 800e1ec:	1e94      	subs	r4, r2, #2
 800e1ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e1f2:	1c41      	adds	r1, r0, #1
 800e1f4:	4623      	mov	r3, r4
 800e1f6:	42ab      	cmp	r3, r5
 800e1f8:	d30a      	bcc.n	800e210 <__exponent+0x5e>
 800e1fa:	f10d 0309 	add.w	r3, sp, #9
 800e1fe:	1a9b      	subs	r3, r3, r2
 800e200:	42ac      	cmp	r4, r5
 800e202:	bf88      	it	hi
 800e204:	2300      	movhi	r3, #0
 800e206:	3302      	adds	r3, #2
 800e208:	4403      	add	r3, r0
 800e20a:	1a18      	subs	r0, r3, r0
 800e20c:	b003      	add	sp, #12
 800e20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e210:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e214:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e218:	e7ed      	b.n	800e1f6 <__exponent+0x44>
 800e21a:	2330      	movs	r3, #48	@ 0x30
 800e21c:	3130      	adds	r1, #48	@ 0x30
 800e21e:	7083      	strb	r3, [r0, #2]
 800e220:	70c1      	strb	r1, [r0, #3]
 800e222:	1d03      	adds	r3, r0, #4
 800e224:	e7f1      	b.n	800e20a <__exponent+0x58>
	...

0800e228 <_printf_float>:
 800e228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e22c:	b08d      	sub	sp, #52	@ 0x34
 800e22e:	460c      	mov	r4, r1
 800e230:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e234:	4616      	mov	r6, r2
 800e236:	461f      	mov	r7, r3
 800e238:	4605      	mov	r5, r0
 800e23a:	f000 fd0f 	bl	800ec5c <_localeconv_r>
 800e23e:	6803      	ldr	r3, [r0, #0]
 800e240:	9304      	str	r3, [sp, #16]
 800e242:	4618      	mov	r0, r3
 800e244:	f7f2 f814 	bl	8000270 <strlen>
 800e248:	2300      	movs	r3, #0
 800e24a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e24c:	f8d8 3000 	ldr.w	r3, [r8]
 800e250:	9005      	str	r0, [sp, #20]
 800e252:	3307      	adds	r3, #7
 800e254:	f023 0307 	bic.w	r3, r3, #7
 800e258:	f103 0208 	add.w	r2, r3, #8
 800e25c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e260:	f8d4 b000 	ldr.w	fp, [r4]
 800e264:	f8c8 2000 	str.w	r2, [r8]
 800e268:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e26c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e270:	9307      	str	r3, [sp, #28]
 800e272:	f8cd 8018 	str.w	r8, [sp, #24]
 800e276:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e27a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e27e:	4b9c      	ldr	r3, [pc, #624]	@ (800e4f0 <_printf_float+0x2c8>)
 800e280:	f04f 32ff 	mov.w	r2, #4294967295
 800e284:	f7f2 fc52 	bl	8000b2c <__aeabi_dcmpun>
 800e288:	bb70      	cbnz	r0, 800e2e8 <_printf_float+0xc0>
 800e28a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e28e:	4b98      	ldr	r3, [pc, #608]	@ (800e4f0 <_printf_float+0x2c8>)
 800e290:	f04f 32ff 	mov.w	r2, #4294967295
 800e294:	f7f2 fc2c 	bl	8000af0 <__aeabi_dcmple>
 800e298:	bb30      	cbnz	r0, 800e2e8 <_printf_float+0xc0>
 800e29a:	2200      	movs	r2, #0
 800e29c:	2300      	movs	r3, #0
 800e29e:	4640      	mov	r0, r8
 800e2a0:	4649      	mov	r1, r9
 800e2a2:	f7f2 fc1b 	bl	8000adc <__aeabi_dcmplt>
 800e2a6:	b110      	cbz	r0, 800e2ae <_printf_float+0x86>
 800e2a8:	232d      	movs	r3, #45	@ 0x2d
 800e2aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2ae:	4a91      	ldr	r2, [pc, #580]	@ (800e4f4 <_printf_float+0x2cc>)
 800e2b0:	4b91      	ldr	r3, [pc, #580]	@ (800e4f8 <_printf_float+0x2d0>)
 800e2b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e2b6:	bf94      	ite	ls
 800e2b8:	4690      	movls	r8, r2
 800e2ba:	4698      	movhi	r8, r3
 800e2bc:	2303      	movs	r3, #3
 800e2be:	6123      	str	r3, [r4, #16]
 800e2c0:	f02b 0304 	bic.w	r3, fp, #4
 800e2c4:	6023      	str	r3, [r4, #0]
 800e2c6:	f04f 0900 	mov.w	r9, #0
 800e2ca:	9700      	str	r7, [sp, #0]
 800e2cc:	4633      	mov	r3, r6
 800e2ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e2d0:	4621      	mov	r1, r4
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	f000 f9d2 	bl	800e67c <_printf_common>
 800e2d8:	3001      	adds	r0, #1
 800e2da:	f040 808d 	bne.w	800e3f8 <_printf_float+0x1d0>
 800e2de:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e2:	b00d      	add	sp, #52	@ 0x34
 800e2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e8:	4642      	mov	r2, r8
 800e2ea:	464b      	mov	r3, r9
 800e2ec:	4640      	mov	r0, r8
 800e2ee:	4649      	mov	r1, r9
 800e2f0:	f7f2 fc1c 	bl	8000b2c <__aeabi_dcmpun>
 800e2f4:	b140      	cbz	r0, 800e308 <_printf_float+0xe0>
 800e2f6:	464b      	mov	r3, r9
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	bfbc      	itt	lt
 800e2fc:	232d      	movlt	r3, #45	@ 0x2d
 800e2fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e302:	4a7e      	ldr	r2, [pc, #504]	@ (800e4fc <_printf_float+0x2d4>)
 800e304:	4b7e      	ldr	r3, [pc, #504]	@ (800e500 <_printf_float+0x2d8>)
 800e306:	e7d4      	b.n	800e2b2 <_printf_float+0x8a>
 800e308:	6863      	ldr	r3, [r4, #4]
 800e30a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e30e:	9206      	str	r2, [sp, #24]
 800e310:	1c5a      	adds	r2, r3, #1
 800e312:	d13b      	bne.n	800e38c <_printf_float+0x164>
 800e314:	2306      	movs	r3, #6
 800e316:	6063      	str	r3, [r4, #4]
 800e318:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e31c:	2300      	movs	r3, #0
 800e31e:	6022      	str	r2, [r4, #0]
 800e320:	9303      	str	r3, [sp, #12]
 800e322:	ab0a      	add	r3, sp, #40	@ 0x28
 800e324:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e328:	ab09      	add	r3, sp, #36	@ 0x24
 800e32a:	9300      	str	r3, [sp, #0]
 800e32c:	6861      	ldr	r1, [r4, #4]
 800e32e:	ec49 8b10 	vmov	d0, r8, r9
 800e332:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e336:	4628      	mov	r0, r5
 800e338:	f7ff fed6 	bl	800e0e8 <__cvt>
 800e33c:	9b06      	ldr	r3, [sp, #24]
 800e33e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e340:	2b47      	cmp	r3, #71	@ 0x47
 800e342:	4680      	mov	r8, r0
 800e344:	d129      	bne.n	800e39a <_printf_float+0x172>
 800e346:	1cc8      	adds	r0, r1, #3
 800e348:	db02      	blt.n	800e350 <_printf_float+0x128>
 800e34a:	6863      	ldr	r3, [r4, #4]
 800e34c:	4299      	cmp	r1, r3
 800e34e:	dd41      	ble.n	800e3d4 <_printf_float+0x1ac>
 800e350:	f1aa 0a02 	sub.w	sl, sl, #2
 800e354:	fa5f fa8a 	uxtb.w	sl, sl
 800e358:	3901      	subs	r1, #1
 800e35a:	4652      	mov	r2, sl
 800e35c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e360:	9109      	str	r1, [sp, #36]	@ 0x24
 800e362:	f7ff ff26 	bl	800e1b2 <__exponent>
 800e366:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e368:	1813      	adds	r3, r2, r0
 800e36a:	2a01      	cmp	r2, #1
 800e36c:	4681      	mov	r9, r0
 800e36e:	6123      	str	r3, [r4, #16]
 800e370:	dc02      	bgt.n	800e378 <_printf_float+0x150>
 800e372:	6822      	ldr	r2, [r4, #0]
 800e374:	07d2      	lsls	r2, r2, #31
 800e376:	d501      	bpl.n	800e37c <_printf_float+0x154>
 800e378:	3301      	adds	r3, #1
 800e37a:	6123      	str	r3, [r4, #16]
 800e37c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e380:	2b00      	cmp	r3, #0
 800e382:	d0a2      	beq.n	800e2ca <_printf_float+0xa2>
 800e384:	232d      	movs	r3, #45	@ 0x2d
 800e386:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e38a:	e79e      	b.n	800e2ca <_printf_float+0xa2>
 800e38c:	9a06      	ldr	r2, [sp, #24]
 800e38e:	2a47      	cmp	r2, #71	@ 0x47
 800e390:	d1c2      	bne.n	800e318 <_printf_float+0xf0>
 800e392:	2b00      	cmp	r3, #0
 800e394:	d1c0      	bne.n	800e318 <_printf_float+0xf0>
 800e396:	2301      	movs	r3, #1
 800e398:	e7bd      	b.n	800e316 <_printf_float+0xee>
 800e39a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e39e:	d9db      	bls.n	800e358 <_printf_float+0x130>
 800e3a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e3a4:	d118      	bne.n	800e3d8 <_printf_float+0x1b0>
 800e3a6:	2900      	cmp	r1, #0
 800e3a8:	6863      	ldr	r3, [r4, #4]
 800e3aa:	dd0b      	ble.n	800e3c4 <_printf_float+0x19c>
 800e3ac:	6121      	str	r1, [r4, #16]
 800e3ae:	b913      	cbnz	r3, 800e3b6 <_printf_float+0x18e>
 800e3b0:	6822      	ldr	r2, [r4, #0]
 800e3b2:	07d0      	lsls	r0, r2, #31
 800e3b4:	d502      	bpl.n	800e3bc <_printf_float+0x194>
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	440b      	add	r3, r1
 800e3ba:	6123      	str	r3, [r4, #16]
 800e3bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e3be:	f04f 0900 	mov.w	r9, #0
 800e3c2:	e7db      	b.n	800e37c <_printf_float+0x154>
 800e3c4:	b913      	cbnz	r3, 800e3cc <_printf_float+0x1a4>
 800e3c6:	6822      	ldr	r2, [r4, #0]
 800e3c8:	07d2      	lsls	r2, r2, #31
 800e3ca:	d501      	bpl.n	800e3d0 <_printf_float+0x1a8>
 800e3cc:	3302      	adds	r3, #2
 800e3ce:	e7f4      	b.n	800e3ba <_printf_float+0x192>
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	e7f2      	b.n	800e3ba <_printf_float+0x192>
 800e3d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e3d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3da:	4299      	cmp	r1, r3
 800e3dc:	db05      	blt.n	800e3ea <_printf_float+0x1c2>
 800e3de:	6823      	ldr	r3, [r4, #0]
 800e3e0:	6121      	str	r1, [r4, #16]
 800e3e2:	07d8      	lsls	r0, r3, #31
 800e3e4:	d5ea      	bpl.n	800e3bc <_printf_float+0x194>
 800e3e6:	1c4b      	adds	r3, r1, #1
 800e3e8:	e7e7      	b.n	800e3ba <_printf_float+0x192>
 800e3ea:	2900      	cmp	r1, #0
 800e3ec:	bfd4      	ite	le
 800e3ee:	f1c1 0202 	rsble	r2, r1, #2
 800e3f2:	2201      	movgt	r2, #1
 800e3f4:	4413      	add	r3, r2
 800e3f6:	e7e0      	b.n	800e3ba <_printf_float+0x192>
 800e3f8:	6823      	ldr	r3, [r4, #0]
 800e3fa:	055a      	lsls	r2, r3, #21
 800e3fc:	d407      	bmi.n	800e40e <_printf_float+0x1e6>
 800e3fe:	6923      	ldr	r3, [r4, #16]
 800e400:	4642      	mov	r2, r8
 800e402:	4631      	mov	r1, r6
 800e404:	4628      	mov	r0, r5
 800e406:	47b8      	blx	r7
 800e408:	3001      	adds	r0, #1
 800e40a:	d12b      	bne.n	800e464 <_printf_float+0x23c>
 800e40c:	e767      	b.n	800e2de <_printf_float+0xb6>
 800e40e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e412:	f240 80dd 	bls.w	800e5d0 <_printf_float+0x3a8>
 800e416:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e41a:	2200      	movs	r2, #0
 800e41c:	2300      	movs	r3, #0
 800e41e:	f7f2 fb53 	bl	8000ac8 <__aeabi_dcmpeq>
 800e422:	2800      	cmp	r0, #0
 800e424:	d033      	beq.n	800e48e <_printf_float+0x266>
 800e426:	4a37      	ldr	r2, [pc, #220]	@ (800e504 <_printf_float+0x2dc>)
 800e428:	2301      	movs	r3, #1
 800e42a:	4631      	mov	r1, r6
 800e42c:	4628      	mov	r0, r5
 800e42e:	47b8      	blx	r7
 800e430:	3001      	adds	r0, #1
 800e432:	f43f af54 	beq.w	800e2de <_printf_float+0xb6>
 800e436:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e43a:	4543      	cmp	r3, r8
 800e43c:	db02      	blt.n	800e444 <_printf_float+0x21c>
 800e43e:	6823      	ldr	r3, [r4, #0]
 800e440:	07d8      	lsls	r0, r3, #31
 800e442:	d50f      	bpl.n	800e464 <_printf_float+0x23c>
 800e444:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e448:	4631      	mov	r1, r6
 800e44a:	4628      	mov	r0, r5
 800e44c:	47b8      	blx	r7
 800e44e:	3001      	adds	r0, #1
 800e450:	f43f af45 	beq.w	800e2de <_printf_float+0xb6>
 800e454:	f04f 0900 	mov.w	r9, #0
 800e458:	f108 38ff 	add.w	r8, r8, #4294967295
 800e45c:	f104 0a1a 	add.w	sl, r4, #26
 800e460:	45c8      	cmp	r8, r9
 800e462:	dc09      	bgt.n	800e478 <_printf_float+0x250>
 800e464:	6823      	ldr	r3, [r4, #0]
 800e466:	079b      	lsls	r3, r3, #30
 800e468:	f100 8103 	bmi.w	800e672 <_printf_float+0x44a>
 800e46c:	68e0      	ldr	r0, [r4, #12]
 800e46e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e470:	4298      	cmp	r0, r3
 800e472:	bfb8      	it	lt
 800e474:	4618      	movlt	r0, r3
 800e476:	e734      	b.n	800e2e2 <_printf_float+0xba>
 800e478:	2301      	movs	r3, #1
 800e47a:	4652      	mov	r2, sl
 800e47c:	4631      	mov	r1, r6
 800e47e:	4628      	mov	r0, r5
 800e480:	47b8      	blx	r7
 800e482:	3001      	adds	r0, #1
 800e484:	f43f af2b 	beq.w	800e2de <_printf_float+0xb6>
 800e488:	f109 0901 	add.w	r9, r9, #1
 800e48c:	e7e8      	b.n	800e460 <_printf_float+0x238>
 800e48e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e490:	2b00      	cmp	r3, #0
 800e492:	dc39      	bgt.n	800e508 <_printf_float+0x2e0>
 800e494:	4a1b      	ldr	r2, [pc, #108]	@ (800e504 <_printf_float+0x2dc>)
 800e496:	2301      	movs	r3, #1
 800e498:	4631      	mov	r1, r6
 800e49a:	4628      	mov	r0, r5
 800e49c:	47b8      	blx	r7
 800e49e:	3001      	adds	r0, #1
 800e4a0:	f43f af1d 	beq.w	800e2de <_printf_float+0xb6>
 800e4a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e4a8:	ea59 0303 	orrs.w	r3, r9, r3
 800e4ac:	d102      	bne.n	800e4b4 <_printf_float+0x28c>
 800e4ae:	6823      	ldr	r3, [r4, #0]
 800e4b0:	07d9      	lsls	r1, r3, #31
 800e4b2:	d5d7      	bpl.n	800e464 <_printf_float+0x23c>
 800e4b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4b8:	4631      	mov	r1, r6
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	47b8      	blx	r7
 800e4be:	3001      	adds	r0, #1
 800e4c0:	f43f af0d 	beq.w	800e2de <_printf_float+0xb6>
 800e4c4:	f04f 0a00 	mov.w	sl, #0
 800e4c8:	f104 0b1a 	add.w	fp, r4, #26
 800e4cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4ce:	425b      	negs	r3, r3
 800e4d0:	4553      	cmp	r3, sl
 800e4d2:	dc01      	bgt.n	800e4d8 <_printf_float+0x2b0>
 800e4d4:	464b      	mov	r3, r9
 800e4d6:	e793      	b.n	800e400 <_printf_float+0x1d8>
 800e4d8:	2301      	movs	r3, #1
 800e4da:	465a      	mov	r2, fp
 800e4dc:	4631      	mov	r1, r6
 800e4de:	4628      	mov	r0, r5
 800e4e0:	47b8      	blx	r7
 800e4e2:	3001      	adds	r0, #1
 800e4e4:	f43f aefb 	beq.w	800e2de <_printf_float+0xb6>
 800e4e8:	f10a 0a01 	add.w	sl, sl, #1
 800e4ec:	e7ee      	b.n	800e4cc <_printf_float+0x2a4>
 800e4ee:	bf00      	nop
 800e4f0:	7fefffff 	.word	0x7fefffff
 800e4f4:	0801123d 	.word	0x0801123d
 800e4f8:	08011241 	.word	0x08011241
 800e4fc:	08011245 	.word	0x08011245
 800e500:	08011249 	.word	0x08011249
 800e504:	0801124d 	.word	0x0801124d
 800e508:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e50a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e50e:	4553      	cmp	r3, sl
 800e510:	bfa8      	it	ge
 800e512:	4653      	movge	r3, sl
 800e514:	2b00      	cmp	r3, #0
 800e516:	4699      	mov	r9, r3
 800e518:	dc36      	bgt.n	800e588 <_printf_float+0x360>
 800e51a:	f04f 0b00 	mov.w	fp, #0
 800e51e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e522:	f104 021a 	add.w	r2, r4, #26
 800e526:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e528:	9306      	str	r3, [sp, #24]
 800e52a:	eba3 0309 	sub.w	r3, r3, r9
 800e52e:	455b      	cmp	r3, fp
 800e530:	dc31      	bgt.n	800e596 <_printf_float+0x36e>
 800e532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e534:	459a      	cmp	sl, r3
 800e536:	dc3a      	bgt.n	800e5ae <_printf_float+0x386>
 800e538:	6823      	ldr	r3, [r4, #0]
 800e53a:	07da      	lsls	r2, r3, #31
 800e53c:	d437      	bmi.n	800e5ae <_printf_float+0x386>
 800e53e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e540:	ebaa 0903 	sub.w	r9, sl, r3
 800e544:	9b06      	ldr	r3, [sp, #24]
 800e546:	ebaa 0303 	sub.w	r3, sl, r3
 800e54a:	4599      	cmp	r9, r3
 800e54c:	bfa8      	it	ge
 800e54e:	4699      	movge	r9, r3
 800e550:	f1b9 0f00 	cmp.w	r9, #0
 800e554:	dc33      	bgt.n	800e5be <_printf_float+0x396>
 800e556:	f04f 0800 	mov.w	r8, #0
 800e55a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e55e:	f104 0b1a 	add.w	fp, r4, #26
 800e562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e564:	ebaa 0303 	sub.w	r3, sl, r3
 800e568:	eba3 0309 	sub.w	r3, r3, r9
 800e56c:	4543      	cmp	r3, r8
 800e56e:	f77f af79 	ble.w	800e464 <_printf_float+0x23c>
 800e572:	2301      	movs	r3, #1
 800e574:	465a      	mov	r2, fp
 800e576:	4631      	mov	r1, r6
 800e578:	4628      	mov	r0, r5
 800e57a:	47b8      	blx	r7
 800e57c:	3001      	adds	r0, #1
 800e57e:	f43f aeae 	beq.w	800e2de <_printf_float+0xb6>
 800e582:	f108 0801 	add.w	r8, r8, #1
 800e586:	e7ec      	b.n	800e562 <_printf_float+0x33a>
 800e588:	4642      	mov	r2, r8
 800e58a:	4631      	mov	r1, r6
 800e58c:	4628      	mov	r0, r5
 800e58e:	47b8      	blx	r7
 800e590:	3001      	adds	r0, #1
 800e592:	d1c2      	bne.n	800e51a <_printf_float+0x2f2>
 800e594:	e6a3      	b.n	800e2de <_printf_float+0xb6>
 800e596:	2301      	movs	r3, #1
 800e598:	4631      	mov	r1, r6
 800e59a:	4628      	mov	r0, r5
 800e59c:	9206      	str	r2, [sp, #24]
 800e59e:	47b8      	blx	r7
 800e5a0:	3001      	adds	r0, #1
 800e5a2:	f43f ae9c 	beq.w	800e2de <_printf_float+0xb6>
 800e5a6:	9a06      	ldr	r2, [sp, #24]
 800e5a8:	f10b 0b01 	add.w	fp, fp, #1
 800e5ac:	e7bb      	b.n	800e526 <_printf_float+0x2fe>
 800e5ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5b2:	4631      	mov	r1, r6
 800e5b4:	4628      	mov	r0, r5
 800e5b6:	47b8      	blx	r7
 800e5b8:	3001      	adds	r0, #1
 800e5ba:	d1c0      	bne.n	800e53e <_printf_float+0x316>
 800e5bc:	e68f      	b.n	800e2de <_printf_float+0xb6>
 800e5be:	9a06      	ldr	r2, [sp, #24]
 800e5c0:	464b      	mov	r3, r9
 800e5c2:	4442      	add	r2, r8
 800e5c4:	4631      	mov	r1, r6
 800e5c6:	4628      	mov	r0, r5
 800e5c8:	47b8      	blx	r7
 800e5ca:	3001      	adds	r0, #1
 800e5cc:	d1c3      	bne.n	800e556 <_printf_float+0x32e>
 800e5ce:	e686      	b.n	800e2de <_printf_float+0xb6>
 800e5d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e5d4:	f1ba 0f01 	cmp.w	sl, #1
 800e5d8:	dc01      	bgt.n	800e5de <_printf_float+0x3b6>
 800e5da:	07db      	lsls	r3, r3, #31
 800e5dc:	d536      	bpl.n	800e64c <_printf_float+0x424>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	4642      	mov	r2, r8
 800e5e2:	4631      	mov	r1, r6
 800e5e4:	4628      	mov	r0, r5
 800e5e6:	47b8      	blx	r7
 800e5e8:	3001      	adds	r0, #1
 800e5ea:	f43f ae78 	beq.w	800e2de <_printf_float+0xb6>
 800e5ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5f2:	4631      	mov	r1, r6
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	47b8      	blx	r7
 800e5f8:	3001      	adds	r0, #1
 800e5fa:	f43f ae70 	beq.w	800e2de <_printf_float+0xb6>
 800e5fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e602:	2200      	movs	r2, #0
 800e604:	2300      	movs	r3, #0
 800e606:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e60a:	f7f2 fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e60e:	b9c0      	cbnz	r0, 800e642 <_printf_float+0x41a>
 800e610:	4653      	mov	r3, sl
 800e612:	f108 0201 	add.w	r2, r8, #1
 800e616:	4631      	mov	r1, r6
 800e618:	4628      	mov	r0, r5
 800e61a:	47b8      	blx	r7
 800e61c:	3001      	adds	r0, #1
 800e61e:	d10c      	bne.n	800e63a <_printf_float+0x412>
 800e620:	e65d      	b.n	800e2de <_printf_float+0xb6>
 800e622:	2301      	movs	r3, #1
 800e624:	465a      	mov	r2, fp
 800e626:	4631      	mov	r1, r6
 800e628:	4628      	mov	r0, r5
 800e62a:	47b8      	blx	r7
 800e62c:	3001      	adds	r0, #1
 800e62e:	f43f ae56 	beq.w	800e2de <_printf_float+0xb6>
 800e632:	f108 0801 	add.w	r8, r8, #1
 800e636:	45d0      	cmp	r8, sl
 800e638:	dbf3      	blt.n	800e622 <_printf_float+0x3fa>
 800e63a:	464b      	mov	r3, r9
 800e63c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e640:	e6df      	b.n	800e402 <_printf_float+0x1da>
 800e642:	f04f 0800 	mov.w	r8, #0
 800e646:	f104 0b1a 	add.w	fp, r4, #26
 800e64a:	e7f4      	b.n	800e636 <_printf_float+0x40e>
 800e64c:	2301      	movs	r3, #1
 800e64e:	4642      	mov	r2, r8
 800e650:	e7e1      	b.n	800e616 <_printf_float+0x3ee>
 800e652:	2301      	movs	r3, #1
 800e654:	464a      	mov	r2, r9
 800e656:	4631      	mov	r1, r6
 800e658:	4628      	mov	r0, r5
 800e65a:	47b8      	blx	r7
 800e65c:	3001      	adds	r0, #1
 800e65e:	f43f ae3e 	beq.w	800e2de <_printf_float+0xb6>
 800e662:	f108 0801 	add.w	r8, r8, #1
 800e666:	68e3      	ldr	r3, [r4, #12]
 800e668:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e66a:	1a5b      	subs	r3, r3, r1
 800e66c:	4543      	cmp	r3, r8
 800e66e:	dcf0      	bgt.n	800e652 <_printf_float+0x42a>
 800e670:	e6fc      	b.n	800e46c <_printf_float+0x244>
 800e672:	f04f 0800 	mov.w	r8, #0
 800e676:	f104 0919 	add.w	r9, r4, #25
 800e67a:	e7f4      	b.n	800e666 <_printf_float+0x43e>

0800e67c <_printf_common>:
 800e67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e680:	4616      	mov	r6, r2
 800e682:	4698      	mov	r8, r3
 800e684:	688a      	ldr	r2, [r1, #8]
 800e686:	690b      	ldr	r3, [r1, #16]
 800e688:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e68c:	4293      	cmp	r3, r2
 800e68e:	bfb8      	it	lt
 800e690:	4613      	movlt	r3, r2
 800e692:	6033      	str	r3, [r6, #0]
 800e694:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e698:	4607      	mov	r7, r0
 800e69a:	460c      	mov	r4, r1
 800e69c:	b10a      	cbz	r2, 800e6a2 <_printf_common+0x26>
 800e69e:	3301      	adds	r3, #1
 800e6a0:	6033      	str	r3, [r6, #0]
 800e6a2:	6823      	ldr	r3, [r4, #0]
 800e6a4:	0699      	lsls	r1, r3, #26
 800e6a6:	bf42      	ittt	mi
 800e6a8:	6833      	ldrmi	r3, [r6, #0]
 800e6aa:	3302      	addmi	r3, #2
 800e6ac:	6033      	strmi	r3, [r6, #0]
 800e6ae:	6825      	ldr	r5, [r4, #0]
 800e6b0:	f015 0506 	ands.w	r5, r5, #6
 800e6b4:	d106      	bne.n	800e6c4 <_printf_common+0x48>
 800e6b6:	f104 0a19 	add.w	sl, r4, #25
 800e6ba:	68e3      	ldr	r3, [r4, #12]
 800e6bc:	6832      	ldr	r2, [r6, #0]
 800e6be:	1a9b      	subs	r3, r3, r2
 800e6c0:	42ab      	cmp	r3, r5
 800e6c2:	dc26      	bgt.n	800e712 <_printf_common+0x96>
 800e6c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e6c8:	6822      	ldr	r2, [r4, #0]
 800e6ca:	3b00      	subs	r3, #0
 800e6cc:	bf18      	it	ne
 800e6ce:	2301      	movne	r3, #1
 800e6d0:	0692      	lsls	r2, r2, #26
 800e6d2:	d42b      	bmi.n	800e72c <_printf_common+0xb0>
 800e6d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e6d8:	4641      	mov	r1, r8
 800e6da:	4638      	mov	r0, r7
 800e6dc:	47c8      	blx	r9
 800e6de:	3001      	adds	r0, #1
 800e6e0:	d01e      	beq.n	800e720 <_printf_common+0xa4>
 800e6e2:	6823      	ldr	r3, [r4, #0]
 800e6e4:	6922      	ldr	r2, [r4, #16]
 800e6e6:	f003 0306 	and.w	r3, r3, #6
 800e6ea:	2b04      	cmp	r3, #4
 800e6ec:	bf02      	ittt	eq
 800e6ee:	68e5      	ldreq	r5, [r4, #12]
 800e6f0:	6833      	ldreq	r3, [r6, #0]
 800e6f2:	1aed      	subeq	r5, r5, r3
 800e6f4:	68a3      	ldr	r3, [r4, #8]
 800e6f6:	bf0c      	ite	eq
 800e6f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6fc:	2500      	movne	r5, #0
 800e6fe:	4293      	cmp	r3, r2
 800e700:	bfc4      	itt	gt
 800e702:	1a9b      	subgt	r3, r3, r2
 800e704:	18ed      	addgt	r5, r5, r3
 800e706:	2600      	movs	r6, #0
 800e708:	341a      	adds	r4, #26
 800e70a:	42b5      	cmp	r5, r6
 800e70c:	d11a      	bne.n	800e744 <_printf_common+0xc8>
 800e70e:	2000      	movs	r0, #0
 800e710:	e008      	b.n	800e724 <_printf_common+0xa8>
 800e712:	2301      	movs	r3, #1
 800e714:	4652      	mov	r2, sl
 800e716:	4641      	mov	r1, r8
 800e718:	4638      	mov	r0, r7
 800e71a:	47c8      	blx	r9
 800e71c:	3001      	adds	r0, #1
 800e71e:	d103      	bne.n	800e728 <_printf_common+0xac>
 800e720:	f04f 30ff 	mov.w	r0, #4294967295
 800e724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e728:	3501      	adds	r5, #1
 800e72a:	e7c6      	b.n	800e6ba <_printf_common+0x3e>
 800e72c:	18e1      	adds	r1, r4, r3
 800e72e:	1c5a      	adds	r2, r3, #1
 800e730:	2030      	movs	r0, #48	@ 0x30
 800e732:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e736:	4422      	add	r2, r4
 800e738:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e73c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e740:	3302      	adds	r3, #2
 800e742:	e7c7      	b.n	800e6d4 <_printf_common+0x58>
 800e744:	2301      	movs	r3, #1
 800e746:	4622      	mov	r2, r4
 800e748:	4641      	mov	r1, r8
 800e74a:	4638      	mov	r0, r7
 800e74c:	47c8      	blx	r9
 800e74e:	3001      	adds	r0, #1
 800e750:	d0e6      	beq.n	800e720 <_printf_common+0xa4>
 800e752:	3601      	adds	r6, #1
 800e754:	e7d9      	b.n	800e70a <_printf_common+0x8e>
	...

0800e758 <_printf_i>:
 800e758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e75c:	7e0f      	ldrb	r7, [r1, #24]
 800e75e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e760:	2f78      	cmp	r7, #120	@ 0x78
 800e762:	4691      	mov	r9, r2
 800e764:	4680      	mov	r8, r0
 800e766:	460c      	mov	r4, r1
 800e768:	469a      	mov	sl, r3
 800e76a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e76e:	d807      	bhi.n	800e780 <_printf_i+0x28>
 800e770:	2f62      	cmp	r7, #98	@ 0x62
 800e772:	d80a      	bhi.n	800e78a <_printf_i+0x32>
 800e774:	2f00      	cmp	r7, #0
 800e776:	f000 80d2 	beq.w	800e91e <_printf_i+0x1c6>
 800e77a:	2f58      	cmp	r7, #88	@ 0x58
 800e77c:	f000 80b9 	beq.w	800e8f2 <_printf_i+0x19a>
 800e780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e784:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e788:	e03a      	b.n	800e800 <_printf_i+0xa8>
 800e78a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e78e:	2b15      	cmp	r3, #21
 800e790:	d8f6      	bhi.n	800e780 <_printf_i+0x28>
 800e792:	a101      	add	r1, pc, #4	@ (adr r1, 800e798 <_printf_i+0x40>)
 800e794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e798:	0800e7f1 	.word	0x0800e7f1
 800e79c:	0800e805 	.word	0x0800e805
 800e7a0:	0800e781 	.word	0x0800e781
 800e7a4:	0800e781 	.word	0x0800e781
 800e7a8:	0800e781 	.word	0x0800e781
 800e7ac:	0800e781 	.word	0x0800e781
 800e7b0:	0800e805 	.word	0x0800e805
 800e7b4:	0800e781 	.word	0x0800e781
 800e7b8:	0800e781 	.word	0x0800e781
 800e7bc:	0800e781 	.word	0x0800e781
 800e7c0:	0800e781 	.word	0x0800e781
 800e7c4:	0800e905 	.word	0x0800e905
 800e7c8:	0800e82f 	.word	0x0800e82f
 800e7cc:	0800e8bf 	.word	0x0800e8bf
 800e7d0:	0800e781 	.word	0x0800e781
 800e7d4:	0800e781 	.word	0x0800e781
 800e7d8:	0800e927 	.word	0x0800e927
 800e7dc:	0800e781 	.word	0x0800e781
 800e7e0:	0800e82f 	.word	0x0800e82f
 800e7e4:	0800e781 	.word	0x0800e781
 800e7e8:	0800e781 	.word	0x0800e781
 800e7ec:	0800e8c7 	.word	0x0800e8c7
 800e7f0:	6833      	ldr	r3, [r6, #0]
 800e7f2:	1d1a      	adds	r2, r3, #4
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	6032      	str	r2, [r6, #0]
 800e7f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e7fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e800:	2301      	movs	r3, #1
 800e802:	e09d      	b.n	800e940 <_printf_i+0x1e8>
 800e804:	6833      	ldr	r3, [r6, #0]
 800e806:	6820      	ldr	r0, [r4, #0]
 800e808:	1d19      	adds	r1, r3, #4
 800e80a:	6031      	str	r1, [r6, #0]
 800e80c:	0606      	lsls	r6, r0, #24
 800e80e:	d501      	bpl.n	800e814 <_printf_i+0xbc>
 800e810:	681d      	ldr	r5, [r3, #0]
 800e812:	e003      	b.n	800e81c <_printf_i+0xc4>
 800e814:	0645      	lsls	r5, r0, #25
 800e816:	d5fb      	bpl.n	800e810 <_printf_i+0xb8>
 800e818:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e81c:	2d00      	cmp	r5, #0
 800e81e:	da03      	bge.n	800e828 <_printf_i+0xd0>
 800e820:	232d      	movs	r3, #45	@ 0x2d
 800e822:	426d      	negs	r5, r5
 800e824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e828:	4859      	ldr	r0, [pc, #356]	@ (800e990 <_printf_i+0x238>)
 800e82a:	230a      	movs	r3, #10
 800e82c:	e011      	b.n	800e852 <_printf_i+0xfa>
 800e82e:	6821      	ldr	r1, [r4, #0]
 800e830:	6833      	ldr	r3, [r6, #0]
 800e832:	0608      	lsls	r0, r1, #24
 800e834:	f853 5b04 	ldr.w	r5, [r3], #4
 800e838:	d402      	bmi.n	800e840 <_printf_i+0xe8>
 800e83a:	0649      	lsls	r1, r1, #25
 800e83c:	bf48      	it	mi
 800e83e:	b2ad      	uxthmi	r5, r5
 800e840:	2f6f      	cmp	r7, #111	@ 0x6f
 800e842:	4853      	ldr	r0, [pc, #332]	@ (800e990 <_printf_i+0x238>)
 800e844:	6033      	str	r3, [r6, #0]
 800e846:	bf14      	ite	ne
 800e848:	230a      	movne	r3, #10
 800e84a:	2308      	moveq	r3, #8
 800e84c:	2100      	movs	r1, #0
 800e84e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e852:	6866      	ldr	r6, [r4, #4]
 800e854:	60a6      	str	r6, [r4, #8]
 800e856:	2e00      	cmp	r6, #0
 800e858:	bfa2      	ittt	ge
 800e85a:	6821      	ldrge	r1, [r4, #0]
 800e85c:	f021 0104 	bicge.w	r1, r1, #4
 800e860:	6021      	strge	r1, [r4, #0]
 800e862:	b90d      	cbnz	r5, 800e868 <_printf_i+0x110>
 800e864:	2e00      	cmp	r6, #0
 800e866:	d04b      	beq.n	800e900 <_printf_i+0x1a8>
 800e868:	4616      	mov	r6, r2
 800e86a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e86e:	fb03 5711 	mls	r7, r3, r1, r5
 800e872:	5dc7      	ldrb	r7, [r0, r7]
 800e874:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e878:	462f      	mov	r7, r5
 800e87a:	42bb      	cmp	r3, r7
 800e87c:	460d      	mov	r5, r1
 800e87e:	d9f4      	bls.n	800e86a <_printf_i+0x112>
 800e880:	2b08      	cmp	r3, #8
 800e882:	d10b      	bne.n	800e89c <_printf_i+0x144>
 800e884:	6823      	ldr	r3, [r4, #0]
 800e886:	07df      	lsls	r7, r3, #31
 800e888:	d508      	bpl.n	800e89c <_printf_i+0x144>
 800e88a:	6923      	ldr	r3, [r4, #16]
 800e88c:	6861      	ldr	r1, [r4, #4]
 800e88e:	4299      	cmp	r1, r3
 800e890:	bfde      	ittt	le
 800e892:	2330      	movle	r3, #48	@ 0x30
 800e894:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e898:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e89c:	1b92      	subs	r2, r2, r6
 800e89e:	6122      	str	r2, [r4, #16]
 800e8a0:	f8cd a000 	str.w	sl, [sp]
 800e8a4:	464b      	mov	r3, r9
 800e8a6:	aa03      	add	r2, sp, #12
 800e8a8:	4621      	mov	r1, r4
 800e8aa:	4640      	mov	r0, r8
 800e8ac:	f7ff fee6 	bl	800e67c <_printf_common>
 800e8b0:	3001      	adds	r0, #1
 800e8b2:	d14a      	bne.n	800e94a <_printf_i+0x1f2>
 800e8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8b8:	b004      	add	sp, #16
 800e8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8be:	6823      	ldr	r3, [r4, #0]
 800e8c0:	f043 0320 	orr.w	r3, r3, #32
 800e8c4:	6023      	str	r3, [r4, #0]
 800e8c6:	4833      	ldr	r0, [pc, #204]	@ (800e994 <_printf_i+0x23c>)
 800e8c8:	2778      	movs	r7, #120	@ 0x78
 800e8ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e8ce:	6823      	ldr	r3, [r4, #0]
 800e8d0:	6831      	ldr	r1, [r6, #0]
 800e8d2:	061f      	lsls	r7, r3, #24
 800e8d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800e8d8:	d402      	bmi.n	800e8e0 <_printf_i+0x188>
 800e8da:	065f      	lsls	r7, r3, #25
 800e8dc:	bf48      	it	mi
 800e8de:	b2ad      	uxthmi	r5, r5
 800e8e0:	6031      	str	r1, [r6, #0]
 800e8e2:	07d9      	lsls	r1, r3, #31
 800e8e4:	bf44      	itt	mi
 800e8e6:	f043 0320 	orrmi.w	r3, r3, #32
 800e8ea:	6023      	strmi	r3, [r4, #0]
 800e8ec:	b11d      	cbz	r5, 800e8f6 <_printf_i+0x19e>
 800e8ee:	2310      	movs	r3, #16
 800e8f0:	e7ac      	b.n	800e84c <_printf_i+0xf4>
 800e8f2:	4827      	ldr	r0, [pc, #156]	@ (800e990 <_printf_i+0x238>)
 800e8f4:	e7e9      	b.n	800e8ca <_printf_i+0x172>
 800e8f6:	6823      	ldr	r3, [r4, #0]
 800e8f8:	f023 0320 	bic.w	r3, r3, #32
 800e8fc:	6023      	str	r3, [r4, #0]
 800e8fe:	e7f6      	b.n	800e8ee <_printf_i+0x196>
 800e900:	4616      	mov	r6, r2
 800e902:	e7bd      	b.n	800e880 <_printf_i+0x128>
 800e904:	6833      	ldr	r3, [r6, #0]
 800e906:	6825      	ldr	r5, [r4, #0]
 800e908:	6961      	ldr	r1, [r4, #20]
 800e90a:	1d18      	adds	r0, r3, #4
 800e90c:	6030      	str	r0, [r6, #0]
 800e90e:	062e      	lsls	r6, r5, #24
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	d501      	bpl.n	800e918 <_printf_i+0x1c0>
 800e914:	6019      	str	r1, [r3, #0]
 800e916:	e002      	b.n	800e91e <_printf_i+0x1c6>
 800e918:	0668      	lsls	r0, r5, #25
 800e91a:	d5fb      	bpl.n	800e914 <_printf_i+0x1bc>
 800e91c:	8019      	strh	r1, [r3, #0]
 800e91e:	2300      	movs	r3, #0
 800e920:	6123      	str	r3, [r4, #16]
 800e922:	4616      	mov	r6, r2
 800e924:	e7bc      	b.n	800e8a0 <_printf_i+0x148>
 800e926:	6833      	ldr	r3, [r6, #0]
 800e928:	1d1a      	adds	r2, r3, #4
 800e92a:	6032      	str	r2, [r6, #0]
 800e92c:	681e      	ldr	r6, [r3, #0]
 800e92e:	6862      	ldr	r2, [r4, #4]
 800e930:	2100      	movs	r1, #0
 800e932:	4630      	mov	r0, r6
 800e934:	f7f1 fc4c 	bl	80001d0 <memchr>
 800e938:	b108      	cbz	r0, 800e93e <_printf_i+0x1e6>
 800e93a:	1b80      	subs	r0, r0, r6
 800e93c:	6060      	str	r0, [r4, #4]
 800e93e:	6863      	ldr	r3, [r4, #4]
 800e940:	6123      	str	r3, [r4, #16]
 800e942:	2300      	movs	r3, #0
 800e944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e948:	e7aa      	b.n	800e8a0 <_printf_i+0x148>
 800e94a:	6923      	ldr	r3, [r4, #16]
 800e94c:	4632      	mov	r2, r6
 800e94e:	4649      	mov	r1, r9
 800e950:	4640      	mov	r0, r8
 800e952:	47d0      	blx	sl
 800e954:	3001      	adds	r0, #1
 800e956:	d0ad      	beq.n	800e8b4 <_printf_i+0x15c>
 800e958:	6823      	ldr	r3, [r4, #0]
 800e95a:	079b      	lsls	r3, r3, #30
 800e95c:	d413      	bmi.n	800e986 <_printf_i+0x22e>
 800e95e:	68e0      	ldr	r0, [r4, #12]
 800e960:	9b03      	ldr	r3, [sp, #12]
 800e962:	4298      	cmp	r0, r3
 800e964:	bfb8      	it	lt
 800e966:	4618      	movlt	r0, r3
 800e968:	e7a6      	b.n	800e8b8 <_printf_i+0x160>
 800e96a:	2301      	movs	r3, #1
 800e96c:	4632      	mov	r2, r6
 800e96e:	4649      	mov	r1, r9
 800e970:	4640      	mov	r0, r8
 800e972:	47d0      	blx	sl
 800e974:	3001      	adds	r0, #1
 800e976:	d09d      	beq.n	800e8b4 <_printf_i+0x15c>
 800e978:	3501      	adds	r5, #1
 800e97a:	68e3      	ldr	r3, [r4, #12]
 800e97c:	9903      	ldr	r1, [sp, #12]
 800e97e:	1a5b      	subs	r3, r3, r1
 800e980:	42ab      	cmp	r3, r5
 800e982:	dcf2      	bgt.n	800e96a <_printf_i+0x212>
 800e984:	e7eb      	b.n	800e95e <_printf_i+0x206>
 800e986:	2500      	movs	r5, #0
 800e988:	f104 0619 	add.w	r6, r4, #25
 800e98c:	e7f5      	b.n	800e97a <_printf_i+0x222>
 800e98e:	bf00      	nop
 800e990:	0801124f 	.word	0x0801124f
 800e994:	08011260 	.word	0x08011260

0800e998 <std>:
 800e998:	2300      	movs	r3, #0
 800e99a:	b510      	push	{r4, lr}
 800e99c:	4604      	mov	r4, r0
 800e99e:	e9c0 3300 	strd	r3, r3, [r0]
 800e9a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e9a6:	6083      	str	r3, [r0, #8]
 800e9a8:	8181      	strh	r1, [r0, #12]
 800e9aa:	6643      	str	r3, [r0, #100]	@ 0x64
 800e9ac:	81c2      	strh	r2, [r0, #14]
 800e9ae:	6183      	str	r3, [r0, #24]
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	2208      	movs	r2, #8
 800e9b4:	305c      	adds	r0, #92	@ 0x5c
 800e9b6:	f000 f948 	bl	800ec4a <memset>
 800e9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e9f0 <std+0x58>)
 800e9bc:	6263      	str	r3, [r4, #36]	@ 0x24
 800e9be:	4b0d      	ldr	r3, [pc, #52]	@ (800e9f4 <std+0x5c>)
 800e9c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e9c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e9f8 <std+0x60>)
 800e9c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e9c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e9fc <std+0x64>)
 800e9c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800e9ca:	4b0d      	ldr	r3, [pc, #52]	@ (800ea00 <std+0x68>)
 800e9cc:	6224      	str	r4, [r4, #32]
 800e9ce:	429c      	cmp	r4, r3
 800e9d0:	d006      	beq.n	800e9e0 <std+0x48>
 800e9d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e9d6:	4294      	cmp	r4, r2
 800e9d8:	d002      	beq.n	800e9e0 <std+0x48>
 800e9da:	33d0      	adds	r3, #208	@ 0xd0
 800e9dc:	429c      	cmp	r4, r3
 800e9de:	d105      	bne.n	800e9ec <std+0x54>
 800e9e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9e8:	f000 b9ac 	b.w	800ed44 <__retarget_lock_init_recursive>
 800e9ec:	bd10      	pop	{r4, pc}
 800e9ee:	bf00      	nop
 800e9f0:	0800ebc5 	.word	0x0800ebc5
 800e9f4:	0800ebe7 	.word	0x0800ebe7
 800e9f8:	0800ec1f 	.word	0x0800ec1f
 800e9fc:	0800ec43 	.word	0x0800ec43
 800ea00:	200054ac 	.word	0x200054ac

0800ea04 <stdio_exit_handler>:
 800ea04:	4a02      	ldr	r2, [pc, #8]	@ (800ea10 <stdio_exit_handler+0xc>)
 800ea06:	4903      	ldr	r1, [pc, #12]	@ (800ea14 <stdio_exit_handler+0x10>)
 800ea08:	4803      	ldr	r0, [pc, #12]	@ (800ea18 <stdio_exit_handler+0x14>)
 800ea0a:	f000 b869 	b.w	800eae0 <_fwalk_sglue>
 800ea0e:	bf00      	nop
 800ea10:	20000158 	.word	0x20000158
 800ea14:	080106bd 	.word	0x080106bd
 800ea18:	20000168 	.word	0x20000168

0800ea1c <cleanup_stdio>:
 800ea1c:	6841      	ldr	r1, [r0, #4]
 800ea1e:	4b0c      	ldr	r3, [pc, #48]	@ (800ea50 <cleanup_stdio+0x34>)
 800ea20:	4299      	cmp	r1, r3
 800ea22:	b510      	push	{r4, lr}
 800ea24:	4604      	mov	r4, r0
 800ea26:	d001      	beq.n	800ea2c <cleanup_stdio+0x10>
 800ea28:	f001 fe48 	bl	80106bc <_fflush_r>
 800ea2c:	68a1      	ldr	r1, [r4, #8]
 800ea2e:	4b09      	ldr	r3, [pc, #36]	@ (800ea54 <cleanup_stdio+0x38>)
 800ea30:	4299      	cmp	r1, r3
 800ea32:	d002      	beq.n	800ea3a <cleanup_stdio+0x1e>
 800ea34:	4620      	mov	r0, r4
 800ea36:	f001 fe41 	bl	80106bc <_fflush_r>
 800ea3a:	68e1      	ldr	r1, [r4, #12]
 800ea3c:	4b06      	ldr	r3, [pc, #24]	@ (800ea58 <cleanup_stdio+0x3c>)
 800ea3e:	4299      	cmp	r1, r3
 800ea40:	d004      	beq.n	800ea4c <cleanup_stdio+0x30>
 800ea42:	4620      	mov	r0, r4
 800ea44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea48:	f001 be38 	b.w	80106bc <_fflush_r>
 800ea4c:	bd10      	pop	{r4, pc}
 800ea4e:	bf00      	nop
 800ea50:	200054ac 	.word	0x200054ac
 800ea54:	20005514 	.word	0x20005514
 800ea58:	2000557c 	.word	0x2000557c

0800ea5c <global_stdio_init.part.0>:
 800ea5c:	b510      	push	{r4, lr}
 800ea5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ea8c <global_stdio_init.part.0+0x30>)
 800ea60:	4c0b      	ldr	r4, [pc, #44]	@ (800ea90 <global_stdio_init.part.0+0x34>)
 800ea62:	4a0c      	ldr	r2, [pc, #48]	@ (800ea94 <global_stdio_init.part.0+0x38>)
 800ea64:	601a      	str	r2, [r3, #0]
 800ea66:	4620      	mov	r0, r4
 800ea68:	2200      	movs	r2, #0
 800ea6a:	2104      	movs	r1, #4
 800ea6c:	f7ff ff94 	bl	800e998 <std>
 800ea70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ea74:	2201      	movs	r2, #1
 800ea76:	2109      	movs	r1, #9
 800ea78:	f7ff ff8e 	bl	800e998 <std>
 800ea7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ea80:	2202      	movs	r2, #2
 800ea82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea86:	2112      	movs	r1, #18
 800ea88:	f7ff bf86 	b.w	800e998 <std>
 800ea8c:	200055e4 	.word	0x200055e4
 800ea90:	200054ac 	.word	0x200054ac
 800ea94:	0800ea05 	.word	0x0800ea05

0800ea98 <__sfp_lock_acquire>:
 800ea98:	4801      	ldr	r0, [pc, #4]	@ (800eaa0 <__sfp_lock_acquire+0x8>)
 800ea9a:	f000 b954 	b.w	800ed46 <__retarget_lock_acquire_recursive>
 800ea9e:	bf00      	nop
 800eaa0:	200055ed 	.word	0x200055ed

0800eaa4 <__sfp_lock_release>:
 800eaa4:	4801      	ldr	r0, [pc, #4]	@ (800eaac <__sfp_lock_release+0x8>)
 800eaa6:	f000 b94f 	b.w	800ed48 <__retarget_lock_release_recursive>
 800eaaa:	bf00      	nop
 800eaac:	200055ed 	.word	0x200055ed

0800eab0 <__sinit>:
 800eab0:	b510      	push	{r4, lr}
 800eab2:	4604      	mov	r4, r0
 800eab4:	f7ff fff0 	bl	800ea98 <__sfp_lock_acquire>
 800eab8:	6a23      	ldr	r3, [r4, #32]
 800eaba:	b11b      	cbz	r3, 800eac4 <__sinit+0x14>
 800eabc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eac0:	f7ff bff0 	b.w	800eaa4 <__sfp_lock_release>
 800eac4:	4b04      	ldr	r3, [pc, #16]	@ (800ead8 <__sinit+0x28>)
 800eac6:	6223      	str	r3, [r4, #32]
 800eac8:	4b04      	ldr	r3, [pc, #16]	@ (800eadc <__sinit+0x2c>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d1f5      	bne.n	800eabc <__sinit+0xc>
 800ead0:	f7ff ffc4 	bl	800ea5c <global_stdio_init.part.0>
 800ead4:	e7f2      	b.n	800eabc <__sinit+0xc>
 800ead6:	bf00      	nop
 800ead8:	0800ea1d 	.word	0x0800ea1d
 800eadc:	200055e4 	.word	0x200055e4

0800eae0 <_fwalk_sglue>:
 800eae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eae4:	4607      	mov	r7, r0
 800eae6:	4688      	mov	r8, r1
 800eae8:	4614      	mov	r4, r2
 800eaea:	2600      	movs	r6, #0
 800eaec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eaf0:	f1b9 0901 	subs.w	r9, r9, #1
 800eaf4:	d505      	bpl.n	800eb02 <_fwalk_sglue+0x22>
 800eaf6:	6824      	ldr	r4, [r4, #0]
 800eaf8:	2c00      	cmp	r4, #0
 800eafa:	d1f7      	bne.n	800eaec <_fwalk_sglue+0xc>
 800eafc:	4630      	mov	r0, r6
 800eafe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb02:	89ab      	ldrh	r3, [r5, #12]
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	d907      	bls.n	800eb18 <_fwalk_sglue+0x38>
 800eb08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	d003      	beq.n	800eb18 <_fwalk_sglue+0x38>
 800eb10:	4629      	mov	r1, r5
 800eb12:	4638      	mov	r0, r7
 800eb14:	47c0      	blx	r8
 800eb16:	4306      	orrs	r6, r0
 800eb18:	3568      	adds	r5, #104	@ 0x68
 800eb1a:	e7e9      	b.n	800eaf0 <_fwalk_sglue+0x10>

0800eb1c <sniprintf>:
 800eb1c:	b40c      	push	{r2, r3}
 800eb1e:	b530      	push	{r4, r5, lr}
 800eb20:	4b17      	ldr	r3, [pc, #92]	@ (800eb80 <sniprintf+0x64>)
 800eb22:	1e0c      	subs	r4, r1, #0
 800eb24:	681d      	ldr	r5, [r3, #0]
 800eb26:	b09d      	sub	sp, #116	@ 0x74
 800eb28:	da08      	bge.n	800eb3c <sniprintf+0x20>
 800eb2a:	238b      	movs	r3, #139	@ 0x8b
 800eb2c:	602b      	str	r3, [r5, #0]
 800eb2e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb32:	b01d      	add	sp, #116	@ 0x74
 800eb34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb38:	b002      	add	sp, #8
 800eb3a:	4770      	bx	lr
 800eb3c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800eb40:	f8ad 3014 	strh.w	r3, [sp, #20]
 800eb44:	bf14      	ite	ne
 800eb46:	f104 33ff 	addne.w	r3, r4, #4294967295
 800eb4a:	4623      	moveq	r3, r4
 800eb4c:	9304      	str	r3, [sp, #16]
 800eb4e:	9307      	str	r3, [sp, #28]
 800eb50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800eb54:	9002      	str	r0, [sp, #8]
 800eb56:	9006      	str	r0, [sp, #24]
 800eb58:	f8ad 3016 	strh.w	r3, [sp, #22]
 800eb5c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800eb5e:	ab21      	add	r3, sp, #132	@ 0x84
 800eb60:	a902      	add	r1, sp, #8
 800eb62:	4628      	mov	r0, r5
 800eb64:	9301      	str	r3, [sp, #4]
 800eb66:	f001 fc29 	bl	80103bc <_svfiprintf_r>
 800eb6a:	1c43      	adds	r3, r0, #1
 800eb6c:	bfbc      	itt	lt
 800eb6e:	238b      	movlt	r3, #139	@ 0x8b
 800eb70:	602b      	strlt	r3, [r5, #0]
 800eb72:	2c00      	cmp	r4, #0
 800eb74:	d0dd      	beq.n	800eb32 <sniprintf+0x16>
 800eb76:	9b02      	ldr	r3, [sp, #8]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	701a      	strb	r2, [r3, #0]
 800eb7c:	e7d9      	b.n	800eb32 <sniprintf+0x16>
 800eb7e:	bf00      	nop
 800eb80:	20000164 	.word	0x20000164

0800eb84 <siprintf>:
 800eb84:	b40e      	push	{r1, r2, r3}
 800eb86:	b500      	push	{lr}
 800eb88:	b09c      	sub	sp, #112	@ 0x70
 800eb8a:	ab1d      	add	r3, sp, #116	@ 0x74
 800eb8c:	9002      	str	r0, [sp, #8]
 800eb8e:	9006      	str	r0, [sp, #24]
 800eb90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eb94:	4809      	ldr	r0, [pc, #36]	@ (800ebbc <siprintf+0x38>)
 800eb96:	9107      	str	r1, [sp, #28]
 800eb98:	9104      	str	r1, [sp, #16]
 800eb9a:	4909      	ldr	r1, [pc, #36]	@ (800ebc0 <siprintf+0x3c>)
 800eb9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800eba0:	9105      	str	r1, [sp, #20]
 800eba2:	6800      	ldr	r0, [r0, #0]
 800eba4:	9301      	str	r3, [sp, #4]
 800eba6:	a902      	add	r1, sp, #8
 800eba8:	f001 fc08 	bl	80103bc <_svfiprintf_r>
 800ebac:	9b02      	ldr	r3, [sp, #8]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	701a      	strb	r2, [r3, #0]
 800ebb2:	b01c      	add	sp, #112	@ 0x70
 800ebb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebb8:	b003      	add	sp, #12
 800ebba:	4770      	bx	lr
 800ebbc:	20000164 	.word	0x20000164
 800ebc0:	ffff0208 	.word	0xffff0208

0800ebc4 <__sread>:
 800ebc4:	b510      	push	{r4, lr}
 800ebc6:	460c      	mov	r4, r1
 800ebc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebcc:	f000 f86c 	bl	800eca8 <_read_r>
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	bfab      	itete	ge
 800ebd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ebd6:	89a3      	ldrhlt	r3, [r4, #12]
 800ebd8:	181b      	addge	r3, r3, r0
 800ebda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ebde:	bfac      	ite	ge
 800ebe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ebe2:	81a3      	strhlt	r3, [r4, #12]
 800ebe4:	bd10      	pop	{r4, pc}

0800ebe6 <__swrite>:
 800ebe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebea:	461f      	mov	r7, r3
 800ebec:	898b      	ldrh	r3, [r1, #12]
 800ebee:	05db      	lsls	r3, r3, #23
 800ebf0:	4605      	mov	r5, r0
 800ebf2:	460c      	mov	r4, r1
 800ebf4:	4616      	mov	r6, r2
 800ebf6:	d505      	bpl.n	800ec04 <__swrite+0x1e>
 800ebf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebfc:	2302      	movs	r3, #2
 800ebfe:	2200      	movs	r2, #0
 800ec00:	f000 f840 	bl	800ec84 <_lseek_r>
 800ec04:	89a3      	ldrh	r3, [r4, #12]
 800ec06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec0e:	81a3      	strh	r3, [r4, #12]
 800ec10:	4632      	mov	r2, r6
 800ec12:	463b      	mov	r3, r7
 800ec14:	4628      	mov	r0, r5
 800ec16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec1a:	f000 b857 	b.w	800eccc <_write_r>

0800ec1e <__sseek>:
 800ec1e:	b510      	push	{r4, lr}
 800ec20:	460c      	mov	r4, r1
 800ec22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec26:	f000 f82d 	bl	800ec84 <_lseek_r>
 800ec2a:	1c43      	adds	r3, r0, #1
 800ec2c:	89a3      	ldrh	r3, [r4, #12]
 800ec2e:	bf15      	itete	ne
 800ec30:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ec32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ec36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ec3a:	81a3      	strheq	r3, [r4, #12]
 800ec3c:	bf18      	it	ne
 800ec3e:	81a3      	strhne	r3, [r4, #12]
 800ec40:	bd10      	pop	{r4, pc}

0800ec42 <__sclose>:
 800ec42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec46:	f000 b80d 	b.w	800ec64 <_close_r>

0800ec4a <memset>:
 800ec4a:	4402      	add	r2, r0
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d100      	bne.n	800ec54 <memset+0xa>
 800ec52:	4770      	bx	lr
 800ec54:	f803 1b01 	strb.w	r1, [r3], #1
 800ec58:	e7f9      	b.n	800ec4e <memset+0x4>
	...

0800ec5c <_localeconv_r>:
 800ec5c:	4800      	ldr	r0, [pc, #0]	@ (800ec60 <_localeconv_r+0x4>)
 800ec5e:	4770      	bx	lr
 800ec60:	200002a4 	.word	0x200002a4

0800ec64 <_close_r>:
 800ec64:	b538      	push	{r3, r4, r5, lr}
 800ec66:	4d06      	ldr	r5, [pc, #24]	@ (800ec80 <_close_r+0x1c>)
 800ec68:	2300      	movs	r3, #0
 800ec6a:	4604      	mov	r4, r0
 800ec6c:	4608      	mov	r0, r1
 800ec6e:	602b      	str	r3, [r5, #0]
 800ec70:	f7f7 f880 	bl	8005d74 <_close>
 800ec74:	1c43      	adds	r3, r0, #1
 800ec76:	d102      	bne.n	800ec7e <_close_r+0x1a>
 800ec78:	682b      	ldr	r3, [r5, #0]
 800ec7a:	b103      	cbz	r3, 800ec7e <_close_r+0x1a>
 800ec7c:	6023      	str	r3, [r4, #0]
 800ec7e:	bd38      	pop	{r3, r4, r5, pc}
 800ec80:	200055e8 	.word	0x200055e8

0800ec84 <_lseek_r>:
 800ec84:	b538      	push	{r3, r4, r5, lr}
 800ec86:	4d07      	ldr	r5, [pc, #28]	@ (800eca4 <_lseek_r+0x20>)
 800ec88:	4604      	mov	r4, r0
 800ec8a:	4608      	mov	r0, r1
 800ec8c:	4611      	mov	r1, r2
 800ec8e:	2200      	movs	r2, #0
 800ec90:	602a      	str	r2, [r5, #0]
 800ec92:	461a      	mov	r2, r3
 800ec94:	f7f7 f895 	bl	8005dc2 <_lseek>
 800ec98:	1c43      	adds	r3, r0, #1
 800ec9a:	d102      	bne.n	800eca2 <_lseek_r+0x1e>
 800ec9c:	682b      	ldr	r3, [r5, #0]
 800ec9e:	b103      	cbz	r3, 800eca2 <_lseek_r+0x1e>
 800eca0:	6023      	str	r3, [r4, #0]
 800eca2:	bd38      	pop	{r3, r4, r5, pc}
 800eca4:	200055e8 	.word	0x200055e8

0800eca8 <_read_r>:
 800eca8:	b538      	push	{r3, r4, r5, lr}
 800ecaa:	4d07      	ldr	r5, [pc, #28]	@ (800ecc8 <_read_r+0x20>)
 800ecac:	4604      	mov	r4, r0
 800ecae:	4608      	mov	r0, r1
 800ecb0:	4611      	mov	r1, r2
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	602a      	str	r2, [r5, #0]
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	f7f7 f823 	bl	8005d02 <_read>
 800ecbc:	1c43      	adds	r3, r0, #1
 800ecbe:	d102      	bne.n	800ecc6 <_read_r+0x1e>
 800ecc0:	682b      	ldr	r3, [r5, #0]
 800ecc2:	b103      	cbz	r3, 800ecc6 <_read_r+0x1e>
 800ecc4:	6023      	str	r3, [r4, #0]
 800ecc6:	bd38      	pop	{r3, r4, r5, pc}
 800ecc8:	200055e8 	.word	0x200055e8

0800eccc <_write_r>:
 800eccc:	b538      	push	{r3, r4, r5, lr}
 800ecce:	4d07      	ldr	r5, [pc, #28]	@ (800ecec <_write_r+0x20>)
 800ecd0:	4604      	mov	r4, r0
 800ecd2:	4608      	mov	r0, r1
 800ecd4:	4611      	mov	r1, r2
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	602a      	str	r2, [r5, #0]
 800ecda:	461a      	mov	r2, r3
 800ecdc:	f7f7 f82e 	bl	8005d3c <_write>
 800ece0:	1c43      	adds	r3, r0, #1
 800ece2:	d102      	bne.n	800ecea <_write_r+0x1e>
 800ece4:	682b      	ldr	r3, [r5, #0]
 800ece6:	b103      	cbz	r3, 800ecea <_write_r+0x1e>
 800ece8:	6023      	str	r3, [r4, #0]
 800ecea:	bd38      	pop	{r3, r4, r5, pc}
 800ecec:	200055e8 	.word	0x200055e8

0800ecf0 <__errno>:
 800ecf0:	4b01      	ldr	r3, [pc, #4]	@ (800ecf8 <__errno+0x8>)
 800ecf2:	6818      	ldr	r0, [r3, #0]
 800ecf4:	4770      	bx	lr
 800ecf6:	bf00      	nop
 800ecf8:	20000164 	.word	0x20000164

0800ecfc <__libc_init_array>:
 800ecfc:	b570      	push	{r4, r5, r6, lr}
 800ecfe:	4d0d      	ldr	r5, [pc, #52]	@ (800ed34 <__libc_init_array+0x38>)
 800ed00:	4c0d      	ldr	r4, [pc, #52]	@ (800ed38 <__libc_init_array+0x3c>)
 800ed02:	1b64      	subs	r4, r4, r5
 800ed04:	10a4      	asrs	r4, r4, #2
 800ed06:	2600      	movs	r6, #0
 800ed08:	42a6      	cmp	r6, r4
 800ed0a:	d109      	bne.n	800ed20 <__libc_init_array+0x24>
 800ed0c:	4d0b      	ldr	r5, [pc, #44]	@ (800ed3c <__libc_init_array+0x40>)
 800ed0e:	4c0c      	ldr	r4, [pc, #48]	@ (800ed40 <__libc_init_array+0x44>)
 800ed10:	f002 f864 	bl	8010ddc <_init>
 800ed14:	1b64      	subs	r4, r4, r5
 800ed16:	10a4      	asrs	r4, r4, #2
 800ed18:	2600      	movs	r6, #0
 800ed1a:	42a6      	cmp	r6, r4
 800ed1c:	d105      	bne.n	800ed2a <__libc_init_array+0x2e>
 800ed1e:	bd70      	pop	{r4, r5, r6, pc}
 800ed20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed24:	4798      	blx	r3
 800ed26:	3601      	adds	r6, #1
 800ed28:	e7ee      	b.n	800ed08 <__libc_init_array+0xc>
 800ed2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed2e:	4798      	blx	r3
 800ed30:	3601      	adds	r6, #1
 800ed32:	e7f2      	b.n	800ed1a <__libc_init_array+0x1e>
 800ed34:	080114b8 	.word	0x080114b8
 800ed38:	080114b8 	.word	0x080114b8
 800ed3c:	080114b8 	.word	0x080114b8
 800ed40:	080114bc 	.word	0x080114bc

0800ed44 <__retarget_lock_init_recursive>:
 800ed44:	4770      	bx	lr

0800ed46 <__retarget_lock_acquire_recursive>:
 800ed46:	4770      	bx	lr

0800ed48 <__retarget_lock_release_recursive>:
 800ed48:	4770      	bx	lr

0800ed4a <memcpy>:
 800ed4a:	440a      	add	r2, r1
 800ed4c:	4291      	cmp	r1, r2
 800ed4e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed52:	d100      	bne.n	800ed56 <memcpy+0xc>
 800ed54:	4770      	bx	lr
 800ed56:	b510      	push	{r4, lr}
 800ed58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed60:	4291      	cmp	r1, r2
 800ed62:	d1f9      	bne.n	800ed58 <memcpy+0xe>
 800ed64:	bd10      	pop	{r4, pc}

0800ed66 <quorem>:
 800ed66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed6a:	6903      	ldr	r3, [r0, #16]
 800ed6c:	690c      	ldr	r4, [r1, #16]
 800ed6e:	42a3      	cmp	r3, r4
 800ed70:	4607      	mov	r7, r0
 800ed72:	db7e      	blt.n	800ee72 <quorem+0x10c>
 800ed74:	3c01      	subs	r4, #1
 800ed76:	f101 0814 	add.w	r8, r1, #20
 800ed7a:	00a3      	lsls	r3, r4, #2
 800ed7c:	f100 0514 	add.w	r5, r0, #20
 800ed80:	9300      	str	r3, [sp, #0]
 800ed82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed86:	9301      	str	r3, [sp, #4]
 800ed88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ed8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed90:	3301      	adds	r3, #1
 800ed92:	429a      	cmp	r2, r3
 800ed94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ed98:	fbb2 f6f3 	udiv	r6, r2, r3
 800ed9c:	d32e      	bcc.n	800edfc <quorem+0x96>
 800ed9e:	f04f 0a00 	mov.w	sl, #0
 800eda2:	46c4      	mov	ip, r8
 800eda4:	46ae      	mov	lr, r5
 800eda6:	46d3      	mov	fp, sl
 800eda8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800edac:	b298      	uxth	r0, r3
 800edae:	fb06 a000 	mla	r0, r6, r0, sl
 800edb2:	0c02      	lsrs	r2, r0, #16
 800edb4:	0c1b      	lsrs	r3, r3, #16
 800edb6:	fb06 2303 	mla	r3, r6, r3, r2
 800edba:	f8de 2000 	ldr.w	r2, [lr]
 800edbe:	b280      	uxth	r0, r0
 800edc0:	b292      	uxth	r2, r2
 800edc2:	1a12      	subs	r2, r2, r0
 800edc4:	445a      	add	r2, fp
 800edc6:	f8de 0000 	ldr.w	r0, [lr]
 800edca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800edce:	b29b      	uxth	r3, r3
 800edd0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800edd4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800edd8:	b292      	uxth	r2, r2
 800edda:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800edde:	45e1      	cmp	r9, ip
 800ede0:	f84e 2b04 	str.w	r2, [lr], #4
 800ede4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ede8:	d2de      	bcs.n	800eda8 <quorem+0x42>
 800edea:	9b00      	ldr	r3, [sp, #0]
 800edec:	58eb      	ldr	r3, [r5, r3]
 800edee:	b92b      	cbnz	r3, 800edfc <quorem+0x96>
 800edf0:	9b01      	ldr	r3, [sp, #4]
 800edf2:	3b04      	subs	r3, #4
 800edf4:	429d      	cmp	r5, r3
 800edf6:	461a      	mov	r2, r3
 800edf8:	d32f      	bcc.n	800ee5a <quorem+0xf4>
 800edfa:	613c      	str	r4, [r7, #16]
 800edfc:	4638      	mov	r0, r7
 800edfe:	f001 f979 	bl	80100f4 <__mcmp>
 800ee02:	2800      	cmp	r0, #0
 800ee04:	db25      	blt.n	800ee52 <quorem+0xec>
 800ee06:	4629      	mov	r1, r5
 800ee08:	2000      	movs	r0, #0
 800ee0a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ee0e:	f8d1 c000 	ldr.w	ip, [r1]
 800ee12:	fa1f fe82 	uxth.w	lr, r2
 800ee16:	fa1f f38c 	uxth.w	r3, ip
 800ee1a:	eba3 030e 	sub.w	r3, r3, lr
 800ee1e:	4403      	add	r3, r0
 800ee20:	0c12      	lsrs	r2, r2, #16
 800ee22:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ee26:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ee2a:	b29b      	uxth	r3, r3
 800ee2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee30:	45c1      	cmp	r9, r8
 800ee32:	f841 3b04 	str.w	r3, [r1], #4
 800ee36:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ee3a:	d2e6      	bcs.n	800ee0a <quorem+0xa4>
 800ee3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee44:	b922      	cbnz	r2, 800ee50 <quorem+0xea>
 800ee46:	3b04      	subs	r3, #4
 800ee48:	429d      	cmp	r5, r3
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	d30b      	bcc.n	800ee66 <quorem+0x100>
 800ee4e:	613c      	str	r4, [r7, #16]
 800ee50:	3601      	adds	r6, #1
 800ee52:	4630      	mov	r0, r6
 800ee54:	b003      	add	sp, #12
 800ee56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee5a:	6812      	ldr	r2, [r2, #0]
 800ee5c:	3b04      	subs	r3, #4
 800ee5e:	2a00      	cmp	r2, #0
 800ee60:	d1cb      	bne.n	800edfa <quorem+0x94>
 800ee62:	3c01      	subs	r4, #1
 800ee64:	e7c6      	b.n	800edf4 <quorem+0x8e>
 800ee66:	6812      	ldr	r2, [r2, #0]
 800ee68:	3b04      	subs	r3, #4
 800ee6a:	2a00      	cmp	r2, #0
 800ee6c:	d1ef      	bne.n	800ee4e <quorem+0xe8>
 800ee6e:	3c01      	subs	r4, #1
 800ee70:	e7ea      	b.n	800ee48 <quorem+0xe2>
 800ee72:	2000      	movs	r0, #0
 800ee74:	e7ee      	b.n	800ee54 <quorem+0xee>
	...

0800ee78 <_dtoa_r>:
 800ee78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee7c:	69c7      	ldr	r7, [r0, #28]
 800ee7e:	b099      	sub	sp, #100	@ 0x64
 800ee80:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ee84:	ec55 4b10 	vmov	r4, r5, d0
 800ee88:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ee8a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ee8c:	4683      	mov	fp, r0
 800ee8e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee90:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ee92:	b97f      	cbnz	r7, 800eeb4 <_dtoa_r+0x3c>
 800ee94:	2010      	movs	r0, #16
 800ee96:	f000 fdfd 	bl	800fa94 <malloc>
 800ee9a:	4602      	mov	r2, r0
 800ee9c:	f8cb 001c 	str.w	r0, [fp, #28]
 800eea0:	b920      	cbnz	r0, 800eeac <_dtoa_r+0x34>
 800eea2:	4ba7      	ldr	r3, [pc, #668]	@ (800f140 <_dtoa_r+0x2c8>)
 800eea4:	21ef      	movs	r1, #239	@ 0xef
 800eea6:	48a7      	ldr	r0, [pc, #668]	@ (800f144 <_dtoa_r+0x2cc>)
 800eea8:	f001 fc5a 	bl	8010760 <__assert_func>
 800eeac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800eeb0:	6007      	str	r7, [r0, #0]
 800eeb2:	60c7      	str	r7, [r0, #12]
 800eeb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800eeb8:	6819      	ldr	r1, [r3, #0]
 800eeba:	b159      	cbz	r1, 800eed4 <_dtoa_r+0x5c>
 800eebc:	685a      	ldr	r2, [r3, #4]
 800eebe:	604a      	str	r2, [r1, #4]
 800eec0:	2301      	movs	r3, #1
 800eec2:	4093      	lsls	r3, r2
 800eec4:	608b      	str	r3, [r1, #8]
 800eec6:	4658      	mov	r0, fp
 800eec8:	f000 feda 	bl	800fc80 <_Bfree>
 800eecc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800eed0:	2200      	movs	r2, #0
 800eed2:	601a      	str	r2, [r3, #0]
 800eed4:	1e2b      	subs	r3, r5, #0
 800eed6:	bfb9      	ittee	lt
 800eed8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800eedc:	9303      	strlt	r3, [sp, #12]
 800eede:	2300      	movge	r3, #0
 800eee0:	6033      	strge	r3, [r6, #0]
 800eee2:	9f03      	ldr	r7, [sp, #12]
 800eee4:	4b98      	ldr	r3, [pc, #608]	@ (800f148 <_dtoa_r+0x2d0>)
 800eee6:	bfbc      	itt	lt
 800eee8:	2201      	movlt	r2, #1
 800eeea:	6032      	strlt	r2, [r6, #0]
 800eeec:	43bb      	bics	r3, r7
 800eeee:	d112      	bne.n	800ef16 <_dtoa_r+0x9e>
 800eef0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800eef2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800eef6:	6013      	str	r3, [r2, #0]
 800eef8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eefc:	4323      	orrs	r3, r4
 800eefe:	f000 854d 	beq.w	800f99c <_dtoa_r+0xb24>
 800ef02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ef04:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f15c <_dtoa_r+0x2e4>
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	f000 854f 	beq.w	800f9ac <_dtoa_r+0xb34>
 800ef0e:	f10a 0303 	add.w	r3, sl, #3
 800ef12:	f000 bd49 	b.w	800f9a8 <_dtoa_r+0xb30>
 800ef16:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	ec51 0b17 	vmov	r0, r1, d7
 800ef20:	2300      	movs	r3, #0
 800ef22:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ef26:	f7f1 fdcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef2a:	4680      	mov	r8, r0
 800ef2c:	b158      	cbz	r0, 800ef46 <_dtoa_r+0xce>
 800ef2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ef30:	2301      	movs	r3, #1
 800ef32:	6013      	str	r3, [r2, #0]
 800ef34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ef36:	b113      	cbz	r3, 800ef3e <_dtoa_r+0xc6>
 800ef38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ef3a:	4b84      	ldr	r3, [pc, #528]	@ (800f14c <_dtoa_r+0x2d4>)
 800ef3c:	6013      	str	r3, [r2, #0]
 800ef3e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f160 <_dtoa_r+0x2e8>
 800ef42:	f000 bd33 	b.w	800f9ac <_dtoa_r+0xb34>
 800ef46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ef4a:	aa16      	add	r2, sp, #88	@ 0x58
 800ef4c:	a917      	add	r1, sp, #92	@ 0x5c
 800ef4e:	4658      	mov	r0, fp
 800ef50:	f001 f980 	bl	8010254 <__d2b>
 800ef54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ef58:	4681      	mov	r9, r0
 800ef5a:	2e00      	cmp	r6, #0
 800ef5c:	d077      	beq.n	800f04e <_dtoa_r+0x1d6>
 800ef5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ef60:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ef64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ef6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ef70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ef74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ef78:	4619      	mov	r1, r3
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	4b74      	ldr	r3, [pc, #464]	@ (800f150 <_dtoa_r+0x2d8>)
 800ef7e:	f7f1 f983 	bl	8000288 <__aeabi_dsub>
 800ef82:	a369      	add	r3, pc, #420	@ (adr r3, 800f128 <_dtoa_r+0x2b0>)
 800ef84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef88:	f7f1 fb36 	bl	80005f8 <__aeabi_dmul>
 800ef8c:	a368      	add	r3, pc, #416	@ (adr r3, 800f130 <_dtoa_r+0x2b8>)
 800ef8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef92:	f7f1 f97b 	bl	800028c <__adddf3>
 800ef96:	4604      	mov	r4, r0
 800ef98:	4630      	mov	r0, r6
 800ef9a:	460d      	mov	r5, r1
 800ef9c:	f7f1 fac2 	bl	8000524 <__aeabi_i2d>
 800efa0:	a365      	add	r3, pc, #404	@ (adr r3, 800f138 <_dtoa_r+0x2c0>)
 800efa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa6:	f7f1 fb27 	bl	80005f8 <__aeabi_dmul>
 800efaa:	4602      	mov	r2, r0
 800efac:	460b      	mov	r3, r1
 800efae:	4620      	mov	r0, r4
 800efb0:	4629      	mov	r1, r5
 800efb2:	f7f1 f96b 	bl	800028c <__adddf3>
 800efb6:	4604      	mov	r4, r0
 800efb8:	460d      	mov	r5, r1
 800efba:	f7f1 fdcd 	bl	8000b58 <__aeabi_d2iz>
 800efbe:	2200      	movs	r2, #0
 800efc0:	4607      	mov	r7, r0
 800efc2:	2300      	movs	r3, #0
 800efc4:	4620      	mov	r0, r4
 800efc6:	4629      	mov	r1, r5
 800efc8:	f7f1 fd88 	bl	8000adc <__aeabi_dcmplt>
 800efcc:	b140      	cbz	r0, 800efe0 <_dtoa_r+0x168>
 800efce:	4638      	mov	r0, r7
 800efd0:	f7f1 faa8 	bl	8000524 <__aeabi_i2d>
 800efd4:	4622      	mov	r2, r4
 800efd6:	462b      	mov	r3, r5
 800efd8:	f7f1 fd76 	bl	8000ac8 <__aeabi_dcmpeq>
 800efdc:	b900      	cbnz	r0, 800efe0 <_dtoa_r+0x168>
 800efde:	3f01      	subs	r7, #1
 800efe0:	2f16      	cmp	r7, #22
 800efe2:	d851      	bhi.n	800f088 <_dtoa_r+0x210>
 800efe4:	4b5b      	ldr	r3, [pc, #364]	@ (800f154 <_dtoa_r+0x2dc>)
 800efe6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800efea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eff2:	f7f1 fd73 	bl	8000adc <__aeabi_dcmplt>
 800eff6:	2800      	cmp	r0, #0
 800eff8:	d048      	beq.n	800f08c <_dtoa_r+0x214>
 800effa:	3f01      	subs	r7, #1
 800effc:	2300      	movs	r3, #0
 800effe:	9312      	str	r3, [sp, #72]	@ 0x48
 800f000:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f002:	1b9b      	subs	r3, r3, r6
 800f004:	1e5a      	subs	r2, r3, #1
 800f006:	bf44      	itt	mi
 800f008:	f1c3 0801 	rsbmi	r8, r3, #1
 800f00c:	2300      	movmi	r3, #0
 800f00e:	9208      	str	r2, [sp, #32]
 800f010:	bf54      	ite	pl
 800f012:	f04f 0800 	movpl.w	r8, #0
 800f016:	9308      	strmi	r3, [sp, #32]
 800f018:	2f00      	cmp	r7, #0
 800f01a:	db39      	blt.n	800f090 <_dtoa_r+0x218>
 800f01c:	9b08      	ldr	r3, [sp, #32]
 800f01e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f020:	443b      	add	r3, r7
 800f022:	9308      	str	r3, [sp, #32]
 800f024:	2300      	movs	r3, #0
 800f026:	930a      	str	r3, [sp, #40]	@ 0x28
 800f028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f02a:	2b09      	cmp	r3, #9
 800f02c:	d864      	bhi.n	800f0f8 <_dtoa_r+0x280>
 800f02e:	2b05      	cmp	r3, #5
 800f030:	bfc4      	itt	gt
 800f032:	3b04      	subgt	r3, #4
 800f034:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f038:	f1a3 0302 	sub.w	r3, r3, #2
 800f03c:	bfcc      	ite	gt
 800f03e:	2400      	movgt	r4, #0
 800f040:	2401      	movle	r4, #1
 800f042:	2b03      	cmp	r3, #3
 800f044:	d863      	bhi.n	800f10e <_dtoa_r+0x296>
 800f046:	e8df f003 	tbb	[pc, r3]
 800f04a:	372a      	.short	0x372a
 800f04c:	5535      	.short	0x5535
 800f04e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f052:	441e      	add	r6, r3
 800f054:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f058:	2b20      	cmp	r3, #32
 800f05a:	bfc1      	itttt	gt
 800f05c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f060:	409f      	lslgt	r7, r3
 800f062:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f066:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f06a:	bfd6      	itet	le
 800f06c:	f1c3 0320 	rsble	r3, r3, #32
 800f070:	ea47 0003 	orrgt.w	r0, r7, r3
 800f074:	fa04 f003 	lslle.w	r0, r4, r3
 800f078:	f7f1 fa44 	bl	8000504 <__aeabi_ui2d>
 800f07c:	2201      	movs	r2, #1
 800f07e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f082:	3e01      	subs	r6, #1
 800f084:	9214      	str	r2, [sp, #80]	@ 0x50
 800f086:	e777      	b.n	800ef78 <_dtoa_r+0x100>
 800f088:	2301      	movs	r3, #1
 800f08a:	e7b8      	b.n	800effe <_dtoa_r+0x186>
 800f08c:	9012      	str	r0, [sp, #72]	@ 0x48
 800f08e:	e7b7      	b.n	800f000 <_dtoa_r+0x188>
 800f090:	427b      	negs	r3, r7
 800f092:	930a      	str	r3, [sp, #40]	@ 0x28
 800f094:	2300      	movs	r3, #0
 800f096:	eba8 0807 	sub.w	r8, r8, r7
 800f09a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f09c:	e7c4      	b.n	800f028 <_dtoa_r+0x1b0>
 800f09e:	2300      	movs	r3, #0
 800f0a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f0a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	dc35      	bgt.n	800f114 <_dtoa_r+0x29c>
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	9300      	str	r3, [sp, #0]
 800f0ac:	9307      	str	r3, [sp, #28]
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800f0b2:	e00b      	b.n	800f0cc <_dtoa_r+0x254>
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	e7f3      	b.n	800f0a0 <_dtoa_r+0x228>
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f0bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0be:	18fb      	adds	r3, r7, r3
 800f0c0:	9300      	str	r3, [sp, #0]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	9307      	str	r3, [sp, #28]
 800f0c8:	bfb8      	it	lt
 800f0ca:	2301      	movlt	r3, #1
 800f0cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f0d0:	2100      	movs	r1, #0
 800f0d2:	2204      	movs	r2, #4
 800f0d4:	f102 0514 	add.w	r5, r2, #20
 800f0d8:	429d      	cmp	r5, r3
 800f0da:	d91f      	bls.n	800f11c <_dtoa_r+0x2a4>
 800f0dc:	6041      	str	r1, [r0, #4]
 800f0de:	4658      	mov	r0, fp
 800f0e0:	f000 fd8e 	bl	800fc00 <_Balloc>
 800f0e4:	4682      	mov	sl, r0
 800f0e6:	2800      	cmp	r0, #0
 800f0e8:	d13c      	bne.n	800f164 <_dtoa_r+0x2ec>
 800f0ea:	4b1b      	ldr	r3, [pc, #108]	@ (800f158 <_dtoa_r+0x2e0>)
 800f0ec:	4602      	mov	r2, r0
 800f0ee:	f240 11af 	movw	r1, #431	@ 0x1af
 800f0f2:	e6d8      	b.n	800eea6 <_dtoa_r+0x2e>
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	e7e0      	b.n	800f0ba <_dtoa_r+0x242>
 800f0f8:	2401      	movs	r4, #1
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f100:	f04f 33ff 	mov.w	r3, #4294967295
 800f104:	9300      	str	r3, [sp, #0]
 800f106:	9307      	str	r3, [sp, #28]
 800f108:	2200      	movs	r2, #0
 800f10a:	2312      	movs	r3, #18
 800f10c:	e7d0      	b.n	800f0b0 <_dtoa_r+0x238>
 800f10e:	2301      	movs	r3, #1
 800f110:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f112:	e7f5      	b.n	800f100 <_dtoa_r+0x288>
 800f114:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f116:	9300      	str	r3, [sp, #0]
 800f118:	9307      	str	r3, [sp, #28]
 800f11a:	e7d7      	b.n	800f0cc <_dtoa_r+0x254>
 800f11c:	3101      	adds	r1, #1
 800f11e:	0052      	lsls	r2, r2, #1
 800f120:	e7d8      	b.n	800f0d4 <_dtoa_r+0x25c>
 800f122:	bf00      	nop
 800f124:	f3af 8000 	nop.w
 800f128:	636f4361 	.word	0x636f4361
 800f12c:	3fd287a7 	.word	0x3fd287a7
 800f130:	8b60c8b3 	.word	0x8b60c8b3
 800f134:	3fc68a28 	.word	0x3fc68a28
 800f138:	509f79fb 	.word	0x509f79fb
 800f13c:	3fd34413 	.word	0x3fd34413
 800f140:	0801127e 	.word	0x0801127e
 800f144:	08011295 	.word	0x08011295
 800f148:	7ff00000 	.word	0x7ff00000
 800f14c:	0801124e 	.word	0x0801124e
 800f150:	3ff80000 	.word	0x3ff80000
 800f154:	08011390 	.word	0x08011390
 800f158:	080112ed 	.word	0x080112ed
 800f15c:	0801127a 	.word	0x0801127a
 800f160:	0801124d 	.word	0x0801124d
 800f164:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f168:	6018      	str	r0, [r3, #0]
 800f16a:	9b07      	ldr	r3, [sp, #28]
 800f16c:	2b0e      	cmp	r3, #14
 800f16e:	f200 80a4 	bhi.w	800f2ba <_dtoa_r+0x442>
 800f172:	2c00      	cmp	r4, #0
 800f174:	f000 80a1 	beq.w	800f2ba <_dtoa_r+0x442>
 800f178:	2f00      	cmp	r7, #0
 800f17a:	dd33      	ble.n	800f1e4 <_dtoa_r+0x36c>
 800f17c:	4bad      	ldr	r3, [pc, #692]	@ (800f434 <_dtoa_r+0x5bc>)
 800f17e:	f007 020f 	and.w	r2, r7, #15
 800f182:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f186:	ed93 7b00 	vldr	d7, [r3]
 800f18a:	05f8      	lsls	r0, r7, #23
 800f18c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f190:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f194:	d516      	bpl.n	800f1c4 <_dtoa_r+0x34c>
 800f196:	4ba8      	ldr	r3, [pc, #672]	@ (800f438 <_dtoa_r+0x5c0>)
 800f198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f19c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f1a0:	f7f1 fb54 	bl	800084c <__aeabi_ddiv>
 800f1a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1a8:	f004 040f 	and.w	r4, r4, #15
 800f1ac:	2603      	movs	r6, #3
 800f1ae:	4da2      	ldr	r5, [pc, #648]	@ (800f438 <_dtoa_r+0x5c0>)
 800f1b0:	b954      	cbnz	r4, 800f1c8 <_dtoa_r+0x350>
 800f1b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1ba:	f7f1 fb47 	bl	800084c <__aeabi_ddiv>
 800f1be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1c2:	e028      	b.n	800f216 <_dtoa_r+0x39e>
 800f1c4:	2602      	movs	r6, #2
 800f1c6:	e7f2      	b.n	800f1ae <_dtoa_r+0x336>
 800f1c8:	07e1      	lsls	r1, r4, #31
 800f1ca:	d508      	bpl.n	800f1de <_dtoa_r+0x366>
 800f1cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f1d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f1d4:	f7f1 fa10 	bl	80005f8 <__aeabi_dmul>
 800f1d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f1dc:	3601      	adds	r6, #1
 800f1de:	1064      	asrs	r4, r4, #1
 800f1e0:	3508      	adds	r5, #8
 800f1e2:	e7e5      	b.n	800f1b0 <_dtoa_r+0x338>
 800f1e4:	f000 80d2 	beq.w	800f38c <_dtoa_r+0x514>
 800f1e8:	427c      	negs	r4, r7
 800f1ea:	4b92      	ldr	r3, [pc, #584]	@ (800f434 <_dtoa_r+0x5bc>)
 800f1ec:	4d92      	ldr	r5, [pc, #584]	@ (800f438 <_dtoa_r+0x5c0>)
 800f1ee:	f004 020f 	and.w	r2, r4, #15
 800f1f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1fe:	f7f1 f9fb 	bl	80005f8 <__aeabi_dmul>
 800f202:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f206:	1124      	asrs	r4, r4, #4
 800f208:	2300      	movs	r3, #0
 800f20a:	2602      	movs	r6, #2
 800f20c:	2c00      	cmp	r4, #0
 800f20e:	f040 80b2 	bne.w	800f376 <_dtoa_r+0x4fe>
 800f212:	2b00      	cmp	r3, #0
 800f214:	d1d3      	bne.n	800f1be <_dtoa_r+0x346>
 800f216:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f218:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	f000 80b7 	beq.w	800f390 <_dtoa_r+0x518>
 800f222:	4b86      	ldr	r3, [pc, #536]	@ (800f43c <_dtoa_r+0x5c4>)
 800f224:	2200      	movs	r2, #0
 800f226:	4620      	mov	r0, r4
 800f228:	4629      	mov	r1, r5
 800f22a:	f7f1 fc57 	bl	8000adc <__aeabi_dcmplt>
 800f22e:	2800      	cmp	r0, #0
 800f230:	f000 80ae 	beq.w	800f390 <_dtoa_r+0x518>
 800f234:	9b07      	ldr	r3, [sp, #28]
 800f236:	2b00      	cmp	r3, #0
 800f238:	f000 80aa 	beq.w	800f390 <_dtoa_r+0x518>
 800f23c:	9b00      	ldr	r3, [sp, #0]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	dd37      	ble.n	800f2b2 <_dtoa_r+0x43a>
 800f242:	1e7b      	subs	r3, r7, #1
 800f244:	9304      	str	r3, [sp, #16]
 800f246:	4620      	mov	r0, r4
 800f248:	4b7d      	ldr	r3, [pc, #500]	@ (800f440 <_dtoa_r+0x5c8>)
 800f24a:	2200      	movs	r2, #0
 800f24c:	4629      	mov	r1, r5
 800f24e:	f7f1 f9d3 	bl	80005f8 <__aeabi_dmul>
 800f252:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f256:	9c00      	ldr	r4, [sp, #0]
 800f258:	3601      	adds	r6, #1
 800f25a:	4630      	mov	r0, r6
 800f25c:	f7f1 f962 	bl	8000524 <__aeabi_i2d>
 800f260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f264:	f7f1 f9c8 	bl	80005f8 <__aeabi_dmul>
 800f268:	4b76      	ldr	r3, [pc, #472]	@ (800f444 <_dtoa_r+0x5cc>)
 800f26a:	2200      	movs	r2, #0
 800f26c:	f7f1 f80e 	bl	800028c <__adddf3>
 800f270:	4605      	mov	r5, r0
 800f272:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f276:	2c00      	cmp	r4, #0
 800f278:	f040 808d 	bne.w	800f396 <_dtoa_r+0x51e>
 800f27c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f280:	4b71      	ldr	r3, [pc, #452]	@ (800f448 <_dtoa_r+0x5d0>)
 800f282:	2200      	movs	r2, #0
 800f284:	f7f1 f800 	bl	8000288 <__aeabi_dsub>
 800f288:	4602      	mov	r2, r0
 800f28a:	460b      	mov	r3, r1
 800f28c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f290:	462a      	mov	r2, r5
 800f292:	4633      	mov	r3, r6
 800f294:	f7f1 fc40 	bl	8000b18 <__aeabi_dcmpgt>
 800f298:	2800      	cmp	r0, #0
 800f29a:	f040 828b 	bne.w	800f7b4 <_dtoa_r+0x93c>
 800f29e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2a2:	462a      	mov	r2, r5
 800f2a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f2a8:	f7f1 fc18 	bl	8000adc <__aeabi_dcmplt>
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	f040 8128 	bne.w	800f502 <_dtoa_r+0x68a>
 800f2b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f2b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f2ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	f2c0 815a 	blt.w	800f576 <_dtoa_r+0x6fe>
 800f2c2:	2f0e      	cmp	r7, #14
 800f2c4:	f300 8157 	bgt.w	800f576 <_dtoa_r+0x6fe>
 800f2c8:	4b5a      	ldr	r3, [pc, #360]	@ (800f434 <_dtoa_r+0x5bc>)
 800f2ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f2ce:	ed93 7b00 	vldr	d7, [r3]
 800f2d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	ed8d 7b00 	vstr	d7, [sp]
 800f2da:	da03      	bge.n	800f2e4 <_dtoa_r+0x46c>
 800f2dc:	9b07      	ldr	r3, [sp, #28]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	f340 8101 	ble.w	800f4e6 <_dtoa_r+0x66e>
 800f2e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f2e8:	4656      	mov	r6, sl
 800f2ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	4629      	mov	r1, r5
 800f2f2:	f7f1 faab 	bl	800084c <__aeabi_ddiv>
 800f2f6:	f7f1 fc2f 	bl	8000b58 <__aeabi_d2iz>
 800f2fa:	4680      	mov	r8, r0
 800f2fc:	f7f1 f912 	bl	8000524 <__aeabi_i2d>
 800f300:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f304:	f7f1 f978 	bl	80005f8 <__aeabi_dmul>
 800f308:	4602      	mov	r2, r0
 800f30a:	460b      	mov	r3, r1
 800f30c:	4620      	mov	r0, r4
 800f30e:	4629      	mov	r1, r5
 800f310:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f314:	f7f0 ffb8 	bl	8000288 <__aeabi_dsub>
 800f318:	f806 4b01 	strb.w	r4, [r6], #1
 800f31c:	9d07      	ldr	r5, [sp, #28]
 800f31e:	eba6 040a 	sub.w	r4, r6, sl
 800f322:	42a5      	cmp	r5, r4
 800f324:	4602      	mov	r2, r0
 800f326:	460b      	mov	r3, r1
 800f328:	f040 8117 	bne.w	800f55a <_dtoa_r+0x6e2>
 800f32c:	f7f0 ffae 	bl	800028c <__adddf3>
 800f330:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f334:	4604      	mov	r4, r0
 800f336:	460d      	mov	r5, r1
 800f338:	f7f1 fbee 	bl	8000b18 <__aeabi_dcmpgt>
 800f33c:	2800      	cmp	r0, #0
 800f33e:	f040 80f9 	bne.w	800f534 <_dtoa_r+0x6bc>
 800f342:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f346:	4620      	mov	r0, r4
 800f348:	4629      	mov	r1, r5
 800f34a:	f7f1 fbbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800f34e:	b118      	cbz	r0, 800f358 <_dtoa_r+0x4e0>
 800f350:	f018 0f01 	tst.w	r8, #1
 800f354:	f040 80ee 	bne.w	800f534 <_dtoa_r+0x6bc>
 800f358:	4649      	mov	r1, r9
 800f35a:	4658      	mov	r0, fp
 800f35c:	f000 fc90 	bl	800fc80 <_Bfree>
 800f360:	2300      	movs	r3, #0
 800f362:	7033      	strb	r3, [r6, #0]
 800f364:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f366:	3701      	adds	r7, #1
 800f368:	601f      	str	r7, [r3, #0]
 800f36a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	f000 831d 	beq.w	800f9ac <_dtoa_r+0xb34>
 800f372:	601e      	str	r6, [r3, #0]
 800f374:	e31a      	b.n	800f9ac <_dtoa_r+0xb34>
 800f376:	07e2      	lsls	r2, r4, #31
 800f378:	d505      	bpl.n	800f386 <_dtoa_r+0x50e>
 800f37a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f37e:	f7f1 f93b 	bl	80005f8 <__aeabi_dmul>
 800f382:	3601      	adds	r6, #1
 800f384:	2301      	movs	r3, #1
 800f386:	1064      	asrs	r4, r4, #1
 800f388:	3508      	adds	r5, #8
 800f38a:	e73f      	b.n	800f20c <_dtoa_r+0x394>
 800f38c:	2602      	movs	r6, #2
 800f38e:	e742      	b.n	800f216 <_dtoa_r+0x39e>
 800f390:	9c07      	ldr	r4, [sp, #28]
 800f392:	9704      	str	r7, [sp, #16]
 800f394:	e761      	b.n	800f25a <_dtoa_r+0x3e2>
 800f396:	4b27      	ldr	r3, [pc, #156]	@ (800f434 <_dtoa_r+0x5bc>)
 800f398:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f39a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f39e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f3a2:	4454      	add	r4, sl
 800f3a4:	2900      	cmp	r1, #0
 800f3a6:	d053      	beq.n	800f450 <_dtoa_r+0x5d8>
 800f3a8:	4928      	ldr	r1, [pc, #160]	@ (800f44c <_dtoa_r+0x5d4>)
 800f3aa:	2000      	movs	r0, #0
 800f3ac:	f7f1 fa4e 	bl	800084c <__aeabi_ddiv>
 800f3b0:	4633      	mov	r3, r6
 800f3b2:	462a      	mov	r2, r5
 800f3b4:	f7f0 ff68 	bl	8000288 <__aeabi_dsub>
 800f3b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f3bc:	4656      	mov	r6, sl
 800f3be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3c2:	f7f1 fbc9 	bl	8000b58 <__aeabi_d2iz>
 800f3c6:	4605      	mov	r5, r0
 800f3c8:	f7f1 f8ac 	bl	8000524 <__aeabi_i2d>
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	460b      	mov	r3, r1
 800f3d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3d4:	f7f0 ff58 	bl	8000288 <__aeabi_dsub>
 800f3d8:	3530      	adds	r5, #48	@ 0x30
 800f3da:	4602      	mov	r2, r0
 800f3dc:	460b      	mov	r3, r1
 800f3de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f3e2:	f806 5b01 	strb.w	r5, [r6], #1
 800f3e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f3ea:	f7f1 fb77 	bl	8000adc <__aeabi_dcmplt>
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	d171      	bne.n	800f4d6 <_dtoa_r+0x65e>
 800f3f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f3f6:	4911      	ldr	r1, [pc, #68]	@ (800f43c <_dtoa_r+0x5c4>)
 800f3f8:	2000      	movs	r0, #0
 800f3fa:	f7f0 ff45 	bl	8000288 <__aeabi_dsub>
 800f3fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f402:	f7f1 fb6b 	bl	8000adc <__aeabi_dcmplt>
 800f406:	2800      	cmp	r0, #0
 800f408:	f040 8095 	bne.w	800f536 <_dtoa_r+0x6be>
 800f40c:	42a6      	cmp	r6, r4
 800f40e:	f43f af50 	beq.w	800f2b2 <_dtoa_r+0x43a>
 800f412:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f416:	4b0a      	ldr	r3, [pc, #40]	@ (800f440 <_dtoa_r+0x5c8>)
 800f418:	2200      	movs	r2, #0
 800f41a:	f7f1 f8ed 	bl	80005f8 <__aeabi_dmul>
 800f41e:	4b08      	ldr	r3, [pc, #32]	@ (800f440 <_dtoa_r+0x5c8>)
 800f420:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f424:	2200      	movs	r2, #0
 800f426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f42a:	f7f1 f8e5 	bl	80005f8 <__aeabi_dmul>
 800f42e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f432:	e7c4      	b.n	800f3be <_dtoa_r+0x546>
 800f434:	08011390 	.word	0x08011390
 800f438:	08011368 	.word	0x08011368
 800f43c:	3ff00000 	.word	0x3ff00000
 800f440:	40240000 	.word	0x40240000
 800f444:	401c0000 	.word	0x401c0000
 800f448:	40140000 	.word	0x40140000
 800f44c:	3fe00000 	.word	0x3fe00000
 800f450:	4631      	mov	r1, r6
 800f452:	4628      	mov	r0, r5
 800f454:	f7f1 f8d0 	bl	80005f8 <__aeabi_dmul>
 800f458:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f45c:	9415      	str	r4, [sp, #84]	@ 0x54
 800f45e:	4656      	mov	r6, sl
 800f460:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f464:	f7f1 fb78 	bl	8000b58 <__aeabi_d2iz>
 800f468:	4605      	mov	r5, r0
 800f46a:	f7f1 f85b 	bl	8000524 <__aeabi_i2d>
 800f46e:	4602      	mov	r2, r0
 800f470:	460b      	mov	r3, r1
 800f472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f476:	f7f0 ff07 	bl	8000288 <__aeabi_dsub>
 800f47a:	3530      	adds	r5, #48	@ 0x30
 800f47c:	f806 5b01 	strb.w	r5, [r6], #1
 800f480:	4602      	mov	r2, r0
 800f482:	460b      	mov	r3, r1
 800f484:	42a6      	cmp	r6, r4
 800f486:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f48a:	f04f 0200 	mov.w	r2, #0
 800f48e:	d124      	bne.n	800f4da <_dtoa_r+0x662>
 800f490:	4bac      	ldr	r3, [pc, #688]	@ (800f744 <_dtoa_r+0x8cc>)
 800f492:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f496:	f7f0 fef9 	bl	800028c <__adddf3>
 800f49a:	4602      	mov	r2, r0
 800f49c:	460b      	mov	r3, r1
 800f49e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4a2:	f7f1 fb39 	bl	8000b18 <__aeabi_dcmpgt>
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	d145      	bne.n	800f536 <_dtoa_r+0x6be>
 800f4aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f4ae:	49a5      	ldr	r1, [pc, #660]	@ (800f744 <_dtoa_r+0x8cc>)
 800f4b0:	2000      	movs	r0, #0
 800f4b2:	f7f0 fee9 	bl	8000288 <__aeabi_dsub>
 800f4b6:	4602      	mov	r2, r0
 800f4b8:	460b      	mov	r3, r1
 800f4ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4be:	f7f1 fb0d 	bl	8000adc <__aeabi_dcmplt>
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	f43f aef5 	beq.w	800f2b2 <_dtoa_r+0x43a>
 800f4c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f4ca:	1e73      	subs	r3, r6, #1
 800f4cc:	9315      	str	r3, [sp, #84]	@ 0x54
 800f4ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f4d2:	2b30      	cmp	r3, #48	@ 0x30
 800f4d4:	d0f8      	beq.n	800f4c8 <_dtoa_r+0x650>
 800f4d6:	9f04      	ldr	r7, [sp, #16]
 800f4d8:	e73e      	b.n	800f358 <_dtoa_r+0x4e0>
 800f4da:	4b9b      	ldr	r3, [pc, #620]	@ (800f748 <_dtoa_r+0x8d0>)
 800f4dc:	f7f1 f88c 	bl	80005f8 <__aeabi_dmul>
 800f4e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4e4:	e7bc      	b.n	800f460 <_dtoa_r+0x5e8>
 800f4e6:	d10c      	bne.n	800f502 <_dtoa_r+0x68a>
 800f4e8:	4b98      	ldr	r3, [pc, #608]	@ (800f74c <_dtoa_r+0x8d4>)
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f4f0:	f7f1 f882 	bl	80005f8 <__aeabi_dmul>
 800f4f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4f8:	f7f1 fb04 	bl	8000b04 <__aeabi_dcmpge>
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	f000 8157 	beq.w	800f7b0 <_dtoa_r+0x938>
 800f502:	2400      	movs	r4, #0
 800f504:	4625      	mov	r5, r4
 800f506:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f508:	43db      	mvns	r3, r3
 800f50a:	9304      	str	r3, [sp, #16]
 800f50c:	4656      	mov	r6, sl
 800f50e:	2700      	movs	r7, #0
 800f510:	4621      	mov	r1, r4
 800f512:	4658      	mov	r0, fp
 800f514:	f000 fbb4 	bl	800fc80 <_Bfree>
 800f518:	2d00      	cmp	r5, #0
 800f51a:	d0dc      	beq.n	800f4d6 <_dtoa_r+0x65e>
 800f51c:	b12f      	cbz	r7, 800f52a <_dtoa_r+0x6b2>
 800f51e:	42af      	cmp	r7, r5
 800f520:	d003      	beq.n	800f52a <_dtoa_r+0x6b2>
 800f522:	4639      	mov	r1, r7
 800f524:	4658      	mov	r0, fp
 800f526:	f000 fbab 	bl	800fc80 <_Bfree>
 800f52a:	4629      	mov	r1, r5
 800f52c:	4658      	mov	r0, fp
 800f52e:	f000 fba7 	bl	800fc80 <_Bfree>
 800f532:	e7d0      	b.n	800f4d6 <_dtoa_r+0x65e>
 800f534:	9704      	str	r7, [sp, #16]
 800f536:	4633      	mov	r3, r6
 800f538:	461e      	mov	r6, r3
 800f53a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f53e:	2a39      	cmp	r2, #57	@ 0x39
 800f540:	d107      	bne.n	800f552 <_dtoa_r+0x6da>
 800f542:	459a      	cmp	sl, r3
 800f544:	d1f8      	bne.n	800f538 <_dtoa_r+0x6c0>
 800f546:	9a04      	ldr	r2, [sp, #16]
 800f548:	3201      	adds	r2, #1
 800f54a:	9204      	str	r2, [sp, #16]
 800f54c:	2230      	movs	r2, #48	@ 0x30
 800f54e:	f88a 2000 	strb.w	r2, [sl]
 800f552:	781a      	ldrb	r2, [r3, #0]
 800f554:	3201      	adds	r2, #1
 800f556:	701a      	strb	r2, [r3, #0]
 800f558:	e7bd      	b.n	800f4d6 <_dtoa_r+0x65e>
 800f55a:	4b7b      	ldr	r3, [pc, #492]	@ (800f748 <_dtoa_r+0x8d0>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	f7f1 f84b 	bl	80005f8 <__aeabi_dmul>
 800f562:	2200      	movs	r2, #0
 800f564:	2300      	movs	r3, #0
 800f566:	4604      	mov	r4, r0
 800f568:	460d      	mov	r5, r1
 800f56a:	f7f1 faad 	bl	8000ac8 <__aeabi_dcmpeq>
 800f56e:	2800      	cmp	r0, #0
 800f570:	f43f aebb 	beq.w	800f2ea <_dtoa_r+0x472>
 800f574:	e6f0      	b.n	800f358 <_dtoa_r+0x4e0>
 800f576:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f578:	2a00      	cmp	r2, #0
 800f57a:	f000 80db 	beq.w	800f734 <_dtoa_r+0x8bc>
 800f57e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f580:	2a01      	cmp	r2, #1
 800f582:	f300 80bf 	bgt.w	800f704 <_dtoa_r+0x88c>
 800f586:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f588:	2a00      	cmp	r2, #0
 800f58a:	f000 80b7 	beq.w	800f6fc <_dtoa_r+0x884>
 800f58e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f592:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f594:	4646      	mov	r6, r8
 800f596:	9a08      	ldr	r2, [sp, #32]
 800f598:	2101      	movs	r1, #1
 800f59a:	441a      	add	r2, r3
 800f59c:	4658      	mov	r0, fp
 800f59e:	4498      	add	r8, r3
 800f5a0:	9208      	str	r2, [sp, #32]
 800f5a2:	f000 fc21 	bl	800fde8 <__i2b>
 800f5a6:	4605      	mov	r5, r0
 800f5a8:	b15e      	cbz	r6, 800f5c2 <_dtoa_r+0x74a>
 800f5aa:	9b08      	ldr	r3, [sp, #32]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	dd08      	ble.n	800f5c2 <_dtoa_r+0x74a>
 800f5b0:	42b3      	cmp	r3, r6
 800f5b2:	9a08      	ldr	r2, [sp, #32]
 800f5b4:	bfa8      	it	ge
 800f5b6:	4633      	movge	r3, r6
 800f5b8:	eba8 0803 	sub.w	r8, r8, r3
 800f5bc:	1af6      	subs	r6, r6, r3
 800f5be:	1ad3      	subs	r3, r2, r3
 800f5c0:	9308      	str	r3, [sp, #32]
 800f5c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5c4:	b1f3      	cbz	r3, 800f604 <_dtoa_r+0x78c>
 800f5c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	f000 80b7 	beq.w	800f73c <_dtoa_r+0x8c4>
 800f5ce:	b18c      	cbz	r4, 800f5f4 <_dtoa_r+0x77c>
 800f5d0:	4629      	mov	r1, r5
 800f5d2:	4622      	mov	r2, r4
 800f5d4:	4658      	mov	r0, fp
 800f5d6:	f000 fcc7 	bl	800ff68 <__pow5mult>
 800f5da:	464a      	mov	r2, r9
 800f5dc:	4601      	mov	r1, r0
 800f5de:	4605      	mov	r5, r0
 800f5e0:	4658      	mov	r0, fp
 800f5e2:	f000 fc17 	bl	800fe14 <__multiply>
 800f5e6:	4649      	mov	r1, r9
 800f5e8:	9004      	str	r0, [sp, #16]
 800f5ea:	4658      	mov	r0, fp
 800f5ec:	f000 fb48 	bl	800fc80 <_Bfree>
 800f5f0:	9b04      	ldr	r3, [sp, #16]
 800f5f2:	4699      	mov	r9, r3
 800f5f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5f6:	1b1a      	subs	r2, r3, r4
 800f5f8:	d004      	beq.n	800f604 <_dtoa_r+0x78c>
 800f5fa:	4649      	mov	r1, r9
 800f5fc:	4658      	mov	r0, fp
 800f5fe:	f000 fcb3 	bl	800ff68 <__pow5mult>
 800f602:	4681      	mov	r9, r0
 800f604:	2101      	movs	r1, #1
 800f606:	4658      	mov	r0, fp
 800f608:	f000 fbee 	bl	800fde8 <__i2b>
 800f60c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f60e:	4604      	mov	r4, r0
 800f610:	2b00      	cmp	r3, #0
 800f612:	f000 81cf 	beq.w	800f9b4 <_dtoa_r+0xb3c>
 800f616:	461a      	mov	r2, r3
 800f618:	4601      	mov	r1, r0
 800f61a:	4658      	mov	r0, fp
 800f61c:	f000 fca4 	bl	800ff68 <__pow5mult>
 800f620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f622:	2b01      	cmp	r3, #1
 800f624:	4604      	mov	r4, r0
 800f626:	f300 8095 	bgt.w	800f754 <_dtoa_r+0x8dc>
 800f62a:	9b02      	ldr	r3, [sp, #8]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	f040 8087 	bne.w	800f740 <_dtoa_r+0x8c8>
 800f632:	9b03      	ldr	r3, [sp, #12]
 800f634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f638:	2b00      	cmp	r3, #0
 800f63a:	f040 8089 	bne.w	800f750 <_dtoa_r+0x8d8>
 800f63e:	9b03      	ldr	r3, [sp, #12]
 800f640:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f644:	0d1b      	lsrs	r3, r3, #20
 800f646:	051b      	lsls	r3, r3, #20
 800f648:	b12b      	cbz	r3, 800f656 <_dtoa_r+0x7de>
 800f64a:	9b08      	ldr	r3, [sp, #32]
 800f64c:	3301      	adds	r3, #1
 800f64e:	9308      	str	r3, [sp, #32]
 800f650:	f108 0801 	add.w	r8, r8, #1
 800f654:	2301      	movs	r3, #1
 800f656:	930a      	str	r3, [sp, #40]	@ 0x28
 800f658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	f000 81b0 	beq.w	800f9c0 <_dtoa_r+0xb48>
 800f660:	6923      	ldr	r3, [r4, #16]
 800f662:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f666:	6918      	ldr	r0, [r3, #16]
 800f668:	f000 fb72 	bl	800fd50 <__hi0bits>
 800f66c:	f1c0 0020 	rsb	r0, r0, #32
 800f670:	9b08      	ldr	r3, [sp, #32]
 800f672:	4418      	add	r0, r3
 800f674:	f010 001f 	ands.w	r0, r0, #31
 800f678:	d077      	beq.n	800f76a <_dtoa_r+0x8f2>
 800f67a:	f1c0 0320 	rsb	r3, r0, #32
 800f67e:	2b04      	cmp	r3, #4
 800f680:	dd6b      	ble.n	800f75a <_dtoa_r+0x8e2>
 800f682:	9b08      	ldr	r3, [sp, #32]
 800f684:	f1c0 001c 	rsb	r0, r0, #28
 800f688:	4403      	add	r3, r0
 800f68a:	4480      	add	r8, r0
 800f68c:	4406      	add	r6, r0
 800f68e:	9308      	str	r3, [sp, #32]
 800f690:	f1b8 0f00 	cmp.w	r8, #0
 800f694:	dd05      	ble.n	800f6a2 <_dtoa_r+0x82a>
 800f696:	4649      	mov	r1, r9
 800f698:	4642      	mov	r2, r8
 800f69a:	4658      	mov	r0, fp
 800f69c:	f000 fcbe 	bl	801001c <__lshift>
 800f6a0:	4681      	mov	r9, r0
 800f6a2:	9b08      	ldr	r3, [sp, #32]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	dd05      	ble.n	800f6b4 <_dtoa_r+0x83c>
 800f6a8:	4621      	mov	r1, r4
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	4658      	mov	r0, fp
 800f6ae:	f000 fcb5 	bl	801001c <__lshift>
 800f6b2:	4604      	mov	r4, r0
 800f6b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d059      	beq.n	800f76e <_dtoa_r+0x8f6>
 800f6ba:	4621      	mov	r1, r4
 800f6bc:	4648      	mov	r0, r9
 800f6be:	f000 fd19 	bl	80100f4 <__mcmp>
 800f6c2:	2800      	cmp	r0, #0
 800f6c4:	da53      	bge.n	800f76e <_dtoa_r+0x8f6>
 800f6c6:	1e7b      	subs	r3, r7, #1
 800f6c8:	9304      	str	r3, [sp, #16]
 800f6ca:	4649      	mov	r1, r9
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	220a      	movs	r2, #10
 800f6d0:	4658      	mov	r0, fp
 800f6d2:	f000 faf7 	bl	800fcc4 <__multadd>
 800f6d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6d8:	4681      	mov	r9, r0
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	f000 8172 	beq.w	800f9c4 <_dtoa_r+0xb4c>
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	4629      	mov	r1, r5
 800f6e4:	220a      	movs	r2, #10
 800f6e6:	4658      	mov	r0, fp
 800f6e8:	f000 faec 	bl	800fcc4 <__multadd>
 800f6ec:	9b00      	ldr	r3, [sp, #0]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	4605      	mov	r5, r0
 800f6f2:	dc67      	bgt.n	800f7c4 <_dtoa_r+0x94c>
 800f6f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6f6:	2b02      	cmp	r3, #2
 800f6f8:	dc41      	bgt.n	800f77e <_dtoa_r+0x906>
 800f6fa:	e063      	b.n	800f7c4 <_dtoa_r+0x94c>
 800f6fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f6fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f702:	e746      	b.n	800f592 <_dtoa_r+0x71a>
 800f704:	9b07      	ldr	r3, [sp, #28]
 800f706:	1e5c      	subs	r4, r3, #1
 800f708:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f70a:	42a3      	cmp	r3, r4
 800f70c:	bfbf      	itttt	lt
 800f70e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f710:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f712:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f714:	1ae3      	sublt	r3, r4, r3
 800f716:	bfb4      	ite	lt
 800f718:	18d2      	addlt	r2, r2, r3
 800f71a:	1b1c      	subge	r4, r3, r4
 800f71c:	9b07      	ldr	r3, [sp, #28]
 800f71e:	bfbc      	itt	lt
 800f720:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f722:	2400      	movlt	r4, #0
 800f724:	2b00      	cmp	r3, #0
 800f726:	bfb5      	itete	lt
 800f728:	eba8 0603 	sublt.w	r6, r8, r3
 800f72c:	9b07      	ldrge	r3, [sp, #28]
 800f72e:	2300      	movlt	r3, #0
 800f730:	4646      	movge	r6, r8
 800f732:	e730      	b.n	800f596 <_dtoa_r+0x71e>
 800f734:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f736:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f738:	4646      	mov	r6, r8
 800f73a:	e735      	b.n	800f5a8 <_dtoa_r+0x730>
 800f73c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f73e:	e75c      	b.n	800f5fa <_dtoa_r+0x782>
 800f740:	2300      	movs	r3, #0
 800f742:	e788      	b.n	800f656 <_dtoa_r+0x7de>
 800f744:	3fe00000 	.word	0x3fe00000
 800f748:	40240000 	.word	0x40240000
 800f74c:	40140000 	.word	0x40140000
 800f750:	9b02      	ldr	r3, [sp, #8]
 800f752:	e780      	b.n	800f656 <_dtoa_r+0x7de>
 800f754:	2300      	movs	r3, #0
 800f756:	930a      	str	r3, [sp, #40]	@ 0x28
 800f758:	e782      	b.n	800f660 <_dtoa_r+0x7e8>
 800f75a:	d099      	beq.n	800f690 <_dtoa_r+0x818>
 800f75c:	9a08      	ldr	r2, [sp, #32]
 800f75e:	331c      	adds	r3, #28
 800f760:	441a      	add	r2, r3
 800f762:	4498      	add	r8, r3
 800f764:	441e      	add	r6, r3
 800f766:	9208      	str	r2, [sp, #32]
 800f768:	e792      	b.n	800f690 <_dtoa_r+0x818>
 800f76a:	4603      	mov	r3, r0
 800f76c:	e7f6      	b.n	800f75c <_dtoa_r+0x8e4>
 800f76e:	9b07      	ldr	r3, [sp, #28]
 800f770:	9704      	str	r7, [sp, #16]
 800f772:	2b00      	cmp	r3, #0
 800f774:	dc20      	bgt.n	800f7b8 <_dtoa_r+0x940>
 800f776:	9300      	str	r3, [sp, #0]
 800f778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f77a:	2b02      	cmp	r3, #2
 800f77c:	dd1e      	ble.n	800f7bc <_dtoa_r+0x944>
 800f77e:	9b00      	ldr	r3, [sp, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	f47f aec0 	bne.w	800f506 <_dtoa_r+0x68e>
 800f786:	4621      	mov	r1, r4
 800f788:	2205      	movs	r2, #5
 800f78a:	4658      	mov	r0, fp
 800f78c:	f000 fa9a 	bl	800fcc4 <__multadd>
 800f790:	4601      	mov	r1, r0
 800f792:	4604      	mov	r4, r0
 800f794:	4648      	mov	r0, r9
 800f796:	f000 fcad 	bl	80100f4 <__mcmp>
 800f79a:	2800      	cmp	r0, #0
 800f79c:	f77f aeb3 	ble.w	800f506 <_dtoa_r+0x68e>
 800f7a0:	4656      	mov	r6, sl
 800f7a2:	2331      	movs	r3, #49	@ 0x31
 800f7a4:	f806 3b01 	strb.w	r3, [r6], #1
 800f7a8:	9b04      	ldr	r3, [sp, #16]
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	9304      	str	r3, [sp, #16]
 800f7ae:	e6ae      	b.n	800f50e <_dtoa_r+0x696>
 800f7b0:	9c07      	ldr	r4, [sp, #28]
 800f7b2:	9704      	str	r7, [sp, #16]
 800f7b4:	4625      	mov	r5, r4
 800f7b6:	e7f3      	b.n	800f7a0 <_dtoa_r+0x928>
 800f7b8:	9b07      	ldr	r3, [sp, #28]
 800f7ba:	9300      	str	r3, [sp, #0]
 800f7bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	f000 8104 	beq.w	800f9cc <_dtoa_r+0xb54>
 800f7c4:	2e00      	cmp	r6, #0
 800f7c6:	dd05      	ble.n	800f7d4 <_dtoa_r+0x95c>
 800f7c8:	4629      	mov	r1, r5
 800f7ca:	4632      	mov	r2, r6
 800f7cc:	4658      	mov	r0, fp
 800f7ce:	f000 fc25 	bl	801001c <__lshift>
 800f7d2:	4605      	mov	r5, r0
 800f7d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d05a      	beq.n	800f890 <_dtoa_r+0xa18>
 800f7da:	6869      	ldr	r1, [r5, #4]
 800f7dc:	4658      	mov	r0, fp
 800f7de:	f000 fa0f 	bl	800fc00 <_Balloc>
 800f7e2:	4606      	mov	r6, r0
 800f7e4:	b928      	cbnz	r0, 800f7f2 <_dtoa_r+0x97a>
 800f7e6:	4b84      	ldr	r3, [pc, #528]	@ (800f9f8 <_dtoa_r+0xb80>)
 800f7e8:	4602      	mov	r2, r0
 800f7ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f7ee:	f7ff bb5a 	b.w	800eea6 <_dtoa_r+0x2e>
 800f7f2:	692a      	ldr	r2, [r5, #16]
 800f7f4:	3202      	adds	r2, #2
 800f7f6:	0092      	lsls	r2, r2, #2
 800f7f8:	f105 010c 	add.w	r1, r5, #12
 800f7fc:	300c      	adds	r0, #12
 800f7fe:	f7ff faa4 	bl	800ed4a <memcpy>
 800f802:	2201      	movs	r2, #1
 800f804:	4631      	mov	r1, r6
 800f806:	4658      	mov	r0, fp
 800f808:	f000 fc08 	bl	801001c <__lshift>
 800f80c:	f10a 0301 	add.w	r3, sl, #1
 800f810:	9307      	str	r3, [sp, #28]
 800f812:	9b00      	ldr	r3, [sp, #0]
 800f814:	4453      	add	r3, sl
 800f816:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f818:	9b02      	ldr	r3, [sp, #8]
 800f81a:	f003 0301 	and.w	r3, r3, #1
 800f81e:	462f      	mov	r7, r5
 800f820:	930a      	str	r3, [sp, #40]	@ 0x28
 800f822:	4605      	mov	r5, r0
 800f824:	9b07      	ldr	r3, [sp, #28]
 800f826:	4621      	mov	r1, r4
 800f828:	3b01      	subs	r3, #1
 800f82a:	4648      	mov	r0, r9
 800f82c:	9300      	str	r3, [sp, #0]
 800f82e:	f7ff fa9a 	bl	800ed66 <quorem>
 800f832:	4639      	mov	r1, r7
 800f834:	9002      	str	r0, [sp, #8]
 800f836:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f83a:	4648      	mov	r0, r9
 800f83c:	f000 fc5a 	bl	80100f4 <__mcmp>
 800f840:	462a      	mov	r2, r5
 800f842:	9008      	str	r0, [sp, #32]
 800f844:	4621      	mov	r1, r4
 800f846:	4658      	mov	r0, fp
 800f848:	f000 fc70 	bl	801012c <__mdiff>
 800f84c:	68c2      	ldr	r2, [r0, #12]
 800f84e:	4606      	mov	r6, r0
 800f850:	bb02      	cbnz	r2, 800f894 <_dtoa_r+0xa1c>
 800f852:	4601      	mov	r1, r0
 800f854:	4648      	mov	r0, r9
 800f856:	f000 fc4d 	bl	80100f4 <__mcmp>
 800f85a:	4602      	mov	r2, r0
 800f85c:	4631      	mov	r1, r6
 800f85e:	4658      	mov	r0, fp
 800f860:	920e      	str	r2, [sp, #56]	@ 0x38
 800f862:	f000 fa0d 	bl	800fc80 <_Bfree>
 800f866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f868:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f86a:	9e07      	ldr	r6, [sp, #28]
 800f86c:	ea43 0102 	orr.w	r1, r3, r2
 800f870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f872:	4319      	orrs	r1, r3
 800f874:	d110      	bne.n	800f898 <_dtoa_r+0xa20>
 800f876:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f87a:	d029      	beq.n	800f8d0 <_dtoa_r+0xa58>
 800f87c:	9b08      	ldr	r3, [sp, #32]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	dd02      	ble.n	800f888 <_dtoa_r+0xa10>
 800f882:	9b02      	ldr	r3, [sp, #8]
 800f884:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f888:	9b00      	ldr	r3, [sp, #0]
 800f88a:	f883 8000 	strb.w	r8, [r3]
 800f88e:	e63f      	b.n	800f510 <_dtoa_r+0x698>
 800f890:	4628      	mov	r0, r5
 800f892:	e7bb      	b.n	800f80c <_dtoa_r+0x994>
 800f894:	2201      	movs	r2, #1
 800f896:	e7e1      	b.n	800f85c <_dtoa_r+0x9e4>
 800f898:	9b08      	ldr	r3, [sp, #32]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	db04      	blt.n	800f8a8 <_dtoa_r+0xa30>
 800f89e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f8a0:	430b      	orrs	r3, r1
 800f8a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f8a4:	430b      	orrs	r3, r1
 800f8a6:	d120      	bne.n	800f8ea <_dtoa_r+0xa72>
 800f8a8:	2a00      	cmp	r2, #0
 800f8aa:	dded      	ble.n	800f888 <_dtoa_r+0xa10>
 800f8ac:	4649      	mov	r1, r9
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	4658      	mov	r0, fp
 800f8b2:	f000 fbb3 	bl	801001c <__lshift>
 800f8b6:	4621      	mov	r1, r4
 800f8b8:	4681      	mov	r9, r0
 800f8ba:	f000 fc1b 	bl	80100f4 <__mcmp>
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	dc03      	bgt.n	800f8ca <_dtoa_r+0xa52>
 800f8c2:	d1e1      	bne.n	800f888 <_dtoa_r+0xa10>
 800f8c4:	f018 0f01 	tst.w	r8, #1
 800f8c8:	d0de      	beq.n	800f888 <_dtoa_r+0xa10>
 800f8ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f8ce:	d1d8      	bne.n	800f882 <_dtoa_r+0xa0a>
 800f8d0:	9a00      	ldr	r2, [sp, #0]
 800f8d2:	2339      	movs	r3, #57	@ 0x39
 800f8d4:	7013      	strb	r3, [r2, #0]
 800f8d6:	4633      	mov	r3, r6
 800f8d8:	461e      	mov	r6, r3
 800f8da:	3b01      	subs	r3, #1
 800f8dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f8e0:	2a39      	cmp	r2, #57	@ 0x39
 800f8e2:	d052      	beq.n	800f98a <_dtoa_r+0xb12>
 800f8e4:	3201      	adds	r2, #1
 800f8e6:	701a      	strb	r2, [r3, #0]
 800f8e8:	e612      	b.n	800f510 <_dtoa_r+0x698>
 800f8ea:	2a00      	cmp	r2, #0
 800f8ec:	dd07      	ble.n	800f8fe <_dtoa_r+0xa86>
 800f8ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f8f2:	d0ed      	beq.n	800f8d0 <_dtoa_r+0xa58>
 800f8f4:	9a00      	ldr	r2, [sp, #0]
 800f8f6:	f108 0301 	add.w	r3, r8, #1
 800f8fa:	7013      	strb	r3, [r2, #0]
 800f8fc:	e608      	b.n	800f510 <_dtoa_r+0x698>
 800f8fe:	9b07      	ldr	r3, [sp, #28]
 800f900:	9a07      	ldr	r2, [sp, #28]
 800f902:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f908:	4293      	cmp	r3, r2
 800f90a:	d028      	beq.n	800f95e <_dtoa_r+0xae6>
 800f90c:	4649      	mov	r1, r9
 800f90e:	2300      	movs	r3, #0
 800f910:	220a      	movs	r2, #10
 800f912:	4658      	mov	r0, fp
 800f914:	f000 f9d6 	bl	800fcc4 <__multadd>
 800f918:	42af      	cmp	r7, r5
 800f91a:	4681      	mov	r9, r0
 800f91c:	f04f 0300 	mov.w	r3, #0
 800f920:	f04f 020a 	mov.w	r2, #10
 800f924:	4639      	mov	r1, r7
 800f926:	4658      	mov	r0, fp
 800f928:	d107      	bne.n	800f93a <_dtoa_r+0xac2>
 800f92a:	f000 f9cb 	bl	800fcc4 <__multadd>
 800f92e:	4607      	mov	r7, r0
 800f930:	4605      	mov	r5, r0
 800f932:	9b07      	ldr	r3, [sp, #28]
 800f934:	3301      	adds	r3, #1
 800f936:	9307      	str	r3, [sp, #28]
 800f938:	e774      	b.n	800f824 <_dtoa_r+0x9ac>
 800f93a:	f000 f9c3 	bl	800fcc4 <__multadd>
 800f93e:	4629      	mov	r1, r5
 800f940:	4607      	mov	r7, r0
 800f942:	2300      	movs	r3, #0
 800f944:	220a      	movs	r2, #10
 800f946:	4658      	mov	r0, fp
 800f948:	f000 f9bc 	bl	800fcc4 <__multadd>
 800f94c:	4605      	mov	r5, r0
 800f94e:	e7f0      	b.n	800f932 <_dtoa_r+0xaba>
 800f950:	9b00      	ldr	r3, [sp, #0]
 800f952:	2b00      	cmp	r3, #0
 800f954:	bfcc      	ite	gt
 800f956:	461e      	movgt	r6, r3
 800f958:	2601      	movle	r6, #1
 800f95a:	4456      	add	r6, sl
 800f95c:	2700      	movs	r7, #0
 800f95e:	4649      	mov	r1, r9
 800f960:	2201      	movs	r2, #1
 800f962:	4658      	mov	r0, fp
 800f964:	f000 fb5a 	bl	801001c <__lshift>
 800f968:	4621      	mov	r1, r4
 800f96a:	4681      	mov	r9, r0
 800f96c:	f000 fbc2 	bl	80100f4 <__mcmp>
 800f970:	2800      	cmp	r0, #0
 800f972:	dcb0      	bgt.n	800f8d6 <_dtoa_r+0xa5e>
 800f974:	d102      	bne.n	800f97c <_dtoa_r+0xb04>
 800f976:	f018 0f01 	tst.w	r8, #1
 800f97a:	d1ac      	bne.n	800f8d6 <_dtoa_r+0xa5e>
 800f97c:	4633      	mov	r3, r6
 800f97e:	461e      	mov	r6, r3
 800f980:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f984:	2a30      	cmp	r2, #48	@ 0x30
 800f986:	d0fa      	beq.n	800f97e <_dtoa_r+0xb06>
 800f988:	e5c2      	b.n	800f510 <_dtoa_r+0x698>
 800f98a:	459a      	cmp	sl, r3
 800f98c:	d1a4      	bne.n	800f8d8 <_dtoa_r+0xa60>
 800f98e:	9b04      	ldr	r3, [sp, #16]
 800f990:	3301      	adds	r3, #1
 800f992:	9304      	str	r3, [sp, #16]
 800f994:	2331      	movs	r3, #49	@ 0x31
 800f996:	f88a 3000 	strb.w	r3, [sl]
 800f99a:	e5b9      	b.n	800f510 <_dtoa_r+0x698>
 800f99c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f99e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f9fc <_dtoa_r+0xb84>
 800f9a2:	b11b      	cbz	r3, 800f9ac <_dtoa_r+0xb34>
 800f9a4:	f10a 0308 	add.w	r3, sl, #8
 800f9a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f9aa:	6013      	str	r3, [r2, #0]
 800f9ac:	4650      	mov	r0, sl
 800f9ae:	b019      	add	sp, #100	@ 0x64
 800f9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	f77f ae37 	ble.w	800f62a <_dtoa_r+0x7b2>
 800f9bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9be:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9c0:	2001      	movs	r0, #1
 800f9c2:	e655      	b.n	800f670 <_dtoa_r+0x7f8>
 800f9c4:	9b00      	ldr	r3, [sp, #0]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	f77f aed6 	ble.w	800f778 <_dtoa_r+0x900>
 800f9cc:	4656      	mov	r6, sl
 800f9ce:	4621      	mov	r1, r4
 800f9d0:	4648      	mov	r0, r9
 800f9d2:	f7ff f9c8 	bl	800ed66 <quorem>
 800f9d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f9da:	f806 8b01 	strb.w	r8, [r6], #1
 800f9de:	9b00      	ldr	r3, [sp, #0]
 800f9e0:	eba6 020a 	sub.w	r2, r6, sl
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	ddb3      	ble.n	800f950 <_dtoa_r+0xad8>
 800f9e8:	4649      	mov	r1, r9
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	220a      	movs	r2, #10
 800f9ee:	4658      	mov	r0, fp
 800f9f0:	f000 f968 	bl	800fcc4 <__multadd>
 800f9f4:	4681      	mov	r9, r0
 800f9f6:	e7ea      	b.n	800f9ce <_dtoa_r+0xb56>
 800f9f8:	080112ed 	.word	0x080112ed
 800f9fc:	08011271 	.word	0x08011271

0800fa00 <_free_r>:
 800fa00:	b538      	push	{r3, r4, r5, lr}
 800fa02:	4605      	mov	r5, r0
 800fa04:	2900      	cmp	r1, #0
 800fa06:	d041      	beq.n	800fa8c <_free_r+0x8c>
 800fa08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa0c:	1f0c      	subs	r4, r1, #4
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	bfb8      	it	lt
 800fa12:	18e4      	addlt	r4, r4, r3
 800fa14:	f000 f8e8 	bl	800fbe8 <__malloc_lock>
 800fa18:	4a1d      	ldr	r2, [pc, #116]	@ (800fa90 <_free_r+0x90>)
 800fa1a:	6813      	ldr	r3, [r2, #0]
 800fa1c:	b933      	cbnz	r3, 800fa2c <_free_r+0x2c>
 800fa1e:	6063      	str	r3, [r4, #4]
 800fa20:	6014      	str	r4, [r2, #0]
 800fa22:	4628      	mov	r0, r5
 800fa24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa28:	f000 b8e4 	b.w	800fbf4 <__malloc_unlock>
 800fa2c:	42a3      	cmp	r3, r4
 800fa2e:	d908      	bls.n	800fa42 <_free_r+0x42>
 800fa30:	6820      	ldr	r0, [r4, #0]
 800fa32:	1821      	adds	r1, r4, r0
 800fa34:	428b      	cmp	r3, r1
 800fa36:	bf01      	itttt	eq
 800fa38:	6819      	ldreq	r1, [r3, #0]
 800fa3a:	685b      	ldreq	r3, [r3, #4]
 800fa3c:	1809      	addeq	r1, r1, r0
 800fa3e:	6021      	streq	r1, [r4, #0]
 800fa40:	e7ed      	b.n	800fa1e <_free_r+0x1e>
 800fa42:	461a      	mov	r2, r3
 800fa44:	685b      	ldr	r3, [r3, #4]
 800fa46:	b10b      	cbz	r3, 800fa4c <_free_r+0x4c>
 800fa48:	42a3      	cmp	r3, r4
 800fa4a:	d9fa      	bls.n	800fa42 <_free_r+0x42>
 800fa4c:	6811      	ldr	r1, [r2, #0]
 800fa4e:	1850      	adds	r0, r2, r1
 800fa50:	42a0      	cmp	r0, r4
 800fa52:	d10b      	bne.n	800fa6c <_free_r+0x6c>
 800fa54:	6820      	ldr	r0, [r4, #0]
 800fa56:	4401      	add	r1, r0
 800fa58:	1850      	adds	r0, r2, r1
 800fa5a:	4283      	cmp	r3, r0
 800fa5c:	6011      	str	r1, [r2, #0]
 800fa5e:	d1e0      	bne.n	800fa22 <_free_r+0x22>
 800fa60:	6818      	ldr	r0, [r3, #0]
 800fa62:	685b      	ldr	r3, [r3, #4]
 800fa64:	6053      	str	r3, [r2, #4]
 800fa66:	4408      	add	r0, r1
 800fa68:	6010      	str	r0, [r2, #0]
 800fa6a:	e7da      	b.n	800fa22 <_free_r+0x22>
 800fa6c:	d902      	bls.n	800fa74 <_free_r+0x74>
 800fa6e:	230c      	movs	r3, #12
 800fa70:	602b      	str	r3, [r5, #0]
 800fa72:	e7d6      	b.n	800fa22 <_free_r+0x22>
 800fa74:	6820      	ldr	r0, [r4, #0]
 800fa76:	1821      	adds	r1, r4, r0
 800fa78:	428b      	cmp	r3, r1
 800fa7a:	bf04      	itt	eq
 800fa7c:	6819      	ldreq	r1, [r3, #0]
 800fa7e:	685b      	ldreq	r3, [r3, #4]
 800fa80:	6063      	str	r3, [r4, #4]
 800fa82:	bf04      	itt	eq
 800fa84:	1809      	addeq	r1, r1, r0
 800fa86:	6021      	streq	r1, [r4, #0]
 800fa88:	6054      	str	r4, [r2, #4]
 800fa8a:	e7ca      	b.n	800fa22 <_free_r+0x22>
 800fa8c:	bd38      	pop	{r3, r4, r5, pc}
 800fa8e:	bf00      	nop
 800fa90:	200055f4 	.word	0x200055f4

0800fa94 <malloc>:
 800fa94:	4b02      	ldr	r3, [pc, #8]	@ (800faa0 <malloc+0xc>)
 800fa96:	4601      	mov	r1, r0
 800fa98:	6818      	ldr	r0, [r3, #0]
 800fa9a:	f000 b825 	b.w	800fae8 <_malloc_r>
 800fa9e:	bf00      	nop
 800faa0:	20000164 	.word	0x20000164

0800faa4 <sbrk_aligned>:
 800faa4:	b570      	push	{r4, r5, r6, lr}
 800faa6:	4e0f      	ldr	r6, [pc, #60]	@ (800fae4 <sbrk_aligned+0x40>)
 800faa8:	460c      	mov	r4, r1
 800faaa:	6831      	ldr	r1, [r6, #0]
 800faac:	4605      	mov	r5, r0
 800faae:	b911      	cbnz	r1, 800fab6 <sbrk_aligned+0x12>
 800fab0:	f000 fe46 	bl	8010740 <_sbrk_r>
 800fab4:	6030      	str	r0, [r6, #0]
 800fab6:	4621      	mov	r1, r4
 800fab8:	4628      	mov	r0, r5
 800faba:	f000 fe41 	bl	8010740 <_sbrk_r>
 800fabe:	1c43      	adds	r3, r0, #1
 800fac0:	d103      	bne.n	800faca <sbrk_aligned+0x26>
 800fac2:	f04f 34ff 	mov.w	r4, #4294967295
 800fac6:	4620      	mov	r0, r4
 800fac8:	bd70      	pop	{r4, r5, r6, pc}
 800faca:	1cc4      	adds	r4, r0, #3
 800facc:	f024 0403 	bic.w	r4, r4, #3
 800fad0:	42a0      	cmp	r0, r4
 800fad2:	d0f8      	beq.n	800fac6 <sbrk_aligned+0x22>
 800fad4:	1a21      	subs	r1, r4, r0
 800fad6:	4628      	mov	r0, r5
 800fad8:	f000 fe32 	bl	8010740 <_sbrk_r>
 800fadc:	3001      	adds	r0, #1
 800fade:	d1f2      	bne.n	800fac6 <sbrk_aligned+0x22>
 800fae0:	e7ef      	b.n	800fac2 <sbrk_aligned+0x1e>
 800fae2:	bf00      	nop
 800fae4:	200055f0 	.word	0x200055f0

0800fae8 <_malloc_r>:
 800fae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faec:	1ccd      	adds	r5, r1, #3
 800faee:	f025 0503 	bic.w	r5, r5, #3
 800faf2:	3508      	adds	r5, #8
 800faf4:	2d0c      	cmp	r5, #12
 800faf6:	bf38      	it	cc
 800faf8:	250c      	movcc	r5, #12
 800fafa:	2d00      	cmp	r5, #0
 800fafc:	4606      	mov	r6, r0
 800fafe:	db01      	blt.n	800fb04 <_malloc_r+0x1c>
 800fb00:	42a9      	cmp	r1, r5
 800fb02:	d904      	bls.n	800fb0e <_malloc_r+0x26>
 800fb04:	230c      	movs	r3, #12
 800fb06:	6033      	str	r3, [r6, #0]
 800fb08:	2000      	movs	r0, #0
 800fb0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fbe4 <_malloc_r+0xfc>
 800fb12:	f000 f869 	bl	800fbe8 <__malloc_lock>
 800fb16:	f8d8 3000 	ldr.w	r3, [r8]
 800fb1a:	461c      	mov	r4, r3
 800fb1c:	bb44      	cbnz	r4, 800fb70 <_malloc_r+0x88>
 800fb1e:	4629      	mov	r1, r5
 800fb20:	4630      	mov	r0, r6
 800fb22:	f7ff ffbf 	bl	800faa4 <sbrk_aligned>
 800fb26:	1c43      	adds	r3, r0, #1
 800fb28:	4604      	mov	r4, r0
 800fb2a:	d158      	bne.n	800fbde <_malloc_r+0xf6>
 800fb2c:	f8d8 4000 	ldr.w	r4, [r8]
 800fb30:	4627      	mov	r7, r4
 800fb32:	2f00      	cmp	r7, #0
 800fb34:	d143      	bne.n	800fbbe <_malloc_r+0xd6>
 800fb36:	2c00      	cmp	r4, #0
 800fb38:	d04b      	beq.n	800fbd2 <_malloc_r+0xea>
 800fb3a:	6823      	ldr	r3, [r4, #0]
 800fb3c:	4639      	mov	r1, r7
 800fb3e:	4630      	mov	r0, r6
 800fb40:	eb04 0903 	add.w	r9, r4, r3
 800fb44:	f000 fdfc 	bl	8010740 <_sbrk_r>
 800fb48:	4581      	cmp	r9, r0
 800fb4a:	d142      	bne.n	800fbd2 <_malloc_r+0xea>
 800fb4c:	6821      	ldr	r1, [r4, #0]
 800fb4e:	1a6d      	subs	r5, r5, r1
 800fb50:	4629      	mov	r1, r5
 800fb52:	4630      	mov	r0, r6
 800fb54:	f7ff ffa6 	bl	800faa4 <sbrk_aligned>
 800fb58:	3001      	adds	r0, #1
 800fb5a:	d03a      	beq.n	800fbd2 <_malloc_r+0xea>
 800fb5c:	6823      	ldr	r3, [r4, #0]
 800fb5e:	442b      	add	r3, r5
 800fb60:	6023      	str	r3, [r4, #0]
 800fb62:	f8d8 3000 	ldr.w	r3, [r8]
 800fb66:	685a      	ldr	r2, [r3, #4]
 800fb68:	bb62      	cbnz	r2, 800fbc4 <_malloc_r+0xdc>
 800fb6a:	f8c8 7000 	str.w	r7, [r8]
 800fb6e:	e00f      	b.n	800fb90 <_malloc_r+0xa8>
 800fb70:	6822      	ldr	r2, [r4, #0]
 800fb72:	1b52      	subs	r2, r2, r5
 800fb74:	d420      	bmi.n	800fbb8 <_malloc_r+0xd0>
 800fb76:	2a0b      	cmp	r2, #11
 800fb78:	d917      	bls.n	800fbaa <_malloc_r+0xc2>
 800fb7a:	1961      	adds	r1, r4, r5
 800fb7c:	42a3      	cmp	r3, r4
 800fb7e:	6025      	str	r5, [r4, #0]
 800fb80:	bf18      	it	ne
 800fb82:	6059      	strne	r1, [r3, #4]
 800fb84:	6863      	ldr	r3, [r4, #4]
 800fb86:	bf08      	it	eq
 800fb88:	f8c8 1000 	streq.w	r1, [r8]
 800fb8c:	5162      	str	r2, [r4, r5]
 800fb8e:	604b      	str	r3, [r1, #4]
 800fb90:	4630      	mov	r0, r6
 800fb92:	f000 f82f 	bl	800fbf4 <__malloc_unlock>
 800fb96:	f104 000b 	add.w	r0, r4, #11
 800fb9a:	1d23      	adds	r3, r4, #4
 800fb9c:	f020 0007 	bic.w	r0, r0, #7
 800fba0:	1ac2      	subs	r2, r0, r3
 800fba2:	bf1c      	itt	ne
 800fba4:	1a1b      	subne	r3, r3, r0
 800fba6:	50a3      	strne	r3, [r4, r2]
 800fba8:	e7af      	b.n	800fb0a <_malloc_r+0x22>
 800fbaa:	6862      	ldr	r2, [r4, #4]
 800fbac:	42a3      	cmp	r3, r4
 800fbae:	bf0c      	ite	eq
 800fbb0:	f8c8 2000 	streq.w	r2, [r8]
 800fbb4:	605a      	strne	r2, [r3, #4]
 800fbb6:	e7eb      	b.n	800fb90 <_malloc_r+0xa8>
 800fbb8:	4623      	mov	r3, r4
 800fbba:	6864      	ldr	r4, [r4, #4]
 800fbbc:	e7ae      	b.n	800fb1c <_malloc_r+0x34>
 800fbbe:	463c      	mov	r4, r7
 800fbc0:	687f      	ldr	r7, [r7, #4]
 800fbc2:	e7b6      	b.n	800fb32 <_malloc_r+0x4a>
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	685b      	ldr	r3, [r3, #4]
 800fbc8:	42a3      	cmp	r3, r4
 800fbca:	d1fb      	bne.n	800fbc4 <_malloc_r+0xdc>
 800fbcc:	2300      	movs	r3, #0
 800fbce:	6053      	str	r3, [r2, #4]
 800fbd0:	e7de      	b.n	800fb90 <_malloc_r+0xa8>
 800fbd2:	230c      	movs	r3, #12
 800fbd4:	6033      	str	r3, [r6, #0]
 800fbd6:	4630      	mov	r0, r6
 800fbd8:	f000 f80c 	bl	800fbf4 <__malloc_unlock>
 800fbdc:	e794      	b.n	800fb08 <_malloc_r+0x20>
 800fbde:	6005      	str	r5, [r0, #0]
 800fbe0:	e7d6      	b.n	800fb90 <_malloc_r+0xa8>
 800fbe2:	bf00      	nop
 800fbe4:	200055f4 	.word	0x200055f4

0800fbe8 <__malloc_lock>:
 800fbe8:	4801      	ldr	r0, [pc, #4]	@ (800fbf0 <__malloc_lock+0x8>)
 800fbea:	f7ff b8ac 	b.w	800ed46 <__retarget_lock_acquire_recursive>
 800fbee:	bf00      	nop
 800fbf0:	200055ec 	.word	0x200055ec

0800fbf4 <__malloc_unlock>:
 800fbf4:	4801      	ldr	r0, [pc, #4]	@ (800fbfc <__malloc_unlock+0x8>)
 800fbf6:	f7ff b8a7 	b.w	800ed48 <__retarget_lock_release_recursive>
 800fbfa:	bf00      	nop
 800fbfc:	200055ec 	.word	0x200055ec

0800fc00 <_Balloc>:
 800fc00:	b570      	push	{r4, r5, r6, lr}
 800fc02:	69c6      	ldr	r6, [r0, #28]
 800fc04:	4604      	mov	r4, r0
 800fc06:	460d      	mov	r5, r1
 800fc08:	b976      	cbnz	r6, 800fc28 <_Balloc+0x28>
 800fc0a:	2010      	movs	r0, #16
 800fc0c:	f7ff ff42 	bl	800fa94 <malloc>
 800fc10:	4602      	mov	r2, r0
 800fc12:	61e0      	str	r0, [r4, #28]
 800fc14:	b920      	cbnz	r0, 800fc20 <_Balloc+0x20>
 800fc16:	4b18      	ldr	r3, [pc, #96]	@ (800fc78 <_Balloc+0x78>)
 800fc18:	4818      	ldr	r0, [pc, #96]	@ (800fc7c <_Balloc+0x7c>)
 800fc1a:	216b      	movs	r1, #107	@ 0x6b
 800fc1c:	f000 fda0 	bl	8010760 <__assert_func>
 800fc20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc24:	6006      	str	r6, [r0, #0]
 800fc26:	60c6      	str	r6, [r0, #12]
 800fc28:	69e6      	ldr	r6, [r4, #28]
 800fc2a:	68f3      	ldr	r3, [r6, #12]
 800fc2c:	b183      	cbz	r3, 800fc50 <_Balloc+0x50>
 800fc2e:	69e3      	ldr	r3, [r4, #28]
 800fc30:	68db      	ldr	r3, [r3, #12]
 800fc32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fc36:	b9b8      	cbnz	r0, 800fc68 <_Balloc+0x68>
 800fc38:	2101      	movs	r1, #1
 800fc3a:	fa01 f605 	lsl.w	r6, r1, r5
 800fc3e:	1d72      	adds	r2, r6, #5
 800fc40:	0092      	lsls	r2, r2, #2
 800fc42:	4620      	mov	r0, r4
 800fc44:	f000 fdaa 	bl	801079c <_calloc_r>
 800fc48:	b160      	cbz	r0, 800fc64 <_Balloc+0x64>
 800fc4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fc4e:	e00e      	b.n	800fc6e <_Balloc+0x6e>
 800fc50:	2221      	movs	r2, #33	@ 0x21
 800fc52:	2104      	movs	r1, #4
 800fc54:	4620      	mov	r0, r4
 800fc56:	f000 fda1 	bl	801079c <_calloc_r>
 800fc5a:	69e3      	ldr	r3, [r4, #28]
 800fc5c:	60f0      	str	r0, [r6, #12]
 800fc5e:	68db      	ldr	r3, [r3, #12]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d1e4      	bne.n	800fc2e <_Balloc+0x2e>
 800fc64:	2000      	movs	r0, #0
 800fc66:	bd70      	pop	{r4, r5, r6, pc}
 800fc68:	6802      	ldr	r2, [r0, #0]
 800fc6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc6e:	2300      	movs	r3, #0
 800fc70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fc74:	e7f7      	b.n	800fc66 <_Balloc+0x66>
 800fc76:	bf00      	nop
 800fc78:	0801127e 	.word	0x0801127e
 800fc7c:	080112fe 	.word	0x080112fe

0800fc80 <_Bfree>:
 800fc80:	b570      	push	{r4, r5, r6, lr}
 800fc82:	69c6      	ldr	r6, [r0, #28]
 800fc84:	4605      	mov	r5, r0
 800fc86:	460c      	mov	r4, r1
 800fc88:	b976      	cbnz	r6, 800fca8 <_Bfree+0x28>
 800fc8a:	2010      	movs	r0, #16
 800fc8c:	f7ff ff02 	bl	800fa94 <malloc>
 800fc90:	4602      	mov	r2, r0
 800fc92:	61e8      	str	r0, [r5, #28]
 800fc94:	b920      	cbnz	r0, 800fca0 <_Bfree+0x20>
 800fc96:	4b09      	ldr	r3, [pc, #36]	@ (800fcbc <_Bfree+0x3c>)
 800fc98:	4809      	ldr	r0, [pc, #36]	@ (800fcc0 <_Bfree+0x40>)
 800fc9a:	218f      	movs	r1, #143	@ 0x8f
 800fc9c:	f000 fd60 	bl	8010760 <__assert_func>
 800fca0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fca4:	6006      	str	r6, [r0, #0]
 800fca6:	60c6      	str	r6, [r0, #12]
 800fca8:	b13c      	cbz	r4, 800fcba <_Bfree+0x3a>
 800fcaa:	69eb      	ldr	r3, [r5, #28]
 800fcac:	6862      	ldr	r2, [r4, #4]
 800fcae:	68db      	ldr	r3, [r3, #12]
 800fcb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fcb4:	6021      	str	r1, [r4, #0]
 800fcb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fcba:	bd70      	pop	{r4, r5, r6, pc}
 800fcbc:	0801127e 	.word	0x0801127e
 800fcc0:	080112fe 	.word	0x080112fe

0800fcc4 <__multadd>:
 800fcc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcc8:	690d      	ldr	r5, [r1, #16]
 800fcca:	4607      	mov	r7, r0
 800fccc:	460c      	mov	r4, r1
 800fcce:	461e      	mov	r6, r3
 800fcd0:	f101 0c14 	add.w	ip, r1, #20
 800fcd4:	2000      	movs	r0, #0
 800fcd6:	f8dc 3000 	ldr.w	r3, [ip]
 800fcda:	b299      	uxth	r1, r3
 800fcdc:	fb02 6101 	mla	r1, r2, r1, r6
 800fce0:	0c1e      	lsrs	r6, r3, #16
 800fce2:	0c0b      	lsrs	r3, r1, #16
 800fce4:	fb02 3306 	mla	r3, r2, r6, r3
 800fce8:	b289      	uxth	r1, r1
 800fcea:	3001      	adds	r0, #1
 800fcec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fcf0:	4285      	cmp	r5, r0
 800fcf2:	f84c 1b04 	str.w	r1, [ip], #4
 800fcf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fcfa:	dcec      	bgt.n	800fcd6 <__multadd+0x12>
 800fcfc:	b30e      	cbz	r6, 800fd42 <__multadd+0x7e>
 800fcfe:	68a3      	ldr	r3, [r4, #8]
 800fd00:	42ab      	cmp	r3, r5
 800fd02:	dc19      	bgt.n	800fd38 <__multadd+0x74>
 800fd04:	6861      	ldr	r1, [r4, #4]
 800fd06:	4638      	mov	r0, r7
 800fd08:	3101      	adds	r1, #1
 800fd0a:	f7ff ff79 	bl	800fc00 <_Balloc>
 800fd0e:	4680      	mov	r8, r0
 800fd10:	b928      	cbnz	r0, 800fd1e <__multadd+0x5a>
 800fd12:	4602      	mov	r2, r0
 800fd14:	4b0c      	ldr	r3, [pc, #48]	@ (800fd48 <__multadd+0x84>)
 800fd16:	480d      	ldr	r0, [pc, #52]	@ (800fd4c <__multadd+0x88>)
 800fd18:	21ba      	movs	r1, #186	@ 0xba
 800fd1a:	f000 fd21 	bl	8010760 <__assert_func>
 800fd1e:	6922      	ldr	r2, [r4, #16]
 800fd20:	3202      	adds	r2, #2
 800fd22:	f104 010c 	add.w	r1, r4, #12
 800fd26:	0092      	lsls	r2, r2, #2
 800fd28:	300c      	adds	r0, #12
 800fd2a:	f7ff f80e 	bl	800ed4a <memcpy>
 800fd2e:	4621      	mov	r1, r4
 800fd30:	4638      	mov	r0, r7
 800fd32:	f7ff ffa5 	bl	800fc80 <_Bfree>
 800fd36:	4644      	mov	r4, r8
 800fd38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fd3c:	3501      	adds	r5, #1
 800fd3e:	615e      	str	r6, [r3, #20]
 800fd40:	6125      	str	r5, [r4, #16]
 800fd42:	4620      	mov	r0, r4
 800fd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd48:	080112ed 	.word	0x080112ed
 800fd4c:	080112fe 	.word	0x080112fe

0800fd50 <__hi0bits>:
 800fd50:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fd54:	4603      	mov	r3, r0
 800fd56:	bf36      	itet	cc
 800fd58:	0403      	lslcc	r3, r0, #16
 800fd5a:	2000      	movcs	r0, #0
 800fd5c:	2010      	movcc	r0, #16
 800fd5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fd62:	bf3c      	itt	cc
 800fd64:	021b      	lslcc	r3, r3, #8
 800fd66:	3008      	addcc	r0, #8
 800fd68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd6c:	bf3c      	itt	cc
 800fd6e:	011b      	lslcc	r3, r3, #4
 800fd70:	3004      	addcc	r0, #4
 800fd72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd76:	bf3c      	itt	cc
 800fd78:	009b      	lslcc	r3, r3, #2
 800fd7a:	3002      	addcc	r0, #2
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	db05      	blt.n	800fd8c <__hi0bits+0x3c>
 800fd80:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fd84:	f100 0001 	add.w	r0, r0, #1
 800fd88:	bf08      	it	eq
 800fd8a:	2020      	moveq	r0, #32
 800fd8c:	4770      	bx	lr

0800fd8e <__lo0bits>:
 800fd8e:	6803      	ldr	r3, [r0, #0]
 800fd90:	4602      	mov	r2, r0
 800fd92:	f013 0007 	ands.w	r0, r3, #7
 800fd96:	d00b      	beq.n	800fdb0 <__lo0bits+0x22>
 800fd98:	07d9      	lsls	r1, r3, #31
 800fd9a:	d421      	bmi.n	800fde0 <__lo0bits+0x52>
 800fd9c:	0798      	lsls	r0, r3, #30
 800fd9e:	bf49      	itett	mi
 800fda0:	085b      	lsrmi	r3, r3, #1
 800fda2:	089b      	lsrpl	r3, r3, #2
 800fda4:	2001      	movmi	r0, #1
 800fda6:	6013      	strmi	r3, [r2, #0]
 800fda8:	bf5c      	itt	pl
 800fdaa:	6013      	strpl	r3, [r2, #0]
 800fdac:	2002      	movpl	r0, #2
 800fdae:	4770      	bx	lr
 800fdb0:	b299      	uxth	r1, r3
 800fdb2:	b909      	cbnz	r1, 800fdb8 <__lo0bits+0x2a>
 800fdb4:	0c1b      	lsrs	r3, r3, #16
 800fdb6:	2010      	movs	r0, #16
 800fdb8:	b2d9      	uxtb	r1, r3
 800fdba:	b909      	cbnz	r1, 800fdc0 <__lo0bits+0x32>
 800fdbc:	3008      	adds	r0, #8
 800fdbe:	0a1b      	lsrs	r3, r3, #8
 800fdc0:	0719      	lsls	r1, r3, #28
 800fdc2:	bf04      	itt	eq
 800fdc4:	091b      	lsreq	r3, r3, #4
 800fdc6:	3004      	addeq	r0, #4
 800fdc8:	0799      	lsls	r1, r3, #30
 800fdca:	bf04      	itt	eq
 800fdcc:	089b      	lsreq	r3, r3, #2
 800fdce:	3002      	addeq	r0, #2
 800fdd0:	07d9      	lsls	r1, r3, #31
 800fdd2:	d403      	bmi.n	800fddc <__lo0bits+0x4e>
 800fdd4:	085b      	lsrs	r3, r3, #1
 800fdd6:	f100 0001 	add.w	r0, r0, #1
 800fdda:	d003      	beq.n	800fde4 <__lo0bits+0x56>
 800fddc:	6013      	str	r3, [r2, #0]
 800fdde:	4770      	bx	lr
 800fde0:	2000      	movs	r0, #0
 800fde2:	4770      	bx	lr
 800fde4:	2020      	movs	r0, #32
 800fde6:	4770      	bx	lr

0800fde8 <__i2b>:
 800fde8:	b510      	push	{r4, lr}
 800fdea:	460c      	mov	r4, r1
 800fdec:	2101      	movs	r1, #1
 800fdee:	f7ff ff07 	bl	800fc00 <_Balloc>
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	b928      	cbnz	r0, 800fe02 <__i2b+0x1a>
 800fdf6:	4b05      	ldr	r3, [pc, #20]	@ (800fe0c <__i2b+0x24>)
 800fdf8:	4805      	ldr	r0, [pc, #20]	@ (800fe10 <__i2b+0x28>)
 800fdfa:	f240 1145 	movw	r1, #325	@ 0x145
 800fdfe:	f000 fcaf 	bl	8010760 <__assert_func>
 800fe02:	2301      	movs	r3, #1
 800fe04:	6144      	str	r4, [r0, #20]
 800fe06:	6103      	str	r3, [r0, #16]
 800fe08:	bd10      	pop	{r4, pc}
 800fe0a:	bf00      	nop
 800fe0c:	080112ed 	.word	0x080112ed
 800fe10:	080112fe 	.word	0x080112fe

0800fe14 <__multiply>:
 800fe14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe18:	4614      	mov	r4, r2
 800fe1a:	690a      	ldr	r2, [r1, #16]
 800fe1c:	6923      	ldr	r3, [r4, #16]
 800fe1e:	429a      	cmp	r2, r3
 800fe20:	bfa8      	it	ge
 800fe22:	4623      	movge	r3, r4
 800fe24:	460f      	mov	r7, r1
 800fe26:	bfa4      	itt	ge
 800fe28:	460c      	movge	r4, r1
 800fe2a:	461f      	movge	r7, r3
 800fe2c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fe30:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fe34:	68a3      	ldr	r3, [r4, #8]
 800fe36:	6861      	ldr	r1, [r4, #4]
 800fe38:	eb0a 0609 	add.w	r6, sl, r9
 800fe3c:	42b3      	cmp	r3, r6
 800fe3e:	b085      	sub	sp, #20
 800fe40:	bfb8      	it	lt
 800fe42:	3101      	addlt	r1, #1
 800fe44:	f7ff fedc 	bl	800fc00 <_Balloc>
 800fe48:	b930      	cbnz	r0, 800fe58 <__multiply+0x44>
 800fe4a:	4602      	mov	r2, r0
 800fe4c:	4b44      	ldr	r3, [pc, #272]	@ (800ff60 <__multiply+0x14c>)
 800fe4e:	4845      	ldr	r0, [pc, #276]	@ (800ff64 <__multiply+0x150>)
 800fe50:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fe54:	f000 fc84 	bl	8010760 <__assert_func>
 800fe58:	f100 0514 	add.w	r5, r0, #20
 800fe5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fe60:	462b      	mov	r3, r5
 800fe62:	2200      	movs	r2, #0
 800fe64:	4543      	cmp	r3, r8
 800fe66:	d321      	bcc.n	800feac <__multiply+0x98>
 800fe68:	f107 0114 	add.w	r1, r7, #20
 800fe6c:	f104 0214 	add.w	r2, r4, #20
 800fe70:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fe74:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fe78:	9302      	str	r3, [sp, #8]
 800fe7a:	1b13      	subs	r3, r2, r4
 800fe7c:	3b15      	subs	r3, #21
 800fe7e:	f023 0303 	bic.w	r3, r3, #3
 800fe82:	3304      	adds	r3, #4
 800fe84:	f104 0715 	add.w	r7, r4, #21
 800fe88:	42ba      	cmp	r2, r7
 800fe8a:	bf38      	it	cc
 800fe8c:	2304      	movcc	r3, #4
 800fe8e:	9301      	str	r3, [sp, #4]
 800fe90:	9b02      	ldr	r3, [sp, #8]
 800fe92:	9103      	str	r1, [sp, #12]
 800fe94:	428b      	cmp	r3, r1
 800fe96:	d80c      	bhi.n	800feb2 <__multiply+0x9e>
 800fe98:	2e00      	cmp	r6, #0
 800fe9a:	dd03      	ble.n	800fea4 <__multiply+0x90>
 800fe9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d05b      	beq.n	800ff5c <__multiply+0x148>
 800fea4:	6106      	str	r6, [r0, #16]
 800fea6:	b005      	add	sp, #20
 800fea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feac:	f843 2b04 	str.w	r2, [r3], #4
 800feb0:	e7d8      	b.n	800fe64 <__multiply+0x50>
 800feb2:	f8b1 a000 	ldrh.w	sl, [r1]
 800feb6:	f1ba 0f00 	cmp.w	sl, #0
 800feba:	d024      	beq.n	800ff06 <__multiply+0xf2>
 800febc:	f104 0e14 	add.w	lr, r4, #20
 800fec0:	46a9      	mov	r9, r5
 800fec2:	f04f 0c00 	mov.w	ip, #0
 800fec6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800feca:	f8d9 3000 	ldr.w	r3, [r9]
 800fece:	fa1f fb87 	uxth.w	fp, r7
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	fb0a 330b 	mla	r3, sl, fp, r3
 800fed8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fedc:	f8d9 7000 	ldr.w	r7, [r9]
 800fee0:	4463      	add	r3, ip
 800fee2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fee6:	fb0a c70b 	mla	r7, sl, fp, ip
 800feea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800feee:	b29b      	uxth	r3, r3
 800fef0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fef4:	4572      	cmp	r2, lr
 800fef6:	f849 3b04 	str.w	r3, [r9], #4
 800fefa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fefe:	d8e2      	bhi.n	800fec6 <__multiply+0xb2>
 800ff00:	9b01      	ldr	r3, [sp, #4]
 800ff02:	f845 c003 	str.w	ip, [r5, r3]
 800ff06:	9b03      	ldr	r3, [sp, #12]
 800ff08:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ff0c:	3104      	adds	r1, #4
 800ff0e:	f1b9 0f00 	cmp.w	r9, #0
 800ff12:	d021      	beq.n	800ff58 <__multiply+0x144>
 800ff14:	682b      	ldr	r3, [r5, #0]
 800ff16:	f104 0c14 	add.w	ip, r4, #20
 800ff1a:	46ae      	mov	lr, r5
 800ff1c:	f04f 0a00 	mov.w	sl, #0
 800ff20:	f8bc b000 	ldrh.w	fp, [ip]
 800ff24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ff28:	fb09 770b 	mla	r7, r9, fp, r7
 800ff2c:	4457      	add	r7, sl
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ff34:	f84e 3b04 	str.w	r3, [lr], #4
 800ff38:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ff3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff40:	f8be 3000 	ldrh.w	r3, [lr]
 800ff44:	fb09 330a 	mla	r3, r9, sl, r3
 800ff48:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ff4c:	4562      	cmp	r2, ip
 800ff4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff52:	d8e5      	bhi.n	800ff20 <__multiply+0x10c>
 800ff54:	9f01      	ldr	r7, [sp, #4]
 800ff56:	51eb      	str	r3, [r5, r7]
 800ff58:	3504      	adds	r5, #4
 800ff5a:	e799      	b.n	800fe90 <__multiply+0x7c>
 800ff5c:	3e01      	subs	r6, #1
 800ff5e:	e79b      	b.n	800fe98 <__multiply+0x84>
 800ff60:	080112ed 	.word	0x080112ed
 800ff64:	080112fe 	.word	0x080112fe

0800ff68 <__pow5mult>:
 800ff68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff6c:	4615      	mov	r5, r2
 800ff6e:	f012 0203 	ands.w	r2, r2, #3
 800ff72:	4607      	mov	r7, r0
 800ff74:	460e      	mov	r6, r1
 800ff76:	d007      	beq.n	800ff88 <__pow5mult+0x20>
 800ff78:	4c25      	ldr	r4, [pc, #148]	@ (8010010 <__pow5mult+0xa8>)
 800ff7a:	3a01      	subs	r2, #1
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff82:	f7ff fe9f 	bl	800fcc4 <__multadd>
 800ff86:	4606      	mov	r6, r0
 800ff88:	10ad      	asrs	r5, r5, #2
 800ff8a:	d03d      	beq.n	8010008 <__pow5mult+0xa0>
 800ff8c:	69fc      	ldr	r4, [r7, #28]
 800ff8e:	b97c      	cbnz	r4, 800ffb0 <__pow5mult+0x48>
 800ff90:	2010      	movs	r0, #16
 800ff92:	f7ff fd7f 	bl	800fa94 <malloc>
 800ff96:	4602      	mov	r2, r0
 800ff98:	61f8      	str	r0, [r7, #28]
 800ff9a:	b928      	cbnz	r0, 800ffa8 <__pow5mult+0x40>
 800ff9c:	4b1d      	ldr	r3, [pc, #116]	@ (8010014 <__pow5mult+0xac>)
 800ff9e:	481e      	ldr	r0, [pc, #120]	@ (8010018 <__pow5mult+0xb0>)
 800ffa0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ffa4:	f000 fbdc 	bl	8010760 <__assert_func>
 800ffa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ffac:	6004      	str	r4, [r0, #0]
 800ffae:	60c4      	str	r4, [r0, #12]
 800ffb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ffb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ffb8:	b94c      	cbnz	r4, 800ffce <__pow5mult+0x66>
 800ffba:	f240 2171 	movw	r1, #625	@ 0x271
 800ffbe:	4638      	mov	r0, r7
 800ffc0:	f7ff ff12 	bl	800fde8 <__i2b>
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ffca:	4604      	mov	r4, r0
 800ffcc:	6003      	str	r3, [r0, #0]
 800ffce:	f04f 0900 	mov.w	r9, #0
 800ffd2:	07eb      	lsls	r3, r5, #31
 800ffd4:	d50a      	bpl.n	800ffec <__pow5mult+0x84>
 800ffd6:	4631      	mov	r1, r6
 800ffd8:	4622      	mov	r2, r4
 800ffda:	4638      	mov	r0, r7
 800ffdc:	f7ff ff1a 	bl	800fe14 <__multiply>
 800ffe0:	4631      	mov	r1, r6
 800ffe2:	4680      	mov	r8, r0
 800ffe4:	4638      	mov	r0, r7
 800ffe6:	f7ff fe4b 	bl	800fc80 <_Bfree>
 800ffea:	4646      	mov	r6, r8
 800ffec:	106d      	asrs	r5, r5, #1
 800ffee:	d00b      	beq.n	8010008 <__pow5mult+0xa0>
 800fff0:	6820      	ldr	r0, [r4, #0]
 800fff2:	b938      	cbnz	r0, 8010004 <__pow5mult+0x9c>
 800fff4:	4622      	mov	r2, r4
 800fff6:	4621      	mov	r1, r4
 800fff8:	4638      	mov	r0, r7
 800fffa:	f7ff ff0b 	bl	800fe14 <__multiply>
 800fffe:	6020      	str	r0, [r4, #0]
 8010000:	f8c0 9000 	str.w	r9, [r0]
 8010004:	4604      	mov	r4, r0
 8010006:	e7e4      	b.n	800ffd2 <__pow5mult+0x6a>
 8010008:	4630      	mov	r0, r6
 801000a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801000e:	bf00      	nop
 8010010:	08011358 	.word	0x08011358
 8010014:	0801127e 	.word	0x0801127e
 8010018:	080112fe 	.word	0x080112fe

0801001c <__lshift>:
 801001c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010020:	460c      	mov	r4, r1
 8010022:	6849      	ldr	r1, [r1, #4]
 8010024:	6923      	ldr	r3, [r4, #16]
 8010026:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801002a:	68a3      	ldr	r3, [r4, #8]
 801002c:	4607      	mov	r7, r0
 801002e:	4691      	mov	r9, r2
 8010030:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010034:	f108 0601 	add.w	r6, r8, #1
 8010038:	42b3      	cmp	r3, r6
 801003a:	db0b      	blt.n	8010054 <__lshift+0x38>
 801003c:	4638      	mov	r0, r7
 801003e:	f7ff fddf 	bl	800fc00 <_Balloc>
 8010042:	4605      	mov	r5, r0
 8010044:	b948      	cbnz	r0, 801005a <__lshift+0x3e>
 8010046:	4602      	mov	r2, r0
 8010048:	4b28      	ldr	r3, [pc, #160]	@ (80100ec <__lshift+0xd0>)
 801004a:	4829      	ldr	r0, [pc, #164]	@ (80100f0 <__lshift+0xd4>)
 801004c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010050:	f000 fb86 	bl	8010760 <__assert_func>
 8010054:	3101      	adds	r1, #1
 8010056:	005b      	lsls	r3, r3, #1
 8010058:	e7ee      	b.n	8010038 <__lshift+0x1c>
 801005a:	2300      	movs	r3, #0
 801005c:	f100 0114 	add.w	r1, r0, #20
 8010060:	f100 0210 	add.w	r2, r0, #16
 8010064:	4618      	mov	r0, r3
 8010066:	4553      	cmp	r3, sl
 8010068:	db33      	blt.n	80100d2 <__lshift+0xb6>
 801006a:	6920      	ldr	r0, [r4, #16]
 801006c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010070:	f104 0314 	add.w	r3, r4, #20
 8010074:	f019 091f 	ands.w	r9, r9, #31
 8010078:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801007c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010080:	d02b      	beq.n	80100da <__lshift+0xbe>
 8010082:	f1c9 0e20 	rsb	lr, r9, #32
 8010086:	468a      	mov	sl, r1
 8010088:	2200      	movs	r2, #0
 801008a:	6818      	ldr	r0, [r3, #0]
 801008c:	fa00 f009 	lsl.w	r0, r0, r9
 8010090:	4310      	orrs	r0, r2
 8010092:	f84a 0b04 	str.w	r0, [sl], #4
 8010096:	f853 2b04 	ldr.w	r2, [r3], #4
 801009a:	459c      	cmp	ip, r3
 801009c:	fa22 f20e 	lsr.w	r2, r2, lr
 80100a0:	d8f3      	bhi.n	801008a <__lshift+0x6e>
 80100a2:	ebac 0304 	sub.w	r3, ip, r4
 80100a6:	3b15      	subs	r3, #21
 80100a8:	f023 0303 	bic.w	r3, r3, #3
 80100ac:	3304      	adds	r3, #4
 80100ae:	f104 0015 	add.w	r0, r4, #21
 80100b2:	4584      	cmp	ip, r0
 80100b4:	bf38      	it	cc
 80100b6:	2304      	movcc	r3, #4
 80100b8:	50ca      	str	r2, [r1, r3]
 80100ba:	b10a      	cbz	r2, 80100c0 <__lshift+0xa4>
 80100bc:	f108 0602 	add.w	r6, r8, #2
 80100c0:	3e01      	subs	r6, #1
 80100c2:	4638      	mov	r0, r7
 80100c4:	612e      	str	r6, [r5, #16]
 80100c6:	4621      	mov	r1, r4
 80100c8:	f7ff fdda 	bl	800fc80 <_Bfree>
 80100cc:	4628      	mov	r0, r5
 80100ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80100d6:	3301      	adds	r3, #1
 80100d8:	e7c5      	b.n	8010066 <__lshift+0x4a>
 80100da:	3904      	subs	r1, #4
 80100dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80100e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80100e4:	459c      	cmp	ip, r3
 80100e6:	d8f9      	bhi.n	80100dc <__lshift+0xc0>
 80100e8:	e7ea      	b.n	80100c0 <__lshift+0xa4>
 80100ea:	bf00      	nop
 80100ec:	080112ed 	.word	0x080112ed
 80100f0:	080112fe 	.word	0x080112fe

080100f4 <__mcmp>:
 80100f4:	690a      	ldr	r2, [r1, #16]
 80100f6:	4603      	mov	r3, r0
 80100f8:	6900      	ldr	r0, [r0, #16]
 80100fa:	1a80      	subs	r0, r0, r2
 80100fc:	b530      	push	{r4, r5, lr}
 80100fe:	d10e      	bne.n	801011e <__mcmp+0x2a>
 8010100:	3314      	adds	r3, #20
 8010102:	3114      	adds	r1, #20
 8010104:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010108:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801010c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010110:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010114:	4295      	cmp	r5, r2
 8010116:	d003      	beq.n	8010120 <__mcmp+0x2c>
 8010118:	d205      	bcs.n	8010126 <__mcmp+0x32>
 801011a:	f04f 30ff 	mov.w	r0, #4294967295
 801011e:	bd30      	pop	{r4, r5, pc}
 8010120:	42a3      	cmp	r3, r4
 8010122:	d3f3      	bcc.n	801010c <__mcmp+0x18>
 8010124:	e7fb      	b.n	801011e <__mcmp+0x2a>
 8010126:	2001      	movs	r0, #1
 8010128:	e7f9      	b.n	801011e <__mcmp+0x2a>
	...

0801012c <__mdiff>:
 801012c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010130:	4689      	mov	r9, r1
 8010132:	4606      	mov	r6, r0
 8010134:	4611      	mov	r1, r2
 8010136:	4648      	mov	r0, r9
 8010138:	4614      	mov	r4, r2
 801013a:	f7ff ffdb 	bl	80100f4 <__mcmp>
 801013e:	1e05      	subs	r5, r0, #0
 8010140:	d112      	bne.n	8010168 <__mdiff+0x3c>
 8010142:	4629      	mov	r1, r5
 8010144:	4630      	mov	r0, r6
 8010146:	f7ff fd5b 	bl	800fc00 <_Balloc>
 801014a:	4602      	mov	r2, r0
 801014c:	b928      	cbnz	r0, 801015a <__mdiff+0x2e>
 801014e:	4b3f      	ldr	r3, [pc, #252]	@ (801024c <__mdiff+0x120>)
 8010150:	f240 2137 	movw	r1, #567	@ 0x237
 8010154:	483e      	ldr	r0, [pc, #248]	@ (8010250 <__mdiff+0x124>)
 8010156:	f000 fb03 	bl	8010760 <__assert_func>
 801015a:	2301      	movs	r3, #1
 801015c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010160:	4610      	mov	r0, r2
 8010162:	b003      	add	sp, #12
 8010164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010168:	bfbc      	itt	lt
 801016a:	464b      	movlt	r3, r9
 801016c:	46a1      	movlt	r9, r4
 801016e:	4630      	mov	r0, r6
 8010170:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010174:	bfba      	itte	lt
 8010176:	461c      	movlt	r4, r3
 8010178:	2501      	movlt	r5, #1
 801017a:	2500      	movge	r5, #0
 801017c:	f7ff fd40 	bl	800fc00 <_Balloc>
 8010180:	4602      	mov	r2, r0
 8010182:	b918      	cbnz	r0, 801018c <__mdiff+0x60>
 8010184:	4b31      	ldr	r3, [pc, #196]	@ (801024c <__mdiff+0x120>)
 8010186:	f240 2145 	movw	r1, #581	@ 0x245
 801018a:	e7e3      	b.n	8010154 <__mdiff+0x28>
 801018c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010190:	6926      	ldr	r6, [r4, #16]
 8010192:	60c5      	str	r5, [r0, #12]
 8010194:	f109 0310 	add.w	r3, r9, #16
 8010198:	f109 0514 	add.w	r5, r9, #20
 801019c:	f104 0e14 	add.w	lr, r4, #20
 80101a0:	f100 0b14 	add.w	fp, r0, #20
 80101a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80101a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80101ac:	9301      	str	r3, [sp, #4]
 80101ae:	46d9      	mov	r9, fp
 80101b0:	f04f 0c00 	mov.w	ip, #0
 80101b4:	9b01      	ldr	r3, [sp, #4]
 80101b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80101ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80101be:	9301      	str	r3, [sp, #4]
 80101c0:	fa1f f38a 	uxth.w	r3, sl
 80101c4:	4619      	mov	r1, r3
 80101c6:	b283      	uxth	r3, r0
 80101c8:	1acb      	subs	r3, r1, r3
 80101ca:	0c00      	lsrs	r0, r0, #16
 80101cc:	4463      	add	r3, ip
 80101ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80101d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80101dc:	4576      	cmp	r6, lr
 80101de:	f849 3b04 	str.w	r3, [r9], #4
 80101e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80101e6:	d8e5      	bhi.n	80101b4 <__mdiff+0x88>
 80101e8:	1b33      	subs	r3, r6, r4
 80101ea:	3b15      	subs	r3, #21
 80101ec:	f023 0303 	bic.w	r3, r3, #3
 80101f0:	3415      	adds	r4, #21
 80101f2:	3304      	adds	r3, #4
 80101f4:	42a6      	cmp	r6, r4
 80101f6:	bf38      	it	cc
 80101f8:	2304      	movcc	r3, #4
 80101fa:	441d      	add	r5, r3
 80101fc:	445b      	add	r3, fp
 80101fe:	461e      	mov	r6, r3
 8010200:	462c      	mov	r4, r5
 8010202:	4544      	cmp	r4, r8
 8010204:	d30e      	bcc.n	8010224 <__mdiff+0xf8>
 8010206:	f108 0103 	add.w	r1, r8, #3
 801020a:	1b49      	subs	r1, r1, r5
 801020c:	f021 0103 	bic.w	r1, r1, #3
 8010210:	3d03      	subs	r5, #3
 8010212:	45a8      	cmp	r8, r5
 8010214:	bf38      	it	cc
 8010216:	2100      	movcc	r1, #0
 8010218:	440b      	add	r3, r1
 801021a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801021e:	b191      	cbz	r1, 8010246 <__mdiff+0x11a>
 8010220:	6117      	str	r7, [r2, #16]
 8010222:	e79d      	b.n	8010160 <__mdiff+0x34>
 8010224:	f854 1b04 	ldr.w	r1, [r4], #4
 8010228:	46e6      	mov	lr, ip
 801022a:	0c08      	lsrs	r0, r1, #16
 801022c:	fa1c fc81 	uxtah	ip, ip, r1
 8010230:	4471      	add	r1, lr
 8010232:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010236:	b289      	uxth	r1, r1
 8010238:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801023c:	f846 1b04 	str.w	r1, [r6], #4
 8010240:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010244:	e7dd      	b.n	8010202 <__mdiff+0xd6>
 8010246:	3f01      	subs	r7, #1
 8010248:	e7e7      	b.n	801021a <__mdiff+0xee>
 801024a:	bf00      	nop
 801024c:	080112ed 	.word	0x080112ed
 8010250:	080112fe 	.word	0x080112fe

08010254 <__d2b>:
 8010254:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010258:	460f      	mov	r7, r1
 801025a:	2101      	movs	r1, #1
 801025c:	ec59 8b10 	vmov	r8, r9, d0
 8010260:	4616      	mov	r6, r2
 8010262:	f7ff fccd 	bl	800fc00 <_Balloc>
 8010266:	4604      	mov	r4, r0
 8010268:	b930      	cbnz	r0, 8010278 <__d2b+0x24>
 801026a:	4602      	mov	r2, r0
 801026c:	4b23      	ldr	r3, [pc, #140]	@ (80102fc <__d2b+0xa8>)
 801026e:	4824      	ldr	r0, [pc, #144]	@ (8010300 <__d2b+0xac>)
 8010270:	f240 310f 	movw	r1, #783	@ 0x30f
 8010274:	f000 fa74 	bl	8010760 <__assert_func>
 8010278:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801027c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010280:	b10d      	cbz	r5, 8010286 <__d2b+0x32>
 8010282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010286:	9301      	str	r3, [sp, #4]
 8010288:	f1b8 0300 	subs.w	r3, r8, #0
 801028c:	d023      	beq.n	80102d6 <__d2b+0x82>
 801028e:	4668      	mov	r0, sp
 8010290:	9300      	str	r3, [sp, #0]
 8010292:	f7ff fd7c 	bl	800fd8e <__lo0bits>
 8010296:	e9dd 1200 	ldrd	r1, r2, [sp]
 801029a:	b1d0      	cbz	r0, 80102d2 <__d2b+0x7e>
 801029c:	f1c0 0320 	rsb	r3, r0, #32
 80102a0:	fa02 f303 	lsl.w	r3, r2, r3
 80102a4:	430b      	orrs	r3, r1
 80102a6:	40c2      	lsrs	r2, r0
 80102a8:	6163      	str	r3, [r4, #20]
 80102aa:	9201      	str	r2, [sp, #4]
 80102ac:	9b01      	ldr	r3, [sp, #4]
 80102ae:	61a3      	str	r3, [r4, #24]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	bf0c      	ite	eq
 80102b4:	2201      	moveq	r2, #1
 80102b6:	2202      	movne	r2, #2
 80102b8:	6122      	str	r2, [r4, #16]
 80102ba:	b1a5      	cbz	r5, 80102e6 <__d2b+0x92>
 80102bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80102c0:	4405      	add	r5, r0
 80102c2:	603d      	str	r5, [r7, #0]
 80102c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80102c8:	6030      	str	r0, [r6, #0]
 80102ca:	4620      	mov	r0, r4
 80102cc:	b003      	add	sp, #12
 80102ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102d2:	6161      	str	r1, [r4, #20]
 80102d4:	e7ea      	b.n	80102ac <__d2b+0x58>
 80102d6:	a801      	add	r0, sp, #4
 80102d8:	f7ff fd59 	bl	800fd8e <__lo0bits>
 80102dc:	9b01      	ldr	r3, [sp, #4]
 80102de:	6163      	str	r3, [r4, #20]
 80102e0:	3020      	adds	r0, #32
 80102e2:	2201      	movs	r2, #1
 80102e4:	e7e8      	b.n	80102b8 <__d2b+0x64>
 80102e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80102ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80102ee:	6038      	str	r0, [r7, #0]
 80102f0:	6918      	ldr	r0, [r3, #16]
 80102f2:	f7ff fd2d 	bl	800fd50 <__hi0bits>
 80102f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80102fa:	e7e5      	b.n	80102c8 <__d2b+0x74>
 80102fc:	080112ed 	.word	0x080112ed
 8010300:	080112fe 	.word	0x080112fe

08010304 <__ssputs_r>:
 8010304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010308:	688e      	ldr	r6, [r1, #8]
 801030a:	461f      	mov	r7, r3
 801030c:	42be      	cmp	r6, r7
 801030e:	680b      	ldr	r3, [r1, #0]
 8010310:	4682      	mov	sl, r0
 8010312:	460c      	mov	r4, r1
 8010314:	4690      	mov	r8, r2
 8010316:	d82d      	bhi.n	8010374 <__ssputs_r+0x70>
 8010318:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801031c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010320:	d026      	beq.n	8010370 <__ssputs_r+0x6c>
 8010322:	6965      	ldr	r5, [r4, #20]
 8010324:	6909      	ldr	r1, [r1, #16]
 8010326:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801032a:	eba3 0901 	sub.w	r9, r3, r1
 801032e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010332:	1c7b      	adds	r3, r7, #1
 8010334:	444b      	add	r3, r9
 8010336:	106d      	asrs	r5, r5, #1
 8010338:	429d      	cmp	r5, r3
 801033a:	bf38      	it	cc
 801033c:	461d      	movcc	r5, r3
 801033e:	0553      	lsls	r3, r2, #21
 8010340:	d527      	bpl.n	8010392 <__ssputs_r+0x8e>
 8010342:	4629      	mov	r1, r5
 8010344:	f7ff fbd0 	bl	800fae8 <_malloc_r>
 8010348:	4606      	mov	r6, r0
 801034a:	b360      	cbz	r0, 80103a6 <__ssputs_r+0xa2>
 801034c:	6921      	ldr	r1, [r4, #16]
 801034e:	464a      	mov	r2, r9
 8010350:	f7fe fcfb 	bl	800ed4a <memcpy>
 8010354:	89a3      	ldrh	r3, [r4, #12]
 8010356:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801035a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801035e:	81a3      	strh	r3, [r4, #12]
 8010360:	6126      	str	r6, [r4, #16]
 8010362:	6165      	str	r5, [r4, #20]
 8010364:	444e      	add	r6, r9
 8010366:	eba5 0509 	sub.w	r5, r5, r9
 801036a:	6026      	str	r6, [r4, #0]
 801036c:	60a5      	str	r5, [r4, #8]
 801036e:	463e      	mov	r6, r7
 8010370:	42be      	cmp	r6, r7
 8010372:	d900      	bls.n	8010376 <__ssputs_r+0x72>
 8010374:	463e      	mov	r6, r7
 8010376:	6820      	ldr	r0, [r4, #0]
 8010378:	4632      	mov	r2, r6
 801037a:	4641      	mov	r1, r8
 801037c:	f000 f9c6 	bl	801070c <memmove>
 8010380:	68a3      	ldr	r3, [r4, #8]
 8010382:	1b9b      	subs	r3, r3, r6
 8010384:	60a3      	str	r3, [r4, #8]
 8010386:	6823      	ldr	r3, [r4, #0]
 8010388:	4433      	add	r3, r6
 801038a:	6023      	str	r3, [r4, #0]
 801038c:	2000      	movs	r0, #0
 801038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010392:	462a      	mov	r2, r5
 8010394:	f000 fa28 	bl	80107e8 <_realloc_r>
 8010398:	4606      	mov	r6, r0
 801039a:	2800      	cmp	r0, #0
 801039c:	d1e0      	bne.n	8010360 <__ssputs_r+0x5c>
 801039e:	6921      	ldr	r1, [r4, #16]
 80103a0:	4650      	mov	r0, sl
 80103a2:	f7ff fb2d 	bl	800fa00 <_free_r>
 80103a6:	230c      	movs	r3, #12
 80103a8:	f8ca 3000 	str.w	r3, [sl]
 80103ac:	89a3      	ldrh	r3, [r4, #12]
 80103ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103b2:	81a3      	strh	r3, [r4, #12]
 80103b4:	f04f 30ff 	mov.w	r0, #4294967295
 80103b8:	e7e9      	b.n	801038e <__ssputs_r+0x8a>
	...

080103bc <_svfiprintf_r>:
 80103bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103c0:	4698      	mov	r8, r3
 80103c2:	898b      	ldrh	r3, [r1, #12]
 80103c4:	061b      	lsls	r3, r3, #24
 80103c6:	b09d      	sub	sp, #116	@ 0x74
 80103c8:	4607      	mov	r7, r0
 80103ca:	460d      	mov	r5, r1
 80103cc:	4614      	mov	r4, r2
 80103ce:	d510      	bpl.n	80103f2 <_svfiprintf_r+0x36>
 80103d0:	690b      	ldr	r3, [r1, #16]
 80103d2:	b973      	cbnz	r3, 80103f2 <_svfiprintf_r+0x36>
 80103d4:	2140      	movs	r1, #64	@ 0x40
 80103d6:	f7ff fb87 	bl	800fae8 <_malloc_r>
 80103da:	6028      	str	r0, [r5, #0]
 80103dc:	6128      	str	r0, [r5, #16]
 80103de:	b930      	cbnz	r0, 80103ee <_svfiprintf_r+0x32>
 80103e0:	230c      	movs	r3, #12
 80103e2:	603b      	str	r3, [r7, #0]
 80103e4:	f04f 30ff 	mov.w	r0, #4294967295
 80103e8:	b01d      	add	sp, #116	@ 0x74
 80103ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ee:	2340      	movs	r3, #64	@ 0x40
 80103f0:	616b      	str	r3, [r5, #20]
 80103f2:	2300      	movs	r3, #0
 80103f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80103f6:	2320      	movs	r3, #32
 80103f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80103fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8010400:	2330      	movs	r3, #48	@ 0x30
 8010402:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80105a0 <_svfiprintf_r+0x1e4>
 8010406:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801040a:	f04f 0901 	mov.w	r9, #1
 801040e:	4623      	mov	r3, r4
 8010410:	469a      	mov	sl, r3
 8010412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010416:	b10a      	cbz	r2, 801041c <_svfiprintf_r+0x60>
 8010418:	2a25      	cmp	r2, #37	@ 0x25
 801041a:	d1f9      	bne.n	8010410 <_svfiprintf_r+0x54>
 801041c:	ebba 0b04 	subs.w	fp, sl, r4
 8010420:	d00b      	beq.n	801043a <_svfiprintf_r+0x7e>
 8010422:	465b      	mov	r3, fp
 8010424:	4622      	mov	r2, r4
 8010426:	4629      	mov	r1, r5
 8010428:	4638      	mov	r0, r7
 801042a:	f7ff ff6b 	bl	8010304 <__ssputs_r>
 801042e:	3001      	adds	r0, #1
 8010430:	f000 80a7 	beq.w	8010582 <_svfiprintf_r+0x1c6>
 8010434:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010436:	445a      	add	r2, fp
 8010438:	9209      	str	r2, [sp, #36]	@ 0x24
 801043a:	f89a 3000 	ldrb.w	r3, [sl]
 801043e:	2b00      	cmp	r3, #0
 8010440:	f000 809f 	beq.w	8010582 <_svfiprintf_r+0x1c6>
 8010444:	2300      	movs	r3, #0
 8010446:	f04f 32ff 	mov.w	r2, #4294967295
 801044a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801044e:	f10a 0a01 	add.w	sl, sl, #1
 8010452:	9304      	str	r3, [sp, #16]
 8010454:	9307      	str	r3, [sp, #28]
 8010456:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801045a:	931a      	str	r3, [sp, #104]	@ 0x68
 801045c:	4654      	mov	r4, sl
 801045e:	2205      	movs	r2, #5
 8010460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010464:	484e      	ldr	r0, [pc, #312]	@ (80105a0 <_svfiprintf_r+0x1e4>)
 8010466:	f7ef feb3 	bl	80001d0 <memchr>
 801046a:	9a04      	ldr	r2, [sp, #16]
 801046c:	b9d8      	cbnz	r0, 80104a6 <_svfiprintf_r+0xea>
 801046e:	06d0      	lsls	r0, r2, #27
 8010470:	bf44      	itt	mi
 8010472:	2320      	movmi	r3, #32
 8010474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010478:	0711      	lsls	r1, r2, #28
 801047a:	bf44      	itt	mi
 801047c:	232b      	movmi	r3, #43	@ 0x2b
 801047e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010482:	f89a 3000 	ldrb.w	r3, [sl]
 8010486:	2b2a      	cmp	r3, #42	@ 0x2a
 8010488:	d015      	beq.n	80104b6 <_svfiprintf_r+0xfa>
 801048a:	9a07      	ldr	r2, [sp, #28]
 801048c:	4654      	mov	r4, sl
 801048e:	2000      	movs	r0, #0
 8010490:	f04f 0c0a 	mov.w	ip, #10
 8010494:	4621      	mov	r1, r4
 8010496:	f811 3b01 	ldrb.w	r3, [r1], #1
 801049a:	3b30      	subs	r3, #48	@ 0x30
 801049c:	2b09      	cmp	r3, #9
 801049e:	d94b      	bls.n	8010538 <_svfiprintf_r+0x17c>
 80104a0:	b1b0      	cbz	r0, 80104d0 <_svfiprintf_r+0x114>
 80104a2:	9207      	str	r2, [sp, #28]
 80104a4:	e014      	b.n	80104d0 <_svfiprintf_r+0x114>
 80104a6:	eba0 0308 	sub.w	r3, r0, r8
 80104aa:	fa09 f303 	lsl.w	r3, r9, r3
 80104ae:	4313      	orrs	r3, r2
 80104b0:	9304      	str	r3, [sp, #16]
 80104b2:	46a2      	mov	sl, r4
 80104b4:	e7d2      	b.n	801045c <_svfiprintf_r+0xa0>
 80104b6:	9b03      	ldr	r3, [sp, #12]
 80104b8:	1d19      	adds	r1, r3, #4
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	9103      	str	r1, [sp, #12]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	bfbb      	ittet	lt
 80104c2:	425b      	neglt	r3, r3
 80104c4:	f042 0202 	orrlt.w	r2, r2, #2
 80104c8:	9307      	strge	r3, [sp, #28]
 80104ca:	9307      	strlt	r3, [sp, #28]
 80104cc:	bfb8      	it	lt
 80104ce:	9204      	strlt	r2, [sp, #16]
 80104d0:	7823      	ldrb	r3, [r4, #0]
 80104d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80104d4:	d10a      	bne.n	80104ec <_svfiprintf_r+0x130>
 80104d6:	7863      	ldrb	r3, [r4, #1]
 80104d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80104da:	d132      	bne.n	8010542 <_svfiprintf_r+0x186>
 80104dc:	9b03      	ldr	r3, [sp, #12]
 80104de:	1d1a      	adds	r2, r3, #4
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	9203      	str	r2, [sp, #12]
 80104e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80104e8:	3402      	adds	r4, #2
 80104ea:	9305      	str	r3, [sp, #20]
 80104ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80105b0 <_svfiprintf_r+0x1f4>
 80104f0:	7821      	ldrb	r1, [r4, #0]
 80104f2:	2203      	movs	r2, #3
 80104f4:	4650      	mov	r0, sl
 80104f6:	f7ef fe6b 	bl	80001d0 <memchr>
 80104fa:	b138      	cbz	r0, 801050c <_svfiprintf_r+0x150>
 80104fc:	9b04      	ldr	r3, [sp, #16]
 80104fe:	eba0 000a 	sub.w	r0, r0, sl
 8010502:	2240      	movs	r2, #64	@ 0x40
 8010504:	4082      	lsls	r2, r0
 8010506:	4313      	orrs	r3, r2
 8010508:	3401      	adds	r4, #1
 801050a:	9304      	str	r3, [sp, #16]
 801050c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010510:	4824      	ldr	r0, [pc, #144]	@ (80105a4 <_svfiprintf_r+0x1e8>)
 8010512:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010516:	2206      	movs	r2, #6
 8010518:	f7ef fe5a 	bl	80001d0 <memchr>
 801051c:	2800      	cmp	r0, #0
 801051e:	d036      	beq.n	801058e <_svfiprintf_r+0x1d2>
 8010520:	4b21      	ldr	r3, [pc, #132]	@ (80105a8 <_svfiprintf_r+0x1ec>)
 8010522:	bb1b      	cbnz	r3, 801056c <_svfiprintf_r+0x1b0>
 8010524:	9b03      	ldr	r3, [sp, #12]
 8010526:	3307      	adds	r3, #7
 8010528:	f023 0307 	bic.w	r3, r3, #7
 801052c:	3308      	adds	r3, #8
 801052e:	9303      	str	r3, [sp, #12]
 8010530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010532:	4433      	add	r3, r6
 8010534:	9309      	str	r3, [sp, #36]	@ 0x24
 8010536:	e76a      	b.n	801040e <_svfiprintf_r+0x52>
 8010538:	fb0c 3202 	mla	r2, ip, r2, r3
 801053c:	460c      	mov	r4, r1
 801053e:	2001      	movs	r0, #1
 8010540:	e7a8      	b.n	8010494 <_svfiprintf_r+0xd8>
 8010542:	2300      	movs	r3, #0
 8010544:	3401      	adds	r4, #1
 8010546:	9305      	str	r3, [sp, #20]
 8010548:	4619      	mov	r1, r3
 801054a:	f04f 0c0a 	mov.w	ip, #10
 801054e:	4620      	mov	r0, r4
 8010550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010554:	3a30      	subs	r2, #48	@ 0x30
 8010556:	2a09      	cmp	r2, #9
 8010558:	d903      	bls.n	8010562 <_svfiprintf_r+0x1a6>
 801055a:	2b00      	cmp	r3, #0
 801055c:	d0c6      	beq.n	80104ec <_svfiprintf_r+0x130>
 801055e:	9105      	str	r1, [sp, #20]
 8010560:	e7c4      	b.n	80104ec <_svfiprintf_r+0x130>
 8010562:	fb0c 2101 	mla	r1, ip, r1, r2
 8010566:	4604      	mov	r4, r0
 8010568:	2301      	movs	r3, #1
 801056a:	e7f0      	b.n	801054e <_svfiprintf_r+0x192>
 801056c:	ab03      	add	r3, sp, #12
 801056e:	9300      	str	r3, [sp, #0]
 8010570:	462a      	mov	r2, r5
 8010572:	4b0e      	ldr	r3, [pc, #56]	@ (80105ac <_svfiprintf_r+0x1f0>)
 8010574:	a904      	add	r1, sp, #16
 8010576:	4638      	mov	r0, r7
 8010578:	f7fd fe56 	bl	800e228 <_printf_float>
 801057c:	1c42      	adds	r2, r0, #1
 801057e:	4606      	mov	r6, r0
 8010580:	d1d6      	bne.n	8010530 <_svfiprintf_r+0x174>
 8010582:	89ab      	ldrh	r3, [r5, #12]
 8010584:	065b      	lsls	r3, r3, #25
 8010586:	f53f af2d 	bmi.w	80103e4 <_svfiprintf_r+0x28>
 801058a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801058c:	e72c      	b.n	80103e8 <_svfiprintf_r+0x2c>
 801058e:	ab03      	add	r3, sp, #12
 8010590:	9300      	str	r3, [sp, #0]
 8010592:	462a      	mov	r2, r5
 8010594:	4b05      	ldr	r3, [pc, #20]	@ (80105ac <_svfiprintf_r+0x1f0>)
 8010596:	a904      	add	r1, sp, #16
 8010598:	4638      	mov	r0, r7
 801059a:	f7fe f8dd 	bl	800e758 <_printf_i>
 801059e:	e7ed      	b.n	801057c <_svfiprintf_r+0x1c0>
 80105a0:	08011458 	.word	0x08011458
 80105a4:	08011462 	.word	0x08011462
 80105a8:	0800e229 	.word	0x0800e229
 80105ac:	08010305 	.word	0x08010305
 80105b0:	0801145e 	.word	0x0801145e

080105b4 <__sflush_r>:
 80105b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80105b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105bc:	0716      	lsls	r6, r2, #28
 80105be:	4605      	mov	r5, r0
 80105c0:	460c      	mov	r4, r1
 80105c2:	d454      	bmi.n	801066e <__sflush_r+0xba>
 80105c4:	684b      	ldr	r3, [r1, #4]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	dc02      	bgt.n	80105d0 <__sflush_r+0x1c>
 80105ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	dd48      	ble.n	8010662 <__sflush_r+0xae>
 80105d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105d2:	2e00      	cmp	r6, #0
 80105d4:	d045      	beq.n	8010662 <__sflush_r+0xae>
 80105d6:	2300      	movs	r3, #0
 80105d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80105dc:	682f      	ldr	r7, [r5, #0]
 80105de:	6a21      	ldr	r1, [r4, #32]
 80105e0:	602b      	str	r3, [r5, #0]
 80105e2:	d030      	beq.n	8010646 <__sflush_r+0x92>
 80105e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80105e6:	89a3      	ldrh	r3, [r4, #12]
 80105e8:	0759      	lsls	r1, r3, #29
 80105ea:	d505      	bpl.n	80105f8 <__sflush_r+0x44>
 80105ec:	6863      	ldr	r3, [r4, #4]
 80105ee:	1ad2      	subs	r2, r2, r3
 80105f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80105f2:	b10b      	cbz	r3, 80105f8 <__sflush_r+0x44>
 80105f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80105f6:	1ad2      	subs	r2, r2, r3
 80105f8:	2300      	movs	r3, #0
 80105fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105fc:	6a21      	ldr	r1, [r4, #32]
 80105fe:	4628      	mov	r0, r5
 8010600:	47b0      	blx	r6
 8010602:	1c43      	adds	r3, r0, #1
 8010604:	89a3      	ldrh	r3, [r4, #12]
 8010606:	d106      	bne.n	8010616 <__sflush_r+0x62>
 8010608:	6829      	ldr	r1, [r5, #0]
 801060a:	291d      	cmp	r1, #29
 801060c:	d82b      	bhi.n	8010666 <__sflush_r+0xb2>
 801060e:	4a2a      	ldr	r2, [pc, #168]	@ (80106b8 <__sflush_r+0x104>)
 8010610:	410a      	asrs	r2, r1
 8010612:	07d6      	lsls	r6, r2, #31
 8010614:	d427      	bmi.n	8010666 <__sflush_r+0xb2>
 8010616:	2200      	movs	r2, #0
 8010618:	6062      	str	r2, [r4, #4]
 801061a:	04d9      	lsls	r1, r3, #19
 801061c:	6922      	ldr	r2, [r4, #16]
 801061e:	6022      	str	r2, [r4, #0]
 8010620:	d504      	bpl.n	801062c <__sflush_r+0x78>
 8010622:	1c42      	adds	r2, r0, #1
 8010624:	d101      	bne.n	801062a <__sflush_r+0x76>
 8010626:	682b      	ldr	r3, [r5, #0]
 8010628:	b903      	cbnz	r3, 801062c <__sflush_r+0x78>
 801062a:	6560      	str	r0, [r4, #84]	@ 0x54
 801062c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801062e:	602f      	str	r7, [r5, #0]
 8010630:	b1b9      	cbz	r1, 8010662 <__sflush_r+0xae>
 8010632:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010636:	4299      	cmp	r1, r3
 8010638:	d002      	beq.n	8010640 <__sflush_r+0x8c>
 801063a:	4628      	mov	r0, r5
 801063c:	f7ff f9e0 	bl	800fa00 <_free_r>
 8010640:	2300      	movs	r3, #0
 8010642:	6363      	str	r3, [r4, #52]	@ 0x34
 8010644:	e00d      	b.n	8010662 <__sflush_r+0xae>
 8010646:	2301      	movs	r3, #1
 8010648:	4628      	mov	r0, r5
 801064a:	47b0      	blx	r6
 801064c:	4602      	mov	r2, r0
 801064e:	1c50      	adds	r0, r2, #1
 8010650:	d1c9      	bne.n	80105e6 <__sflush_r+0x32>
 8010652:	682b      	ldr	r3, [r5, #0]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d0c6      	beq.n	80105e6 <__sflush_r+0x32>
 8010658:	2b1d      	cmp	r3, #29
 801065a:	d001      	beq.n	8010660 <__sflush_r+0xac>
 801065c:	2b16      	cmp	r3, #22
 801065e:	d11e      	bne.n	801069e <__sflush_r+0xea>
 8010660:	602f      	str	r7, [r5, #0]
 8010662:	2000      	movs	r0, #0
 8010664:	e022      	b.n	80106ac <__sflush_r+0xf8>
 8010666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801066a:	b21b      	sxth	r3, r3
 801066c:	e01b      	b.n	80106a6 <__sflush_r+0xf2>
 801066e:	690f      	ldr	r7, [r1, #16]
 8010670:	2f00      	cmp	r7, #0
 8010672:	d0f6      	beq.n	8010662 <__sflush_r+0xae>
 8010674:	0793      	lsls	r3, r2, #30
 8010676:	680e      	ldr	r6, [r1, #0]
 8010678:	bf08      	it	eq
 801067a:	694b      	ldreq	r3, [r1, #20]
 801067c:	600f      	str	r7, [r1, #0]
 801067e:	bf18      	it	ne
 8010680:	2300      	movne	r3, #0
 8010682:	eba6 0807 	sub.w	r8, r6, r7
 8010686:	608b      	str	r3, [r1, #8]
 8010688:	f1b8 0f00 	cmp.w	r8, #0
 801068c:	dde9      	ble.n	8010662 <__sflush_r+0xae>
 801068e:	6a21      	ldr	r1, [r4, #32]
 8010690:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010692:	4643      	mov	r3, r8
 8010694:	463a      	mov	r2, r7
 8010696:	4628      	mov	r0, r5
 8010698:	47b0      	blx	r6
 801069a:	2800      	cmp	r0, #0
 801069c:	dc08      	bgt.n	80106b0 <__sflush_r+0xfc>
 801069e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106a6:	81a3      	strh	r3, [r4, #12]
 80106a8:	f04f 30ff 	mov.w	r0, #4294967295
 80106ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106b0:	4407      	add	r7, r0
 80106b2:	eba8 0800 	sub.w	r8, r8, r0
 80106b6:	e7e7      	b.n	8010688 <__sflush_r+0xd4>
 80106b8:	dfbffffe 	.word	0xdfbffffe

080106bc <_fflush_r>:
 80106bc:	b538      	push	{r3, r4, r5, lr}
 80106be:	690b      	ldr	r3, [r1, #16]
 80106c0:	4605      	mov	r5, r0
 80106c2:	460c      	mov	r4, r1
 80106c4:	b913      	cbnz	r3, 80106cc <_fflush_r+0x10>
 80106c6:	2500      	movs	r5, #0
 80106c8:	4628      	mov	r0, r5
 80106ca:	bd38      	pop	{r3, r4, r5, pc}
 80106cc:	b118      	cbz	r0, 80106d6 <_fflush_r+0x1a>
 80106ce:	6a03      	ldr	r3, [r0, #32]
 80106d0:	b90b      	cbnz	r3, 80106d6 <_fflush_r+0x1a>
 80106d2:	f7fe f9ed 	bl	800eab0 <__sinit>
 80106d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d0f3      	beq.n	80106c6 <_fflush_r+0xa>
 80106de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80106e0:	07d0      	lsls	r0, r2, #31
 80106e2:	d404      	bmi.n	80106ee <_fflush_r+0x32>
 80106e4:	0599      	lsls	r1, r3, #22
 80106e6:	d402      	bmi.n	80106ee <_fflush_r+0x32>
 80106e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106ea:	f7fe fb2c 	bl	800ed46 <__retarget_lock_acquire_recursive>
 80106ee:	4628      	mov	r0, r5
 80106f0:	4621      	mov	r1, r4
 80106f2:	f7ff ff5f 	bl	80105b4 <__sflush_r>
 80106f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80106f8:	07da      	lsls	r2, r3, #31
 80106fa:	4605      	mov	r5, r0
 80106fc:	d4e4      	bmi.n	80106c8 <_fflush_r+0xc>
 80106fe:	89a3      	ldrh	r3, [r4, #12]
 8010700:	059b      	lsls	r3, r3, #22
 8010702:	d4e1      	bmi.n	80106c8 <_fflush_r+0xc>
 8010704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010706:	f7fe fb1f 	bl	800ed48 <__retarget_lock_release_recursive>
 801070a:	e7dd      	b.n	80106c8 <_fflush_r+0xc>

0801070c <memmove>:
 801070c:	4288      	cmp	r0, r1
 801070e:	b510      	push	{r4, lr}
 8010710:	eb01 0402 	add.w	r4, r1, r2
 8010714:	d902      	bls.n	801071c <memmove+0x10>
 8010716:	4284      	cmp	r4, r0
 8010718:	4623      	mov	r3, r4
 801071a:	d807      	bhi.n	801072c <memmove+0x20>
 801071c:	1e43      	subs	r3, r0, #1
 801071e:	42a1      	cmp	r1, r4
 8010720:	d008      	beq.n	8010734 <memmove+0x28>
 8010722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010726:	f803 2f01 	strb.w	r2, [r3, #1]!
 801072a:	e7f8      	b.n	801071e <memmove+0x12>
 801072c:	4402      	add	r2, r0
 801072e:	4601      	mov	r1, r0
 8010730:	428a      	cmp	r2, r1
 8010732:	d100      	bne.n	8010736 <memmove+0x2a>
 8010734:	bd10      	pop	{r4, pc}
 8010736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801073a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801073e:	e7f7      	b.n	8010730 <memmove+0x24>

08010740 <_sbrk_r>:
 8010740:	b538      	push	{r3, r4, r5, lr}
 8010742:	4d06      	ldr	r5, [pc, #24]	@ (801075c <_sbrk_r+0x1c>)
 8010744:	2300      	movs	r3, #0
 8010746:	4604      	mov	r4, r0
 8010748:	4608      	mov	r0, r1
 801074a:	602b      	str	r3, [r5, #0]
 801074c:	f7f5 fb46 	bl	8005ddc <_sbrk>
 8010750:	1c43      	adds	r3, r0, #1
 8010752:	d102      	bne.n	801075a <_sbrk_r+0x1a>
 8010754:	682b      	ldr	r3, [r5, #0]
 8010756:	b103      	cbz	r3, 801075a <_sbrk_r+0x1a>
 8010758:	6023      	str	r3, [r4, #0]
 801075a:	bd38      	pop	{r3, r4, r5, pc}
 801075c:	200055e8 	.word	0x200055e8

08010760 <__assert_func>:
 8010760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010762:	4614      	mov	r4, r2
 8010764:	461a      	mov	r2, r3
 8010766:	4b09      	ldr	r3, [pc, #36]	@ (801078c <__assert_func+0x2c>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	4605      	mov	r5, r0
 801076c:	68d8      	ldr	r0, [r3, #12]
 801076e:	b954      	cbnz	r4, 8010786 <__assert_func+0x26>
 8010770:	4b07      	ldr	r3, [pc, #28]	@ (8010790 <__assert_func+0x30>)
 8010772:	461c      	mov	r4, r3
 8010774:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010778:	9100      	str	r1, [sp, #0]
 801077a:	462b      	mov	r3, r5
 801077c:	4905      	ldr	r1, [pc, #20]	@ (8010794 <__assert_func+0x34>)
 801077e:	f000 f86f 	bl	8010860 <fiprintf>
 8010782:	f000 f87f 	bl	8010884 <abort>
 8010786:	4b04      	ldr	r3, [pc, #16]	@ (8010798 <__assert_func+0x38>)
 8010788:	e7f4      	b.n	8010774 <__assert_func+0x14>
 801078a:	bf00      	nop
 801078c:	20000164 	.word	0x20000164
 8010790:	080114ae 	.word	0x080114ae
 8010794:	08011480 	.word	0x08011480
 8010798:	08011473 	.word	0x08011473

0801079c <_calloc_r>:
 801079c:	b570      	push	{r4, r5, r6, lr}
 801079e:	fba1 5402 	umull	r5, r4, r1, r2
 80107a2:	b93c      	cbnz	r4, 80107b4 <_calloc_r+0x18>
 80107a4:	4629      	mov	r1, r5
 80107a6:	f7ff f99f 	bl	800fae8 <_malloc_r>
 80107aa:	4606      	mov	r6, r0
 80107ac:	b928      	cbnz	r0, 80107ba <_calloc_r+0x1e>
 80107ae:	2600      	movs	r6, #0
 80107b0:	4630      	mov	r0, r6
 80107b2:	bd70      	pop	{r4, r5, r6, pc}
 80107b4:	220c      	movs	r2, #12
 80107b6:	6002      	str	r2, [r0, #0]
 80107b8:	e7f9      	b.n	80107ae <_calloc_r+0x12>
 80107ba:	462a      	mov	r2, r5
 80107bc:	4621      	mov	r1, r4
 80107be:	f7fe fa44 	bl	800ec4a <memset>
 80107c2:	e7f5      	b.n	80107b0 <_calloc_r+0x14>

080107c4 <__ascii_mbtowc>:
 80107c4:	b082      	sub	sp, #8
 80107c6:	b901      	cbnz	r1, 80107ca <__ascii_mbtowc+0x6>
 80107c8:	a901      	add	r1, sp, #4
 80107ca:	b142      	cbz	r2, 80107de <__ascii_mbtowc+0x1a>
 80107cc:	b14b      	cbz	r3, 80107e2 <__ascii_mbtowc+0x1e>
 80107ce:	7813      	ldrb	r3, [r2, #0]
 80107d0:	600b      	str	r3, [r1, #0]
 80107d2:	7812      	ldrb	r2, [r2, #0]
 80107d4:	1e10      	subs	r0, r2, #0
 80107d6:	bf18      	it	ne
 80107d8:	2001      	movne	r0, #1
 80107da:	b002      	add	sp, #8
 80107dc:	4770      	bx	lr
 80107de:	4610      	mov	r0, r2
 80107e0:	e7fb      	b.n	80107da <__ascii_mbtowc+0x16>
 80107e2:	f06f 0001 	mvn.w	r0, #1
 80107e6:	e7f8      	b.n	80107da <__ascii_mbtowc+0x16>

080107e8 <_realloc_r>:
 80107e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107ec:	4680      	mov	r8, r0
 80107ee:	4615      	mov	r5, r2
 80107f0:	460c      	mov	r4, r1
 80107f2:	b921      	cbnz	r1, 80107fe <_realloc_r+0x16>
 80107f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107f8:	4611      	mov	r1, r2
 80107fa:	f7ff b975 	b.w	800fae8 <_malloc_r>
 80107fe:	b92a      	cbnz	r2, 801080c <_realloc_r+0x24>
 8010800:	f7ff f8fe 	bl	800fa00 <_free_r>
 8010804:	2400      	movs	r4, #0
 8010806:	4620      	mov	r0, r4
 8010808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801080c:	f000 f841 	bl	8010892 <_malloc_usable_size_r>
 8010810:	4285      	cmp	r5, r0
 8010812:	4606      	mov	r6, r0
 8010814:	d802      	bhi.n	801081c <_realloc_r+0x34>
 8010816:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801081a:	d8f4      	bhi.n	8010806 <_realloc_r+0x1e>
 801081c:	4629      	mov	r1, r5
 801081e:	4640      	mov	r0, r8
 8010820:	f7ff f962 	bl	800fae8 <_malloc_r>
 8010824:	4607      	mov	r7, r0
 8010826:	2800      	cmp	r0, #0
 8010828:	d0ec      	beq.n	8010804 <_realloc_r+0x1c>
 801082a:	42b5      	cmp	r5, r6
 801082c:	462a      	mov	r2, r5
 801082e:	4621      	mov	r1, r4
 8010830:	bf28      	it	cs
 8010832:	4632      	movcs	r2, r6
 8010834:	f7fe fa89 	bl	800ed4a <memcpy>
 8010838:	4621      	mov	r1, r4
 801083a:	4640      	mov	r0, r8
 801083c:	f7ff f8e0 	bl	800fa00 <_free_r>
 8010840:	463c      	mov	r4, r7
 8010842:	e7e0      	b.n	8010806 <_realloc_r+0x1e>

08010844 <__ascii_wctomb>:
 8010844:	4603      	mov	r3, r0
 8010846:	4608      	mov	r0, r1
 8010848:	b141      	cbz	r1, 801085c <__ascii_wctomb+0x18>
 801084a:	2aff      	cmp	r2, #255	@ 0xff
 801084c:	d904      	bls.n	8010858 <__ascii_wctomb+0x14>
 801084e:	228a      	movs	r2, #138	@ 0x8a
 8010850:	601a      	str	r2, [r3, #0]
 8010852:	f04f 30ff 	mov.w	r0, #4294967295
 8010856:	4770      	bx	lr
 8010858:	700a      	strb	r2, [r1, #0]
 801085a:	2001      	movs	r0, #1
 801085c:	4770      	bx	lr
	...

08010860 <fiprintf>:
 8010860:	b40e      	push	{r1, r2, r3}
 8010862:	b503      	push	{r0, r1, lr}
 8010864:	4601      	mov	r1, r0
 8010866:	ab03      	add	r3, sp, #12
 8010868:	4805      	ldr	r0, [pc, #20]	@ (8010880 <fiprintf+0x20>)
 801086a:	f853 2b04 	ldr.w	r2, [r3], #4
 801086e:	6800      	ldr	r0, [r0, #0]
 8010870:	9301      	str	r3, [sp, #4]
 8010872:	f000 f83f 	bl	80108f4 <_vfiprintf_r>
 8010876:	b002      	add	sp, #8
 8010878:	f85d eb04 	ldr.w	lr, [sp], #4
 801087c:	b003      	add	sp, #12
 801087e:	4770      	bx	lr
 8010880:	20000164 	.word	0x20000164

08010884 <abort>:
 8010884:	b508      	push	{r3, lr}
 8010886:	2006      	movs	r0, #6
 8010888:	f000 fa08 	bl	8010c9c <raise>
 801088c:	2001      	movs	r0, #1
 801088e:	f7f5 fa2d 	bl	8005cec <_exit>

08010892 <_malloc_usable_size_r>:
 8010892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010896:	1f18      	subs	r0, r3, #4
 8010898:	2b00      	cmp	r3, #0
 801089a:	bfbc      	itt	lt
 801089c:	580b      	ldrlt	r3, [r1, r0]
 801089e:	18c0      	addlt	r0, r0, r3
 80108a0:	4770      	bx	lr

080108a2 <__sfputc_r>:
 80108a2:	6893      	ldr	r3, [r2, #8]
 80108a4:	3b01      	subs	r3, #1
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	b410      	push	{r4}
 80108aa:	6093      	str	r3, [r2, #8]
 80108ac:	da08      	bge.n	80108c0 <__sfputc_r+0x1e>
 80108ae:	6994      	ldr	r4, [r2, #24]
 80108b0:	42a3      	cmp	r3, r4
 80108b2:	db01      	blt.n	80108b8 <__sfputc_r+0x16>
 80108b4:	290a      	cmp	r1, #10
 80108b6:	d103      	bne.n	80108c0 <__sfputc_r+0x1e>
 80108b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108bc:	f000 b932 	b.w	8010b24 <__swbuf_r>
 80108c0:	6813      	ldr	r3, [r2, #0]
 80108c2:	1c58      	adds	r0, r3, #1
 80108c4:	6010      	str	r0, [r2, #0]
 80108c6:	7019      	strb	r1, [r3, #0]
 80108c8:	4608      	mov	r0, r1
 80108ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108ce:	4770      	bx	lr

080108d0 <__sfputs_r>:
 80108d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108d2:	4606      	mov	r6, r0
 80108d4:	460f      	mov	r7, r1
 80108d6:	4614      	mov	r4, r2
 80108d8:	18d5      	adds	r5, r2, r3
 80108da:	42ac      	cmp	r4, r5
 80108dc:	d101      	bne.n	80108e2 <__sfputs_r+0x12>
 80108de:	2000      	movs	r0, #0
 80108e0:	e007      	b.n	80108f2 <__sfputs_r+0x22>
 80108e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108e6:	463a      	mov	r2, r7
 80108e8:	4630      	mov	r0, r6
 80108ea:	f7ff ffda 	bl	80108a2 <__sfputc_r>
 80108ee:	1c43      	adds	r3, r0, #1
 80108f0:	d1f3      	bne.n	80108da <__sfputs_r+0xa>
 80108f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080108f4 <_vfiprintf_r>:
 80108f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108f8:	460d      	mov	r5, r1
 80108fa:	b09d      	sub	sp, #116	@ 0x74
 80108fc:	4614      	mov	r4, r2
 80108fe:	4698      	mov	r8, r3
 8010900:	4606      	mov	r6, r0
 8010902:	b118      	cbz	r0, 801090c <_vfiprintf_r+0x18>
 8010904:	6a03      	ldr	r3, [r0, #32]
 8010906:	b90b      	cbnz	r3, 801090c <_vfiprintf_r+0x18>
 8010908:	f7fe f8d2 	bl	800eab0 <__sinit>
 801090c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801090e:	07d9      	lsls	r1, r3, #31
 8010910:	d405      	bmi.n	801091e <_vfiprintf_r+0x2a>
 8010912:	89ab      	ldrh	r3, [r5, #12]
 8010914:	059a      	lsls	r2, r3, #22
 8010916:	d402      	bmi.n	801091e <_vfiprintf_r+0x2a>
 8010918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801091a:	f7fe fa14 	bl	800ed46 <__retarget_lock_acquire_recursive>
 801091e:	89ab      	ldrh	r3, [r5, #12]
 8010920:	071b      	lsls	r3, r3, #28
 8010922:	d501      	bpl.n	8010928 <_vfiprintf_r+0x34>
 8010924:	692b      	ldr	r3, [r5, #16]
 8010926:	b99b      	cbnz	r3, 8010950 <_vfiprintf_r+0x5c>
 8010928:	4629      	mov	r1, r5
 801092a:	4630      	mov	r0, r6
 801092c:	f000 f938 	bl	8010ba0 <__swsetup_r>
 8010930:	b170      	cbz	r0, 8010950 <_vfiprintf_r+0x5c>
 8010932:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010934:	07dc      	lsls	r4, r3, #31
 8010936:	d504      	bpl.n	8010942 <_vfiprintf_r+0x4e>
 8010938:	f04f 30ff 	mov.w	r0, #4294967295
 801093c:	b01d      	add	sp, #116	@ 0x74
 801093e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010942:	89ab      	ldrh	r3, [r5, #12]
 8010944:	0598      	lsls	r0, r3, #22
 8010946:	d4f7      	bmi.n	8010938 <_vfiprintf_r+0x44>
 8010948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801094a:	f7fe f9fd 	bl	800ed48 <__retarget_lock_release_recursive>
 801094e:	e7f3      	b.n	8010938 <_vfiprintf_r+0x44>
 8010950:	2300      	movs	r3, #0
 8010952:	9309      	str	r3, [sp, #36]	@ 0x24
 8010954:	2320      	movs	r3, #32
 8010956:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801095a:	f8cd 800c 	str.w	r8, [sp, #12]
 801095e:	2330      	movs	r3, #48	@ 0x30
 8010960:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010b10 <_vfiprintf_r+0x21c>
 8010964:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010968:	f04f 0901 	mov.w	r9, #1
 801096c:	4623      	mov	r3, r4
 801096e:	469a      	mov	sl, r3
 8010970:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010974:	b10a      	cbz	r2, 801097a <_vfiprintf_r+0x86>
 8010976:	2a25      	cmp	r2, #37	@ 0x25
 8010978:	d1f9      	bne.n	801096e <_vfiprintf_r+0x7a>
 801097a:	ebba 0b04 	subs.w	fp, sl, r4
 801097e:	d00b      	beq.n	8010998 <_vfiprintf_r+0xa4>
 8010980:	465b      	mov	r3, fp
 8010982:	4622      	mov	r2, r4
 8010984:	4629      	mov	r1, r5
 8010986:	4630      	mov	r0, r6
 8010988:	f7ff ffa2 	bl	80108d0 <__sfputs_r>
 801098c:	3001      	adds	r0, #1
 801098e:	f000 80a7 	beq.w	8010ae0 <_vfiprintf_r+0x1ec>
 8010992:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010994:	445a      	add	r2, fp
 8010996:	9209      	str	r2, [sp, #36]	@ 0x24
 8010998:	f89a 3000 	ldrb.w	r3, [sl]
 801099c:	2b00      	cmp	r3, #0
 801099e:	f000 809f 	beq.w	8010ae0 <_vfiprintf_r+0x1ec>
 80109a2:	2300      	movs	r3, #0
 80109a4:	f04f 32ff 	mov.w	r2, #4294967295
 80109a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109ac:	f10a 0a01 	add.w	sl, sl, #1
 80109b0:	9304      	str	r3, [sp, #16]
 80109b2:	9307      	str	r3, [sp, #28]
 80109b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80109b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80109ba:	4654      	mov	r4, sl
 80109bc:	2205      	movs	r2, #5
 80109be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109c2:	4853      	ldr	r0, [pc, #332]	@ (8010b10 <_vfiprintf_r+0x21c>)
 80109c4:	f7ef fc04 	bl	80001d0 <memchr>
 80109c8:	9a04      	ldr	r2, [sp, #16]
 80109ca:	b9d8      	cbnz	r0, 8010a04 <_vfiprintf_r+0x110>
 80109cc:	06d1      	lsls	r1, r2, #27
 80109ce:	bf44      	itt	mi
 80109d0:	2320      	movmi	r3, #32
 80109d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109d6:	0713      	lsls	r3, r2, #28
 80109d8:	bf44      	itt	mi
 80109da:	232b      	movmi	r3, #43	@ 0x2b
 80109dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109e0:	f89a 3000 	ldrb.w	r3, [sl]
 80109e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80109e6:	d015      	beq.n	8010a14 <_vfiprintf_r+0x120>
 80109e8:	9a07      	ldr	r2, [sp, #28]
 80109ea:	4654      	mov	r4, sl
 80109ec:	2000      	movs	r0, #0
 80109ee:	f04f 0c0a 	mov.w	ip, #10
 80109f2:	4621      	mov	r1, r4
 80109f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109f8:	3b30      	subs	r3, #48	@ 0x30
 80109fa:	2b09      	cmp	r3, #9
 80109fc:	d94b      	bls.n	8010a96 <_vfiprintf_r+0x1a2>
 80109fe:	b1b0      	cbz	r0, 8010a2e <_vfiprintf_r+0x13a>
 8010a00:	9207      	str	r2, [sp, #28]
 8010a02:	e014      	b.n	8010a2e <_vfiprintf_r+0x13a>
 8010a04:	eba0 0308 	sub.w	r3, r0, r8
 8010a08:	fa09 f303 	lsl.w	r3, r9, r3
 8010a0c:	4313      	orrs	r3, r2
 8010a0e:	9304      	str	r3, [sp, #16]
 8010a10:	46a2      	mov	sl, r4
 8010a12:	e7d2      	b.n	80109ba <_vfiprintf_r+0xc6>
 8010a14:	9b03      	ldr	r3, [sp, #12]
 8010a16:	1d19      	adds	r1, r3, #4
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	9103      	str	r1, [sp, #12]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	bfbb      	ittet	lt
 8010a20:	425b      	neglt	r3, r3
 8010a22:	f042 0202 	orrlt.w	r2, r2, #2
 8010a26:	9307      	strge	r3, [sp, #28]
 8010a28:	9307      	strlt	r3, [sp, #28]
 8010a2a:	bfb8      	it	lt
 8010a2c:	9204      	strlt	r2, [sp, #16]
 8010a2e:	7823      	ldrb	r3, [r4, #0]
 8010a30:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a32:	d10a      	bne.n	8010a4a <_vfiprintf_r+0x156>
 8010a34:	7863      	ldrb	r3, [r4, #1]
 8010a36:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a38:	d132      	bne.n	8010aa0 <_vfiprintf_r+0x1ac>
 8010a3a:	9b03      	ldr	r3, [sp, #12]
 8010a3c:	1d1a      	adds	r2, r3, #4
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	9203      	str	r2, [sp, #12]
 8010a42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010a46:	3402      	adds	r4, #2
 8010a48:	9305      	str	r3, [sp, #20]
 8010a4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010b20 <_vfiprintf_r+0x22c>
 8010a4e:	7821      	ldrb	r1, [r4, #0]
 8010a50:	2203      	movs	r2, #3
 8010a52:	4650      	mov	r0, sl
 8010a54:	f7ef fbbc 	bl	80001d0 <memchr>
 8010a58:	b138      	cbz	r0, 8010a6a <_vfiprintf_r+0x176>
 8010a5a:	9b04      	ldr	r3, [sp, #16]
 8010a5c:	eba0 000a 	sub.w	r0, r0, sl
 8010a60:	2240      	movs	r2, #64	@ 0x40
 8010a62:	4082      	lsls	r2, r0
 8010a64:	4313      	orrs	r3, r2
 8010a66:	3401      	adds	r4, #1
 8010a68:	9304      	str	r3, [sp, #16]
 8010a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a6e:	4829      	ldr	r0, [pc, #164]	@ (8010b14 <_vfiprintf_r+0x220>)
 8010a70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010a74:	2206      	movs	r2, #6
 8010a76:	f7ef fbab 	bl	80001d0 <memchr>
 8010a7a:	2800      	cmp	r0, #0
 8010a7c:	d03f      	beq.n	8010afe <_vfiprintf_r+0x20a>
 8010a7e:	4b26      	ldr	r3, [pc, #152]	@ (8010b18 <_vfiprintf_r+0x224>)
 8010a80:	bb1b      	cbnz	r3, 8010aca <_vfiprintf_r+0x1d6>
 8010a82:	9b03      	ldr	r3, [sp, #12]
 8010a84:	3307      	adds	r3, #7
 8010a86:	f023 0307 	bic.w	r3, r3, #7
 8010a8a:	3308      	adds	r3, #8
 8010a8c:	9303      	str	r3, [sp, #12]
 8010a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a90:	443b      	add	r3, r7
 8010a92:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a94:	e76a      	b.n	801096c <_vfiprintf_r+0x78>
 8010a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a9a:	460c      	mov	r4, r1
 8010a9c:	2001      	movs	r0, #1
 8010a9e:	e7a8      	b.n	80109f2 <_vfiprintf_r+0xfe>
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	3401      	adds	r4, #1
 8010aa4:	9305      	str	r3, [sp, #20]
 8010aa6:	4619      	mov	r1, r3
 8010aa8:	f04f 0c0a 	mov.w	ip, #10
 8010aac:	4620      	mov	r0, r4
 8010aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ab2:	3a30      	subs	r2, #48	@ 0x30
 8010ab4:	2a09      	cmp	r2, #9
 8010ab6:	d903      	bls.n	8010ac0 <_vfiprintf_r+0x1cc>
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d0c6      	beq.n	8010a4a <_vfiprintf_r+0x156>
 8010abc:	9105      	str	r1, [sp, #20]
 8010abe:	e7c4      	b.n	8010a4a <_vfiprintf_r+0x156>
 8010ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ac4:	4604      	mov	r4, r0
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	e7f0      	b.n	8010aac <_vfiprintf_r+0x1b8>
 8010aca:	ab03      	add	r3, sp, #12
 8010acc:	9300      	str	r3, [sp, #0]
 8010ace:	462a      	mov	r2, r5
 8010ad0:	4b12      	ldr	r3, [pc, #72]	@ (8010b1c <_vfiprintf_r+0x228>)
 8010ad2:	a904      	add	r1, sp, #16
 8010ad4:	4630      	mov	r0, r6
 8010ad6:	f7fd fba7 	bl	800e228 <_printf_float>
 8010ada:	4607      	mov	r7, r0
 8010adc:	1c78      	adds	r0, r7, #1
 8010ade:	d1d6      	bne.n	8010a8e <_vfiprintf_r+0x19a>
 8010ae0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ae2:	07d9      	lsls	r1, r3, #31
 8010ae4:	d405      	bmi.n	8010af2 <_vfiprintf_r+0x1fe>
 8010ae6:	89ab      	ldrh	r3, [r5, #12]
 8010ae8:	059a      	lsls	r2, r3, #22
 8010aea:	d402      	bmi.n	8010af2 <_vfiprintf_r+0x1fe>
 8010aec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010aee:	f7fe f92b 	bl	800ed48 <__retarget_lock_release_recursive>
 8010af2:	89ab      	ldrh	r3, [r5, #12]
 8010af4:	065b      	lsls	r3, r3, #25
 8010af6:	f53f af1f 	bmi.w	8010938 <_vfiprintf_r+0x44>
 8010afa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010afc:	e71e      	b.n	801093c <_vfiprintf_r+0x48>
 8010afe:	ab03      	add	r3, sp, #12
 8010b00:	9300      	str	r3, [sp, #0]
 8010b02:	462a      	mov	r2, r5
 8010b04:	4b05      	ldr	r3, [pc, #20]	@ (8010b1c <_vfiprintf_r+0x228>)
 8010b06:	a904      	add	r1, sp, #16
 8010b08:	4630      	mov	r0, r6
 8010b0a:	f7fd fe25 	bl	800e758 <_printf_i>
 8010b0e:	e7e4      	b.n	8010ada <_vfiprintf_r+0x1e6>
 8010b10:	08011458 	.word	0x08011458
 8010b14:	08011462 	.word	0x08011462
 8010b18:	0800e229 	.word	0x0800e229
 8010b1c:	080108d1 	.word	0x080108d1
 8010b20:	0801145e 	.word	0x0801145e

08010b24 <__swbuf_r>:
 8010b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b26:	460e      	mov	r6, r1
 8010b28:	4614      	mov	r4, r2
 8010b2a:	4605      	mov	r5, r0
 8010b2c:	b118      	cbz	r0, 8010b36 <__swbuf_r+0x12>
 8010b2e:	6a03      	ldr	r3, [r0, #32]
 8010b30:	b90b      	cbnz	r3, 8010b36 <__swbuf_r+0x12>
 8010b32:	f7fd ffbd 	bl	800eab0 <__sinit>
 8010b36:	69a3      	ldr	r3, [r4, #24]
 8010b38:	60a3      	str	r3, [r4, #8]
 8010b3a:	89a3      	ldrh	r3, [r4, #12]
 8010b3c:	071a      	lsls	r2, r3, #28
 8010b3e:	d501      	bpl.n	8010b44 <__swbuf_r+0x20>
 8010b40:	6923      	ldr	r3, [r4, #16]
 8010b42:	b943      	cbnz	r3, 8010b56 <__swbuf_r+0x32>
 8010b44:	4621      	mov	r1, r4
 8010b46:	4628      	mov	r0, r5
 8010b48:	f000 f82a 	bl	8010ba0 <__swsetup_r>
 8010b4c:	b118      	cbz	r0, 8010b56 <__swbuf_r+0x32>
 8010b4e:	f04f 37ff 	mov.w	r7, #4294967295
 8010b52:	4638      	mov	r0, r7
 8010b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b56:	6823      	ldr	r3, [r4, #0]
 8010b58:	6922      	ldr	r2, [r4, #16]
 8010b5a:	1a98      	subs	r0, r3, r2
 8010b5c:	6963      	ldr	r3, [r4, #20]
 8010b5e:	b2f6      	uxtb	r6, r6
 8010b60:	4283      	cmp	r3, r0
 8010b62:	4637      	mov	r7, r6
 8010b64:	dc05      	bgt.n	8010b72 <__swbuf_r+0x4e>
 8010b66:	4621      	mov	r1, r4
 8010b68:	4628      	mov	r0, r5
 8010b6a:	f7ff fda7 	bl	80106bc <_fflush_r>
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	d1ed      	bne.n	8010b4e <__swbuf_r+0x2a>
 8010b72:	68a3      	ldr	r3, [r4, #8]
 8010b74:	3b01      	subs	r3, #1
 8010b76:	60a3      	str	r3, [r4, #8]
 8010b78:	6823      	ldr	r3, [r4, #0]
 8010b7a:	1c5a      	adds	r2, r3, #1
 8010b7c:	6022      	str	r2, [r4, #0]
 8010b7e:	701e      	strb	r6, [r3, #0]
 8010b80:	6962      	ldr	r2, [r4, #20]
 8010b82:	1c43      	adds	r3, r0, #1
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d004      	beq.n	8010b92 <__swbuf_r+0x6e>
 8010b88:	89a3      	ldrh	r3, [r4, #12]
 8010b8a:	07db      	lsls	r3, r3, #31
 8010b8c:	d5e1      	bpl.n	8010b52 <__swbuf_r+0x2e>
 8010b8e:	2e0a      	cmp	r6, #10
 8010b90:	d1df      	bne.n	8010b52 <__swbuf_r+0x2e>
 8010b92:	4621      	mov	r1, r4
 8010b94:	4628      	mov	r0, r5
 8010b96:	f7ff fd91 	bl	80106bc <_fflush_r>
 8010b9a:	2800      	cmp	r0, #0
 8010b9c:	d0d9      	beq.n	8010b52 <__swbuf_r+0x2e>
 8010b9e:	e7d6      	b.n	8010b4e <__swbuf_r+0x2a>

08010ba0 <__swsetup_r>:
 8010ba0:	b538      	push	{r3, r4, r5, lr}
 8010ba2:	4b29      	ldr	r3, [pc, #164]	@ (8010c48 <__swsetup_r+0xa8>)
 8010ba4:	4605      	mov	r5, r0
 8010ba6:	6818      	ldr	r0, [r3, #0]
 8010ba8:	460c      	mov	r4, r1
 8010baa:	b118      	cbz	r0, 8010bb4 <__swsetup_r+0x14>
 8010bac:	6a03      	ldr	r3, [r0, #32]
 8010bae:	b90b      	cbnz	r3, 8010bb4 <__swsetup_r+0x14>
 8010bb0:	f7fd ff7e 	bl	800eab0 <__sinit>
 8010bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bb8:	0719      	lsls	r1, r3, #28
 8010bba:	d422      	bmi.n	8010c02 <__swsetup_r+0x62>
 8010bbc:	06da      	lsls	r2, r3, #27
 8010bbe:	d407      	bmi.n	8010bd0 <__swsetup_r+0x30>
 8010bc0:	2209      	movs	r2, #9
 8010bc2:	602a      	str	r2, [r5, #0]
 8010bc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bc8:	81a3      	strh	r3, [r4, #12]
 8010bca:	f04f 30ff 	mov.w	r0, #4294967295
 8010bce:	e033      	b.n	8010c38 <__swsetup_r+0x98>
 8010bd0:	0758      	lsls	r0, r3, #29
 8010bd2:	d512      	bpl.n	8010bfa <__swsetup_r+0x5a>
 8010bd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010bd6:	b141      	cbz	r1, 8010bea <__swsetup_r+0x4a>
 8010bd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010bdc:	4299      	cmp	r1, r3
 8010bde:	d002      	beq.n	8010be6 <__swsetup_r+0x46>
 8010be0:	4628      	mov	r0, r5
 8010be2:	f7fe ff0d 	bl	800fa00 <_free_r>
 8010be6:	2300      	movs	r3, #0
 8010be8:	6363      	str	r3, [r4, #52]	@ 0x34
 8010bea:	89a3      	ldrh	r3, [r4, #12]
 8010bec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010bf0:	81a3      	strh	r3, [r4, #12]
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	6063      	str	r3, [r4, #4]
 8010bf6:	6923      	ldr	r3, [r4, #16]
 8010bf8:	6023      	str	r3, [r4, #0]
 8010bfa:	89a3      	ldrh	r3, [r4, #12]
 8010bfc:	f043 0308 	orr.w	r3, r3, #8
 8010c00:	81a3      	strh	r3, [r4, #12]
 8010c02:	6923      	ldr	r3, [r4, #16]
 8010c04:	b94b      	cbnz	r3, 8010c1a <__swsetup_r+0x7a>
 8010c06:	89a3      	ldrh	r3, [r4, #12]
 8010c08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010c10:	d003      	beq.n	8010c1a <__swsetup_r+0x7a>
 8010c12:	4621      	mov	r1, r4
 8010c14:	4628      	mov	r0, r5
 8010c16:	f000 f883 	bl	8010d20 <__smakebuf_r>
 8010c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c1e:	f013 0201 	ands.w	r2, r3, #1
 8010c22:	d00a      	beq.n	8010c3a <__swsetup_r+0x9a>
 8010c24:	2200      	movs	r2, #0
 8010c26:	60a2      	str	r2, [r4, #8]
 8010c28:	6962      	ldr	r2, [r4, #20]
 8010c2a:	4252      	negs	r2, r2
 8010c2c:	61a2      	str	r2, [r4, #24]
 8010c2e:	6922      	ldr	r2, [r4, #16]
 8010c30:	b942      	cbnz	r2, 8010c44 <__swsetup_r+0xa4>
 8010c32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010c36:	d1c5      	bne.n	8010bc4 <__swsetup_r+0x24>
 8010c38:	bd38      	pop	{r3, r4, r5, pc}
 8010c3a:	0799      	lsls	r1, r3, #30
 8010c3c:	bf58      	it	pl
 8010c3e:	6962      	ldrpl	r2, [r4, #20]
 8010c40:	60a2      	str	r2, [r4, #8]
 8010c42:	e7f4      	b.n	8010c2e <__swsetup_r+0x8e>
 8010c44:	2000      	movs	r0, #0
 8010c46:	e7f7      	b.n	8010c38 <__swsetup_r+0x98>
 8010c48:	20000164 	.word	0x20000164

08010c4c <_raise_r>:
 8010c4c:	291f      	cmp	r1, #31
 8010c4e:	b538      	push	{r3, r4, r5, lr}
 8010c50:	4605      	mov	r5, r0
 8010c52:	460c      	mov	r4, r1
 8010c54:	d904      	bls.n	8010c60 <_raise_r+0x14>
 8010c56:	2316      	movs	r3, #22
 8010c58:	6003      	str	r3, [r0, #0]
 8010c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c5e:	bd38      	pop	{r3, r4, r5, pc}
 8010c60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010c62:	b112      	cbz	r2, 8010c6a <_raise_r+0x1e>
 8010c64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c68:	b94b      	cbnz	r3, 8010c7e <_raise_r+0x32>
 8010c6a:	4628      	mov	r0, r5
 8010c6c:	f000 f830 	bl	8010cd0 <_getpid_r>
 8010c70:	4622      	mov	r2, r4
 8010c72:	4601      	mov	r1, r0
 8010c74:	4628      	mov	r0, r5
 8010c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c7a:	f000 b817 	b.w	8010cac <_kill_r>
 8010c7e:	2b01      	cmp	r3, #1
 8010c80:	d00a      	beq.n	8010c98 <_raise_r+0x4c>
 8010c82:	1c59      	adds	r1, r3, #1
 8010c84:	d103      	bne.n	8010c8e <_raise_r+0x42>
 8010c86:	2316      	movs	r3, #22
 8010c88:	6003      	str	r3, [r0, #0]
 8010c8a:	2001      	movs	r0, #1
 8010c8c:	e7e7      	b.n	8010c5e <_raise_r+0x12>
 8010c8e:	2100      	movs	r1, #0
 8010c90:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010c94:	4620      	mov	r0, r4
 8010c96:	4798      	blx	r3
 8010c98:	2000      	movs	r0, #0
 8010c9a:	e7e0      	b.n	8010c5e <_raise_r+0x12>

08010c9c <raise>:
 8010c9c:	4b02      	ldr	r3, [pc, #8]	@ (8010ca8 <raise+0xc>)
 8010c9e:	4601      	mov	r1, r0
 8010ca0:	6818      	ldr	r0, [r3, #0]
 8010ca2:	f7ff bfd3 	b.w	8010c4c <_raise_r>
 8010ca6:	bf00      	nop
 8010ca8:	20000164 	.word	0x20000164

08010cac <_kill_r>:
 8010cac:	b538      	push	{r3, r4, r5, lr}
 8010cae:	4d07      	ldr	r5, [pc, #28]	@ (8010ccc <_kill_r+0x20>)
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	4604      	mov	r4, r0
 8010cb4:	4608      	mov	r0, r1
 8010cb6:	4611      	mov	r1, r2
 8010cb8:	602b      	str	r3, [r5, #0]
 8010cba:	f7f5 f807 	bl	8005ccc <_kill>
 8010cbe:	1c43      	adds	r3, r0, #1
 8010cc0:	d102      	bne.n	8010cc8 <_kill_r+0x1c>
 8010cc2:	682b      	ldr	r3, [r5, #0]
 8010cc4:	b103      	cbz	r3, 8010cc8 <_kill_r+0x1c>
 8010cc6:	6023      	str	r3, [r4, #0]
 8010cc8:	bd38      	pop	{r3, r4, r5, pc}
 8010cca:	bf00      	nop
 8010ccc:	200055e8 	.word	0x200055e8

08010cd0 <_getpid_r>:
 8010cd0:	f7f4 bff4 	b.w	8005cbc <_getpid>

08010cd4 <__swhatbuf_r>:
 8010cd4:	b570      	push	{r4, r5, r6, lr}
 8010cd6:	460c      	mov	r4, r1
 8010cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cdc:	2900      	cmp	r1, #0
 8010cde:	b096      	sub	sp, #88	@ 0x58
 8010ce0:	4615      	mov	r5, r2
 8010ce2:	461e      	mov	r6, r3
 8010ce4:	da0d      	bge.n	8010d02 <__swhatbuf_r+0x2e>
 8010ce6:	89a3      	ldrh	r3, [r4, #12]
 8010ce8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010cec:	f04f 0100 	mov.w	r1, #0
 8010cf0:	bf14      	ite	ne
 8010cf2:	2340      	movne	r3, #64	@ 0x40
 8010cf4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010cf8:	2000      	movs	r0, #0
 8010cfa:	6031      	str	r1, [r6, #0]
 8010cfc:	602b      	str	r3, [r5, #0]
 8010cfe:	b016      	add	sp, #88	@ 0x58
 8010d00:	bd70      	pop	{r4, r5, r6, pc}
 8010d02:	466a      	mov	r2, sp
 8010d04:	f000 f848 	bl	8010d98 <_fstat_r>
 8010d08:	2800      	cmp	r0, #0
 8010d0a:	dbec      	blt.n	8010ce6 <__swhatbuf_r+0x12>
 8010d0c:	9901      	ldr	r1, [sp, #4]
 8010d0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010d12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010d16:	4259      	negs	r1, r3
 8010d18:	4159      	adcs	r1, r3
 8010d1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d1e:	e7eb      	b.n	8010cf8 <__swhatbuf_r+0x24>

08010d20 <__smakebuf_r>:
 8010d20:	898b      	ldrh	r3, [r1, #12]
 8010d22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d24:	079d      	lsls	r5, r3, #30
 8010d26:	4606      	mov	r6, r0
 8010d28:	460c      	mov	r4, r1
 8010d2a:	d507      	bpl.n	8010d3c <__smakebuf_r+0x1c>
 8010d2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010d30:	6023      	str	r3, [r4, #0]
 8010d32:	6123      	str	r3, [r4, #16]
 8010d34:	2301      	movs	r3, #1
 8010d36:	6163      	str	r3, [r4, #20]
 8010d38:	b003      	add	sp, #12
 8010d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d3c:	ab01      	add	r3, sp, #4
 8010d3e:	466a      	mov	r2, sp
 8010d40:	f7ff ffc8 	bl	8010cd4 <__swhatbuf_r>
 8010d44:	9f00      	ldr	r7, [sp, #0]
 8010d46:	4605      	mov	r5, r0
 8010d48:	4639      	mov	r1, r7
 8010d4a:	4630      	mov	r0, r6
 8010d4c:	f7fe fecc 	bl	800fae8 <_malloc_r>
 8010d50:	b948      	cbnz	r0, 8010d66 <__smakebuf_r+0x46>
 8010d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d56:	059a      	lsls	r2, r3, #22
 8010d58:	d4ee      	bmi.n	8010d38 <__smakebuf_r+0x18>
 8010d5a:	f023 0303 	bic.w	r3, r3, #3
 8010d5e:	f043 0302 	orr.w	r3, r3, #2
 8010d62:	81a3      	strh	r3, [r4, #12]
 8010d64:	e7e2      	b.n	8010d2c <__smakebuf_r+0xc>
 8010d66:	89a3      	ldrh	r3, [r4, #12]
 8010d68:	6020      	str	r0, [r4, #0]
 8010d6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d6e:	81a3      	strh	r3, [r4, #12]
 8010d70:	9b01      	ldr	r3, [sp, #4]
 8010d72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010d76:	b15b      	cbz	r3, 8010d90 <__smakebuf_r+0x70>
 8010d78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d7c:	4630      	mov	r0, r6
 8010d7e:	f000 f81d 	bl	8010dbc <_isatty_r>
 8010d82:	b128      	cbz	r0, 8010d90 <__smakebuf_r+0x70>
 8010d84:	89a3      	ldrh	r3, [r4, #12]
 8010d86:	f023 0303 	bic.w	r3, r3, #3
 8010d8a:	f043 0301 	orr.w	r3, r3, #1
 8010d8e:	81a3      	strh	r3, [r4, #12]
 8010d90:	89a3      	ldrh	r3, [r4, #12]
 8010d92:	431d      	orrs	r5, r3
 8010d94:	81a5      	strh	r5, [r4, #12]
 8010d96:	e7cf      	b.n	8010d38 <__smakebuf_r+0x18>

08010d98 <_fstat_r>:
 8010d98:	b538      	push	{r3, r4, r5, lr}
 8010d9a:	4d07      	ldr	r5, [pc, #28]	@ (8010db8 <_fstat_r+0x20>)
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	4604      	mov	r4, r0
 8010da0:	4608      	mov	r0, r1
 8010da2:	4611      	mov	r1, r2
 8010da4:	602b      	str	r3, [r5, #0]
 8010da6:	f7f4 fff1 	bl	8005d8c <_fstat>
 8010daa:	1c43      	adds	r3, r0, #1
 8010dac:	d102      	bne.n	8010db4 <_fstat_r+0x1c>
 8010dae:	682b      	ldr	r3, [r5, #0]
 8010db0:	b103      	cbz	r3, 8010db4 <_fstat_r+0x1c>
 8010db2:	6023      	str	r3, [r4, #0]
 8010db4:	bd38      	pop	{r3, r4, r5, pc}
 8010db6:	bf00      	nop
 8010db8:	200055e8 	.word	0x200055e8

08010dbc <_isatty_r>:
 8010dbc:	b538      	push	{r3, r4, r5, lr}
 8010dbe:	4d06      	ldr	r5, [pc, #24]	@ (8010dd8 <_isatty_r+0x1c>)
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	4604      	mov	r4, r0
 8010dc4:	4608      	mov	r0, r1
 8010dc6:	602b      	str	r3, [r5, #0]
 8010dc8:	f7f4 fff0 	bl	8005dac <_isatty>
 8010dcc:	1c43      	adds	r3, r0, #1
 8010dce:	d102      	bne.n	8010dd6 <_isatty_r+0x1a>
 8010dd0:	682b      	ldr	r3, [r5, #0]
 8010dd2:	b103      	cbz	r3, 8010dd6 <_isatty_r+0x1a>
 8010dd4:	6023      	str	r3, [r4, #0]
 8010dd6:	bd38      	pop	{r3, r4, r5, pc}
 8010dd8:	200055e8 	.word	0x200055e8

08010ddc <_init>:
 8010ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dde:	bf00      	nop
 8010de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010de2:	bc08      	pop	{r3}
 8010de4:	469e      	mov	lr, r3
 8010de6:	4770      	bx	lr

08010de8 <_fini>:
 8010de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dea:	bf00      	nop
 8010dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dee:	bc08      	pop	{r3}
 8010df0:	469e      	mov	lr, r3
 8010df2:	4770      	bx	lr
